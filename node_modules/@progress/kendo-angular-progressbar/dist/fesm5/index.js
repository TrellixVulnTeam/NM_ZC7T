/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __extends } from 'tslib';
import { isDevMode, HostBinding, Input, EventEmitter, Output, ViewChild, ElementRef, Component, NgZone, Renderer2, NgModule } from '@angular/core';
import { validatePackage } from '@progress/kendo-licensing';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { hasObservers } from '@progress/kendo-angular-common';
import { CommonModule } from '@angular/common';

/**
 * @hidden
 */
var packageMetadata = {
    name: '@progress/kendo-angular-progressbar',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1646219371,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * @hidden
 */
var MIN_MAX_ERROR_MESSAGE = "The max value should be greater than the min.";
/**
 * @hidden
 */
var LABEL_DECIMALS = 3;
/**
 * @hidden
 */
var MIN_RATIO = 0.0001;

/**
 * @hidden
 */
var reverseChunks = function (orientation, reverse) { return (orientation === 'vertical' && !reverse || orientation === 'horizontal' && reverse); };
/**
 * @hidden
 */
var formatValue = function (value, min, max, label) {
    var defaultFormattedValue = truncateNumber(value);
    if (typeof label !== 'boolean') {
        if (typeof label.format === 'string') {
            switch (label.format) {
                case 'value':
                    return defaultFormattedValue;
                case 'percent':
                    return Math.floor(calculatePercentage(value, min, max)) + "%";
                default:
                    return defaultFormattedValue;
            }
        }
        else if (typeof label.format === 'function') {
            return label.format(value);
        }
        else {
            return defaultFormattedValue;
        }
    }
    return defaultFormattedValue;
};
/**
 * @hidden
 */
var validateRange = function (min, max) {
    if (isDevMode && min > max) {
        throw new Error(MIN_MAX_ERROR_MESSAGE);
    }
};
/**
 * @hidden
 */
var adjustValueToRange = function (min, max, value) { return Math.max(Math.min(value, max), min); };
/**
 * @hidden
 */
var calculatePercentage = function (value, min, max) {
    var onePercent = Math.abs((max - min) / 100);
    return Math.abs((value - min) / onePercent);
};
/**
 * @hidden
 */
var truncateNumber = function (value) {
    var numberParts = value.toString().split('.');
    return numberParts.length === 1 ? "" + numberParts[0] : numberParts[0] + "." + numberParts[1].substr(0, LABEL_DECIMALS);
};
/**
 * @hidden
 */
var calculateRatio = function (min, max, value) { return Math.max((value - min) / (max - min), MIN_RATIO); };
/**
 * @hidden
 */
var extractValueFromChanges = function (changes, type, value) {
    return changes[type] && changes[type].currentValue !== undefined ? changes[type].currentValue : value;
};
/**
 * @hidden
 */
var runAnimation = function (changes, animation, previousValue, displayValue) { return animation && typeof requestAnimationFrame !== 'undefined' && changes.value && previousValue !== displayValue; };
/**
 * @hidden
 */
var stopCurrentAnimation = function (changes) {
    var isAnimationChanged = Boolean(changes.animation);
    var hasAnimation = isAnimationChanged && changes.animation.currentValue;
    return isAnimationChanged && !hasAnimation;
};

/**
 * @hidden
 */
var ProgressBarBase = /** @class */ (function () {
    /**
     * @hidden
     */
    function ProgressBarBase(localization) {
        var _this = this;
        this.localization = localization;
        this.widgetClasses = true;
        this.roleAttribute = 'progressbar';
        /**
         * The maximum value of the ProgressBar.
         * Defaults to `100`.
         */
        this.max = 100;
        /**
         * The minimum value of the ProgressBar.
         * Defaults to `0`.
         */
        this.min = 0;
        /**
         * The value of the ProgressBar.
         * Has to be between `min` and `max`.
         * By default, the value is equal to the `min` value.
         */
        /**
         * The value of the ProgressBar.
         * Has to be between `min` and `max`.
         * Defaults to `0`.
         */
        this.value = 0;
        /**
         * Defines the orientation of the ProgressBar
         * ([see example]({% slug progressbar_orientation %})).
         * Defaults to `horizontal`.
         */
        this.orientation = 'horizontal';
        /**
         * If set to `true`, the ProgressBar will be disabled
         * ([see example]({% slug progressbar_disabled %})).
         * It will still allow you to change its value.
         * Defaults to `false`.
         */
        this.disabled = false;
        /**
         * If set to `true`, the ProgressBar will be reversed
         * ([see example]({% slug progressbar_direction %})).
         * Defaults to `false`.
         */
        this.reverse = false;
        /**
         * Sets the `indeterminate` state of the ProgressBar.
         * Defaults to `false`.
         */
        this.indeterminate = false;
        this.displayValue = 0;
        this.previousValue = 0;
        validatePackage(packageMetadata);
        this.localizationChangeSubscription = localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    Object.defineProperty(ProgressBarBase.prototype, "isHorizontal", {
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "isVertical", {
        get: function () {
            return this.orientation === 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "reverseClass", {
        get: function () {
            return this.reverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "indeterminateClass", {
        get: function () {
            return this.indeterminate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "dirAttribute", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "ariaMinAttribute", {
        get: function () {
            return String(this.min);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "ariaMaxAttribute", {
        get: function () {
            return String(this.max);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "ariaValueAttribute", {
        get: function () {
            return this.indeterminate ? undefined : String(this.displayValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "isCompleted", {
        /**
         * @hidden
         */
        get: function () {
            return this.value === this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "statusWidth", {
        /**
         * @hidden
         */
        get: function () {
            return this.orientation === 'horizontal' ? this._progressRatio * 100 : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "statusHeight", {
        /**
         * @hidden
         */
        get: function () {
            return this.orientation === 'vertical' ? this._progressRatio * 100 : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "statusWrapperWidth", {
        /**
         * @hidden
         */
        get: function () {
            return this.orientation === 'horizontal' ? 100 / this._progressRatio : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "statusWrapperHeight", {
        /**
         * @hidden
         */
        get: function () {
            return this.orientation === 'vertical' ? 100 / this._progressRatio : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarBase.prototype, "_progressRatio", {
        get: function () {
            return calculateRatio(this.min, this.max, this.displayValue);
        },
        enumerable: true,
        configurable: true
    });
    ProgressBarBase.prototype.ngOnChanges = function (changes) {
        var min = extractValueFromChanges(changes, 'min', this.min);
        var max = extractValueFromChanges(changes, 'max', this.max);
        var value = extractValueFromChanges(changes, 'value', this.value);
        if (changes.min || changes.max || changes.value) {
            if (changes.min || changes.max) {
                validateRange(min, max);
            }
            if (changes.value) {
                if (value == null || Number.isNaN(value)) {
                    this.value = min;
                }
                var previousValue = this.displayValue;
                this.displayValue = adjustValueToRange(this.min, this.max, value);
                this.previousValue = previousValue;
            }
            this.min = min;
            this.max = max;
            this.displayValue = adjustValueToRange(this.min, this.max, value);
        }
    };
    ProgressBarBase.prototype.ngOnDestroy = function () {
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    };
    __decorate([
        HostBinding('class.k-widget'),
        HostBinding('class.k-progressbar'),
        __metadata("design:type", Boolean)
    ], ProgressBarBase.prototype, "widgetClasses", void 0);
    __decorate([
        HostBinding('class.k-progressbar-horizontal'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "isHorizontal", null);
    __decorate([
        HostBinding('class.k-progressbar-vertical'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "isVertical", null);
    __decorate([
        HostBinding('class.k-state-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "disabledClass", null);
    __decorate([
        HostBinding('class.k-progressbar-reverse'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "reverseClass", null);
    __decorate([
        HostBinding('class.k-progressbar-indeterminate'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "indeterminateClass", null);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "dirAttribute", null);
    __decorate([
        HostBinding('attr.role'),
        __metadata("design:type", String)
    ], ProgressBarBase.prototype, "roleAttribute", void 0);
    __decorate([
        HostBinding('attr.aria-valuemin'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "ariaMinAttribute", null);
    __decorate([
        HostBinding('attr.aria-valuemax'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "ariaMaxAttribute", null);
    __decorate([
        HostBinding('attr.aria-valuenow'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ProgressBarBase.prototype, "ariaValueAttribute", null);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ProgressBarBase.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ProgressBarBase.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ProgressBarBase.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ProgressBarBase.prototype, "orientation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ProgressBarBase.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ProgressBarBase.prototype, "reverse", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ProgressBarBase.prototype, "indeterminate", void 0);
    return ProgressBarBase;
}());

/**
 * Represents the [Kendo UI ProgressBar component for Angular]({% slug overview_progressbar %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-progressbar [value]="value">
 *        </kendo-progressbar>
 *    `
 * })
 * class AppComponent {
 *     public value = 50;
 * }
 * ```
 */
var ProgressBarComponent = /** @class */ (function (_super) {
    __extends(ProgressBarComponent, _super);
    /**
     * @hidden
     */
    function ProgressBarComponent(localization, zone, renderer) {
        var _this = _super.call(this, localization) || this;
        _this.localization = localization;
        _this.zone = zone;
        _this.renderer = renderer;
        /**
         * Determines whether the status label will be visible.
         * Defaults to `true`&mdash;the label will be visible and displayed with the default
         * `LabelSettings` having its position set to `end` and its format set to `value`.
         */
        _this.label = true;
        /**
         * The animation configuration of the ProgressBar.
         * Defaults to `false`.
         */
        _this.animation = false;
        /**
         * Fires when the animation which indicates the latest value change is completed.
         */
        _this.animationEnd = new EventEmitter();
        return _this;
    }
    Object.defineProperty(ProgressBarComponent.prototype, "showLabel", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this.label === 'boolean') {
                return this.label;
            }
            else {
                if (this.label && !this.label.hasOwnProperty('visible')) {
                    this.label.visible = true;
                }
                return this.label.visible;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarComponent.prototype, "labelPosition", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this.label === 'boolean') {
                return 'end';
            }
            else {
                if (this.label && !this.label.hasOwnProperty('position')) {
                    this.label.position = 'end';
                }
                return this.label.position;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarComponent.prototype, "isPositionStart", {
        /**
         * @hidden
         */
        get: function () {
            return this.labelPosition === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarComponent.prototype, "isPositionCenter", {
        /**
         * @hidden
         */
        get: function () {
            return this.labelPosition === 'center';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarComponent.prototype, "isPositionEnd", {
        /**
         * @hidden
         */
        get: function () {
            return this.labelPosition === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressBarComponent.prototype, "formattedLabelValue", {
        /**
         * @hidden
         */
        get: function () {
            return formatValue(this.displayValue, this.min, this.max, this.label);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ProgressBarComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (this.isAnimationInProgress && stopCurrentAnimation(changes)) {
            this.cancelCurrentAnimation = true;
        }
        if (runAnimation(changes, this.animation, this.previousValue, this.displayValue) && !changes.value.firstChange) {
            this.startAnimation(this.previousValue);
        }
    };
    /**
     * @hidden
     */
    ProgressBarComponent.prototype.ngOnDestroy = function () {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
        }
    };
    /**
     * @hidden
     */
    ProgressBarComponent.prototype.startAnimation = function (previousValue) {
        var _this = this;
        this.isAnimationInProgress = true;
        var element = this.progressStatusElement.nativeElement;
        var wrapperElement = this.progressStatusWrapperElement.nativeElement;
        var animationOptions = this.getAnimationOptions(previousValue);
        this.zone.runOutsideAngular(function () {
            if (_this.animationFrame) {
                cancelAnimationFrame(_this.animationFrame);
            }
            var animate = function () {
                var elapsed = new Date().getTime() - animationOptions.startTime;
                var position = Math.min(elapsed / animationOptions.duration, 1);
                var size = animationOptions.startSize + animationOptions.deltaSize * position;
                var wrapperSize = (100 / size) * 100;
                _this.renderValueChange(element, wrapperElement, animationOptions.property, size, wrapperSize);
                if (position < 1) {
                    if (_this.cancelCurrentAnimation) {
                        _this.resetProgress(element, wrapperElement, animationOptions.property);
                        return;
                    }
                    _this.animationFrame = requestAnimationFrame(animate);
                }
                else {
                    _this.stopAnimation(previousValue);
                }
            };
            animate();
        });
    };
    Object.defineProperty(ProgressBarComponent.prototype, "animationDuration", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this.animation === 'boolean') {
                return 400;
            }
            else {
                if (this.animation && !this.animation.hasOwnProperty('duration')) {
                    this.animation.duration = 400;
                }
                return this.animation.duration;
            }
        },
        enumerable: true,
        configurable: true
    });
    ProgressBarComponent.prototype.stopAnimation = function (value) {
        var _this = this;
        if (hasObservers(this.animationEnd)) {
            this.zone.run(function () {
                _this.animationEnd.emit({
                    from: value,
                    to: _this.displayValue
                });
            });
        }
        this.zone.run(function () {
            _this.isAnimationInProgress = false;
        });
    };
    ProgressBarComponent.prototype.getAnimationOptions = function (value) {
        var isHorizontal = this.orientation === 'horizontal';
        var previousRatio = calculateRatio(this.min, this.max, value);
        var previousStatusWidth = isHorizontal ? previousRatio * 100 : 100;
        var previousStatusHeight = !isHorizontal ? previousRatio * 100 : 100;
        var property = isHorizontal ? 'width' : 'height';
        var startTime = new Date().getTime();
        var startSize = isHorizontal ? previousStatusWidth : previousStatusHeight;
        var deltaSize = isHorizontal ? this.statusWidth - previousStatusWidth : this.statusHeight - previousStatusHeight;
        var duration = this.animationDuration * Math.abs((deltaSize / 100));
        return {
            property: property,
            startTime: startTime,
            startSize: startSize,
            deltaSize: deltaSize,
            duration: duration
        };
    };
    ProgressBarComponent.prototype.renderValueChange = function (element, wrapperElement, property, size, wrapperSize) {
        this.renderer.setStyle(element, property, size + '%');
        this.renderer.setStyle(wrapperElement, property, wrapperSize + '%');
    };
    ProgressBarComponent.prototype.resetProgress = function (element, wrapperElement, property) {
        var _this = this;
        var size = calculateRatio(this.min, this.max, this.value);
        var newSize = size * 100;
        var newWrapperSize = 100 / size;
        this.renderValueChange(element, wrapperElement, property, newSize, newWrapperSize);
        this.zone.run(function () {
            _this.cancelCurrentAnimation = false;
            _this.isAnimationInProgress = false;
        });
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "progressCssStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "progressCssClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "emptyCssStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "emptyCssClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ProgressBarComponent.prototype, "animation", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ProgressBarComponent.prototype, "animationEnd", void 0);
    __decorate([
        ViewChild('progressStatus', { static: false }),
        __metadata("design:type", ElementRef)
    ], ProgressBarComponent.prototype, "progressStatusElement", void 0);
    __decorate([
        ViewChild('progressStatusWrap', { static: false }),
        __metadata("design:type", ElementRef)
    ], ProgressBarComponent.prototype, "progressStatusWrapperElement", void 0);
    ProgressBarComponent = __decorate([
        Component({
            exportAs: 'kendoProgressBar',
            selector: 'kendo-progressbar',
            template: "\n        <span class=\"k-progress-status-wrap\"\n            [class.k-progress-start]=\"isPositionStart\"\n            [class.k-progress-center]=\"isPositionCenter\"\n            [class.k-progress-end]=\"isPositionEnd\"\n            [ngStyle]=\"emptyCssStyle\"\n            [ngClass]=\"emptyCssClass\">\n            <span *ngIf=\"showLabel\" class=\"k-progress-status\">{{formattedLabelValue}}</span>\n        </span>\n        <div\n            #progressStatus\n            class=\"k-state-selected\"\n            [class.k-complete]=\"isCompleted\"\n            [ngStyle]=\"progressCssStyle\"\n            [ngClass]=\"progressCssClass\"\n            [style.width.%]=\"statusWidth\"\n            [style.height.%]=\"statusHeight\"\n            >\n            <span\n                #progressStatusWrap\n                class=\"k-progress-status-wrap\"\n                [style.width.%]=\"statusWrapperWidth\"\n                [style.height.%]=\"statusWrapperHeight\"\n                [class.k-progress-start]=\"isPositionStart\"\n                [class.k-progress-center]=\"isPositionCenter\"\n                [class.k-progress-end]=\"isPositionEnd\"\n                >\n                <span *ngIf=\"showLabel\" class=\"k-progress-status\">{{formattedLabelValue}}</span>\n            </span>\n        </div>\n       ",
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.progressbar'
                }
            ]
        }),
        __metadata("design:paramtypes", [LocalizationService,
            NgZone,
            Renderer2])
    ], ProgressBarComponent);
    return ProgressBarComponent;
}(ProgressBarBase));

/**
 * Represents the [Kendo UI ChunkProgressBar component for Angular]({% slug overview_chunkprogressbar %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-chunkprogressbar [value]="value">
 *        </kendo-chunkprogressbar>
 *    `
 * })
 * class AppComponent {
 *     public value = 40;
 * }
 * ```
 */
var ChunkProgressBarComponent = /** @class */ (function (_super) {
    __extends(ChunkProgressBarComponent, _super);
    /**
     * @hidden
     */
    function ChunkProgressBarComponent(localization) {
        var _this = _super.call(this, localization) || this;
        _this.localization = localization;
        /**
         * Sets the number of chunks into which the ChunkProgressBar will be split.
         * Defaults to `5`.
         */
        _this.chunkCount = 5;
        _this._orientationStyles = {
            width: _this.chunkSizePercentage + "%"
        };
        return _this;
    }
    Object.defineProperty(ChunkProgressBarComponent.prototype, "chunks", {
        /**
         * @hidden
         */
        get: function () {
            var count = this.chunkCount;
            var chunks = Array(count).fill(false);
            var completedChunks = Math.floor(this._progressRatio * count);
            for (var i = 0; i < completedChunks; i++) {
                chunks[i] = true;
            }
            if (reverseChunks(this.orientation, this.reverse)) {
                chunks.reverse();
            }
            return chunks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChunkProgressBarComponent.prototype, "chunkSizePercentage", {
        /**
         * @hidden
         */
        get: function () {
            return 100 / this.chunkCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChunkProgressBarComponent.prototype, "orientationStyles", {
        /**
         * @hidden
         */
        get: function () {
            if (this.orientation === 'horizontal') {
                this._orientationStyles.width = this.chunkSizePercentage + "%";
                this._orientationStyles.height = undefined;
            }
            else {
                this._orientationStyles.height = this.chunkSizePercentage + "%";
                this._orientationStyles.width = undefined;
            }
            return this._orientationStyles;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ChunkProgressBarComponent.prototype, "chunkCount", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ChunkProgressBarComponent.prototype, "progressCssStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ChunkProgressBarComponent.prototype, "progressCssClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ChunkProgressBarComponent.prototype, "emptyCssStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ChunkProgressBarComponent.prototype, "emptyCssClass", void 0);
    ChunkProgressBarComponent = __decorate([
        Component({
            exportAs: 'kendoChunkProgressBar',
            selector: 'kendo-chunkprogressbar',
            template: "\n        <ul class=\"k-reset\">\n            <li class=\"k-item\" *ngFor=\"let chunk of chunks; let i = index;\"\n                [class.k-first]=\"i === 0\"\n                [class.k-last]=\"i === chunkCount - 1\"\n                [class.k-state-selected]=\"chunk\"\n                [ngClass]=\"chunk ? progressCssClass : emptyCssClass\"\n                [ngStyle]=\"chunk ? progressCssStyle : emptyCssStyle\"\n                [style.width]=\"orientationStyles.width\"\n                [style.height]=\"orientationStyles.height\"\n                >\n            </li>\n        </ul>\n    ",
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.chunkprogressbar'
                }
            ]
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], ChunkProgressBarComponent);
    return ChunkProgressBarComponent;
}(ProgressBarBase));

var COMPONENT_DIRECTIVES = [ProgressBarComponent, ChunkProgressBarComponent];
var MODULES = [CommonModule];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})
 * definition for the ProgressBar components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the ProgressBar module
 * import { ProgressBarModule } from '@progress/kendo-angular-progressbar';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, ProgressBarModule], // import ProgressBar module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var ProgressBarModule = /** @class */ (function () {
    function ProgressBarModule() {
    }
    ProgressBarModule = __decorate([
        NgModule({
            declarations: COMPONENT_DIRECTIVES,
            exports: COMPONENT_DIRECTIVES,
            imports: MODULES
        })
    ], ProgressBarModule);
    return ProgressBarModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ProgressBarBase, ProgressBarComponent, ChunkProgressBarComponent, ProgressBarModule };
