{"version":3,"file":"progressbar.component.d.ts","sources":["progressbar.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AnimationEndEvent } from './types/animation-end-event';\nimport { ProgressBarBase } from './common/progressbar-base';\nimport { NgZone, Renderer2, EventEmitter, SimpleChanges } from '@angular/core';\nimport { LabelSettings } from './types/label-settings.interface';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ProgressBarAnimation } from './types/progressbar-animation.interface';\n/**\n * Represents the [Kendo UI ProgressBar component for Angular]({% slug overview_progressbar %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-progressbar [value]=\"value\">\n *        </kendo-progressbar>\n *    `\n * })\n * class AppComponent {\n *     public value = 50;\n * }\n * ```\n */\nexport declare class ProgressBarComponent extends ProgressBarBase {\n    localization: LocalizationService;\n    private zone;\n    private renderer;\n    /**\n     * Determines whether the status label will be visible.\n     * Defaults to `true`&mdash;the label will be visible and displayed with the default\n     * `LabelSettings` having its position set to `end` and its format set to `value`.\n     */\n    label: boolean | LabelSettings;\n    /**\n     * The CSS styles that will be rendered on the inner element which represents the full portion of the progress bar\n     * ([see example]({% slug progressbar_appearance %})).\n     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).\n     */\n    progressCssStyle: {\n        [key: string]: string;\n    };\n    /**\n     * The CSS classes that will be rendered on the inner element which represents the full portion of the progress bar\n     * ([see example]({% slug progressbar_appearance %})).\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    progressCssClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /**\n     * The CSS styles that will be rendered on the inner element which represents the empty portion of the progress bar\n     * ([see example]({% slug progressbar_appearance %})).\n     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).\n     */\n    emptyCssStyle: {\n        [key: string]: string;\n    };\n    /**\n     * The CSS classes that will be rendered on the inner element which represents the empty portion of the progress bar\n     * ([see example]({% slug progressbar_appearance %})).\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    emptyCssClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /**\n     * The animation configuration of the ProgressBar.\n     * Defaults to `false`.\n     */\n    animation: boolean | ProgressBarAnimation;\n    /**\n     * Fires when the animation which indicates the latest value change is completed.\n     */\n    animationEnd: EventEmitter<AnimationEndEvent>;\n    /**\n     * @hidden\n     */\n    readonly showLabel: boolean;\n    /**\n     * @hidden\n     */\n    readonly labelPosition: string;\n    /**\n     * @hidden\n     */\n    readonly isPositionStart: boolean;\n    /**\n     * @hidden\n     */\n    readonly isPositionCenter: boolean;\n    /**\n     * @hidden\n     */\n    readonly isPositionEnd: boolean;\n    /**\n     * @hidden\n     */\n    readonly formattedLabelValue: string;\n    private progressStatusElement;\n    private progressStatusWrapperElement;\n    private animationFrame;\n    private cancelCurrentAnimation;\n    private isAnimationInProgress;\n    /**\n     * @hidden\n     */\n    constructor(localization: LocalizationService, zone: NgZone, renderer: Renderer2);\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    protected startAnimation(previousValue: number): void;\n    /**\n     * @hidden\n     */\n    protected readonly animationDuration: number;\n    private stopAnimation;\n    private getAnimationOptions;\n    private renderValueChange;\n    private resetProgress;\n}\n"]}