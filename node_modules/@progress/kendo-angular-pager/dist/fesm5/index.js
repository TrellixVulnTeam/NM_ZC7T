/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __extends, __decorate, __metadata, __param } from 'tslib';
import { Input, Component, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, HostBinding, Directive, Optional, TemplateRef, NgZone, ContentChild, Output, EventEmitter, ElementRef, NgModule } from '@angular/core';
import { ComponentMessages, LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subject, Subscription } from 'rxjs';
import { DropDownListComponent, DropDownListModule } from '@progress/kendo-angular-dropdowns';
import { NumericTextBoxComponent, NumericTextBoxModule } from '@progress/kendo-angular-inputs';
import { Keys, anyChanged, ResizeSensorComponent, EventsModule, ResizeSensorModule } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { CommonModule } from '@angular/common';

/**
 * @hidden
 */
var PreventableEvent = /** @class */ (function () {
    function PreventableEvent() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    PreventableEvent.prototype.preventDefault = function () {
        this.prevented = true;
    };
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    PreventableEvent.prototype.isDefaultPrevented = function () {
        return this.prevented;
    };
    return PreventableEvent;
}());

/**
 * Arguments for the `pageSizeChange` event. The `pageSizeChange` event fires when the page size
 * is changed from the UI. If you cancel the event, the change is prevented.
 */
var PageSizeChangeEvent = /** @class */ (function (_super) {
    __extends(PageSizeChangeEvent, _super);
    /**
     * Constructs the event arguments for the `pageSizeChange` event.
     * @param newPageSize - The newly selected page size.
     * @hidden
     */
    function PageSizeChangeEvent(newPageSize) {
        var _this = _super.call(this) || this;
        _this.newPageSize = newPageSize;
        return _this;
    }
    return PageSizeChangeEvent;
}(PreventableEvent));

/**
 * @hidden
 */
var Messages = /** @class */ (function (_super) {
    __extends(Messages, _super);
    function Messages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "firstPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "lastPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "previousPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "nextPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "page", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "pageNumberInputTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "itemsPerPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "of", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "items", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "selectPage", void 0);
    return Messages;
}(ComponentMessages));

/**
 * Custom component messages override default component messages
 * ([see example]({% slug pager_globalization %}#toc-messages)).
 */
var CustomMessagesComponent = /** @class */ (function (_super) {
    __extends(CustomMessagesComponent, _super);
    function CustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    CustomMessagesComponent_1 = CustomMessagesComponent;
    Object.defineProperty(CustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var CustomMessagesComponent_1;
    CustomMessagesComponent = CustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: Messages,
                    useExisting: forwardRef(function () { return CustomMessagesComponent_1; })
                }
            ],
            selector: 'kendo-datapager-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], CustomMessagesComponent);
    return CustomMessagesComponent;
}(Messages));

/**
 * @hidden
 */
var PagerContextService = /** @class */ (function () {
    function PagerContextService() {
        this.changes = new Subject();
        this.pageChange = new Subject();
        this.pageSizeChange = new Subject();
    }
    Object.defineProperty(PagerContextService.prototype, "currentPage", {
        get: function () {
            return this.skip / this.pageSize;
        },
        enumerable: true,
        configurable: true
    });
    PagerContextService.prototype.notifyChanges = function (changes) {
        this.total = changes.total;
        this.pageSize = changes.pageSize;
        this.skip = changes.skip;
        this.changes.next(changes);
    };
    PagerContextService.prototype.changePage = function (page) {
        this.pageChange.next({ skip: page * this.pageSize, take: this.pageSize });
    };
    PagerContextService.prototype.changePageSize = function (event) {
        this.pageSizeChange.next(event);
    };
    PagerContextService.prototype.nextPage = function () {
        var nextPage = this.currentPage + 1;
        if (nextPage * this.pageSize <= this.total) {
            this.changePage(nextPage);
        }
    };
    PagerContextService.prototype.prevPage = function () {
        var prevPage = this.currentPage - 1;
        if (prevPage * this.pageSize >= 0) {
            this.changePage(prevPage);
        }
    };
    return PagerContextService;
}());

/**
 * @hidden
 */
var PagerElementComponent = /** @class */ (function () {
    function PagerElementComponent(localization, pagerContext, cd) {
        this.localization = localization;
        this.pagerContext = pagerContext;
        this.cd = cd;
        this.total = this.pagerContext.total;
        this.skip = this.pagerContext.skip;
        this.pageSize = this.pagerContext.pageSize;
    }
    Object.defineProperty(PagerElementComponent.prototype, "currentPage", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number}
         * @memberOf PagerElementComponent
         */
        get: function () {
            return Math.floor((this.skip || 0) / this.pageSize) + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerElementComponent.prototype, "totalPages", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number}
         * @memberOf PagerElementComponent
         */
        get: function () {
            return Math.ceil((this.total || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     *
     * @param {string} key
     * @returns {string}
     *
     * @memberOf PagerElementComponent
     */
    PagerElementComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    /**
     * @hidden
     *
     * @param {number} page
     *
     * @memberOf PagerElementComponent
     */
    PagerElementComponent.prototype.changePage = function (page) {
        this.pagerContext.changePage(page);
        return false;
    };
    /**
     * @hidden
     *
     * @memberOf PagerElementComponent
     */
    PagerElementComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions = this.pagerContext.changes.subscribe(this.onChanges.bind(this));
        this.subscriptions.add(this.localization.changes.subscribe(function () { return _this.cd.markForCheck(); }));
    };
    PagerElementComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    return PagerElementComponent;
}());

/**
 * Displays buttons for navigating to the first and to the previous page ([see example]({% slug pager_settings %})).
 */
var PagerPrevButtonsComponent = /** @class */ (function (_super) {
    __extends(PagerPrevButtonsComponent, _super);
    function PagerPrevButtonsComponent(localization, pagerContext, cd) {
        return _super.call(this, localization, pagerContext, cd) || this;
    }
    Object.defineProperty(PagerPrevButtonsComponent.prototype, "disabled", {
        /**
         * @hidden
         *
         * @readonly
         * @type {boolean}
         * @memberOf PagerPrevButtonsComponent
         */
        get: function () {
            return this.currentPage === 1 || !this.total;
        },
        enumerable: true,
        configurable: true
    });
    PagerPrevButtonsComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    PagerPrevButtonsComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-datapager-prev-buttons',
            template: "\n        <button\n            type=\"button\"\n            class=\"k-link k-pager-nav k-pager-first\"\n            [class.k-disabled]=\"disabled\"\n            [title]=\"textFor('firstPage')\"\n            [attr.aria-label]=\"textFor('firstPage')\"\n            [attr.aria-disabled]=\"disabled ? true : undefined\"\n            (click)=\"currentPage !== 1 ? changePage(0) : false\">\n            <span class=\"k-icon k-i-seek-w\" role=\"note\" [attr.aria-label]=\"textFor('firstPage')\"></span>\n        </button>\n        <button\n            type=\"button\"\n            class=\"k-link k-pager-nav\"\n            [class.k-disabled]=\"disabled\"\n            [title]=\"textFor('previousPage')\"\n            [attr.aria-label]=\"textFor('previousPage')\"\n            [attr.aria-disabled]=\"disabled ? true : undefined\"\n            (click)=\"currentPage !== 1 ? changePage(currentPage-2) : false\">\n            <span class=\"k-icon k-i-arrow-w\" role=\"note\" [attr.aria-label]=\"textFor('previousPage')\"></span>\n        </button>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            PagerContextService,
            ChangeDetectorRef])
    ], PagerPrevButtonsComponent);
    return PagerPrevButtonsComponent;
}(PagerElementComponent));

/**
 * Displays a drop-down list for the page size selection ([see example]({% slug pager_settings %})).
 */
var PagerPageSizesComponent = /** @class */ (function (_super) {
    __extends(PagerPageSizesComponent, _super);
    function PagerPageSizesComponent(localization, cd, pagerContext) {
        var _this = _super.call(this, localization, pagerContext, cd) || this;
        _this.pagerContext = pagerContext;
        _this._pageSizes = [];
        return _this;
    }
    Object.defineProperty(PagerPageSizesComponent.prototype, "pageSizes", {
        get: function () {
            return this._pageSizes;
        },
        /**
         * The page sizes collection. Can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
         *
         * @example
         * {% meta height:400 %}
         * ```ts-preview
         * _@Component({
         *    selector: 'my-app',
         *    template: `
         *        <div *ngFor="let item of pagedData" style="border: 1px solid black; padding: 10px;">
         *            <span>{{item.ProductID}}. </span>
         *            <span>{{item.ProductName}}</span>
         *        </div>
         *        <kendo-datapager
         *             [skip]="skip"
         *             [pageSize]="pageSize"
         *             [total]="total"
         *             (pageChange)="onPageChange($event)">
         *           <ng-template kendoDataPagerTemplate>
         *               <kendo-datapager-page-sizes [pageSizes]="pagesizes"></kendo-datapager-page-sizes>
         *           </ng-template>
         *        </kendo-datapager>
         *    `
         * })
         * class AppComponent {
         *    public data: any[] = products;
         *    public pagedData = [];
         *    public skip = 0;
         *    public pageSize = 2;
         *    public total = products.length;
         *    public pagesizes = [{text: 'One', value: 1}, {text: 'Two', value: 2}, {text: 'All', value : 'all'}];
         *
         *    public ngOnInit() {
         *        this.pageData();
         *    }
         *
         *    public onPageChange(e) {
         *        this.skip = e.skip;
         *        this.pageSize = e.take;
         *        this.pageData();
         *    }
         *
         *    private pageData() {
         *        this.pagedData = this.data.slice(this.skip, this.skip + this.pageSize);
         *    }
         * }
         *
         * const products = [{
         *   'ProductID' : 1,
         *   'ProductName' : "Chai",
         *   'SupplierID' : 1,
         *   'CategoryID' : 1,
         *   'QuantityPerUnit' : "10 boxes x 20 bags",
         *   'UnitPrice' : 18.0000,
         *   'UnitsInStock' : 39,
         *   'UnitsOnOrder' : 0,
         *   'ReorderLevel' : 10,
         *   'Discontinued' : false
         *
         * }, {
         *   'ProductID' : 2,
         *   'ProductName' : "Chang",
         *   'SupplierID' : 1,
         *   'CategoryID' : 1,
         *   'QuantityPerUnit' : "24 - 12 oz bottles",
         *   'UnitPrice' : 19.0000,
         *   'UnitsInStock' : 17,
         *   'UnitsOnOrder' : 40,
         *   'ReorderLevel' : 25,
         *   'Discontinued' : false
         * }, {
         *   'ProductID' : 3,
         *   'ProductName' : "Aniseed Syrup",
         *   'SupplierID' : 1,
         *   'CategoryID' : 2,
         *   'QuantityPerUnit' : "12 - 550 ml bottles",
         *   'UnitPrice' : 10.0000,
         *   'UnitsInStock' : 13,
         *   'UnitsOnOrder' : 70,
         *   'ReorderLevel' : 25,
         *   'Discontinued' : false
         * }, {
         *   'ProductID' : 4,
         *   'ProductName' : "Chef Anton\'s Cajun Seasoning",
         *   'SupplierID' : 2,
         *  'CategoryID' : 2,
         *   'QuantityPerUnit' : "48 - 6 oz jars",
         *   'UnitPrice' : 22.0000,
         *   'UnitsInStock' : 53,
         *   'UnitsOnOrder' : 0,
         *   'ReorderLevel' : 0,
         *   'Discontinued' : false
         * }, {
         *   'ProductID' : 5,
         *   'ProductName' : "Chef Anton\'s Gumbo Mix",
         *   'SupplierID' : 2,
         *   'CategoryID' : 2,
         *   'QuantityPerUnit' : "36 boxes",
         *   'UnitPrice' : 21.3500,
         *   'UnitsInStock' : 0,
         *   'UnitsOnOrder' : 0,
         *   'ReorderLevel' : 0,
         *   'Discontinued' : true
         * }, {
         *   'ProductID' : 6,
         *   'ProductName' : "Grandma\'s Boysenberry Spread",
         *   'SupplierID' : 3,
         *   'CategoryID' : 2,
         *   'QuantityPerUnit' : "12 - 8 oz jars",
         *   'UnitPrice' : 25.0000,
         *   'UnitsInStock' : 120,
         *   'UnitsOnOrder' : 0,
         *   'ReorderLevel' : 25,
         *   'Discontinued' : false
         * }];
         * ```
         * {% endmeta %}
         */
        set: function (pageSizes) {
            var _this = this;
            var normalizedItems = [];
            pageSizes.forEach(function (item) {
                if (typeof item === 'number') {
                    normalizedItems.push({
                        text: item.toString(),
                        value: item
                    });
                }
                else {
                    normalizedItems.push(item);
                }
            });
            if (this.pageSize && !normalizedItems.some(function (item) { return item.value === _this.pageSize; })) {
                normalizedItems = [{ text: this.pageSize.toString(), value: this.pageSize }].concat(normalizedItems);
            }
            this._pageSizes = normalizedItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerPageSizesComponent.prototype, "classes", {
        /**
         * @hidden
         *
         * @readonly
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    PagerPageSizesComponent.prototype.ngAfterViewInit = function () {
        this.dropDownList.wrapper.nativeElement.setAttribute('aria-label', this.textFor('itemsPerPage'));
    };
    /**
     * @hidden
     */
    PagerPageSizesComponent.prototype.pageSizeChange = function (value, dropdownlist) {
        var event = new PageSizeChangeEvent(value);
        this.pagerContext.changePageSize(event);
        if (event.isDefaultPrevented()) {
            dropdownlist.writeValue(this.pageSize);
        }
    };
    PagerPageSizesComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = typeof pageSize === 'number' ? pageSize : this.total;
        this.cd.markForCheck();
    };
    __decorate([
        ViewChild('dropdownlist', { static: true }),
        __metadata("design:type", DropDownListComponent)
    ], PagerPageSizesComponent.prototype, "dropDownList", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PagerPageSizesComponent.prototype, "pageSizes", null);
    __decorate([
        HostBinding("class.k-pager-sizes"),
        HostBinding("class.k-label"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], PagerPageSizesComponent.prototype, "classes", null);
    PagerPageSizesComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-datapager-page-sizes',
            template: "\n        <kendo-dropdownlist\n            #dropdownlist\n            [data]=\"pageSizes\"\n            textField=\"text\"\n            valueField=\"value\"\n            [valuePrimitive]=\"true\"\n            [value]=\"pageSize\"\n            (valueChange)=\"pageSizeChange($event, dropdownlist)\"></kendo-dropdownlist>\n        {{ textFor('itemsPerPage') }}\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            ChangeDetectorRef,
            PagerContextService])
    ], PagerPageSizesComponent);
    return PagerPageSizesComponent;
}(PagerElementComponent));

/**
 * Represents the pager template which helps to customize the pager appearance. To define a pager
 * template, nest an `<ng-template>` tag with the `kendoDataPagerTemplate` directive inside `<kendo-datapager>`.
 *
 * The template context provides the following fields:
 * * `currentPage`&mdash;The index of the displayed page.
 * * `pageSize`&mdash;The value of the current `pageSize`.
 * * `skip`&mdash;The current skip value.
 * * `total`&mdash;The total number of records.
 * * `totalPages`&mdash;The total number of available pages.
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *       <kendo-datapager [total]="total" [pageSize]="pageSize" [skip]="skip" (pageChange)="onPageChange($event)">
 *           <ng-template kendoDataPagerTemplate let-totalPages="totalPages" let-currentPage="currentPage">
 *               <kendo-datapager-prev-buttons></kendo-datapager-prev-buttons>
 *               <kendo-datapager-numeric-buttons [buttonCount]="10"></kendo-datapager-numeric-buttons>
 *               <kendo-datapager-next-buttons></kendo-datapager-next-buttons>
 *               <kendo-datapager-info></kendo-datapager-info>
 *               Current page: {{currentPage}}
 *           </ng-template>
 *        </kendo-datapager>
 *     `
 * })
 *
 * class AppComponent {
 *     public skip = 0;
 *     public pageSize = 10;
 *     public total = 100;
 *
 *     public onPageChange(e: any): void {
 *         this.skip = e.skip;
 *         this.pageSize = e.take;
 *     }
 * }
 *
 * ```
 */
var PagerTemplateDirective = /** @class */ (function () {
    function PagerTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PagerTemplateDirective = __decorate([
        Directive({
            selector: '[kendoDataPagerTemplate]'
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [TemplateRef])
    ], PagerTemplateDirective);
    return PagerTemplateDirective;
}());

/**
 * Displays numeric buttons to enable navigation between the pages.
 */
var PagerNumericButtonsComponent = /** @class */ (function (_super) {
    __extends(PagerNumericButtonsComponent, _super);
    function PagerNumericButtonsComponent(localization, cd, pagerContext) {
        var _this = _super.call(this, localization, pagerContext, cd) || this;
        _this.pagerContext = pagerContext;
        _this.numbersWrapClass = true;
        return _this;
    }
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "buttons", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number[]}
         * @memberOf PagerNumericButtonsComponent
         */
        get: function () {
            var result = [];
            for (var idx = this.start; idx <= this.end; idx++) {
                result.push(idx);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "end", {
        /**
         * @hidden
         */
        get: function () {
            return Math.min((this.start + this.buttonCount) - 1, this.totalPages);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "start", {
        /**
         * @hidden
         */
        get: function () {
            var page = this.currentPage;
            var buttonCount = this.buttonCount;
            if (page > buttonCount) {
                var reminder = (page % buttonCount);
                return (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
            }
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    PagerNumericButtonsComponent.prototype.pageLabel = function (num) {
        var pageText = this.textFor('page');
        if (pageText) {
            return pageText + ' ' + num;
        }
        return num.toString();
    };
    /**
     * @hidden
     */
    PagerNumericButtonsComponent.prototype.onSelectChange = function (e) {
        var target = e.target;
        var valueAsNumber = Number(target.value);
        if (!Number.isNaN(valueAsNumber)) {
            this.changePage(valueAsNumber - 1);
        }
        else {
            if (target.value === 'previousButtons') {
                this.changePage(this.start - 2);
            }
            else {
                this.changePage(this.end);
            }
        }
    };
    PagerNumericButtonsComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "pageChooserLabel", {
        get: function () {
            return this.textFor('selectPage');
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        HostBinding('class.k-pager-numbers-wrap'),
        __metadata("design:type", Boolean)
    ], PagerNumericButtonsComponent.prototype, "numbersWrapClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PagerNumericButtonsComponent.prototype, "buttonCount", void 0);
    PagerNumericButtonsComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-datapager-numeric-buttons',
            template: "\n        <select\n            class=\"k-dropdown-list k-picker k-picker-md k-rounded-md k-picker-solid\"\n            [attr.title]=\"pageChooserLabel\"\n            [attr.aria-label]=\"pageChooserLabel\"\n            [value]=\"(currentPage).toString()\"\n            (change)=\"onSelectChange($event)\">\n            <option *ngIf=\"start > 1\"\n                class=\"k-link\"\n                value=\"previousButtons\"\n                [attr.aria-label]=\"pageLabel(start - 1)\">...\n            </option>\n            <option *ngFor=\"let num of buttons\"\n                [value]=\"num.toString()\"\n                [attr.aria-label]=\"pageLabel(num)\"\n                [attr.aria-current]=\"currentPage == num ? 'page' : undefined\"\n                [ngClass]=\"{'k-link': true, 'k-state-selected':currentPage == num}\">\n                {{num}}\n            </option>\n            <option *ngIf=\"end < totalPages\"\n                value=\"nextButtons\"\n                class=\"k-link\"\n                [attr.aria-label]=\"pageLabel(end + 1)\">...\n            </option>\n        </select>\n        <ul [ngClass]=\"{'k-pager-numbers': true, 'k-reset': true}\">\n            <li *ngIf=\"start > 1\">\n                <button\n                    type=\"button\"\n                    class=\"k-link\"\n                    [attr.aria-label]=\"pageLabel(start - 1)\"\n                    (click)=\"changePage(start - 2)\">...</button>\n            </li>\n            <li *ngFor=\"let num of buttons\">\n                <button\n                    type=\"button\"\n                    [attr.aria-label]=\"pageLabel(num)\"\n                    [attr.aria-current]=\"currentPage == num ? 'page' : undefined\"\n                    [ngClass]=\"{'k-link': true, 'k-state-selected':currentPage == num}\"\n                    (click)=\"changePage(num - 1)\">\n                    {{num}}\n                </button>\n            </li>\n            <li *ngIf=\"end < totalPages\">\n                <button\n                    type=\"button\"\n                    class=\"k-link\"\n                    [attr.aria-label]=\"pageLabel(end + 1)\"\n                    (click)=\"changePage(end)\">...</button>\n            </li>\n        </ul>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            ChangeDetectorRef,
            PagerContextService])
    ], PagerNumericButtonsComponent);
    return PagerNumericButtonsComponent;
}(PagerElementComponent));

/**
 * Displays buttons for navigating to the next and to the last page ([see example]({% slug pager_settings %})).
 */
var PagerNextButtonsComponent = /** @class */ (function (_super) {
    __extends(PagerNextButtonsComponent, _super);
    function PagerNextButtonsComponent(localization, pagerContext, cd) {
        return _super.call(this, localization, pagerContext, cd) || this;
    }
    Object.defineProperty(PagerNextButtonsComponent.prototype, "disabled", {
        /**
         * @hidden
         *
         * @readonly
         * @type {boolean}
         * @memberOf PagerNextButtonsComponent
         */
        get: function () {
            return this.currentPage === this.totalPages || !this.total;
        },
        enumerable: true,
        configurable: true
    });
    PagerNextButtonsComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    PagerNextButtonsComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-datapager-next-buttons',
            template: "\n        <button\n            type=\"button\"\n            class=\"k-link k-pager-nav\"\n            [class.k-disabled]=\"disabled\"\n            [title]=\"textFor('nextPage')\"\n            [attr.aria-label]=\"textFor('nextPage')\"\n            [attr.aria-disabled]=\"disabled ? true : undefined\"\n            (click)=\"currentPage !== totalPages ? changePage(currentPage) : false\">\n            <span class=\"k-icon k-i-arrow-e\" role=\"note\" [attr.aria-label]=\"textFor('nextPage')\"></span>\n        </button>\n        <button\n            type=\"button\"\n            class=\"k-link k-pager-nav k-pager-last\"\n            [class.k-disabled]=\"disabled\"\n            [title]=\"textFor('lastPage')\"\n            [attr.aria-label]=\"textFor('lastPage')\"\n            [attr.aria-disabled]=\"disabled ? true : undefined\"\n            (click)=\"currentPage !== totalPages ? changePage(totalPages-1) : false\">\n            <span class=\"k-icon k-i-seek-e\" role=\"note\" [attr.aria-label]=\"textFor('lastPage')\"></span>\n        </button>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            PagerContextService,
            ChangeDetectorRef])
    ], PagerNextButtonsComponent);
    return PagerNextButtonsComponent;
}(PagerElementComponent));

/**
 * Displays an input element which allows the typing and rendering of page numbers.
 */
var PagerInputComponent = /** @class */ (function (_super) {
    __extends(PagerInputComponent, _super);
    function PagerInputComponent(localization, pagerContext, zone, cd) {
        var _this = _super.call(this, localization, pagerContext, cd) || this;
        _this.pagerContext = pagerContext;
        _this.zone = zone;
        /**
         * @hidden
         *
         * @param {string} value
         *
         * @memberOf PagerInputComponent
         */
        _this.handleKeyDown = function (event) {
            var incomingValue = _this.numericInput.value || _this.current;
            // tslint:disable:deprecation
            if (event.keyCode === Keys.Enter) {
                event.preventDefault();
                if (incomingValue !== _this.current) {
                    _this.zone.run(function () {
                        _this.changePage(incomingValue - 1);
                    });
                }
            }
        };
        /**
         * @hidden
         *
         * @param {string} value
         *
         * @memberOf PagerInputComponent
         */
        _this.handleBlur = function () {
            var inputValue = _this.numericInput.value;
            if (!inputValue) {
                _this.numericInput.writeValue(_this.current);
                return;
            }
            if (inputValue !== _this.current) {
                _this.zone.run(function () {
                    _this.changePage(inputValue - 1);
                });
            }
        };
        return _this;
    }
    Object.defineProperty(PagerInputComponent.prototype, "current", {
        /**
         * @hidden
         */
        get: function () {
            return this.hasPages ? this.currentPage : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerInputComponent.prototype, "hasPages", {
        /**
         * @hidden
         */
        get: function () {
            return this.totalPages !== 0;
        },
        enumerable: true,
        configurable: true
    });
    PagerInputComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    __decorate([
        ViewChild(NumericTextBoxComponent, { static: true }),
        __metadata("design:type", NumericTextBoxComponent)
    ], PagerInputComponent.prototype, "numericInput", void 0);
    PagerInputComponent = __decorate([
        Component({
            selector: 'kendo-datapager-input',
            template: "\n     <span [ngClass]=\"{'k-pager-input': true, 'k-label': true}\">\n        {{textFor('page')}}\n        <kendo-numerictextbox\n            [spinners]=\"false\"\n            [decimals]=\"0\"\n            format=\"n0\"\n            [disabled]=\"!hasPages\"\n            [value]=\"current\"\n            [min]=\"hasPages ? 1 : 0\"\n            [max]=\"totalPages\"\n            [autoCorrect]=\"true\"\n            [title]=\"textFor('pageNumberInputTitle')\"\n            [kendoEventsOutsideAngular]=\"{\n                keydown: handleKeyDown,\n                focusout: handleBlur\n            }\">\n        </kendo-numerictextbox>\n        {{textFor('of')}} {{totalPages}}\n     </span>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            PagerContextService,
            NgZone,
            ChangeDetectorRef])
    ], PagerInputComponent);
    return PagerInputComponent;
}(PagerElementComponent));

/**
 * Displays information about the current page and the total number of records ([see example]({% slug pager_settings %})).
 */
var PagerInfoComponent = /** @class */ (function (_super) {
    __extends(PagerInfoComponent, _super);
    function PagerInfoComponent(localization, cd, pagerContext) {
        var _this = _super.call(this, localization, pagerContext, cd) || this;
        _this.pagerContext = pagerContext;
        return _this;
    }
    Object.defineProperty(PagerInfoComponent.prototype, "maxItems", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number}
         * @memberOf PagerInfoComponent
         */
        get: function () {
            return Math.min(this.currentPage * this.pageSize, this.total);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerInfoComponent.prototype, "currentPageText", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number}
         * @memberOf PagerInfoComponent
         */
        get: function () {
            return this.total ?
                (this.currentPage - 1) * this.pageSize + 1 :
                0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerInfoComponent.prototype, "classes", {
        /**
         * @hidden
         *
         * @readonly
         * @type {boolean}
         * @memberOf PagerInfoComponent
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    PagerInfoComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    __decorate([
        HostBinding("class.k-pager-info"),
        HostBinding("class.k-label"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], PagerInfoComponent.prototype, "classes", null);
    PagerInfoComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-datapager-info',
            template: "{{currentPageText}} - {{maxItems}} {{textFor('of')}} {{total}} {{textFor('items')}}"
        }),
        __metadata("design:paramtypes", [LocalizationService,
            ChangeDetectorRef,
            PagerContextService])
    ], PagerInfoComponent);
    return PagerInfoComponent;
}(PagerElementComponent));

/**
 * @hidden
 */
var RESPONSIVE_BREAKPOINT_MEDIUM = 600;
/**
 * @hidden
 */
var RESPONSIVE_BREAKPOINT_LARGE = 768;

/**
 * @hidden
 */
var DEFAULT_PAGE_SIZE_VALUES = [5, 10, 20];

/**
 * @hidden
 */
var packageMetadata = {
    name: '@progress/kendo-angular-pager',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1647344354,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

var PagerComponent = /** @class */ (function () {
    function PagerComponent(pagerContext, element, localization) {
        var _this = this;
        this.pagerContext = pagerContext;
        this.element = element;
        this.localization = localization;
        /**
         * Represents the total number of data items in the collection.
         */
        this.total = 0;
        /**
         * Defines the number of data items to be skipped.
         */
        this.skip = 0;
        /**
         * Sets the maximum numeric buttons count before the buttons are collapsed.
         */
        this.buttonCount = 10;
        /**
         * Toggles the information about the current page and the total number of records.
         */
        this.info = true;
        /**
         * Defines the type of the pager.
         */
        this.type = 'numeric';
        /**
         * Toggles the **Previous** and **Next** buttons.
         */
        this.previousNext = true;
        /**
         * Fires when the current page of the Pager is changed ([see example]({% slug overview_pager %}#toc-basic-usage)).
         * You have to handle the event yourself and page the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * Fires when the page size of the Pager is changed.
         * You have to handle the event yourself and page the data.
         * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
         */
        this.pageSizeChange = new EventEmitter();
        this.pagerWrapClass = true;
        this.pagerClass = true;
        this.widgetRole = 'navigation';
        this.subscriptions = new Subscription();
        this._templateContext = {};
        this._pageSizeValues = DEFAULT_PAGE_SIZE_VALUES;
        this.resizeHandler = function () {
            if (_this.template) {
                return;
            }
            var element = _this.element.nativeElement;
            var width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                element.classList.remove('k-pager-md');
                element.classList.add('k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                element.classList.add('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
            else {
                element.classList.remove('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
        };
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(PagerComponent.prototype, "pageSizeValues", {
        get: function () {
            return this._pageSizeValues;
        },
        /**
         * Shows a dropdown for selecting the page size.
         * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
         * To customize the list of options, set `pageSizeValues` to an array of the desired values.
         * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
         */
        set: function (pageSizeValues) {
            this._pageSizeValues = Array.isArray(pageSizeValues) ? pageSizeValues : pageSizeValues ? DEFAULT_PAGE_SIZE_VALUES : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "dir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.total || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "currentPage", {
        get: function () {
            return Math.floor((this.skip || 0) / this.pageSize) + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "templateContext", {
        get: function () {
            var context = this._templateContext;
            context.totalPages = this.totalPages;
            context.total = this.total;
            context.skip = this.skip;
            context.pageSize = this.pageSize;
            context.currentPage = this.currentPage;
            return context;
        },
        enumerable: true,
        configurable: true
    });
    PagerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
        this.subscriptions.add(this.pagerContext.pageSizeChange.subscribe(this.changePageSize.bind(this)));
        this.subscriptions.add(this.resizeSensor.resize.subscribe(function () { return _this.resizeHandler(); }));
        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        }));
    };
    PagerComponent.prototype.ngAfterViewInit = function () {
        this.resizeHandler();
    };
    PagerComponent.prototype.ngOnChanges = function (changes) {
        if (anyChanged(["pageSize", "skip", "total"], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
    };
    PagerComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.changePage = function (event) {
        this.pageChange.emit(event);
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.changePageSize = function (event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            if (event.newPageSize === 'all') {
                this.pageChange.emit({ skip: 0, take: this.total });
            }
            else {
                this.pageChange.emit({ skip: 0, take: event.newPageSize });
            }
        }
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.onPageSizeChange = function (event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            this.pageChange.emit({ skip: this.skip, take: event.newPageSize });
        }
    };
    __decorate([
        ViewChild(ResizeSensorComponent, { static: true }),
        __metadata("design:type", ResizeSensorComponent)
    ], PagerComponent.prototype, "resizeSensor", void 0);
    __decorate([
        ContentChild(PagerTemplateDirective, { static: false }),
        __metadata("design:type", PagerTemplateDirective)
    ], PagerComponent.prototype, "template", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PagerComponent.prototype, "total", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PagerComponent.prototype, "skip", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PagerComponent.prototype, "pageSize", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PagerComponent.prototype, "buttonCount", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PagerComponent.prototype, "info", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PagerComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PagerComponent.prototype, "pageSizeValues", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PagerComponent.prototype, "previousNext", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PagerComponent.prototype, "pageChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PagerComponent.prototype, "pageSizeChange", void 0);
    __decorate([
        HostBinding('class.k-pager-wrap'),
        __metadata("design:type", Boolean)
    ], PagerComponent.prototype, "pagerWrapClass", void 0);
    __decorate([
        HostBinding('class.k-pager'),
        __metadata("design:type", Boolean)
    ], PagerComponent.prototype, "pagerClass", void 0);
    __decorate([
        HostBinding('attr.role'),
        __metadata("design:type", String)
    ], PagerComponent.prototype, "widgetRole", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], PagerComponent.prototype, "dir", null);
    PagerComponent = __decorate([
        Component({
            selector: 'kendo-datapager',
            exportAs: 'kendoDataPager',
            providers: [
                LocalizationService,
                PagerContextService
            ],
            template: "\n        <ng-container kendoDataPagerLocalizedMessages\n            i18n-firstPage=\"kendo.pager.firstPage|The label for the first page button in the Pager\"\n            firstPage=\"Go to the first page\"\n\n            i18n-previousPage=\"kendo.pager.previousPage|The label for the previous page button in the Pager\"\n            previousPage=\"Go to the previous page\"\n\n            i18n-nextPage=\"kendo.pager.nextPage|The label for the next page button in the Pager\"\n            nextPage=\"Go to the next page\"\n\n            i18n-lastPage=\"kendo.pager.lastPage|The label for the last page button in the Pager\"\n            lastPage=\"Go to the last page\"\n\n            i18n-page=\"kendo.pager.page|The label before the current page number in the Pager\"\n            page=\"Page\"\n\n            i18n-of=\"kendo.pager.of|The label before the total pages number in the Pager\"\n            of=\"of\"\n\n            i18n-pageNumberInputTitle=\"kendo.pager.pageNumberInputTitle|The label for the pager input in the Pager\"\n            pageNumberInputTitle=\"Page Number\"\n\n            i18n-items=\"kendo.pager.items|The label after the total pages number in the Pager\"\n            items=\"items\"\n\n            i18n-itemsPerPage=\"kendo.pager.itemsPerPage|The label for the page size chooser in the Pager\"\n            itemsPerPage=\"items per page\"\n\n            i18n-selectPage=\"kendo.pager.selectPage|The text of the title and aria-label attributes applied to the page chooser in the Pager\"\n            selectPage=\"Select page\"\n         >\n        </ng-container>\n        <ng-container\n            *ngIf=\"template?.templateRef\"\n            [ngTemplateOutlet]=\"template.templateRef\"\n            [ngTemplateOutletContext]=\"templateContext\">\n        </ng-container>\n        <ng-container *ngIf=\"!template?.templateRef\">\n            <kendo-datapager-prev-buttons *ngIf=\"previousNext\"></kendo-datapager-prev-buttons>\n            <kendo-datapager-numeric-buttons\n                *ngIf=\"type === 'numeric' && buttonCount > 0\"\n                [buttonCount]=\"buttonCount\">\n            </kendo-datapager-numeric-buttons>\n            <kendo-datapager-input *ngIf=\"type === 'input'\"></kendo-datapager-input>\n            <kendo-datapager-next-buttons *ngIf=\"previousNext\"></kendo-datapager-next-buttons>\n            <kendo-datapager-info *ngIf='info'></kendo-datapager-info>\n            <kendo-datapager-page-sizes *ngIf=\"pageSizeValues\" [pageSizes]=\"pageSizeValues\"></kendo-datapager-page-sizes>\n        </ng-container>\n        <kendo-resize-sensor></kendo-resize-sensor>\n  "
        }),
        __metadata("design:paramtypes", [PagerContextService,
            ElementRef,
            LocalizationService])
    ], PagerComponent);
    return PagerComponent;
}());

/**
 * @hidden
 */
var LocalizedMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedMessagesDirective, _super);
    function LocalizedMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedMessagesDirective_1 = LocalizedMessagesDirective;
    var LocalizedMessagesDirective_1;
    LocalizedMessagesDirective = LocalizedMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: Messages,
                    useExisting: forwardRef(function () { return LocalizedMessagesDirective_1; })
                }
            ],
            selector: '[kendoDataPagerLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedMessagesDirective);
    return LocalizedMessagesDirective;
}(Messages));

var importedModules = [
    CommonModule,
    NumericTextBoxModule,
    DropDownListModule,
    EventsModule,
    ResizeSensorModule
];
var INTERNAL_COMPONENTS = [
    PagerComponent,
    PagerPrevButtonsComponent,
    PagerNextButtonsComponent,
    PagerNumericButtonsComponent,
    PagerInputComponent,
    PagerInfoComponent,
    PagerPageSizesComponent,
    PagerTemplateDirective,
    LocalizedMessagesDirective,
    CustomMessagesComponent
];
var providers = [
    {
        provide: L10N_PREFIX,
        useValue: 'kendo.pager'
    }
];
/**
 * @hidden
 */
var PagerModule = /** @class */ (function () {
    function PagerModule() {
    }
    PagerModule.exports = function () {
        return [
            PagerComponent,
            PagerPrevButtonsComponent,
            PagerNextButtonsComponent,
            PagerNumericButtonsComponent,
            PagerInputComponent,
            PagerInfoComponent,
            PagerPageSizesComponent,
            PagerTemplateDirective
        ];
    };
    PagerModule = __decorate([
        NgModule({
            declarations: [INTERNAL_COMPONENTS],
            exports: [INTERNAL_COMPONENTS],
            imports: importedModules.slice(),
            providers: [providers]
        })
    ], PagerModule);
    return PagerModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { LocalizedMessagesDirective, Messages, PagerContextService, PagerElementComponent, PreventableEvent, PageSizeChangeEvent, CustomMessagesComponent, PagerPrevButtonsComponent, PagerPageSizesComponent, PagerTemplateDirective, PagerNumericButtonsComponent, PagerNextButtonsComponent, PagerInputComponent, PagerInfoComponent, PagerComponent, PagerModule };
