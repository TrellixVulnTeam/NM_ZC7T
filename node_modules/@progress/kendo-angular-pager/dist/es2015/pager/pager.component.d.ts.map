{"version":3,"file":"pager.component.d.ts","sources":["pager.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy, ElementRef } from '@angular/core';\nimport { PageChangeEvent } from './change-event-args.interface';\nimport { PagerTemplateDirective } from \"./pager-template.directive\";\nimport { ResizeSensorComponent } from \"@progress/kendo-angular-common\";\nimport { PagerContextService } from \"./pager-context.service\";\nimport { PageSizeChangeEvent } from './pagesizechange-event';\nimport { PageSizeItem } from './pagesize-item.interface';\nimport { PagerType } from './common/pager-type';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nexport declare class PagerComponent implements OnChanges, OnInit, OnDestroy {\n    private pagerContext;\n    private element;\n    private localization;\n    resizeSensor: ResizeSensorComponent;\n    template: PagerTemplateDirective;\n    /**\n     * Represents the total number of data items in the collection.\n     */\n    total: number;\n    /**\n     * Defines the number of data items to be skipped.\n     */\n    skip: number;\n    /**\n     * Defines the number of data items per page.\n     */\n    pageSize: number;\n    /**\n     * Sets the maximum numeric buttons count before the buttons are collapsed.\n     */\n    buttonCount: number;\n    /**\n     * Toggles the information about the current page and the total number of records.\n     */\n    info: boolean;\n    /**\n     * Defines the type of the pager.\n     */\n    type: PagerType;\n    /**\n     * Shows a dropdown for selecting the page size.\n     * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.\n     * To customize the list of options, set `pageSizeValues` to an array of the desired values.\n     * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.\n     */\n    pageSizeValues: boolean | Array<number | PageSizeItem>;\n    /**\n     * Toggles the **Previous** and **Next** buttons.\n     */\n    previousNext: boolean;\n    /**\n     * Fires when the current page of the Pager is changed ([see example]({% slug overview_pager %}#toc-basic-usage)).\n     * You have to handle the event yourself and page the data.\n     */\n    pageChange: EventEmitter<PageChangeEvent>;\n    /**\n     * Fires when the page size of the Pager is changed.\n     * You have to handle the event yourself and page the data.\n     * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).\n     */\n    pageSizeChange: EventEmitter<PageSizeChangeEvent>;\n    pagerWrapClass: boolean;\n    pagerClass: boolean;\n    widgetRole: string;\n    readonly dir: string;\n    readonly totalPages: number;\n    readonly currentPage: number;\n    readonly templateContext: any;\n    private subscriptions;\n    private _templateContext;\n    private _pageSizeValues;\n    private direction;\n    constructor(pagerContext: PagerContextService, element: ElementRef, localization: LocalizationService);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    changePage(event: PageChangeEvent): void;\n    /**\n     * @hidden\n     */\n    changePageSize(event: PageSizeChangeEvent): void;\n    /**\n     * @hidden\n     */\n    onPageSizeChange(event: PageSizeChangeEvent): void;\n    private resizeHandler;\n}\n"]}