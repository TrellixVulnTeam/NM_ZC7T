/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy, ElementRef } from '@angular/core';
import { PageChangeEvent } from './change-event-args.interface';
import { PagerTemplateDirective } from "./pager-template.directive";
import { ResizeSensorComponent } from "@progress/kendo-angular-common";
import { PagerContextService } from "./pager-context.service";
import { PageSizeChangeEvent } from './pagesizechange-event';
import { PageSizeItem } from './pagesize-item.interface';
import { PagerType } from './common/pager-type';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import * as ɵngcc0 from '@angular/core';
export declare class PagerComponent implements OnChanges, OnInit, OnDestroy {
    private pagerContext;
    private element;
    private localization;
    resizeSensor: ResizeSensorComponent;
    template: PagerTemplateDirective;
    /**
     * Represents the total number of data items in the collection.
     */
    total: number;
    /**
     * Defines the number of data items to be skipped.
     */
    skip: number;
    /**
     * Defines the number of data items per page.
     */
    pageSize: number;
    /**
     * Sets the maximum numeric buttons count before the buttons are collapsed.
     */
    buttonCount: number;
    /**
     * Toggles the information about the current page and the total number of records.
     */
    info: boolean;
    /**
     * Defines the type of the pager.
     */
    type: PagerType;
    /**
     * Shows a dropdown for selecting the page size.
     * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
     * To customize the list of options, set `pageSizeValues` to an array of the desired values.
     * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
     */
    pageSizeValues: boolean | Array<number | PageSizeItem>;
    /**
     * Toggles the **Previous** and **Next** buttons.
     */
    previousNext: boolean;
    /**
     * Fires when the current page of the Pager is changed ([see example]({% slug overview_pager %}#toc-basic-usage)).
     * You have to handle the event yourself and page the data.
     */
    pageChange: EventEmitter<PageChangeEvent>;
    /**
     * Fires when the page size of the Pager is changed.
     * You have to handle the event yourself and page the data.
     * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
     */
    pageSizeChange: EventEmitter<PageSizeChangeEvent>;
    pagerWrapClass: boolean;
    pagerClass: boolean;
    widgetRole: string;
    readonly dir: string;
    readonly totalPages: number;
    readonly currentPage: number;
    readonly templateContext: any;
    private subscriptions;
    private _templateContext;
    private _pageSizeValues;
    private direction;
    constructor(pagerContext: PagerContextService, element: ElementRef, localization: LocalizationService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    changePage(event: PageChangeEvent): void;
    /**
     * @hidden
     */
    changePageSize(event: PageSizeChangeEvent): void;
    /**
     * @hidden
     */
    onPageSizeChange(event: PageSizeChangeEvent): void;
    private resizeHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PagerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<PagerComponent, "kendo-datapager", ["kendoDataPager"], { "total": "total"; "skip": "skip"; "buttonCount": "buttonCount"; "info": "info"; "type": "type"; "previousNext": "previousNext"; "pageSizeValues": "pageSizeValues"; "pageSize": "pageSize"; }, { "pageChange": "pageChange"; "pageSizeChange": "pageSizeChange"; }, ["template"], never>;
}

//# sourceMappingURL=pager.component.d.ts.map