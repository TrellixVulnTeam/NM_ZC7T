/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __extends, __decorate, __param, __metadata, __assign } from 'tslib';
import { isDevMode, Directive, Optional, TemplateRef, Input, Output, EventEmitter, HostBinding, ViewChild, ElementRef, ContentChild, Component, forwardRef, Injector, Renderer2, NgZone, ChangeDetectorRef, Inject, Injectable, HostListener, ViewChildren, QueryList, NgModule, ViewContainerRef, ContentChildren } from '@angular/core';
import { NgControl, NG_VALUE_ACCESSOR, NG_VALIDATORS, RadioControlValueAccessor } from '@angular/forms';
import { Subscription, fromEvent, interval, merge, BehaviorSubject, Subject } from 'rxjs';
import { take, filter, concatMap, startWith, takeUntil, skip, debounceTime, throttleTime } from 'rxjs/operators';
import { LocalizationService, L10N_PREFIX, RTL, ComponentMessages, MessageService } from '@progress/kendo-angular-l10n';
import { Keys, guid, hasObservers, anyChanged, isDocumentAvailable, KendoInput, isChanged, DraggableModule, EventsModule, ResizeSensorModule, PreventableEvent, closest } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { browser, mobileOS, detectDesktopBrowser, detectMobileOS } from '@progress/kendo-common';
import { IntlService } from '@progress/kendo-angular-intl';
import { CommonModule } from '@angular/common';
import { PopupService, PopupModule } from '@progress/kendo-angular-popup';
import { Color, parseColor, namedColors } from '@progress/kendo-drawing';

/**
 * @hidden
 *
 * Checks if the value is `null` or `undefined`. Falsy values like '', 0, false, NaN, etc. are regarded as present.
 */
var isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
var areSame = function (value1, value2) {
    return value1 === value2 || (value1 === null && value2 === undefined) || (value1 === undefined && value2 === null);
};
/**
 * @hidden
 */
var requiresZoneOnBlur = function (ngControl) { return ngControl &&
    (!ngControl.touched || (ngControl.control && ngControl.control.updateOn === 'blur')); };
/**
 * @hidden
 *
 * Fits the contender number into the specified bounds. If the number is NaN or null, the min is returned.
 *
 * @param contender Represents the number you want to fit into specified bounds.
 * @param min The inclusive lower bound number.
 * @param max The inclusive upper bound number.
 */
var fitIntoBounds = function (contender, min, max) {
    if (!isPresent(contender) || isNaN(contender)) {
        return min;
    }
    return contender <= min ? min : contender >= max ? max : contender;
};
var SIZES = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
var ROUNDNESS = {
    small: 'sm',
    medium: 'md',
    large: 'lg',
    full: 'full'
};
/**
 * @hidden
 *
 * Returns the styling classes to be added and removed
 */
var getStylingClasses = function (componentType, stylingOption, previousValue, newValue) {
    switch (stylingOption) {
        case 'size':
            return {
                toRemove: "k-" + componentType + "-" + SIZES[previousValue],
                toAdd: newValue ? "k-" + componentType + "-" + SIZES[newValue] : null
            };
        case 'rounded':
            return {
                toRemove: "k-rounded-" + ROUNDNESS[previousValue],
                toAdd: newValue ? "k-rounded-" + ROUNDNESS[newValue] : null
            };
        case 'fillMode':
            return {
                toRemove: "k-" + componentType + "-" + previousValue,
                toAdd: newValue ? "k-" + componentType + "-" + newValue : null
            };
        default:
            break;
    }
};

/**
 * @hidden
 */
var MAX_PRECISION = 20;
/**
 * @hidden
 */
var limitPrecision = function (precision) { return Math.min(precision, MAX_PRECISION); };
/**
 * @hidden
 */
var fractionLength = function (value) {
    return (String(value).split('.')[1] || "").length;
};
var maxFractionLength = function (value1, value2) {
    return Math.max(fractionLength(value1), fractionLength(value2));
};
/**
 * @hidden
 */
var toFixedPrecision = function (value, precision) {
    var maxPrecision = limitPrecision(precision);
    return parseFloat(value.toFixed(maxPrecision));
};
/**
 * @hidden
 */
var add = function (value1, value2) {
    var maxPrecision = maxFractionLength(value1, value2);
    return toFixedPrecision(value1 + value2, maxPrecision);
};
/**
 * @hidden
 */
var subtract = function (value1, value2) {
    return add(value1, -value2);
};
/**
 * @hidden
 */
var multiply = function (value1, value2) {
    var maxPrecision = fractionLength(value1) + fractionLength(value2);
    return toFixedPrecision(value1 * value2, maxPrecision);
};
/**
 * @hidden
 */
var divide = function (dividend, divisor) {
    if (divisor === 0) {
        return NaN;
    }
    var power = maxFractionLength(dividend, divisor);
    var correctionValue = Math.pow(10, power);
    return ((correctionValue * dividend) / (correctionValue * divisor));
};
/**
 * @hidden
 */
var remainder = function (dividend, divisor) {
    return Math.abs(subtract(dividend, multiply(divisor, Math.floor(divide(dividend, divisor)))));
};

/**
 * @hidden
 */
var calculateFixedTrackSize = function (_a) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, fixedTickWidth = _a.fixedTickWidth;
    return ((max - min) / smallStep) * fixedTickWidth;
};
/**
 * @hidden
 */
var calculateTicksCount = function (min, max, smallStep) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 0; }
    if (smallStep === void 0) { smallStep = 1; }
    if (smallStep <= 0) {
        throw new Error('Invalid argument: smallStep must be a positive number');
    }
    var adjustedRange = Math.abs(subtract(max, min));
    var adjustedRatio = Math.floor(divide(adjustedRange, smallStep));
    var result = add(adjustedRatio, 1);
    return result;
};
/**
 * @hidden
 */
var calculateValueFromTick = function (index, _a) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, reverse = _a.reverse, vertical = _a.vertical;
    var value = add(min, multiply(index, smallStep));
    return vertical || reverse ? Math.abs(subtract(value, max)) : value;
};
/**
 * @hidden
 */
var calculateHandlePosition = function (_a) {
    var trackWidth = _a.trackWidth, min = _a.min, max = _a.max, reverse = _a.reverse, value = _a.value;
    var step = trackWidth / Math.abs(max - min);
    var pos = isPresent(value) ? step * (value - min) : min;
    if (reverse) {
        pos = trackWidth - pos;
    }
    return Math.floor(pos);
};
/**
 * @hidden
 */
var decreaseValueToStep = function (value, _a, large) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, largeStep = _a.largeStep;
    if (large === void 0) { large = false; }
    var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;
    var stepValue = subtract(value, min);
    var result;
    var stepRemainder = remainder(stepValue, step);
    if (stepRemainder === 0) {
        result = subtract(stepValue, step);
    }
    else {
        result = subtract(stepValue, stepRemainder);
    }
    return limitValue(add(result, min), min, max);
};
/**
 * @hidden
 */
var increaseValueToStep = function (value, _a, large) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, largeStep = _a.largeStep;
    if (large === void 0) { large = false; }
    var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;
    var stepValue = subtract(value, min);
    var stepRemainder = remainder(stepValue, step);
    var result = add(subtract(stepValue, stepRemainder), step);
    return limitValue(add(result, min), min, max);
};
/**
 * @hidden
 */
var isStartHandle = function (dragHandle) { return dragHandle.id.indexOf('k-start-handle') > -1; };
/**
 * @hidden
 */
var snapValue = function (value, options) {
    var smallStep = options.smallStep, min = options.min, max = options.max;
    var limited = limitValue(value, min, max);
    if (value !== limited) {
        return limited;
    }
    var left = decreaseValueToStep(value, options);
    var right = increaseValueToStep(value, options);
    if ((value - min) % smallStep === 0) {
        return value;
    }
    if (right - value <= (right - left) / 2) {
        return right;
    }
    return left;
};
/**
 * @hidden
 */
var trimValue = function (max, min, value) {
    if (value > max) {
        return max;
    }
    if (value < min) {
        return min;
    }
    return value;
};
/**
 * @hidden
 */
var trimValueRange = function (max, min, value) {
    return value ? [trimValue(max, min, value[0]), trimValue(max, min, value[1])] : [min, min];
};
/**
 * @hidden
 */
var identity = function (value) { return value; };
/**
 * @hidden
 */
var isSameRange = function (value1, value2) {
    return areSame(value1[0], value2[0]) && areSame(value1[1], value2[1]);
};
/**
 * @hidden
 */
var elementOffset = function (element) {
    var box = element.getBoundingClientRect();
    var documentElement = document.documentElement;
    return {
        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0),
        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0)
    };
};
/**
 * @hidden
 */
var limitValue = function (value, min, max) {
    return Math.max(Math.min(value, max), min);
};
/**
 * @hidden
 */
var eventValue = function (eventArgs, scaleElement, options) {
    var min = options.min, max = options.max, vertical = options.vertical, rtl = options.rtl;
    var trackOffset = elementOffset(scaleElement);
    var offset = vertical ? eventArgs.pageY - trackOffset.top : eventArgs.pageX - trackOffset.left;
    var scale = (max - min) / (vertical ? scaleElement.clientHeight : scaleElement.clientWidth);
    var offsetValue = offset * scale;
    var value = rtl || vertical ? max - offsetValue : min + offsetValue;
    var stepFractionLength = fractionLength(options.smallStep);
    value = toFixedPrecision(value, stepFractionLength + 1);
    return snapValue(value, options);
};
/**
 * @hidden
 */
var isButton = function (element) {
    return element.className.indexOf('k-button-increase') >= 0 || element.className.indexOf('k-button-decrease') >= 0;
};
/**
 * @hidden
 */
var increment = function (options) {
    return increaseValueToStep(options.value, options);
};
/**
 * @hidden
 */
var decrement = function (options) {
    return decreaseValueToStep(options.value, options);
};
/**
 * @hidden
 */
var incrementLarge = function (options) {
    return increaseValueToStep(options.value, options, true);
};
/**
 * @hidden
 */
var decrementLarge = function (options) {
    return decreaseValueToStep(options.value, options, true);
};
/**
 * @hidden
 */
var validateValue = function (value) {
    if (isDevMode && value && value[0] > value[1]) {
        throw new Error('[RangeSlider] The start value should not be greater than the end value.');
    }
};

/**
 * @hidden
 */
var SliderModelBase = /** @class */ (function () {
    function SliderModelBase(props, wrapper, track, renderer) {
        this.props = props;
        this.wrapper = wrapper;
        this.track = track;
        this.renderer = renderer;
        this.props = props;
        this.wrapper = wrapper;
        this.track = track;
        this.tickSizes = this.getTickSizes();
    }
    SliderModelBase.prototype.resizeTrack = function () {
        var orientation = this.props.vertical ? 'height' : 'width';
        var altOrientation = this.props.vertical ? 'width' : 'height';
        var trackWidth = this.trackWidth();
        this.track.parentElement.style[orientation] = trackWidth + "px";
        this.track.parentElement.style[altOrientation] = '';
    };
    SliderModelBase.prototype.resizeTicks = function (ticksContainer, ticks) {
        var _this = this;
        var dimension = this.props.vertical ? "height" : "width";
        ticks.slice().map(function (tick, index) { return tick.style[dimension] = _this.tickSizes[index] + "px"; });
        if (this.props.vertical) {
            this.adjustPadding(ticksContainer);
        }
    };
    SliderModelBase.prototype.resizeWrapper = function () {
        var dimension = this.props.vertical ? "height" : "width";
        var fixedTrackWidth = calculateFixedTrackSize(this.props);
        var wrapperParentEl = this.wrapper.parentElement;
        if (fixedTrackWidth) {
            wrapperParentEl.style[dimension] = "auto";
        }
    };
    SliderModelBase.prototype.trackWidth = function () {
        if (this.props.fixedTickWidth) {
            return calculateFixedTrackSize(this.props);
        }
        return this.elementSize(this.track.parentElement);
    };
    SliderModelBase.prototype.getTickSizes = function () {
        var _a = this.props, min = _a.min, max = _a.max, smallStep = _a.smallStep;
        var count = calculateTicksCount(min, max, smallStep);
        var trackSize = this.trackWidth();
        var distStep = trackSize / subtract(max, min);
        var result = [];
        var usedSpace = 0;
        var endPoint = 0;
        for (var i = 0; i < count; i++) {
            if (i === 0 || i === count - 1) {
                endPoint += (smallStep / 2) * distStep;
            }
            else {
                endPoint += smallStep * distStep;
            }
            // ensure that the sum of the tick sizes does not exceed the track width
            endPoint = +endPoint.toFixed(2) - 0.01;
            var size = Math.round(endPoint - usedSpace);
            result.push(size);
            usedSpace += size;
        }
        if (usedSpace >= trackSize) {
            result[result.length - 1] -= 1;
        }
        return result;
    };
    SliderModelBase.prototype.adjustPadding = function (ticksContainer) {
        var totalTickSize = this.tickSizes.reduce(function (prev, curr) { return prev + curr; }, 0);
        var trackWidth = this.trackWidth();
        var reminder = trackWidth - totalTickSize;
        if (reminder !== 0) {
            var padding = reminder + this.elementOffset(this.track);
            ticksContainer.style.paddingTop = padding + "px";
        }
    };
    SliderModelBase.prototype.elementOffset = function (element) {
        var vertical = this.props.vertical;
        var style = getComputedStyle(element);
        return parseInt(vertical ? style.bottom : style.left, 10);
    };
    SliderModelBase.prototype.elementSize = function (element) {
        var vertical = this.props.vertical;
        return vertical ? element.clientHeight : element.clientWidth;
    };
    return SliderModelBase;
}());

/**
 * @hidden
 */
var SliderModel = /** @class */ (function (_super) {
    __extends(SliderModel, _super);
    function SliderModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SliderModel.prototype.positionHandle = function (dragHandle) {
        var _a = this.props, max = _a.max, min = _a.min, reverse = _a.reverse, vertical = _a.vertical;
        var position = vertical ? 'bottom' : 'left';
        var trackWidth = this.trackWidth();
        var value = trimValue(max, min, this.props.value);
        this.handlePosition = calculateHandlePosition({
            min: min,
            max: max,
            reverse: reverse,
            value: value,
            trackWidth: trackWidth
        });
        this.renderer.setStyle(dragHandle, position, this.handlePosition + "px");
    };
    SliderModel.prototype.positionSelection = function (selection) {
        var _a = this.props, reverse = _a.reverse, vertical = _a.vertical;
        var dimension = vertical ? 'height' : 'width';
        var size = this.handlePosition;
        if (reverse) {
            size = this.trackWidth() - size;
        }
        this.renderer.setStyle(selection, dimension, size + "px");
    };
    return SliderModel;
}(SliderModelBase));

var UNTOUCHED = 'ng-untouched';
var toClassList = function (classNames) { return String(classNames).trim().split(' '); };
/**
 * @hidden
 */
var hasClass = function (element, className) {
    return Boolean(toClassList(element.className).find(function (name) { return name === className; }));
};
/**
 * @hidden
 */
function invokeElementMethod(element, name) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (element && element.nativeElement) {
        return element.nativeElement[name].apply(element.nativeElement, args);
    }
}
/**
 * @hidden
 */
var isUntouched = function (element) {
    return element && element.nativeElement && hasClass(element.nativeElement, UNTOUCHED);
};
/**
 * @hidden
 */
var containsFocus = function (hostElement, contender) {
    return hostElement && contender && (hostElement === contender || hostElement.contains(contender));
};
/**
 * @hidden
 */
var closest$1 = function (node, predicate) {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};

/**
 * @hidden
 */
var packageMetadata = {
    name: '@progress/kendo-angular-inputs',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1648211916,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * Represents the template for the labels of the Slider.
 * To define the labels template, nest an `<ng-template>` tag with the `kendoSliderLabelTemplate` directive inside
 * the `<kendo-slider>` tag. The template context is passed to the `label` value.
 *
 * @example
 * ```ts-no-run
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *         <kendo-slider [largeStep]="2">
 *           <ng-template kendoSliderLabelTemplate let-value="value">
 *             <b>{{value}}</b>
 *           </ng-template>
 *         </kendo-slider>
 *     `
 * })
 *
 * class AppComponent {
 * }
 *
 * ```
 */
var LabelTemplateDirective = /** @class */ (function () {
    function LabelTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    LabelTemplateDirective = __decorate([
        Directive({
            selector: '[kendoSliderLabelTemplate]'
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [TemplateRef])
    ], LabelTemplateDirective);
    return LabelTemplateDirective;
}());

/**
 * @hidden
 */
var SliderBase = /** @class */ (function () {
    function SliderBase(localizationService, injector, renderer, ngZone, changeDetector, hostElement) {
        var _this = this;
        this.localizationService = localizationService;
        this.injector = injector;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.hostElement = hostElement;
        /**
         * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title
         * for each tick is its Slider value. If you use a callback function, the function accepts an argument
         * that holds the value of the component and returns a string with the new title.
         */
        this.title = identity;
        /**
         * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).
         *
         * The available options are:
         * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.
         * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.
         * * `both`&mdash; (Default) The tick marks are located on both sides of the track.
         * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.
         */
        this.tickPlacement = 'both';
        /**
         * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical
         * ([see example]({% slug orientation_slider %})).
         */
        this.vertical = false;
        /**
         * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * The attribute accepts both integers and floating-point numbers.
         */
        this.min = 0;
        /**
         * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * The attribute accepts both integers and floating-point numbers.
         */
        this.max = 10;
        /**
         * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * Accepts positive values only. Can be an integer or a floating-point number.
         */
        this.smallStep = 1;
        /**
         * Specifies that every n<sup>th</sup> tick will be large and will have a label
         * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).
         * Accepts positive integer values only.
         */
        this.largeStep = null;
        /**
         * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).
         */
        this.disabled = false;
        /**
         * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).
         */
        this.readonly = false;
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the component.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the component is blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.sliderClass = true;
        this.widgetClass = true;
        this.subscriptions = new Subscription();
        /**
         * @hidden
         */
        this.ifEnabled = function (callback, event) {
            if (!_this.isDisabled) {
                callback.call(_this, event);
            }
        };
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(SliderBase.prototype, "horizontalClass", {
        get: function () {
            return !this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderBase.prototype, "verticalClass", {
        get: function () {
            return this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderBase.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    SliderBase.prototype.setDisabledState = function (isDisabled) {
        this.changeDetector.markForCheck();
        this.disabled = isDisabled;
    };
    SliderBase.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.localizationService
            .changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
            _this.sizeComponent();
        }));
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
    };
    Object.defineProperty(SliderBase.prototype, "isDisabled", {
        /**
         * @hidden
         */
        get: function () {
            return this.disabled || this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    SliderBase.prototype.isEmpty = function () {
        return false;
    };
    Object.defineProperty(SliderBase.prototype, "reverse", {
        get: function () {
            return this.localizationService.rtl && !this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderBase.prototype, "keyBinding", {
        get: function () {
            var _a;
            var reverse = this.reverse;
            return _a = {},
                _a[Keys.ArrowLeft] = reverse ? increment : decrement,
                _a[Keys.ArrowRight] = reverse ? decrement : increment,
                _a[Keys.ArrowDown] = decrement,
                _a[Keys.ArrowUp] = increment,
                _a[Keys.PageUp] = incrementLarge,
                _a[Keys.PageDown] = decrementLarge,
                _a[Keys.Home] = function (_a) {
                    var min = _a.min;
                    return min;
                },
                _a[Keys.End] = function (_a) {
                    var max = _a.max;
                    return max;
                },
                _a;
        },
        enumerable: true,
        configurable: true
    });
    SliderBase.prototype.resetStyles = function (elements) {
        var _this = this;
        elements.forEach(function (el) {
            if (el) {
                if (_this.vertical) {
                    _this.renderer.removeStyle(el, 'width');
                    _this.renderer.removeStyle(el, 'left');
                    _this.renderer.removeStyle(el, 'right');
                }
                else {
                    _this.renderer.removeStyle(el, 'height');
                    _this.renderer.removeStyle(el, 'bottom');
                }
                _this.renderer.removeStyle(el, 'padding-top');
            }
        });
    };
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], SliderBase.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderBase.prototype, "tickPlacement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderBase.prototype, "vertical", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "smallStep", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "largeStep", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "fixedTickWidth", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderBase.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderBase.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderBase.prototype, "tabindex", void 0);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], SliderBase.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], SliderBase.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SliderBase.prototype, "valueChange", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], SliderBase.prototype, "direction", void 0);
    __decorate([
        HostBinding('class.k-slider-horizontal'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SliderBase.prototype, "horizontalClass", null);
    __decorate([
        HostBinding('class.k-slider-vertical'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SliderBase.prototype, "verticalClass", null);
    __decorate([
        HostBinding('class.k-slider'),
        __metadata("design:type", Boolean)
    ], SliderBase.prototype, "sliderClass", void 0);
    __decorate([
        HostBinding('class.k-widget'),
        __metadata("design:type", Boolean)
    ], SliderBase.prototype, "widgetClass", void 0);
    __decorate([
        HostBinding('class.k-state-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SliderBase.prototype, "disabledClass", null);
    __decorate([
        ViewChild('wrap', { static: true }),
        __metadata("design:type", ElementRef)
    ], SliderBase.prototype, "wrapper", void 0);
    __decorate([
        ViewChild('track', { static: true }),
        __metadata("design:type", ElementRef)
    ], SliderBase.prototype, "track", void 0);
    __decorate([
        ViewChild('sliderSelection', { static: true }),
        __metadata("design:type", ElementRef)
    ], SliderBase.prototype, "sliderSelection", void 0);
    __decorate([
        ViewChild('ticks', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], SliderBase.prototype, "ticksContainer", void 0);
    __decorate([
        ViewChild('ticks', { static: false }),
        __metadata("design:type", Object)
    ], SliderBase.prototype, "ticks", void 0);
    __decorate([
        ContentChild(LabelTemplateDirective, { static: false }),
        __metadata("design:type", LabelTemplateDirective)
    ], SliderBase.prototype, "labelTemplate", void 0);
    return SliderBase;
}());

var PRESSED = 'k-pressed';
/**
 * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).
 */
var SliderComponent = /** @class */ (function (_super) {
    __extends(SliderComponent, _super);
    function SliderComponent(localization, injector, renderer, ngZone, changeDetector, hostElement) {
        var _this = _super.call(this, localization, injector, renderer, ngZone, changeDetector, hostElement) || this;
        _this.localization = localization;
        _this.injector = injector;
        _this.renderer = renderer;
        _this.ngZone = ngZone;
        _this.changeDetector = changeDetector;
        _this.hostElement = hostElement;
        /**
         * @hidden
         */
        _this.focusableId = "k-" + guid();
        /**
         * Determines if the animation will be played on value change.
         * Regardless of this setting, no animation will be played during the initial rendering.
         */
        _this.animate = true;
        /**
         * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).
         * When `showButtons` is set to `false`, the buttons are not displayed.
         */
        _this.showButtons = true;
        /**
         * The current value of the Slider when it is initially displayed.
         * The component can use either NgModel or the `value` binding but not both of them at the same time.
         */
        _this.value = _this.min;
        _this.focusChangedProgrammatically = false;
        /**
         * @hidden
         */
        _this.onWrapClick = function (args) {
            var target = args.target;
            if (!_this.isDisabled && !(isButton(target) || isButton(target.parentNode))) {
                var value = eventValue(args, _this.track.nativeElement, _this.getProps());
                _this.changeValue(value);
            }
            invokeElementMethod(_this.draghandle, 'focus');
        };
        /**
         * @hidden
         */
        _this.onKeyDown = function (e) {
            var options = _this.getProps();
            var max = options.max, min = options.min;
            var handler = _this.keyBinding[e.keyCode];
            if (_this.isDisabled || !handler) {
                return;
            }
            var value = handler(options);
            _this.changeValue(trimValue(max, min, value));
            e.preventDefault();
        };
        _this.ngChange = function (_) { };
        _this.ngTouched = function () { };
        _this.decreaseValue = function () {
            _this.changeValue(decreaseValueToStep(_this.value, _this.getProps()));
        };
        _this.increaseValue = function () {
            _this.changeValue(increaseValueToStep(_this.value, _this.getProps()));
        };
        _this.handleBlur = function () {
            _this.changeDetector.markForCheck();
            _this.focused = false;
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    if (!_this.focusChangedProgrammatically) {
                        _this.onBlur.emit();
                    }
                });
            }
        };
        return _this;
    }
    SliderComponent_1 = SliderComponent;
    Object.defineProperty(SliderComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "currentValue", {
        /**
         * @hidden
         */
        get: function () {
            return isPresent(this.value) ? this.value.toString() : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Focuses the Slider.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="slider.focus()">Focus</button>
     *  <kendo-slider #slider></kendo-slider>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    SliderComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.focusChangedProgrammatically = true;
            invokeElementMethod(this.draghandle, 'focus');
            this.focusChangedProgrammatically = false;
        }
    };
    /**
     * Blurs the Slider.
     */
    SliderComponent.prototype.blur = function () {
        this.focusChangedProgrammatically = true;
        invokeElementMethod(this.draghandle, 'blur');
        this.handleBlur();
        this.focusChangedProgrammatically = false;
    };
    SliderComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {
            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
                _this.sizeComponent(false);
            });
        }
    };
    SliderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!isDocumentAvailable()) {
            return;
        }
        if (this.showButtons) {
            this.setValueChangeInterval(this.increaseButton.nativeElement, function () { return _this.increaseValue(); });
            this.setValueChangeInterval(this.decreaseButton.nativeElement, function () { return _this.decreaseValue(); });
        }
        this.sizeComponent(false);
        if (this.ticks) {
            this.ticks.tickElements
                .changes
                .subscribe(function () { return _this.sizeComponent(false); });
        }
        this.attachElementEventHandlers();
    };
    SliderComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    Object.defineProperty(SliderComponent.prototype, "incrementMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.incrementTitle || this.localizationService.get('increment');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "decrementMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.decrementTitle || this.localizationService.get('decrement');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "dragHandleMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.dragHandleTitle || this.localizationService.get('dragHandle');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    SliderComponent.prototype.handleDragPress = function (args) {
        if (args.originalEvent) {
            args.originalEvent.preventDefault();
        }
        this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.onHandleDrag = function (args) {
        this.dragging = true;
        this.changeValue(eventValue(args, this.track.nativeElement, this.getProps()));
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.onHandleRelease = function () {
        this.dragging = false; //needed for animation
        this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');
    };
    //ngModel binding
    /**
     * @hidden
     */
    SliderComponent.prototype.writeValue = function (value) {
        this.changeDetector.markForCheck();
        this.value = value;
        this.sizeComponent(this.animate);
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.changeValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.sizeComponent(_this.animate);
                _this.changeDetector.markForCheck();
            });
        }
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.sizeComponent = function (animate) {
        if (!isDocumentAvailable()) {
            return;
        }
        var wrapper = this.wrapper.nativeElement;
        var track = this.track.nativeElement;
        var selectionEl = this.sliderSelection.nativeElement;
        var dragHandleEl = this.draghandle.nativeElement;
        var ticks = this.ticks ? this.ticksContainer.nativeElement : null;
        if (!animate) {
            this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');
        }
        this.resetStyles([track, selectionEl, dragHandleEl, ticks, this.hostElement.nativeElement]);
        var props = this.getProps();
        var model = new SliderModel(props, wrapper, track, this.renderer);
        model.resizeTrack();
        if (this.ticks) { //for case when tickPlacement: none
            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) { return element.nativeElement; }));
        }
        model.positionHandle(dragHandleEl);
        model.positionSelection(selectionEl);
        if (!animate) {
            this.hostElement.nativeElement.getBoundingClientRect();
            this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');
        }
        if (this.fixedTickWidth) {
            model.resizeWrapper();
        }
    };
    Object.defineProperty(SliderComponent.prototype, "focused", {
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "dragging", {
        set: function (value) {
            if (this.isDragged !== value && this.sliderSelection && this.draghandle) {
                var sliderSelection = this.sliderSelection.nativeElement;
                var draghandle = this.draghandle.nativeElement;
                if (value) {
                    this.renderer.addClass(sliderSelection, PRESSED);
                    this.renderer.addClass(draghandle, PRESSED);
                }
                else {
                    this.renderer.removeClass(sliderSelection, PRESSED);
                    this.renderer.removeClass(draghandle, PRESSED);
                }
                this.isDragged = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    SliderComponent.prototype.setValueChangeInterval = function (element, callback) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var mousedown = fromEvent(element, 'mousedown');
            var mouseup = fromEvent(element, 'mouseup');
            var mouseout = fromEvent(element, 'mouseout');
            var subscription = mousedown.pipe(filter(function (e) { return e.button === 0 && !_this.isDisabled; }), concatMap(function () {
                return interval(150).pipe(startWith(-1), takeUntil(merge(mouseup, mouseout)));
            })).subscribe(function () {
                if (!_this.isFocused) {
                    invokeElementMethod(_this.draghandle, 'focus');
                }
                callback();
            });
            _this.subscriptions.add(subscription);
        });
    };
    SliderComponent.prototype.getProps = function () {
        return {
            buttons: this.showButtons,
            disabled: this.disabled,
            fixedTickWidth: this.fixedTickWidth,
            largeStep: this.largeStep,
            max: this.max,
            min: this.min,
            readonly: this.readonly,
            reverse: this.reverse,
            rtl: this.localizationService.rtl,
            smallStep: this.smallStep,
            value: trimValue(this.max, this.min, this.value),
            vertical: this.vertical
        };
    };
    SliderComponent.prototype.attachElementEventHandlers = function () {
        var _this = this;
        var hostElement = this.hostElement.nativeElement;
        var tabbing = false;
        var cursorInsideWrapper = false;
        this.ngZone.runOutsideAngular(function () {
            // focusIn and focusOut are relative to the host element
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {
                if (!_this.isFocused) {
                    _this.ngZone.run(function () {
                        if (!_this.focusChangedProgrammatically) {
                            _this.onFocus.emit();
                        }
                        _this.focused = true;
                    });
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {
                if (!_this.isFocused) {
                    return;
                }
                if (tabbing) {
                    if (args.relatedTarget !== _this.draghandle.nativeElement) {
                        _this.handleBlur();
                    }
                    tabbing = false;
                }
                else {
                    if (!cursorInsideWrapper) {
                        _this.handleBlur();
                    }
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {
                cursorInsideWrapper = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {
                cursorInsideWrapper = false;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {
                if (args.keyCode === Keys.Tab) {
                    tabbing = true;
                }
                else {
                    tabbing = false;
                }
            }));
        });
    };
    var SliderComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderComponent.prototype, "dragHandleTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderComponent.prototype, "incrementTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderComponent.prototype, "animate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderComponent.prototype, "decrementTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderComponent.prototype, "showButtons", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderComponent.prototype, "tabIndex", null);
    __decorate([
        ViewChild('draghandle', { static: true }),
        __metadata("design:type", ElementRef)
    ], SliderComponent.prototype, "draghandle", void 0);
    __decorate([
        ViewChild('decreaseButton', { static: false }),
        __metadata("design:type", ElementRef)
    ], SliderComponent.prototype, "decreaseButton", void 0);
    __decorate([
        ViewChild('increaseButton', { static: false }),
        __metadata("design:type", ElementRef)
    ], SliderComponent.prototype, "increaseButton", void 0);
    SliderComponent = SliderComponent_1 = __decorate([
        Component({
            exportAs: 'kendoSlider',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.slider' },
                { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return SliderComponent_1; }) },
                { provide: KendoInput, useExisting: forwardRef(function () { return SliderComponent_1; }) }
            ],
            selector: 'kendo-slider',
            template: "\n        <ng-container kendoSliderLocalizedMessages\n            i18n-increment=\"kendo.slider.increment|The title of the **Increase** button of the Slider.\"\n            increment=\"increment\"\n            i18n-decrement=\"kendo.slider.decrement|The title of the **Decrease** button of the Slider.\"\n            decrement=\"decrement\"\n            i18n-dragHandle=\"kendo.slider.dragHandle|The title of the drag handle of the Slider.\"\n            dragHandle=\"Drag\"\n        >\n        <div class=\"k-slider-wrap\" #wrap\n            [class.k-slider-buttons]=\"showButtons\"\n            [class.k-slider-topleft]=\"tickPlacement === 'before'\"\n            [class.k-slider-bottomright]=\"tickPlacement === 'after'\"\n            [kendoEventsOutsideAngular]=\"{ click: onWrapClick, keydown: onKeyDown }\"\n            >\n            <button *ngIf=\"showButtons\" type=\"button\" #decreaseButton\n                class=\"k-button-decrease k-button k-button-md k-rounded-full k-button-rectangle k-button-solid k-button-solid-base k-icon-button\"\n                [title]=\"decrementMessage\"\n                [attr.tabindex]=\"-1\"\n                role=\"presentation\">\n                    <span class=\"k-button-icon k-icon\"\n                        [class.k-i-arrow-w]=\"!vertical\"\n                        [class.k-i-arrow-s]=\"vertical\">\n                    </span>\n            </button>\n            <div class=\"k-slider-track-wrap\">\n                <ul kendoSliderTicks\n                    #ticks\n                    *ngIf=\"tickPlacement !== 'none'\"\n                    [tickTitle]=\"title\"\n                    [vertical]=\"vertical\"\n                    [step]=\"smallStep\"\n                    [largeStep]=\"largeStep\"\n                    [min]=\"min\"\n                    [max]=\"max\"\n                    [labelTemplate]=\"labelTemplate?.templateRef\"\n                    [attr.aria-hidden]=\"true\"\n                >\n                </ul>\n                <div #track class=\"k-slider-track\">\n                    <div #sliderSelection class=\"k-slider-selection\">\n                    </div>\n                    <a #draghandle\n                        role=\"slider\"\n                        [attr.aria-valuemin]=\"min\"\n                        [attr.aria-valuemax]=\"max\"\n                        [attr.aria-valuenow]=\"currentValue\"\n                        [attr.aria-valuetext]=\"currentValue\"\n                        [attr.aria-disabled]=\"disabled ? true : undefined\"\n                        [attr.aria-readonly]=\"readonly ? true : undefined\"\n                        [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                        [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                        class=\"k-draghandle\"\n                        [title]=\"dragHandleMessage\"\n                        [attr.tabindex]=\"disabled ? '-1' : tabIndex\"\n                        [id]=\"focusableId\"\n                        kendoDraggable\n                        (kendoPress)=\"ifEnabled(handleDragPress, $event)\"\n                        (kendoDrag)=\"ifEnabled(onHandleDrag, $event)\"\n                        (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                    ></a>\n                </div>\n            </div>\n            <button *ngIf=\"showButtons\" type=\"button\" #increaseButton\n                class=\"k-button-increase k-button k-button-md k-rounded-full k-button-rectangle k-button-solid k-button-solid-base k-icon-button\"\n                [title]=\"incrementMessage\"\n                (click)=\"$event.preventDefault()\"\n                [attr.tabindex]=\"-1\"\n                [attr.aria-label]=\"currentValue\"\n                role=\"presentation\">\n                    <span class=\"k-button-icon k-icon\"\n                        [class.k-i-arrow-e]=\"!vertical\"\n                        [class.k-i-arrow-n]=\"vertical\">\n                    </span>\n            </button>\n            <kendo-resize-sensor (resize)=\"sizeComponent(false)\"></kendo-resize-sensor>\n        </div>\n  "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            Injector,
            Renderer2,
            NgZone,
            ChangeDetectorRef,
            ElementRef])
    ], SliderComponent);
    return SliderComponent;
}(SliderBase));

/**
 * @hidden
 */
var RangeSliderModel = /** @class */ (function (_super) {
    __extends(RangeSliderModel, _super);
    function RangeSliderModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RangeSliderModel.prototype.positionHandle = function (dragHandle) {
        if (!dragHandle.id) {
            return;
        }
        var _a = this.props, max = _a.max, min = _a.min, reverse = _a.reverse, vertical = _a.vertical;
        var position = vertical ? 'bottom' : 'left';
        var trackWidth = this.trackWidth();
        var value = isStartHandle(dragHandle) ? trimValueRange(max, min, this.props.value)[0]
            : trimValueRange(max, min, this.props.value)[1];
        if (isStartHandle(dragHandle)) {
            this.startHandlePosition = calculateHandlePosition({
                min: min,
                max: max,
                reverse: reverse,
                value: value,
                trackWidth: trackWidth
            });
            this.renderer.setStyle(dragHandle, position, this.startHandlePosition + "px");
        }
        else {
            this.endHandlePosition = calculateHandlePosition({
                min: min,
                max: max,
                reverse: reverse,
                value: value,
                trackWidth: trackWidth
            });
            this.renderer.setStyle(dragHandle, position, this.endHandlePosition + "px");
        }
    };
    RangeSliderModel.prototype.positionSelection = function (dragHandle, selection) {
        var _a = this.props, reverse = _a.reverse, vertical = _a.vertical;
        var dimension = vertical ? 'height' : 'width';
        var position = vertical ? 'bottom' : reverse ? 'right' : 'left';
        var size = Math.abs(this.endHandlePosition - this.startHandlePosition);
        var currentSelectionPosition = vertical ? dragHandle.style.bottom : dragHandle.style.left;
        this.renderer.setStyle(selection, dimension, size + "px");
        this.renderer.setStyle(selection, position, reverse ? this.trackWidth() - parseFloat(currentSelectionPosition) + 'px'
            : parseFloat(currentSelectionPosition) + 'px');
    };
    return RangeSliderModel;
}(SliderModelBase));

var PRESSED$1 = 'k-pressed';
/**
 * Represents the [Kendo UI RangeSlider component for Angular]({% slug overview_rangeslider %}).
 */
var RangeSliderComponent = /** @class */ (function (_super) {
    __extends(RangeSliderComponent, _super);
    function RangeSliderComponent(localization, injector, renderer, ngZone, changeDetector, hostElement) {
        var _this = _super.call(this, localization, injector, renderer, ngZone, changeDetector, hostElement) || this;
        _this.localization = localization;
        _this.injector = injector;
        _this.renderer = renderer;
        _this.ngZone = ngZone;
        _this.changeDetector = changeDetector;
        _this.hostElement = hostElement;
        /**
         * @hidden
         */
        _this.startHandleId = "k-start-handle-" + guid();
        /**
         * @hidden
         */
        _this.endHandleId = "k-end-handle-" + guid();
        /**
         * @hidden
         */
        _this.focusableId = _this.startHandleId;
        _this.handleZIndex = 0;
        _this.activeHandle = 'startHandle';
        _this.focusChangedProgrammatically = false;
        /**
         * @hidden
         */
        _this.onWrapClick = function (args) {
            if (!_this.isDisabled) {
                _this.value = _this.value || [_this.min, _this.min];
                var trackValue = eventValue(args, _this.track.nativeElement, _this.getProps());
                var newRangeValue = void 0;
                var _a = newRangeValue = _this.value, startValue = _a[0], endValue = _a[1];
                if (trackValue <= startValue) {
                    newRangeValue = [trackValue, endValue];
                    _this.activeHandle = 'startHandle';
                }
                else if (startValue < trackValue && trackValue < endValue) {
                    if (trackValue < (startValue + endValue) / 2) {
                        newRangeValue = [trackValue, endValue];
                        _this.activeHandle = 'startHandle';
                    }
                    else {
                        newRangeValue = [startValue, trackValue];
                        _this.activeHandle = 'endHandle';
                    }
                }
                else if (trackValue >= endValue) {
                    newRangeValue = [startValue, trackValue];
                    _this.activeHandle = 'endHandle';
                }
                var activeHandle = _this.activeHandle === 'startHandle' ? _this.draghandleStart : _this.draghandleEnd;
                invokeElementMethod(activeHandle, 'focus');
                _this.changeValue(newRangeValue);
            }
        };
        /**
         * @hidden
         */
        _this.onKeyDown = function (e) {
            _this.value = _this.value || [_this.min, _this.min];
            var options = _this.getProps();
            var max = options.max, min = options.min;
            var handler = _this.keyBinding[e.keyCode];
            if (_this.isDisabled || !handler) {
                return;
            }
            _this.renderer.setStyle(e.target, 'zIndex', ++_this.handleZIndex);
            var startHandleIsActive = isStartHandle(e.target);
            var value = handler(__assign({}, options, { value: startHandleIsActive ? _this.value[0] : _this.value[1] }));
            if (startHandleIsActive) {
                if (value > _this.value[1]) {
                    _this.value[1] = value;
                }
            }
            else {
                if (value < _this.value[0]) {
                    _this.value[0] = value;
                }
            }
            var trimmedValue = trimValue(max, min, value);
            var newValue = startHandleIsActive ? [trimmedValue, _this.value[1]]
                : [_this.value[0], trimmedValue];
            _this.changeValue(newValue);
            e.preventDefault();
        };
        _this.ngChange = function (_) { };
        _this.ngTouched = function () { };
        _this.handleBlur = function () {
            _this.changeDetector.markForCheck();
            _this.focused = false;
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    if (!_this.focusChangedProgrammatically) {
                        _this.onBlur.emit();
                    }
                });
            }
        };
        return _this;
    }
    RangeSliderComponent_1 = RangeSliderComponent;
    /**
     * Focuses the RangeSlider.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *     <div>
     *         <button class="k-button" (click)="slider.focus()">Focus</button>
     *     </div>
     *     <kendo-rangeslider #slider></kendo-rangeslider>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    RangeSliderComponent.prototype.focus = function () {
        this.focusChangedProgrammatically = true;
        invokeElementMethod(this.draghandleStart, 'focus');
        this.focusChangedProgrammatically = false;
    };
    /**
     * Blurs the RangeSlider.
     */
    RangeSliderComponent.prototype.blur = function () {
        this.focusChangedProgrammatically = true;
        var activeHandle = this.activeHandle === 'startHandle' ? this.draghandleStart : this.draghandleEnd;
        invokeElementMethod(activeHandle, 'blur');
        this.handleBlur();
        this.focusChangedProgrammatically = false;
    };
    RangeSliderComponent.prototype.ngOnInit = function () {
        if (!this.value) {
            this.value = [this.min, this.max];
        }
        _super.prototype.ngOnInit.call(this);
    };
    RangeSliderComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {
            if (changes.value && changes.value.currentValue) {
                validateValue(changes.value.currentValue);
            }
            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
                _this.sizeComponent();
            });
        }
    };
    RangeSliderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!isDocumentAvailable()) {
            return;
        }
        this.sizeComponent();
        if (this.ticks) {
            this.ticks.tickElements
                .changes
                .subscribe(function () { return _this.sizeComponent(); });
        }
        this.attachElementEventHandlers();
    };
    RangeSliderComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    Object.defineProperty(RangeSliderComponent.prototype, "valueText", {
        /**
         * @hidden
         */
        get: function () {
            return this.value ? this.value[0] + " - " + this.value[1] : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.handleDragPress = function (args) {
        if (args.originalEvent) {
            args.originalEvent.preventDefault();
        }
        var target = args.originalEvent.target;
        this.draggedHandle = target;
        this.renderer.setStyle(target, 'zIndex', ++this.handleZIndex);
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.onHandleDrag = function (args) {
        var _this = this;
        this.value = this.value || [this.min, this.min];
        var target = args.originalEvent.target;
        var lastCoords = this.draggedHandle.getBoundingClientRect();
        this.lastHandlePosition = { x: lastCoords.left, y: lastCoords.top };
        this.dragging = { value: true, target: target };
        var mousePos = {
            x: (args.pageX - 0.5) - (lastCoords.width / 2),
            y: (args.pageY - (lastCoords.width / 2))
        };
        var left = mousePos.x < this.lastHandlePosition.x;
        var right = mousePos.x > this.lastHandlePosition.x;
        var up = mousePos.y > this.lastHandlePosition.y;
        var moveStartHandle = function () { return _this.changeValue([eventValue(args, _this.track.nativeElement, _this.getProps()), _this.value[1]]); };
        var moveEndHandle = function () { return _this.changeValue([_this.value[0], eventValue(args, _this.track.nativeElement, _this.getProps())]); };
        var moveBothHandles = function () { return _this.changeValue([eventValue(args, _this.track.nativeElement, _this.getProps()), eventValue(args, _this.track.nativeElement, _this.getProps())]); };
        var activeStartHandle = isStartHandle(this.draggedHandle);
        var vertical = this.vertical;
        var horizontal = !vertical;
        var forward = (vertical && up) || (this.reverse ? horizontal && right : horizontal && left);
        var incorrectValueState = this.value[0] > this.value[1];
        if (this.value[0] === this.value[1] || incorrectValueState) {
            if (forward) {
                activeStartHandle ? moveStartHandle() : moveBothHandles();
            }
            else {
                activeStartHandle ? moveBothHandles() : moveEndHandle();
            }
        }
        else {
            activeStartHandle ? moveStartHandle() : moveEndHandle();
        }
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.onHandleRelease = function (args) {
        this.dragging = { value: false, target: args.originalEvent.target }; //needed for animation
        this.draggedHandle = undefined;
    };
    //ngModel binding
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.writeValue = function (value) {
        validateValue(value);
        this.value = value;
        this.sizeComponent();
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.changeValue = function (value) {
        var _this = this;
        if (!this.value || !isSameRange(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                if (_this.value) {
                    _this.valueChange.emit(value);
                }
                _this.sizeComponent();
            });
        }
    };
    /**
     * @hidden
     */
    RangeSliderComponent.prototype.sizeComponent = function () {
        if (!isDocumentAvailable()) {
            return;
        }
        var wrapper = this.wrapper.nativeElement;
        var track = this.track.nativeElement;
        var selectionEl = this.sliderSelection.nativeElement;
        var dragHandleStartEl = this.draghandleStart.nativeElement;
        var dragHandleEndEl = this.draghandleEnd.nativeElement;
        var ticks = this.ticks ? this.ticksContainer.nativeElement : null;
        this.resetStyles([track, selectionEl, dragHandleStartEl, dragHandleEndEl, ticks, this.hostElement.nativeElement]);
        var props = this.getProps();
        var model = new RangeSliderModel(props, wrapper, track, this.renderer);
        model.resizeTrack();
        if (this.ticks) { //for case when tickPlacement: none
            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) { return element.nativeElement; }));
        }
        model.positionHandle(dragHandleStartEl);
        model.positionHandle(dragHandleEndEl);
        model.positionSelection(dragHandleStartEl, selectionEl);
        if (this.fixedTickWidth) {
            model.resizeWrapper();
        }
    };
    Object.defineProperty(RangeSliderComponent.prototype, "isDisabled", {
        /**
         * @hidden
         */
        get: function () {
            return this.disabled || this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    RangeSliderComponent.prototype.isEmpty = function () {
        return false;
    };
    Object.defineProperty(RangeSliderComponent.prototype, "focused", {
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeSliderComponent.prototype, "dragging", {
        set: function (data) {
            if (this.isDragged !== data.value && this.sliderSelection && this.draghandleStart && this.draghandleEnd) {
                var sliderSelection = this.sliderSelection.nativeElement;
                var draghandle = data.target;
                if (data.value) {
                    this.renderer.addClass(sliderSelection, PRESSED$1);
                    this.renderer.addClass(draghandle, PRESSED$1);
                }
                else {
                    this.renderer.removeClass(sliderSelection, PRESSED$1);
                    this.renderer.removeClass(draghandle, PRESSED$1);
                }
                this.isDragged = data.value;
            }
        },
        enumerable: true,
        configurable: true
    });
    RangeSliderComponent.prototype.getProps = function () {
        return {
            disabled: this.disabled,
            fixedTickWidth: this.fixedTickWidth,
            largeStep: this.largeStep,
            max: this.max,
            min: this.min,
            readonly: this.readonly,
            reverse: this.reverse,
            rtl: this.localizationService.rtl,
            smallStep: this.smallStep,
            value: trimValueRange(this.max, this.min, this.value),
            vertical: this.vertical,
            buttons: false
        };
    };
    RangeSliderComponent.prototype.attachElementEventHandlers = function () {
        var _this = this;
        var hostElement = this.hostElement.nativeElement;
        var tabbing = false;
        var cursorInsideWrapper = false;
        this.ngZone.runOutsideAngular(function () {
            // focusIn and focusOut are relative to the host element
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {
                if (!_this.isFocused) {
                    _this.ngZone.run(function () {
                        if (!_this.focusChangedProgrammatically) {
                            _this.onFocus.emit();
                        }
                        _this.focused = true;
                    });
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {
                if (!_this.isFocused) {
                    return;
                }
                if (tabbing) {
                    if (args.relatedTarget !== _this.draghandleStart.nativeElement && args.relatedTarget !== _this.draghandleEnd.nativeElement) {
                        _this.handleBlur();
                    }
                    tabbing = false;
                }
                else {
                    if (!cursorInsideWrapper) {
                        _this.handleBlur();
                    }
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {
                cursorInsideWrapper = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {
                cursorInsideWrapper = false;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {
                if (args.keyCode === Keys.Tab) {
                    tabbing = true;
                }
                else {
                    tabbing = false;
                }
            }));
        });
    };
    var RangeSliderComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], RangeSliderComponent.prototype, "value", void 0);
    __decorate([
        ViewChild('draghandleStart', { static: true }),
        __metadata("design:type", ElementRef)
    ], RangeSliderComponent.prototype, "draghandleStart", void 0);
    __decorate([
        ViewChild('draghandleEnd', { static: true }),
        __metadata("design:type", ElementRef)
    ], RangeSliderComponent.prototype, "draghandleEnd", void 0);
    RangeSliderComponent = RangeSliderComponent_1 = __decorate([
        Component({
            exportAs: 'kendoRangeSlider',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.rangeslider' },
                { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return RangeSliderComponent_1; }) },
                { provide: KendoInput, useExisting: forwardRef(function () { return RangeSliderComponent_1; }) }
            ],
            selector: 'kendo-rangeslider',
            template: "\n        <ng-container kendoSliderLocalizedMessages\n            i18n-dragHandleStart=\"kendo.rangeslider.dragHandleStart|The title of the **Start** drag handle of the Slider.\"\n            dragHandleStart=\"Drag\"\n            i18n-dragHandleEnd=\"kendo.rangeslider.dragHandleEnd|The title of the **End** drag handle of the Slider.\"\n            dragHandleEnd=\"Drag\"\n        >\n\n        <div class=\"k-slider-wrap\" #wrap\n            [class.k-slider-topleft]=\"tickPlacement === 'before'\"\n            [class.k-slider-bottomright]=\"tickPlacement === 'after'\"\n            [kendoEventsOutsideAngular]=\"{ click: onWrapClick, keydown: onKeyDown }\"\n            >\n            <div class=\"k-slider-track-wrap\">\n                <ul kendoSliderTicks\n                    #ticks\n                    *ngIf=\"tickPlacement !== 'none'\"\n                    [tickTitle]=\"title\"\n                    [vertical]=\"vertical\"\n                    [step]=\"smallStep\"\n                    [largeStep]=\"largeStep\"\n                    [min]=\"min\"\n                    [max]=\"max\"\n                    [labelTemplate]=\"labelTemplate?.templateRef\"\n                    [attr.aria-hidden]=\"true\"\n                >\n                </ul>\n                <div #track class=\"k-slider-track\">\n                    <div #sliderSelection class=\"k-slider-selection\">\n                    </div>\n                    <a #draghandleStart\n                        role=\"slider\"\n                        [id]=\"startHandleId\"\n                        [attr.tabindex]=\"disabled ? undefined : tabindex\"\n                        [attr.aria-valuemin]=\"min\"\n                        [attr.aria-valuemax]=\"max\"\n                        [attr.aria-valuenow]=\"value ? value[0] : null\"\n                        [attr.aria-valuetext]=\"valueText\"\n                        [attr.aria-disabled]=\"disabled ? true : undefined\"\n                        [attr.aria-readonly]=\"readonly ? true : undefined\"\n                        [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                        [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                        class=\"k-draghandle\"\n                        [title]=\"textFor('dragHandleStart')\"\n                        kendoDraggable\n                        (kendoPress)=\"ifEnabled(handleDragPress ,$event)\"\n                        (kendoDrag)=\"ifEnabled(onHandleDrag ,$event)\"\n                        (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                    ></a>\n                    <a #draghandleEnd\n                        role=\"slider\"\n                        [id]=\"endHandleId\"\n                        [attr.tabindex]=\"disabled ? undefined : tabindex\"\n                        [attr.aria-valuemin]=\"min\"\n                        [attr.aria-valuemax]=\"max\"\n                        [attr.aria-valuenow]=\"value ? value[1] : null\"\n                        [attr.aria-valuetext]=\"valueText\"\n                        [attr.aria-disabled]=\"disabled ? true : undefined\"\n                        [attr.aria-readonly]=\"readonly ? true : undefined\"\n                        [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                        [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                        class=\"k-draghandle\"\n                        [title]=\"textFor('dragHandleEnd')\"\n                        kendoDraggable\n                        (kendoPress)=\"ifEnabled(handleDragPress ,$event)\"\n                        (kendoDrag)=\"ifEnabled(onHandleDrag ,$event)\"\n                        (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                    ></a>\n                </div>\n            </div>\n            <kendo-resize-sensor (resize)=\"sizeComponent()\"></kendo-resize-sensor>\n        </div>\n  "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            Injector,
            Renderer2,
            NgZone,
            ChangeDetectorRef,
            ElementRef])
    ], RangeSliderComponent);
    return RangeSliderComponent;
}(SliderBase));

var FOCUSED = 'k-focus';
/**
 * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).
 */
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(renderer, hostElement, localizationService, injector, changeDetector, ngZone) {
        var _this = this;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.localizationService = localizationService;
        this.injector = injector;
        this.changeDetector = changeDetector;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).
         */
        this.disabled = false;
        /**
         * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).
         */
        this.readonly = false;
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.initialized = false;
        this.hostClickSubscription = new Subscription;
        this._checked = false;
        this._size = 'medium';
        this._trackRounded = 'full';
        this._thumbRounded = 'full';
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        /**
         * @hidden
         */
        this.handleFocus = function () {
            if (_this.isFocused) {
                return;
            }
            _this.focused = true;
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function (event) {
            var relatedTarget = event && event.relatedTarget;
            if (_this.hostElement.nativeElement.contains(relatedTarget)) {
                return;
            }
            _this.changeDetector.markForCheck();
            _this.focused = false;
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.onBlur.emit();
                });
            }
        };
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
        this.keyDownHandler = this.keyDownHandler.bind(this);
        this.clickHandler = this.clickHandler.bind(this);
    }
    SwitchComponent_1 = SwitchComponent;
    Object.defineProperty(SwitchComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        /**
         * Sets the value of the Switch when it is initially displayed.
         */
        set: function (value) {
            this.setHostClasses(value);
            this._checked = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * Specifies the width and height of the Switch.
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "thumbRounded", {
        get: function () {
            return this._thumbRounded;
        },
        /**
         * Specifies the border radius of the Switch thumb.
         *
         * The possible values are:
         * * `'full'` (default)
         * * `'small'`
         * * `'medium'`
         * * `'large'`
         * * `null`
         */
        set: function (thumbRounded) {
            this.handleThumbClasses(thumbRounded);
            this._thumbRounded = thumbRounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "trackRounded", {
        get: function () {
            return this._trackRounded;
        },
        /**
         * Specifies the border radius of the Switch track.
         *
         * The possible values are:
         * * `'full'` (default)
         * * `'small'`
         * * `'medium'`
         * * `'large'`
         * * `null`
         */
        set: function (trackRounded) {
            this.handleTrackClasses(trackRounded);
            this._trackRounded = trackRounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ieClass", {
        get: function () {
            return browser && browser.msie;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "onLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.onLabel || this.localizationService.get('on');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "offLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.offLabel || this.localizationService.get('off');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "isEnabled", {
        get: function () {
            return !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    SwitchComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.hostElement) {
            var wrapper = this.hostElement.nativeElement;
            this.renderer.removeAttribute(wrapper, "tabindex");
        }
        this.localizationChangeSubscription = this.localizationService
            .changes
            .pipe(skip(1))
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
        this.control = this.injector.get(NgControl, null);
        this.ngZone.onStable.pipe(take(1)).subscribe(function () { return _this.initialized = true; });
    };
    SwitchComponent.prototype.ngAfterViewInit = function () {
        var wrapper = this.hostElement.nativeElement;
        this.attachHostClickHandler();
        if (!this.checked && !wrapper.classList.contains('k-switch-off')) {
            this.renderer.addClass(wrapper, 'k-switch-off');
        }
        this.handleClasses(this.size, 'size');
        this.handleTrackClasses(this.trackRounded);
        this.handleThumbClasses(this.thumbRounded);
    };
    SwitchComponent.prototype.ngOnDestroy = function () {
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
        if (this.hostClickSubscription) {
            this.hostClickSubscription.unsubscribe();
        }
    };
    /**
     * Focuses the Switch.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    SwitchComponent.prototype.focus = function () {
        if (!this.track) {
            return;
        }
        this.track.nativeElement.focus();
    };
    /**
     * Blurs the Switch.
     */
    SwitchComponent.prototype.blur = function () {
        if (!this.track) {
            return;
        }
        this.track.nativeElement.blur();
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    SwitchComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.changeDetector.markForCheck();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.writeValue = function (value) {
        this.checked = value === null ? false : value;
        this.changeDetector.markForCheck();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.keyDownHandler = function (e) {
        var keyCode = e.keyCode;
        if (this.isEnabled && (keyCode === Keys.Space || keyCode === Keys.Enter)) {
            this.changeValue(!this.checked);
            e.preventDefault();
        }
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.clickHandler = function () {
        if (this.isEnabled) {
            this.changeValue(!this.checked);
        }
    };
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    SwitchComponent.prototype.isEmpty = function () {
        return false;
    };
    SwitchComponent.prototype.changeValue = function (value) {
        var _this = this;
        if (this.checked !== value) {
            this.ngZone.run(function () {
                _this.checked = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
    };
    Object.defineProperty(SwitchComponent.prototype, "focused", {
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var wrapper = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(wrapper, FOCUSED);
                }
                else {
                    this.renderer.removeClass(wrapper, FOCUSED);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    SwitchComponent.prototype.attachHostClickHandler = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.hostClickSubscription.add(_this.renderer.listen(_this.hostElement.nativeElement, 'click', _this.clickHandler));
        });
    };
    SwitchComponent.prototype.setHostClasses = function (value) {
        var wrapper = this.hostElement.nativeElement;
        if (value) {
            this.renderer.removeClass(wrapper, 'k-switch-off');
            this.renderer.addClass(wrapper, 'k-switch-on');
        }
        else {
            this.renderer.removeClass(wrapper, 'k-switch-on');
            this.renderer.addClass(wrapper, 'k-switch-off');
        }
    };
    SwitchComponent.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('switch', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    SwitchComponent.prototype.handleTrackClasses = function (value) {
        var elem = this.hostElement.nativeElement;
        var track = this.track.nativeElement;
        var classes = getStylingClasses('switch', 'rounded', this.trackRounded, value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
            this.renderer.removeClass(track, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
            this.renderer.addClass(track, classes.toAdd);
        }
    };
    SwitchComponent.prototype.handleThumbClasses = function (value) {
        var thumb = this.thumb.nativeElement;
        var classes = getStylingClasses('switch', 'rounded', this.thumbRounded, value);
        if (classes.toRemove) {
            this.renderer.removeClass(thumb, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(thumb, classes.toAdd);
        }
    };
    var SwitchComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SwitchComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SwitchComponent.prototype, "onLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SwitchComponent.prototype, "offLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SwitchComponent.prototype, "checked", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SwitchComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SwitchComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SwitchComponent.prototype, "tabindex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], SwitchComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], SwitchComponent.prototype, "thumbRounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], SwitchComponent.prototype, "trackRounded", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SwitchComponent.prototype, "tabIndex", null);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "valueChange", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], SwitchComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('class.k-ie'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "ieClass", null);
    __decorate([
        HostBinding('attr.aria-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "ariaDisabled", null);
    __decorate([
        HostBinding('attr.aria-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "ariaReadonly", null);
    __decorate([
        HostBinding('class.k-switch'),
        __metadata("design:type", Boolean)
    ], SwitchComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "disabledClass", null);
    __decorate([
        ViewChild('track', { static: true }),
        __metadata("design:type", Object)
    ], SwitchComponent.prototype, "track", void 0);
    __decorate([
        ViewChild('thumb', { static: true }),
        __metadata("design:type", Object)
    ], SwitchComponent.prototype, "thumb", void 0);
    SwitchComponent = SwitchComponent_1 = __decorate([
        Component({
            exportAs: 'kendoSwitch',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.switch' },
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return SwitchComponent_1; }) /* tslint:disable-line */
                },
                {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return SwitchComponent_1; })
                }
            ],
            selector: 'kendo-switch',
            template: "\n        <ng-container kendoSwitchLocalizedMessages\n            i18n-on=\"kendo.switch.on|The **On** label of the Switch.\"\n            on=\"ON\"\n            i18n-off=\"kendo.switch.off|The **Off** label of the Switch.\"\n            off=\"OFF\"\n        >\n\n        <span\n            #track\n            class=\"k-switch-track\"\n            [id]=\"focusableId\"\n            role=\"switch\"\n            [style.transitionDuration]=\"initialized ? '200ms' : '0ms'\"\n            [attr.aria-checked]=\"checked\"\n            [attr.tabindex]=\"(disabled ? undefined : tabIndex)\"\n            [kendoEventsOutsideAngular]=\"{ keydown: keyDownHandler, focus: handleFocus, blur: handleBlur }\"\n        >\n            <span class=\"k-switch-label-on\" [attr.aria-hidden]=\"true\" >{{onLabelMessage}}</span>\n            <span class=\"k-switch-label-off\" [attr.aria-hidden]=\"true\">{{offLabelMessage}}</span>\n        </span>\n        <span\n            class=\"k-switch-thumb-wrap\"\n            tabindex=\"-1\"\n            [style.transitionDuration]=\"initialized ? '200ms' : '0ms'\" [kendoEventsOutsideAngular]=\"{\n                keydown: keyDownHandler,\n                focus: handleFocus,\n                blur: handleBlur\n            }\">\n            <span #thumb class=\"k-switch-thumb\"></span>\n        </span>\n  "
        }),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef,
            LocalizationService,
            Injector,
            ChangeDetectorRef,
            NgZone])
    ], SwitchComponent);
    return SwitchComponent;
}());

/**
 * Represents the [Kendo UI TextBox directive]({% slug overview_textbox %}) for the Inputs components for Angular.
 * Used to style the textbox of any `input` element.
 *
 * @example
 * ```ts-no-run
 * <input kendoTextBox />
 * <input kendoTextBox type="email" />
 * <input kendoTextBox type="password" />
 * ```
 */
var TextBoxDirective = /** @class */ (function () {
    function TextBoxDirective(renderer, inputElement, ngZone) {
        this.renderer = renderer;
        this.inputElement = inputElement;
        this.ngZone = ngZone;
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.onFocus = new EventEmitter();
        /**
         * @hidden
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.autoFillStart = new EventEmitter();
        /**
         * @hidden
         */
        this.autoFillEnd = new EventEmitter();
        this.listeners = [];
    }
    TextBoxDirective_1 = TextBoxDirective;
    Object.defineProperty(TextBoxDirective.prototype, "value", {
        /**
         * @hidden
         */
        get: function () {
            return this.inputElement.nativeElement.value;
        },
        /**
         * @hidden
         */
        set: function (text) {
            if (!this.inputElement) {
                return;
            }
            this.inputElement.nativeElement.value = (text === undefined || text === null) ? '' : text;
            this.onValueChange.emit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxDirective.prototype, "id", {
        get: function () {
            return this.inputElement.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    TextBoxDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var input = this.inputElement.nativeElement;
        this.listeners = [
            this.renderer.listen(input, 'focus', function () { return _this.onFocus.emit(); }),
            this.renderer.listen(input, 'blur', function () { return _this.onBlur.emit(); })
        ];
        this.ngZone.runOutsideAngular(function () {
            _this.renderer.listen(input, 'animationstart', function (e) {
                if (e.animationName === 'autoFillStart') {
                    _this.autoFillStart.emit();
                }
                else if (e.animationName === 'autoFillEnd') {
                    _this.autoFillEnd.emit();
                }
            });
        });
    };
    TextBoxDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
    };
    var TextBoxDirective_1;
    __decorate([
        HostBinding('class.k-textbox'),
        HostBinding('class.k-input'),
        HostBinding('class.k-input-md'),
        HostBinding('class.k-rounded-md'),
        HostBinding('class.k-input-solid'),
        __metadata("design:type", Boolean)
    ], TextBoxDirective.prototype, "hostClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextBoxDirective.prototype, "value", null);
    TextBoxDirective = TextBoxDirective_1 = __decorate([
        Directive({
            selector: 'input[kendoTextBox]',
            providers: [{
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return TextBoxDirective_1; })
                }]
        }),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef,
            NgZone])
    ], TextBoxDirective);
    return TextBoxDirective;
}());

/**
 * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).
 * Provides floating labels to `textarea` elements.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
var TextAreaDirective = /** @class */ (function () {
    function TextAreaDirective(renderer, element, zone, changeDetector, injector, rtl) {
        this.renderer = renderer;
        this.element = element;
        this.zone = zone;
        this.changeDetector = changeDetector;
        this.injector = injector;
        this.elementClasses = true;
        this.autofillClass = true;
        /**
         * Fires each time the textarea value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Specifies if the `textarea` element will resize its height automatically
         * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).
         *
         * @default false
         */
        this.autoSize = false;
        /**
         * @hidden
         */
        this.onFocus = new EventEmitter();
        /**
         * @hidden
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.autoFillStart = new EventEmitter();
        /**
         * @hidden
         */
        this.autoFillEnd = new EventEmitter();
        this.listeners = [];
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    TextAreaDirective_1 = TextAreaDirective;
    Object.defineProperty(TextAreaDirective.prototype, "id", {
        get: function () {
            return this.element.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.element.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TextAreaDirective.prototype.writeValue = function (value) {
        this.elementValue = value;
        this.resize();
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.setDisabledState = function (isDisabled) {
        this.setElementProperty('disabled', isDisabled);
    };
    TextAreaDirective.prototype.ngOnInit = function () {
        var _this = this;
        var element = this.element.nativeElement;
        this.zone.runOutsideAngular(function () {
            _this.listeners = [
                _this.renderer.listen(element, 'focus', _this.handleFocus.bind(_this)),
                _this.renderer.listen(element, 'blur', _this.handleBlur.bind(_this)),
                _this.renderer.listen(element, 'animationstart', function (e) {
                    if (e.animationName === 'autoFillStart') {
                        _this.autoFillStart.emit();
                    }
                    else if (e.animationName === 'autoFillEnd') {
                        _this.autoFillEnd.emit();
                    }
                })
            ];
            if (isDocumentAvailable() && _this.autoSize) {
                _this.resizeSubscription = fromEvent(window, 'resize')
                    .pipe((debounceTime(50)))
                    .subscribe(function () { return _this.resize(); });
            }
            _this.inputSubscription = fromEvent(element, 'input')
                .subscribe(_this.handleInput.bind(_this));
        });
        this.control = this.injector.get(NgControl, null);
    };
    TextAreaDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var element = this.element.nativeElement;
        if (changes.value) {
            this.elementValue = this.value;
        }
        if (changes.autoSize) {
            if (this.autoSize) {
                this.initialHeight = element.offsetHeight;
                this.renderer.setStyle(element, 'resize', 'none');
            }
            else {
                this.renderer.setStyle(element, 'overflow-y', 'auto');
                this.renderer.setStyle(element, 'resize', 'both');
                element.style.height = this.initialHeight + "px";
            }
        }
        this.zone.onStable.pipe(take(1)).subscribe(function () { return _this.resize(); });
    };
    TextAreaDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
        if (this.inputSubscription) {
            this.inputSubscription.unsubscribe();
        }
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    };
    Object.defineProperty(TextAreaDirective.prototype, "elementValue", {
        get: function () {
            if (this.element) {
                return this.element.nativeElement.value;
            }
            return '';
        },
        set: function (value) {
            this.setElementProperty('value', (value === undefined || value === null) ? '' : value);
        },
        enumerable: true,
        configurable: true
    });
    TextAreaDirective.prototype.setElementProperty = function (name, value) {
        if (this.element) {
            this.renderer.setProperty(this.element.nativeElement, name, value);
        }
    };
    TextAreaDirective.prototype.resize = function () {
        if (!this.autoSize) {
            return;
        }
        var element = this.element.nativeElement;
        this.renderer.setStyle(element, 'overflow-y', 'hidden');
        element.style.height = this.initialHeight + "px";
        var scrollHeight = element.scrollHeight;
        if (scrollHeight > this.initialHeight) {
            element.style.height = scrollHeight + "px";
        }
    };
    TextAreaDirective.prototype.handleInput = function () {
        var _this = this;
        var value = this.elementValue;
        this.value = value;
        if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {
            this.zone.run(function () {
                _this.ngChange(value);
                _this.onValueChange.emit(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
        this.resize();
    };
    TextAreaDirective.prototype.handleFocus = function () {
        var _this = this;
        if (hasObservers(this.onFocus)) {
            this.zone.run(function () {
                _this.onFocus.emit();
            });
        }
    };
    TextAreaDirective.prototype.handleBlur = function () {
        var _this = this;
        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {
            this.zone.run(function () {
                _this.ngTouched();
                _this.onBlur.emit();
                _this.changeDetector.markForCheck();
            });
        }
    };
    var TextAreaDirective_1;
    __decorate([
        HostBinding('class.k-textarea'),
        HostBinding('class.k-input'),
        HostBinding('class.k-input-md'),
        HostBinding('class.k-rounded-md'),
        HostBinding('class.k-input-solid'),
        __metadata("design:type", Boolean)
    ], TextAreaDirective.prototype, "elementClasses", void 0);
    __decorate([
        HostBinding('class.k-autofill'),
        __metadata("design:type", Boolean)
    ], TextAreaDirective.prototype, "autofillClass", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], TextAreaDirective.prototype, "direction", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextAreaDirective.prototype, "valueChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextAreaDirective.prototype, "autoSize", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextAreaDirective.prototype, "value", void 0);
    TextAreaDirective = TextAreaDirective_1 = __decorate([
        Directive({
            providers: [{
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return TextAreaDirective_1; }),
                    multi: true
                }, {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return TextAreaDirective_1; })
                }],
            selector: 'textarea[kendoTextArea]'
        }),
        __param(5, Optional()), __param(5, Inject(RTL)),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef,
            NgZone,
            ChangeDetectorRef,
            Injector, Boolean])
    ], TextAreaDirective);
    return TextAreaDirective;
}());

/**
 * @hidden
 */
var createMaxValidator = function (maxValue) {
    return function (c) {
        if (!isPresent(maxValue) || !isPresent(c.value) || c.value <= maxValue) {
            return null;
        }
        return {
            maxError: {
                maxValue: maxValue,
                value: c.value
            }
        };
    };
};

/**
 * @hidden
 */
var createMinValidator = function (minValue) {
    return function (c) {
        if (!isPresent(minValue) || !isPresent(c.value) || c.value >= minValue) {
            return null;
        }
        return {
            minError: {
                minValue: minValue,
                value: c.value
            }
        };
    };
};

/**
 * @hidden
 */
var MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-min';
/**
 * @hidden
 */
var MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-max';
/**
 * @hidden
 */
var POINT = ".";
/**
 * @hidden
 */
var INITIAL_SPIN_DELAY = 500;
/**
 * @hidden
 */
var SPIN_DELAY = 50;
/**
 * @hidden
 */
var EXPONENT_REGEX = /[eE][\-+]?([0-9]+)/;

/**
 * @hidden
 */
var numericRegex = function (options) {
    var autoCorrect = options.autoCorrect, decimals = options.decimals, min = options.min;
    var separator = options.separator;
    if (separator === POINT) {
        separator = '\\' + separator;
    }
    var signPattern = autoCorrect && min !== null && min >= 0 ? '' : '-?';
    var numberPattern;
    if (decimals === 0) {
        numberPattern = '\\d*';
    }
    else {
        numberPattern = "(?:(?:\\d+(" + separator + "\\d*)?)|(?:" + separator + "\\d*))?";
    }
    return new RegExp("^" + signPattern + numberPattern + "$");
};
/**
 * @hidden
 */
var decimalPart = function (value) {
    return value >= 0 ? Math.floor(value) : Math.ceil(value);
};
/**
 * @hidden
 */
var noop = function (_) { }; // tslint:disable-line:no-empty
/**
 * @hidden
 */
var defined = function (value) {
    return typeof value !== 'undefined';
};
/**
 * @hidden
 */
var isNumber = function (value) {
    return !isNaN(value) && value !== null;
};
/**
 * @hidden
 */
function pad(value, digits) {
    var count = digits - String(value).length;
    var result = value;
    if (count > 0) {
        var padString = new Array(count + 1).join("0");
        result = parseFloat(value + padString);
    }
    return result;
}
/**
 * @hidden
 */
var getDeltaFromMouseWheel = function (e) {
    var delta = 0;
    if (e.wheelDelta) {
        delta = e.wheelDelta / 120;
        delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
    }
    else if (e.detail) {
        delta = Math.round(-e.detail / 3);
    }
    return delta;
};
/**
 * @hidden
 */
var getCaretPosition = function (element) { return element.selectionStart; };
/**
 * @hidden
 */
var extractSignificantNumericChars = function (formattedString, separator) {
    var significantCharacters = separator + "0123456789-";
    return formattedString.split('').reduce(function (acc, curr) { return significantCharacters.includes(curr) ? ++acc : acc; }, 0);
};
/**
 * @hidden
 */
var isRightClick = function (event) {
    var isRightClickIE = event.button && event.button === 2;
    var isRightClickOther = event.which && event.which === 3;
    return isRightClickIE || isRightClickOther;
};

/**
 * @hidden
 */
var ArrowDirection;
(function (ArrowDirection) {
    ArrowDirection[ArrowDirection["Down"] = -1] = "Down";
    ArrowDirection[ArrowDirection["None"] = 0] = "None";
    ArrowDirection[ArrowDirection["Up"] = 1] = "Up";
})(ArrowDirection || (ArrowDirection = {}));

var PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];
var PARSABLE_DEFAULTS = {
    decimals: null,
    max: null,
    min: null,
    step: 1
};
var FOCUSED$1 = 'k-focus';
/**
 * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).
 */
var NumericTextBoxComponent = /** @class */ (function () {
    function NumericTextBoxComponent(intl, renderer, localizationService, injector, ngZone, changeDetector, hostElement) {
        var _this = this;
        this.intl = intl;
        this.renderer = renderer;
        this.localizationService = localizationService;
        this.injector = injector;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).
         */
        this.disabled = false;
        /**
         * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).
         */
        this.readonly = false;
        /**
         * Sets the title of the `input` element of the NumericTextBox.
         */
        this.title = '';
        /**
         * Specifies whether the value will be auto-corrected based on the minimum and maximum values
         * ([see example]({% slug precision_numerictextbox %})).
         */
        this.autoCorrect = false;
        /**
         * Specifies the number of decimals that the user can enter when the input is focused
         * ([see example]({% slug precision_numerictextbox %})).
         */
        this.decimals = null;
        /**
         * Specifies the value that is used to increment or decrement the component value
         * ([see example]({% slug predefinedsteps_numerictextbox %})).
         */
        this.step = 1;
        /**
         * Specifies whether the **Up** and **Down** spin buttons will be rendered
         * ([see example]({% slug spinbuttons_numerictextbox %})).
         */
        this.spinners = true;
        /**
         * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.
         *
         * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`
         * to `false`, the built-in Angular validators will be executed.
         */
        this.rangeValidation = true;
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Determines whether the value of the NumericTextBox will be changed via scrolling. Defaults to `true`.
         *
         * @default true
         */
        this.changeValueOnScroll = true;
        /**
         * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.
         */
        this.selectOnFocus = true;
        /**
         * Specifies the value of the NumericTextBox
         * ([see example]({% slug formats_numerictextbox %})).
         */
        this.value = null;
        /**
         * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         */
        this.ArrowDirection = ArrowDirection;
        /**
         * @hidden
         */
        this.arrowDirection = ArrowDirection.None;
        this.hostClasses = true;
        this.inputValue = '';
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this._format = "n2";
        this.isPasted = false;
        this.mouseDown = false;
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        this.ngChange = noop;
        this.ngTouched = noop;
        this.ngValidatorChange = noop;
        this.domEvents = [];
        /**
         * @hidden
         */
        this.increasePress = function (e) {
            _this.arrowPress(ArrowDirection.Up, e);
        };
        /**
         * @hidden
         */
        this.decreasePress = function (e) {
            _this.arrowPress(ArrowDirection.Down, e);
        };
        /**
         * @hidden
         */
        this.releaseArrow = function () {
            clearTimeout(_this.spinTimeout);
            if (_this.arrowDirection !== ArrowDirection.None) {
                _this.arrowDirection = ArrowDirection.None;
                _this.changeDetector.detectChanges();
            }
        };
        /**
         * @hidden
         */
        this.handlePaste = function () {
            _this.isPasted = true;
        };
        /**
         * @hidden
         */
        this.handleInput = function () {
            var input = _this.numericInput.nativeElement;
            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd, inputValue = input.value;
            if (_this.pressedKey === Keys.NumpadDecimal) {
                inputValue = _this.replaceNumpadDotValue();
            }
            if (_this.isPasted) {
                inputValue = _this.formatInputValue(_this.intl.parseNumber(inputValue));
            }
            if (!_this.isValid(inputValue)) {
                input.value = _this.inputValue;
                _this.setSelection(selectionStart - 1, selectionEnd - 1);
                return;
            }
            var parsedValue = _this.intl.parseNumber(inputValue);
            var value = _this.restrictDecimals(parsedValue);
            if (_this.autoCorrect) {
                var limited = _this.limitInputValue(value);
                value = limited.value;
                selectionStart = limited.selectionStart;
                selectionEnd = limited.selectionEnd;
            }
            if (parsedValue !== value || _this.hasTrailingZeros(inputValue) || !_this.focused) {
                _this.setInputValue(value);
                _this.setSelection(selectionStart, selectionEnd);
            }
            else {
                _this.inputValue = inputValue;
            }
            if (_this.isPasted) {
                input.value = _this.inputValue;
            }
            _this.updateValue(value);
            _this.previousSelection = null;
            _this.isPasted = false;
        };
        /**
         * @hidden
         */
        this.handleDragEnter = function () {
            if (!_this.focused && !_this.isDisabled) {
                _this.setInputValue(_this.value, true);
            }
        };
        /**
         * @hidden
         */
        this.handleMouseDown = function () {
            _this.mouseDown = true;
        };
        /**
         * @hidden
         */
        this.handleFocus = function () {
            if (!_this.focused) {
                _this.focused = true;
                if (!_this.isDisabled) {
                    var shouldSelectAll_1 = _this.selectOnFocus || !_this.mouseDown;
                    _this.ngZone.runOutsideAngular(function () {
                        setTimeout(function () {
                            if (shouldSelectAll_1) {
                                _this.selectAll();
                            }
                            else {
                                _this.selectCaret();
                            }
                        }, 0);
                    });
                }
            }
            _this.mouseDown = false;
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.changeDetector.markForCheck();
            _this.focused = false;
            //blur is thrown before input when dragging the input text in IE
            if (_this.inputValue !== _this.elementValue) {
                _this.handleInput();
            }
            _this.setInputValue();
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.onBlur.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleKeyDown = function (e) {
            if (_this.isDisabled) {
                return;
            }
            var step;
            if (e.keyCode === Keys.ArrowDown) {
                step = -1;
            }
            else if (e.keyCode === Keys.ArrowUp) {
                step = 1;
            }
            if (step && _this.step) {
                e.preventDefault();
                _this.addStep(step);
            }
            var input = _this.numericInput.nativeElement;
            _this.previousSelection = {
                end: input.selectionEnd,
                start: input.selectionStart
            };
            _this.pressedKey = e.keyCode;
        };
        /**
         * @hidden
         */
        this.handleWheel = function (e) {
            if (_this.focused && !_this.isDisabled && _this.changeValueOnScroll) {
                e.preventDefault();
                var delta = getDeltaFromMouseWheel(e);
                _this.addStep(delta);
            }
        };
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    NumericTextBoxComponent_1 = NumericTextBoxComponent;
    Object.defineProperty(NumericTextBoxComponent.prototype, "format", {
        /**
         * Specifies the number format which is used when the NumericTextBox is not focused
         * ([see example]({% slug formats_numerictextbox %})).
         * If `format` is set to `null` or `undefined`, the default format will be used.
         */
        get: function () {
            var format = this._format;
            return format !== null && format !== undefined ? format : 'n2';
        },
        set: function (value) {
            this._format = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies padding of the NumericTextBox internal input element
         * ([see example]({% slug appearance_numerictextbox %}#toc-size)).
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the NumericTextBox
         * ([see example]({% slug appearance_numerictextbox %}#toc-rounded)).
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        /**
         * The fillMode property specifies the background and border styles of the NumericTextBox
         * ([see example]({% slug appearance_numerictextbox %}#toc-fillMode)).
         * The possible values are:
         * * `'flat'`
         * * `'solid'` (default)
         * * `'outline'`
         * * `null`
         */
        set: function (fillMode) {
            this.handleClasses(fillMode, 'fillMode');
            this._fillMode = fillMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "disableClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    NumericTextBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions = this.localizationService
            .changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
        this.ngZone.runOutsideAngular(function () {
            _this.domEvents.push(_this.renderer.listen(_this.hostElement.nativeElement, 'mousewheel', _this.handleWheel.bind(_this)));
            _this.domEvents.push(_this.renderer.listen(_this.hostElement.nativeElement, 'DOMMouseScroll', _this.handleWheel.bind(_this)));
        });
    };
    NumericTextBoxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var stylingInputs = ['size', 'rounded', 'fillMode'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.ngOnChanges = function (changes) {
        if (anyChanged(PARSABLE_OPTIONS, changes, false)) {
            this.parseOptions(PARSABLE_OPTIONS.filter(function (option) { return changes[option]; }));
        }
        this.verifySettings();
        if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {
            this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;
            this.ngValidatorChange();
        }
        if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {
            delete this.numericRegex;
        }
        if (anyChanged(['value', 'format'], changes, false)) {
            this.verifyValue(this.value);
            this.value = this.restrictModelValue(this.value);
            if (!this.focused || (this.intl.parseNumber(this.elementValue) !== this.value)) {
                this.setInputValue();
            }
        }
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        clearTimeout(this.spinTimeout);
        this.domEvents.forEach(function (unbindHandler) { return unbindHandler(); });
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.validate = function (control) {
        return this.minValidateFn(control) || this.maxValidateFn(control);
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.registerOnValidatorChange = function (fn) {
        this.ngValidatorChange = fn;
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.writeValue = function (value) {
        this.verifyValue(value);
        var restrictedValue = this.restrictModelValue(value);
        this.value = restrictedValue;
        this.setInputValue();
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    NumericTextBoxComponent.prototype.setDisabledState = function (isDisabled) {
        this.changeDetector.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * Focuses the NumericTextBox.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="numerictextbox.focus()">Focus NumericTextBox</button>
     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    NumericTextBoxComponent.prototype.focus = function () {
        invokeElementMethod(this.numericInput, 'focus');
    };
    /**
     * Blurs the NumericTextBox.
     */
    NumericTextBoxComponent.prototype.blur = function () {
        invokeElementMethod(this.numericInput, 'blur');
    };
    /**
     * Notifies the `NumericTextBoxComponent` that the input value should be changed.
     * Can be used to update the input after setting the component properties directly.
     */
    NumericTextBoxComponent.prototype.notifyValueChange = function () {
        this.setInputValue();
    };
    Object.defineProperty(NumericTextBoxComponent.prototype, "incrementTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('increment');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "decrementTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('decrement');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "decimalSeparator", {
        get: function () {
            var numberSymbols = this.intl.numberSymbols();
            return numberSymbols.decimal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "elementValue", {
        get: function () {
            return this.numericInput.nativeElement.value;
        },
        set: function (value) {
            this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var wrap = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(wrap, FOCUSED$1);
                }
                else {
                    this.renderer.removeClass(wrap, FOCUSED$1);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "hasDecimals", {
        get: function () {
            return this.decimals !== null && this.decimals >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "isDisabled", {
        get: function () {
            return this.disabled || this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    NumericTextBoxComponent.prototype.arrowPress = function (direction, e) {
        e.preventDefault();
        if (this.isDisabled || isRightClick(e)) {
            return;
        }
        if (!mobileOS) {
            this.focused = true;
            this.focus();
        }
        if (this.arrowDirection !== direction) {
            this.arrowDirection = direction;
            this.changeDetector.detectChanges();
        }
        if (this.step) {
            this.spin(direction, INITIAL_SPIN_DELAY);
        }
        else {
            this.setInputValue();
        }
    };
    NumericTextBoxComponent.prototype.updateValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
    };
    NumericTextBoxComponent.prototype.replaceNumpadDotValue = function () {
        var value = this.inputValue || "";
        if (this.previousSelection) {
            var input = this.numericInput.nativeElement;
            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd;
            var _a = this.previousSelection, start = _a.start, end = _a.end;
            input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);
            this.setSelection(selectionStart, selectionEnd);
        }
        return value;
    };
    NumericTextBoxComponent.prototype.isValid = function (value) {
        if (!this.numericRegex) {
            this.numericRegex = numericRegex({
                autoCorrect: this.autoCorrect,
                decimals: this.decimals,
                min: this.min,
                separator: this.decimalSeparator
            });
        }
        return this.numericRegex.test(value);
    };
    NumericTextBoxComponent.prototype.spin = function (step, timeout) {
        var _this = this;
        clearTimeout(this.spinTimeout);
        this.spinTimeout = window.setTimeout(function () {
            _this.spin(step, SPIN_DELAY);
        }, timeout);
        this.addStep(step);
    };
    NumericTextBoxComponent.prototype.addStep = function (step) {
        var value = add(this.value || 0, this.step * step);
        value = this.limitValue(value);
        value = this.restrictDecimals(value);
        this.setInputValue(value);
        this.updateValue(value);
    };
    NumericTextBoxComponent.prototype.setSelection = function (start, end) {
        if (this.focused) {
            invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);
        }
    };
    NumericTextBoxComponent.prototype.limitValue = function (value) {
        var result = value;
        if (!this.isInRange(value)) {
            if (isNumber(this.max) && value > this.max) {
                result = this.max;
            }
            if (isNumber(this.min) && value < this.min) {
                result = this.min;
            }
        }
        return result;
    };
    NumericTextBoxComponent.prototype.limitInputValue = function (value) {
        var _a = this.numericInput.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd, enteredValue = _a.value;
        var limitedValue = value;
        var selectToEnd = false;
        if (!this.isInRange(value)) {
            var lengthChange = enteredValue.length - String(this.inputValue).length;
            var _b = this, min = _b.min, max = _b.max;
            var hasMax = isNumber(max);
            var hasMin = isNumber(min);
            var padLimit = void 0, replaceNext = void 0;
            var correctedValue = value;
            if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {
                return {
                    selectionEnd: selectionEnd,
                    selectionStart: selectionStart,
                    value: null
                };
            }
            if (hasMax && value > max) {
                if (value > 0) {
                    replaceNext = true;
                }
                else {
                    padLimit = max;
                }
            }
            else if (hasMin && value < min) {
                if (value > 0) {
                    padLimit = min;
                }
                else {
                    replaceNext = true;
                }
            }
            if (padLimit) {
                var paddedValue = this.tryPadValue(value, padLimit);
                if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {
                    correctedValue = paddedValue;
                    selectToEnd = true;
                }
            }
            else if (replaceNext) {
                if (this.inputValue && selectionStart !== enteredValue.length) {
                    correctedValue = parseFloat(enteredValue.substr(0, selectionStart) +
                        enteredValue.substr(selectionStart + lengthChange));
                }
            }
            limitedValue = this.limitValue(correctedValue);
            selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection &&
                (this.previousSelection.end - this.previousSelection.start + lengthChange) > 0;
        }
        return {
            selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd,
            selectionStart: selectionStart,
            value: limitedValue
        };
    };
    NumericTextBoxComponent.prototype.tryPadValue = function (value, limit) {
        var limitLength = String(Math.floor(limit)).length;
        var zeroPadded = pad(value, limitLength);
        var zeroPaddedNext = pad(value, limitLength + 1);
        var result;
        if (this.isInRange(zeroPadded)) {
            result = zeroPadded;
        }
        else if (this.isInRange(zeroPaddedNext)) {
            result = zeroPaddedNext;
        }
        return result;
    };
    NumericTextBoxComponent.prototype.isInRange = function (value) {
        return !isNumber(value) || ((!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max));
    };
    NumericTextBoxComponent.prototype.restrictModelValue = function (value) {
        var result = this.restrictDecimals(value, true);
        if (this.autoCorrect && this.limitValue(result) !== result) {
            result = null;
        }
        return result;
    };
    NumericTextBoxComponent.prototype.restrictDecimals = function (value, round) {
        var result = value;
        if (value && this.hasDecimals) {
            var decimals = this.decimals;
            var stringValue = String(value);
            if (round || EXPONENT_REGEX.test(stringValue)) {
                result = toFixedPrecision(value, decimals);
            }
            else {
                var parts = stringValue.split(POINT);
                var fraction = parts[1];
                if (fraction && fraction.length > decimals) {
                    fraction = fraction.substr(0, decimals);
                    result = parseFloat("" + parts[0] + POINT + fraction);
                }
            }
        }
        return result;
    };
    NumericTextBoxComponent.prototype.formatInputValue = function (value) {
        var stringValue = String(value);
        var exponentMatch = EXPONENT_REGEX.exec(stringValue);
        if (exponentMatch) {
            stringValue = value.toFixed(limitPrecision(parseInt(exponentMatch[1], 10)));
        }
        return stringValue.replace(POINT, this.decimalSeparator);
    };
    NumericTextBoxComponent.prototype.formatValue = function (value, focused) {
        var formattedValue;
        if (value === null || !defined(value) || value === '') {
            formattedValue = '';
        }
        else if (focused && !this.readonly) {
            formattedValue = this.formatInputValue(value);
        }
        else {
            formattedValue = this.intl.formatNumber(value, this.format);
        }
        return formattedValue;
    };
    NumericTextBoxComponent.prototype.setInputValue = function (value, focused) {
        if (value === void 0) { value = this.value; }
        if (focused === void 0) { focused = this.focused; }
        var formattedValue = this.formatValue(value, focused);
        this.elementValue = formattedValue;
        this.inputValue = formattedValue;
    };
    NumericTextBoxComponent.prototype.verifySettings = function () {
        if (!isDevMode()) {
            return;
        }
        if (this.min !== null && this.max !== null && this.min > this.max) {
            throw new Error("The max value should be bigger than the min. See " + MIN_DOC_LINK + " and " + MAX_DOC_LINK + ".");
        }
    };
    NumericTextBoxComponent.prototype.verifyValue = function (value) {
        if (isDevMode() && value && typeof value !== 'number') {
            throw new Error("The NumericTextBox component requires value of type Number and " + JSON.stringify(value) + " was set.");
        }
    };
    NumericTextBoxComponent.prototype.parseOptions = function (options) {
        for (var idx = 0; idx < options.length; idx++) {
            var name_1 = options[idx];
            var value = this[name_1];
            if (typeof value === 'string') {
                var parsed = parseFloat(value);
                var valid = !isNaN(parsed);
                if (isDevMode() && !valid && value !== '') {
                    throw new Error('The NumericTextBox component requires value of type Number or a String representing ' +
                        ("a number for the " + name_1 + " property and " + JSON.stringify(value) + " was set."));
                }
                this[name_1] = valid ? parsed : PARSABLE_DEFAULTS[name_1];
            }
        }
    };
    NumericTextBoxComponent.prototype.intlChange = function () {
        delete this.numericRegex;
        if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {
            this.setInputValue();
        }
    };
    NumericTextBoxComponent.prototype.hasTrailingZeros = function (inputValue) {
        if (this.hasDecimals && this.focused) {
            var fraction = inputValue.split(this.decimalSeparator)[1];
            return fraction && fraction.length > this.decimals && fraction.lastIndexOf('0') === fraction.length - 1;
        }
    };
    NumericTextBoxComponent.prototype.selectAll = function () {
        this.setInputValue();
        this.setSelection(0, this.inputValue.length);
    };
    NumericTextBoxComponent.prototype.selectCaret = function () {
        var caretPosition = getCaretPosition(this.numericInput.nativeElement);
        var formattedValue = this.elementValue;
        var partialValue = formattedValue.substring(0, caretPosition);
        this.setInputValue();
        if (partialValue.length) {
            var significantCharsInFormattedValue = extractSignificantNumericChars(partialValue, this.decimalSeparator);
            var adjustedSignificantChars = this.adjustSignificantChars(formattedValue, significantCharsInFormattedValue);
            this.setSelection(adjustedSignificantChars, adjustedSignificantChars);
        }
        else {
            this.setSelection(0, 0);
        }
    };
    NumericTextBoxComponent.prototype.numberOfLeadingZeroes = function (formattedValue) {
        var separatorIndex = formattedValue.indexOf(this.decimalSeparator);
        var matchedLeadingZeroes = formattedValue.match(/^[^1-9]*?(0+)/);
        if (matchedLeadingZeroes) {
            var lengthOfMatch = matchedLeadingZeroes[0].length;
            var lengthOfLeadingZeroesMatch = matchedLeadingZeroes[1].length;
            return lengthOfMatch === separatorIndex ? lengthOfLeadingZeroesMatch - 1 : lengthOfLeadingZeroesMatch;
        }
        return 0;
    };
    NumericTextBoxComponent.prototype.adjustSignificantChars = function (formattedValue, significantChars) {
        var leadingZeroes = this.numberOfLeadingZeroes(formattedValue);
        if (leadingZeroes > 0) {
            return Math.max(0, significantChars - leadingZeroes);
        }
        return significantChars;
    };
    NumericTextBoxComponent.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('input', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    var NumericTextBoxComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NumericTextBoxComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NumericTextBoxComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "autoCorrect", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NumericTextBoxComponent.prototype, "format", null);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "decimals", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NumericTextBoxComponent.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "step", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "spinners", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "rangeValidation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "tabindex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NumericTextBoxComponent.prototype, "tabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "changeValueOnScroll", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "selectOnFocus", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NumericTextBoxComponent.prototype, "maxlength", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NumericTextBoxComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NumericTextBoxComponent.prototype, "rounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NumericTextBoxComponent.prototype, "fillMode", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NumericTextBoxComponent.prototype, "valueChange", void 0);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], NumericTextBoxComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], NumericTextBoxComponent.prototype, "onBlur", void 0);
    __decorate([
        ViewChild('numericInput', { static: true }),
        __metadata("design:type", ElementRef)
    ], NumericTextBoxComponent.prototype, "numericInput", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], NumericTextBoxComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], NumericTextBoxComponent.prototype, "disableClass", null);
    __decorate([
        HostBinding('class.k-input'),
        HostBinding('class.k-numerictextbox'),
        __metadata("design:type", Boolean)
    ], NumericTextBoxComponent.prototype, "hostClasses", void 0);
    NumericTextBoxComponent = NumericTextBoxComponent_1 = __decorate([
        Component({
            exportAs: 'kendoNumericTextBox',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.numerictextbox' },
                { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }), multi: true },
                { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }), multi: true },
                { provide: KendoInput, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }) }
            ],
            selector: 'kendo-numerictextbox',
            template: "\n        <ng-container kendoNumericTextBoxLocalizedMessages\n            i18n-increment=\"kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\"\n            increment=\"Increase value\"\n            i18n-decrement=\"kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\"\n            decrement=\"Decrease value\"\n        >\n        </ng-container>\n            <input\n            role=\"spinbutton\"\n            class=\"k-input-inner\"\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            [id]=\"focusableId\"\n            [attr.aria-valuemin]=\"min\"\n            [attr.aria-valuemax]=\"max\"\n            [attr.aria-valuenow]=\"value\"\n            [attr.title]=\"title\"\n            [attr.placeholder]=\"placeholder\"\n            [attr.maxLength]=\"maxlength\"\n            [tabindex]=\"tabIndex\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                mousedown: handleMouseDown,\n                dragenter: handleDragEnter,\n                keydown: handleKeyDown,\n                input: handleInput,\n                focus: handleFocus,\n                blur: handleBlur,\n                paste: handlePaste\n            }\"\n            #numericInput />\n            <span\n                class=\"k-input-spinner k-spin-button\" *ngIf=\"spinners\"\n                [kendoEventsOutsideAngular]=\"{ mouseup: releaseArrow, mouseleave: releaseArrow }\"\n            >\n               <button\n                    type=\"button\"\n                    [kendoEventsOutsideAngular]=\"{ mousedown: increasePress }\"\n                    [attr.aria-hidden]=\"true\"\n                    [attr.aria-label]=\"incrementTitle\"\n                    [title]=\"incrementTitle\"\n                    [class.k-active]=\"arrowDirection === ArrowDirection.Up\"\n                    class=\"k-spinner-increase k-button k-icon-button k-button-solid k-button-solid-base\"\n                    tabindex=\"-1\"\n                >\n                    <span class=\"k-button-icon k-icon k-i-arrow-n\"></span>\n               </button>\n               <button\n                    type=\"button\"\n                    [kendoEventsOutsideAngular]=\"{ mousedown: decreasePress }\"\n                    [attr.aria-hidden]=\"true\"\n                    [attr.aria-label]=\"decrementTitle\"\n                    [title]=\"decrementTitle\"\n                    [class.k-active]=\"arrowDirection === ArrowDirection.Down\"\n                    class=\"k-spinner-decrease k-button k-icon-button k-button-solid k-button-solid-base\"\n                    tabindex=\"-1\"\n               >\n                    <span class=\"k-button-icon k-icon k-i-arrow-s\"></span>\n               </button>\n            </span>\n      "
        }),
        __metadata("design:paramtypes", [IntlService,
            Renderer2,
            LocalizationService,
            Injector,
            NgZone,
            ChangeDetectorRef,
            ElementRef])
    ], NumericTextBoxComponent);
    return NumericTextBoxComponent;
}());

/**
 * @hidden
 */
var NumericTextBoxMessages = /** @class */ (function (_super) {
    __extends(NumericTextBoxMessages, _super);
    function NumericTextBoxMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NumericTextBoxMessages.prototype, "decrement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NumericTextBoxMessages.prototype, "increment", void 0);
    return NumericTextBoxMessages;
}(ComponentMessages));

/**
 * Custom component messages override default component messages.
 */
var NumericTextBoxCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(NumericTextBoxCustomMessagesComponent, _super);
    function NumericTextBoxCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    NumericTextBoxCustomMessagesComponent_1 = NumericTextBoxCustomMessagesComponent;
    Object.defineProperty(NumericTextBoxCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var NumericTextBoxCustomMessagesComponent_1;
    NumericTextBoxCustomMessagesComponent = NumericTextBoxCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: NumericTextBoxMessages,
                    useExisting: forwardRef(function () { return NumericTextBoxCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-numerictextbox-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], NumericTextBoxCustomMessagesComponent);
    return NumericTextBoxCustomMessagesComponent;
}(NumericTextBoxMessages));

/**
 * @hidden
 */
var ResultType;
(function (ResultType) {
    ResultType[ResultType["Literal"] = 0] = "Literal";
    ResultType[ResultType["Mask"] = 1] = "Mask";
    ResultType[ResultType["Undefined"] = 2] = "Undefined";
})(ResultType || (ResultType = {}));
/**
 * @hidden
 */
var Result = /** @class */ (function () {
    function Result(value, rest, type) {
        if (type === void 0) { type = ResultType.Undefined; }
        this.value = value;
        this.rest = rest;
        this.type = type;
    }
    //map :: Functor f => f a ~> (a -> b) -> f b
    Result.prototype.map = function (fn) {
        return new Result(fn(this.value), this.rest);
    };
    //chain :: Chain m => m a ~> (a -> m b) -> m b
    Result.prototype.chain = function (fn) {
        return fn(this.value, this.rest);
    };
    Result.prototype.fold = function (s, _ /*we don't need it*/) {
        return s(this.value, this.rest);
    };
    Result.prototype.concat = function (r) {
        return this.map(function (vs, _) { return r.chain(function (v, __) { return vs.concat([v]); }); });
    };
    Result.prototype.toString = function () {
        return "Result({ value: '" + this.value + "', rest: " + this.rest + " })";
    };
    return Result;
}());

/**
 * @hidden
 */
var Stream = /** @class */ (function () {
    function Stream(input, control) {
        if (input === void 0) { input = []; }
        if (control === void 0) { control = []; }
        this.input = input;
        this.control = control;
        this.inputCursor = 0;
        this.controlCursor = 0;
    }
    Stream.prototype.eof = function () {
        return this.inputCursor >= this.input.length;
    };
    // Get the first value from the input.
    Stream.prototype.next = function () {
        return {
            char: this.input[this.inputCursor++],
            control: this.control[this.controlCursor++]
        };
    };
    Stream.prototype.peek = function () {
        return {
            char: this.input[this.inputCursor],
            control: this.control[this.controlCursor]
        };
    };
    Stream.prototype.eat_input = function () {
        this.inputCursor++;
    };
    Stream.prototype.eat_control = function () {
        this.controlCursor++;
    };
    Stream.prototype.eat = function () {
        this.inputCursor++;
        this.controlCursor++;
    };
    return Stream;
}());

var toArray = function (value) { return (value || '').split(''); };
var ESCAPE_CHARACTER = '\\';
/**
 * @hidden
 */
var Parser = /** @class */ (function () {
    function Parser(parse) {
        this.parse = parse;
    }
    Parser.prototype.run = function (input, control) {
        if (control === void 0) { control = ''; }
        if (input instanceof Stream) {
            return this.parse(input);
        }
        else {
            return this.parse(new Stream(toArray(input), toArray(control)));
        }
    };
    //map :: Functor f => f a ~> (a -> b) -> f b
    Parser.prototype.map = function (f) {
        var _this = this;
        return new Parser(function (stream) { return _this.parse(stream).map(f); });
    };
    //chain :: Chain m => m a ~> (a -> m b) -> m b
    Parser.prototype.chain = function (f) {
        var _this = this;
        return new Parser(function (stream) { return _this.parse(stream).chain(function (v, s) { return f(v).run(s); }); });
    };
    Parser.prototype.isLiteral = function (c) {
        return this.run(c).type === ResultType.Literal;
    };
    return Parser;
}());
/**
 * @hidden
 */
var mask = function (_a) {
    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
    return function (rule) { return new Parser(function (stream) {
        while (!stream.eof()) {
            var _a = stream.peek(), char = _a.char, control = _a.control;
            if (char === control && control === prompt) {
                stream.eat();
                return new Result(prompt, stream, ResultType.Mask);
            }
            if (rule.test(char)) {
                stream.eat();
                return new Result(char, stream, ResultType.Mask);
            }
            if (char === promptPlaceholder) {
                stream.eat();
                return new Result(prompt, stream, ResultType.Mask);
            }
            stream.eat_input();
        }
        stream.eat();
        return new Result(prompt, stream, ResultType.Mask);
    }); };
};
/**
 * @hidden
 */
var literal = function (_token) { return new Parser(function (stream) {
    //    let {char, control} = stream.peek();
    var char = stream.peek().char;
    if (char === _token) {
        stream.eat();
        return new Result(_token, stream, ResultType.Literal);
    }
    //    if (control === _token) {
    //        while (!stream.eof() && char !== _token) {
    //            stream.eat_input();
    //            char = stream.peek().char;
    //        }
    //    }
    //
    //    if (control !== undefined) {
    //        stream.eat();
    //    }
    return new Result(_token, stream, ResultType.Literal);
}); };
/**
 * @hidden
 */
var unmask = function (prompt) { return function (rule) { return new Parser(function (stream) {
    while (!stream.eof()) {
        var _a = stream.peek(), char = _a.char, control = _a.control;
        if (char === prompt && control === prompt) {
            stream.eat();
            return new Result(char, stream);
        }
        if (rule.test(char)) {
            stream.eat();
            return new Result(char, stream);
        }
        stream.eat_input();
    }
    stream.eat();
    return new Result('', stream);
}); }; };
/**
 * @hidden
 */
var unliteral = function (_token) { return new Parser(function (stream) {
    if (stream.eof()) {
        return new Result('', stream);
    }
    var char = stream.peek().char;
    if (char === _token) {
        stream.eat();
    }
    return new Result(_token, stream);
}); };
/**
 * @hidden
 */
var token = function (rules, creator) { return new Parser(function (stream) {
    var char = stream.next().char;
    var rule = rules[char];
    if (char === ESCAPE_CHARACTER) {
        char = stream.next().char;
        return new Result(creator.literal(char), stream);
    }
    if (!rule) {
        return new Result(creator.literal(char), stream);
    }
    return new Result(creator.mask(rule), stream);
}); };
/**
 * @hidden
 */
var rawMask = function (_a) {
    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
    return new Parser(function (stream) {
        var char = stream.next().char;
        if (char === prompt) {
            return new Result(promptPlaceholder, stream);
        }
        return new Result(char, stream);
    });
};
/**
 * @hidden
 */
var rawLiteral = function (includeLiterals) { return new Parser(function (stream) {
    var char = stream.next().char;
    if (includeLiterals) {
        return new Result(char, stream);
    }
    return new Result('', stream);
}); };

/**
 * @hidden
 */
var always = function (value) { return new Parser(function (stream) { return new Result(value, stream); }); };
/**
 * @hidden
 */
var append = function (p1, p2) { return p1.chain(function (vs) { return p2.map(function (v) { return vs.concat([v]); }); }); };
/**
 * @hidden
 */
var sequence = function (list) { return list.reduce(function (acc, parser) { return append(acc, parser); }, always([])); };
/**
 * @hidden
 */
var greedy = function (parser) { return new Parser(function (stream) {
    var result = new Result([], stream);
    while (!stream.eof()) {
        result = result.concat(parser.run(stream));
    }
    return result;
}); };

/**
 * @hidden
 */
var MaskingService = /** @class */ (function () {
    function MaskingService() {
        this.rules = {};
        this.prompt = "_";
        this.mask = "";
        this.promptPlaceholder = " ";
        this.includeLiterals = false;
        this.maskTokens = [];
        this.unmaskTokens = [];
        this.rawTokens = [];
        this.validationTokens = [];
    }
    MaskingService.prototype.update = function (_a) {
        var _b = _a.mask, mask$$1 = _b === void 0 ? '' : _b, _c = _a.prompt, prompt = _c === void 0 ? '' : _c, _d = _a.promptPlaceholder, promptPlaceholder = _d === void 0 ? ' ' : _d, _e = _a.rules, rules = _e === void 0 ? {} : _e, _f = _a.includeLiterals, includeLiterals = _f === void 0 ? false : _f;
        this.mask = mask$$1;
        this.prompt = prompt;
        this.promptPlaceholder = promptPlaceholder;
        this.rules = rules;
        this.includeLiterals = includeLiterals;
        this.tokenize();
    };
    MaskingService.prototype.validationValue = function (maskedValue) {
        if (maskedValue === void 0) { maskedValue = ''; }
        var value = maskedValue;
        sequence(this.validationTokens)
            .run(maskedValue)
            .fold(function (unmasked) {
            value = unmasked.join('');
        });
        return value;
    };
    MaskingService.prototype.rawValue = function (maskedValue) {
        if (maskedValue === void 0) { maskedValue = ''; }
        var value = maskedValue;
        if (!this.rawTokens.length) {
            return value;
        }
        sequence(this.rawTokens)
            .run(maskedValue)
            .fold(function (unmasked) {
            value = unmasked.join('');
        });
        return value;
    };
    /**
     * @hidden
     */
    MaskingService.prototype.maskRaw = function (rawValue) {
        if (rawValue === void 0) { rawValue = ''; }
        var value = rawValue;
        if (!this.maskTokens.length) {
            return value;
        }
        sequence(this.maskTokens)
            .run(rawValue)
            .fold(function (masked) {
            value = masked.join('');
        });
        return value;
    };
    MaskingService.prototype.maskInput = function (input, control, splitPoint) {
        if (input.length < control.length) {
            return this.maskRemoved(input, control, splitPoint);
        }
        return this.maskInserted(input, control, splitPoint);
    };
    MaskingService.prototype.maskInRange = function (pasted, oldValue, start, end) {
        var value = '';
        var selection = end;
        var beforeChange = oldValue.split('').slice(0, start);
        var afterChange = oldValue.split('').slice(end);
        sequence(this.maskTokens.slice(start, end))
            .run(pasted)
            .fold(function (masked) {
            value = beforeChange
                .concat(masked)
                .concat(afterChange)
                .join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    MaskingService.prototype.maskRemoved = function (input, control, splitPoint) {
        var _this = this;
        var value = '';
        var selection = splitPoint;
        var unchanged = input.split('').slice(splitPoint);
        var changed = input.split('').slice(0, splitPoint).join('');
        var take$$1 = this.maskTokens.length - (input.length - splitPoint);
        sequence(this.maskTokens.slice(0, take$$1))
            .run(changed, control)
            .fold(function (masked) {
            selection = _this.adjustPosition(masked, selection);
            value = masked.concat(unchanged).join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    MaskingService.prototype.adjustPosition = function (input, selection) {
        var caretChar = input[selection];
        var isLiteral = this.maskTokens[selection].isLiteral(caretChar);
        if (!isLiteral && caretChar !== this.prompt) {
            return selection + 1;
        }
        return selection;
    };
    MaskingService.prototype.maskInserted = function (input, control, splitPoint) {
        var _this = this;
        var value = '';
        var selection = splitPoint;
        var changed = input.slice(0, splitPoint);
        sequence(this.unmaskTokens)
            .run(changed, control)
            .chain(function (unmasked) {
            selection = unmasked.join('').length;
            var unchanged = control.slice(selection);
            return sequence(_this.maskTokens)
                .run(unmasked.join('') + unchanged, control);
        })
            .fold(function (masked) {
            value = masked.join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    Object.defineProperty(MaskingService.prototype, "maskTokenCreator", {
        get: function () {
            var _a = this, prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
            return {
                literal: function (rule) { return literal(rule); },
                mask: function (rule) { return mask({ prompt: prompt, promptPlaceholder: promptPlaceholder })(rule); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "unmaskTokenCreator", {
        get: function () {
            var _this = this;
            return {
                literal: function (rule) { return unliteral(rule); },
                mask: function (rule) { return unmask(_this.prompt)(rule); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "rawTokenCreator", {
        get: function () {
            var _a = this, prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder, includeLiterals = _a.includeLiterals;
            return {
                literal: function (_) { return rawLiteral(includeLiterals); },
                mask: function (_) { return rawMask({ prompt: prompt, promptPlaceholder: promptPlaceholder }); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "validationTokenCreator", {
        get: function () {
            var prompt = this.prompt;
            return {
                literal: function (_) { return rawLiteral(false); },
                mask: function (_) { return rawMask({ prompt: prompt, promptPlaceholder: '' }); }
            };
        },
        enumerable: true,
        configurable: true
    });
    MaskingService.prototype.tokenize = function () {
        var _this = this;
        greedy(token(this.rules, this.maskTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.maskTokens = tokens;
        });
        greedy(token(this.rules, this.unmaskTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.unmaskTokens = tokens;
        });
        greedy(token(this.rules, this.rawTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.rawTokens = tokens;
        });
        greedy(token(this.rules, this.validationTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.validationTokens = tokens;
        });
    };
    MaskingService = __decorate([
        Injectable()
    ], MaskingService);
    return MaskingService;
}());

var resolvedPromise = Promise.resolve(null);
var FOCUSED$2 = 'k-focus';
/**
 * Represents the [Kendo UI MaskedTextBox component for Angular]({% slug overview_maskedtextbox %}).
 *
 * @example
 * ```ts-no-run
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *      <kendo-maskedtextbox
 *          [mask]="mask"
 *          [value]="value">
 *      </kendo-maskedtextbox>
 *     `
 * })
 *
 * class AppComponent {
 *  public value: string = "9580128055807792";
 *  public mask: string = "0000-0000-0000-0000";
 * }
 * ```
 */
var MaskedTextBoxComponent = /** @class */ (function () {
    function MaskedTextBoxComponent(service, renderer, hostElement, ngZone, injector, changeDetector, rtl) {
        var _this = this;
        this.service = service;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.injector = injector;
        this.changeDetector = changeDetector;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Determines whether the MaskedTextBox is disabled ([see example]({% slug disabled_maskedtextbox %})).
         */
        this.disabled = false;
        /**
         * Determines whether the MaskedTextBox is in its read-only state ([see example]({% slug readonly_maskedtextbox %})).
         */
        this.readonly = false;
        /**
         * Represents a prompt character for the masked value.
         * @default `_`
         */
        this.prompt = '_';
        /**
         * Indicates a character which represents an empty position in the raw value.
         * @default ' '
         */
        this.promptPlaceholder = ' ';
        /**
         * Indicates whether to include literals in the raw value  ([see example]({% slug value_maskedtextbox %})).
         * @default false
         */
        this.includeLiterals = false;
        /**
         * Specifies if the mask should be shown on focus for empty value.
         */
        this.maskOnFocus = false;
        /**
         * Determines whether the built-in mask validator is enforced when a form is validated
         * ([see example]({% slug validation_maskedtextbox %})).
         * @default true
         */
        this.maskValidation = true;
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts-no-run
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-maskedtextbox (focus)="handleFocus()"></kendo-maskedtextbox>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts-no-run
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-maskedtextbox (blur)="handleBlur()"></kendo-maskedtextbox>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the value changes.
         */
        this.valueChange = new EventEmitter();
        this.hostClasses = true;
        this.focusClick = false;
        this.defaultRules = {
            "#": /[\d\s\+\-]/,
            "&": /[\S]/,
            "0": /[\d]/,
            "9": /[\d\s]/,
            "?": /[a-zA-Z\s]/,
            "A": /[a-zA-Z0-9]/,
            "C": /./,
            "L": /[a-zA-Z]/,
            "a": /[a-zA-Z0-9\s]/
        };
        this.isPasted = false;
        this.selection = [0, 0];
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        /**
         * @hidden
         */
        this.handleFocus = function () {
            _this.focused = true;
            if (_this.maskOnFocus && _this.emptyMask) {
                _this.updateInput(_this.service.maskRaw(_this.value));
                _this.ngZone.runOutsideAngular(function () {
                    setTimeout(function () { _this.setSelection(0, 0); }, 0);
                });
            }
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleClick = function () {
            if (_this.focused && !_this.focusClick) {
                _this.focusClick = true;
                var _a = _this.input.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
                if (selectionStart === selectionEnd) {
                    _this.setFocusSelection();
                }
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.changeDetector.markForCheck();
            _this.focused = false;
            _this.focusClick = false;
            if (_this.maskOnFocus && _this.emptyMask) {
                _this.updateInput(_this.maskedValue);
            }
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.onTouched();
                    _this.onBlur.emit();
                });
            }
        };
        this.onChange = function (_) { };
        this.onTouched = function () { };
        validatePackage(packageMetadata);
        this.direction = rtl ? 'rtl' : 'ltr';
        this.updateService();
    }
    MaskedTextBoxComponent_1 = MaskedTextBoxComponent;
    Object.defineProperty(MaskedTextBoxComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the padding of the MaskedTextBox internal input element
         * ([see example]({% slug appearance_maskedtextbox %}#toc-size)).
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the MaskedTextBox
         * ([see example]({% slug appearance_maskedtextbox %}#toc-rounded)).
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        /**
         * The fillMode property specifies the background and border styles of the MaskedTexBox
         * ([see example]({% slug appearance_maskedtextbox %}#toc-fillMode)).
         * The possible values are:
         * * `flat`
         * * `solid` (default)
         * * `outline`
         * * `null`
         */
        set: function (fillMode) {
            this.handleClasses(fillMode, 'fillMode');
            this._fillMode = fillMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "rules", {
        get: function () {
            return this._rules || this.defaultRules;
        },
        /**
         * Exposes the RegExp-based mask validation array ([see example]({% slug masks_maskedtextbox %})).
         */
        set: function (value) {
            this._rules = Object.assign({}, this.defaultRules, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "hostDisabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.ngOnInit = function () {
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
    };
    MaskedTextBoxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var stylingInputs = ['size', 'rounded', 'fillMode'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the MaskedTextBox is empty.
     */
    MaskedTextBoxComponent.prototype.isEmpty = function () {
        if (this.input) {
            return !Boolean(this.input.nativeElement.value);
        }
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.handleDragDrop = function () {
        return false;
    };
    /**
     * Focuses the MaskedTextBox.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="maskedinput.focus()">Focus the input</button>
     *  <kendo-maskedtextbox #maskedinput></kendo-maskedtextbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    MaskedTextBoxComponent.prototype.focus = function () {
        if (!this.input) {
            return;
        }
        this.input.nativeElement.focus();
        this.setFocusSelection();
    };
    /**
     * Blurs the MaskedTextBox.
     */
    MaskedTextBoxComponent.prototype.blur = function () {
        if (!this.input) {
            return;
        }
        this.input.nativeElement.blur();
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.pasteHandler = function (e) {
        var _a = e.target, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
        if (selectionEnd === selectionStart) {
            return;
        }
        this.isPasted = true;
        this.selection = [selectionStart, selectionEnd];
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.inputHandler = function (e) {
        var value = e.target.value;
        var _a = this.selection, start = _a[0], end = _a[1];
        if (!this.mask) {
            this.updateValueWithEvents(value);
            this.isPasted = false;
            return;
        }
        var result;
        if (this.isPasted) {
            this.isPasted = false;
            var rightPart = this.maskedValue.length - end;
            var to = value.length - rightPart;
            result = this.service.maskInRange(value.slice(start, to), this.maskedValue, start, end);
        }
        else {
            result = this.service.maskInput(value, this.maskedValue || '', e.target.selectionStart);
        }
        this.updateInput(result.value, result.selection);
        this.updateValueWithEvents(result.value);
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.value) {
            this.value = this.normalizeValue();
        }
        if (!this.mask) {
            this.updateInput(this.value);
            return;
        }
        var next = this.extractChanges(changes);
        this.updateService(next);
        var maskedValue = this.service.maskRaw(this.value);
        this.updateInput(maskedValue, null, true);
        if (changes.includeLiterals || isChanged('promptPlaceholder', changes)) {
            resolvedPromise.then(function () {
                _this.updateValueWithEvents(_this.maskedValue);
            });
        }
    };
    /**
     * @hidden
     * Writes a new value to the element.
     */
    MaskedTextBoxComponent.prototype.writeValue = function (value) {
        this.value = this.normalizeValue(value);
        this.updateInput(this.service.maskRaw(this.value));
        if (this.includeLiterals) {
            this.updateValue(this.maskedValue);
        }
    };
    /**
     * @hidden
     * Sets the function that will be called when a `change` event is triggered.
     */
    MaskedTextBoxComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     * Sets the function that will be called when a `touch` event is triggered.
     */
    MaskedTextBoxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    MaskedTextBoxComponent.prototype.setDisabledState = function (isDisabled) {
        this.changeDetector.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.validate = function (_) {
        if (this.maskValidation === false || !this.mask) {
            return null;
        }
        if (!this.service.validationValue(this.maskedValue)) {
            return null;
        }
        if (this.maskedValue.indexOf(this.prompt) !== -1) {
            return {
                patternError: {
                    mask: this.mask,
                    maskedValue: this.maskedValue,
                    value: this.value
                }
            };
        }
        return null;
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.updateValueWithEvents = function (maskedValue) {
        this.updateValue(maskedValue);
        if (hasObservers(this.valueChange)) {
            this.valueChange.emit(this.value);
        }
    };
    MaskedTextBoxComponent.prototype.updateValue = function (value) {
        if (this.mask && !this.service.validationValue(value) && !this.includeLiterals) {
            this.value = '';
        }
        else {
            this.value = this.service.rawValue(value);
        }
        this.onChange(this.value);
    };
    MaskedTextBoxComponent.prototype.updateInput = function (maskedValue, selection, isFromOnChanges) {
        if (maskedValue === void 0) { maskedValue = ''; }
        if (isFromOnChanges && maskedValue === this.maskedValue) {
            return;
        }
        this.maskedValue = maskedValue;
        var value = this.maskOnFocus && !this.focused && this.emptyMask ? '' : maskedValue;
        this.renderer.setProperty(this.input.nativeElement, "value", value);
        if (selection !== undefined) {
            this.setSelection(selection, selection);
        }
    };
    MaskedTextBoxComponent.prototype.extractChanges = function (changes) {
        return Object.keys(changes).filter(function (key) { return key !== 'rules'; }).reduce(function (obj, key) {
            obj[key] = changes[key].currentValue;
            return obj;
        }, {}); // tslint:disable-line:align
    };
    MaskedTextBoxComponent.prototype.updateService = function (extra) {
        var config = Object.assign({
            includeLiterals: this.includeLiterals,
            mask: this.mask,
            prompt: this.prompt,
            promptPlaceholder: this.promptPlaceholder,
            rules: this.rules
        }, extra); // tslint:disable-line:align
        this.service.update(config);
    };
    MaskedTextBoxComponent.prototype.setSelection = function (start, end) {
        if (start === void 0) { start = this.selection[0]; }
        if (end === void 0) { end = this.selection[1]; }
        if (this.focused) {
            invokeElementMethod(this.input, 'setSelectionRange', start, end);
        }
    };
    Object.defineProperty(MaskedTextBoxComponent.prototype, "emptyMask", {
        get: function () {
            return this.service.maskRaw() === this.maskedValue;
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.setFocusSelection = function () {
        var selectionStart = this.input.nativeElement.selectionStart;
        var index = this.maskedValue ? this.maskedValue.indexOf(this.prompt) : 0;
        if (index >= 0 && index < selectionStart) {
            this.selection = [index, index];
            this.setSelection();
        }
    };
    Object.defineProperty(MaskedTextBoxComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(element, FOCUSED$2);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED$2);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.normalizeValue = function (value) {
        if (value === void 0) { value = this.value; }
        var present = isPresent(value);
        if (present && typeof value !== 'string') {
            if (isDevMode()) {
                throw new Error('The MaskedTextBox component supports only string values.');
            }
            return String(value);
        }
        return present ? value : '';
    };
    MaskedTextBoxComponent.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('input', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    var MaskedTextBoxComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MaskedTextBoxComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MaskedTextBoxComponent.prototype, "rounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MaskedTextBoxComponent.prototype, "fillMode", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "mask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], MaskedTextBoxComponent.prototype, "rules", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "prompt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "promptPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "includeLiterals", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "maskOnFocus", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "maskValidation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], MaskedTextBoxComponent.prototype, "tabindex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], MaskedTextBoxComponent.prototype, "tabIndex", null);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], MaskedTextBoxComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], MaskedTextBoxComponent.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MaskedTextBoxComponent.prototype, "valueChange", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], MaskedTextBoxComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('class.k-input'),
        HostBinding('class.k-maskedtextbox'),
        __metadata("design:type", Boolean)
    ], MaskedTextBoxComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], MaskedTextBoxComponent.prototype, "hostDisabledClass", null);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", ElementRef)
    ], MaskedTextBoxComponent.prototype, "input", void 0);
    __decorate([
        HostListener('paste', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MaskedTextBoxComponent.prototype, "pasteHandler", null);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MaskedTextBoxComponent.prototype, "inputHandler", null);
    MaskedTextBoxComponent = MaskedTextBoxComponent_1 = __decorate([
        Component({
            exportAs: 'kendoMaskedTextBox',
            providers: [
                MaskingService,
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MaskedTextBoxComponent_1; }) /* tslint:disable-line */
                },
                {
                    multi: true,
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return MaskedTextBoxComponent_1; }) /* tslint:disable-line */
                },
                {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return MaskedTextBoxComponent_1; })
                }
            ],
            selector: 'kendo-maskedtextbox',
            template: "\n        <input type=\"text\"\n            #input\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            spellcheck=\"false\"\n            class=\"k-input-inner\"\n            [id]=\"focusableId\"\n            [tabindex]=\"tabIndex\"\n            [attr.title]=\"title\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleFocus,\n                blur: handleBlur,\n                click: handleClick,\n                dragstart: handleDragDrop,\n                drop: handleDragDrop\n            }\"\n        />\n    "
        }),
        __param(6, Optional()), __param(6, Inject(RTL)),
        __metadata("design:paramtypes", [MaskingService,
            Renderer2,
            ElementRef,
            NgZone,
            Injector,
            ChangeDetectorRef, Boolean])
    ], MaskedTextBoxComponent);
    return MaskedTextBoxComponent;
}());

/**
 * @hidden
 */
var SliderTick = /** @class */ (function () {
    function SliderTick(value) {
        this.value = value;
        this.classes = {
            'k-tick': true
        };
    }
    return SliderTick;
}());
/**
 * @hidden
 */
var SliderTicksComponent = /** @class */ (function () {
    function SliderTicksComponent() {
        this.wrapperClasses = 'k-reset k-slider-items';
        this.ticks = [];
    }
    SliderTicksComponent.prototype.ngOnChanges = function (_) {
        this.createTicks();
    };
    SliderTicksComponent.prototype.createTicks = function () {
        var count = calculateTicksCount(this.min, this.max, this.step);
        var largeStep = this.largeStep;
        var tickValueProps = {
            max: this.max,
            min: this.min,
            smallStep: this.step
        };
        var result = [];
        for (var i = 0; i < count; i++) {
            result.push(new SliderTick(calculateValueFromTick(i, tickValueProps)));
            if (largeStep && i % largeStep === 0) {
                result[i].large = true;
                result[i].classes['k-tick-large'] = true;
            }
        }
        if (result.length > 0) {
            Object.assign(result[0].classes, this.endTickClasses(true));
            Object.assign(result[result.length - 1].classes, this.endTickClasses(false));
        }
        this.ticks = result;
    };
    SliderTicksComponent.prototype.endTickClasses = function (first) {
        return {
            'k-first': (first && !this.vertical) || (!first && this.vertical),
            'k-last': (!first && !this.vertical) || (first && this.vertical)
        };
    };
    __decorate([
        HostBinding('class'),
        __metadata("design:type", String)
    ], SliderTicksComponent.prototype, "wrapperClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], SliderTicksComponent.prototype, "tickTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderTicksComponent.prototype, "vertical", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderTicksComponent.prototype, "step", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderTicksComponent.prototype, "largeStep", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderTicksComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderTicksComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", TemplateRef)
    ], SliderTicksComponent.prototype, "labelTemplate", void 0);
    __decorate([
        ViewChildren('tickElement'),
        __metadata("design:type", QueryList)
    ], SliderTicksComponent.prototype, "tickElements", void 0);
    SliderTicksComponent = __decorate([
        Component({
            selector: '[kendoSliderTicks]',
            template: "\n    <li #tickElement *ngFor=\"let tick of ticks;\"\n        [ngClass]=\"tick.classes\"\n        title=\"{{ tickTitle(tick.value) }}\"\n        role=\"presentation\"\n     >\n         <ng-container [ngSwitch]=\"tick.large\">\n            <span class=\"k-label\" *ngSwitchCase=\"true\">\n                <ng-container [ngTemplateOutlet]=\"labelTemplate || defaultLabel\" [ngTemplateOutletContext]=\"tick\">\n                </ng-container>\n            </span>\n            <ng-container *ngSwitchCase=\"false\">&nbsp;</ng-container>\n         </ng-container>\n     </li>\n\n     <ng-template #defaultLabel let-value=\"value\">\n        {{ tickTitle(value) }}\n     </ng-template>\n  "
        })
    ], SliderTicksComponent);
    return SliderTicksComponent;
}());

/**
 * @hidden
 */
var SlidersCommonModule = /** @class */ (function () {
    function SlidersCommonModule() {
    }
    SlidersCommonModule = __decorate([
        NgModule({
            declarations: [
                SliderTicksComponent,
                LabelTemplateDirective
            ],
            exports: [
                LabelTemplateDirective,
                SliderTicksComponent,
                DraggableModule,
                EventsModule,
                ResizeSensorModule
            ],
            imports: [CommonModule, DraggableModule, EventsModule, ResizeSensorModule]
        })
    ], SlidersCommonModule);
    return SlidersCommonModule;
}());

/**
 * @hidden
 */
var SliderMessages = /** @class */ (function (_super) {
    __extends(SliderMessages, _super);
    function SliderMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderMessages.prototype, "decrement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderMessages.prototype, "increment", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderMessages.prototype, "dragHandle", void 0);
    return SliderMessages;
}(ComponentMessages));

/**
 * @hidden
 */
var LocalizedSliderMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedSliderMessagesDirective, _super);
    function LocalizedSliderMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedSliderMessagesDirective_1 = LocalizedSliderMessagesDirective;
    var LocalizedSliderMessagesDirective_1;
    LocalizedSliderMessagesDirective = LocalizedSliderMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: SliderMessages,
                    useExisting: forwardRef(function () { return LocalizedSliderMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoSliderLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedSliderMessagesDirective);
    return LocalizedSliderMessagesDirective;
}(SliderMessages));

/**
 * Custom component messages override default component messages.
 */
var SliderCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(SliderCustomMessagesComponent, _super);
    function SliderCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    SliderCustomMessagesComponent_1 = SliderCustomMessagesComponent;
    Object.defineProperty(SliderCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var SliderCustomMessagesComponent_1;
    SliderCustomMessagesComponent = SliderCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: SliderMessages,
                    useExisting: forwardRef(function () { return SliderCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-slider-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], SliderCustomMessagesComponent);
    return SliderCustomMessagesComponent;
}(SliderMessages));

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Slider component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Inputs module
 * import { SliderModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BrowserAnimationsModule, SliderModule], // import Slider module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var SliderModule = /** @class */ (function () {
    function SliderModule() {
    }
    SliderModule = __decorate([
        NgModule({
            declarations: [
                SliderComponent,
                SliderCustomMessagesComponent,
                LocalizedSliderMessagesDirective
            ],
            exports: [
                SliderComponent,
                SliderCustomMessagesComponent,
                LabelTemplateDirective,
                LocalizedSliderMessagesDirective
            ],
            imports: [CommonModule, SlidersCommonModule]
        })
    ], SliderModule);
    return SliderModule;
}());

/**
 * @hidden
 */
var RangeSliderMessages = /** @class */ (function (_super) {
    __extends(RangeSliderMessages, _super);
    function RangeSliderMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], RangeSliderMessages.prototype, "dragHandleStart", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], RangeSliderMessages.prototype, "dragHandleEnd", void 0);
    return RangeSliderMessages;
}(ComponentMessages));

/**
 * @hidden
 */
var LocalizedRangeSliderMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedRangeSliderMessagesDirective, _super);
    function LocalizedRangeSliderMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedRangeSliderMessagesDirective_1 = LocalizedRangeSliderMessagesDirective;
    var LocalizedRangeSliderMessagesDirective_1;
    LocalizedRangeSliderMessagesDirective = LocalizedRangeSliderMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: RangeSliderMessages,
                    useExisting: forwardRef(function () { return LocalizedRangeSliderMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoSliderLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedRangeSliderMessagesDirective);
    return LocalizedRangeSliderMessagesDirective;
}(RangeSliderMessages));

/**
 * Custom component messages override default component messages.
 */
var RangeSliderCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(RangeSliderCustomMessagesComponent, _super);
    function RangeSliderCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    RangeSliderCustomMessagesComponent_1 = RangeSliderCustomMessagesComponent;
    Object.defineProperty(RangeSliderCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var RangeSliderCustomMessagesComponent_1;
    RangeSliderCustomMessagesComponent = RangeSliderCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: RangeSliderMessages,
                    useExisting: forwardRef(function () { return RangeSliderCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-rangeslider-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], RangeSliderCustomMessagesComponent);
    return RangeSliderCustomMessagesComponent;
}(RangeSliderMessages));

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the RangeSlider component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Inputs module
 * import { RangeSliderModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BrowserAnimationsModule, RangeSliderModule], // import RangeSlider module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var RangeSliderModule = /** @class */ (function () {
    function RangeSliderModule() {
    }
    RangeSliderModule = __decorate([
        NgModule({
            declarations: [
                RangeSliderComponent,
                RangeSliderCustomMessagesComponent,
                LocalizedRangeSliderMessagesDirective
            ],
            exports: [
                RangeSliderComponent,
                RangeSliderCustomMessagesComponent,
                LocalizedRangeSliderMessagesDirective,
                LabelTemplateDirective
            ],
            imports: [CommonModule, SlidersCommonModule]
        })
    ], RangeSliderModule);
    return RangeSliderModule;
}());

/**
 * @hidden
 */
var Messages = /** @class */ (function (_super) {
    __extends(Messages, _super);
    function Messages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "on", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], Messages.prototype, "off", void 0);
    return Messages;
}(ComponentMessages));

/**
 * @hidden
 */
var LocalizedSwitchMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedSwitchMessagesDirective, _super);
    function LocalizedSwitchMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedSwitchMessagesDirective_1 = LocalizedSwitchMessagesDirective;
    var LocalizedSwitchMessagesDirective_1;
    LocalizedSwitchMessagesDirective = LocalizedSwitchMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: Messages,
                    useExisting: forwardRef(function () { return LocalizedSwitchMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoSwitchLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedSwitchMessagesDirective);
    return LocalizedSwitchMessagesDirective;
}(Messages));

/**
 * Custom component messages override default component messages.
 */
var SwitchCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(SwitchCustomMessagesComponent, _super);
    function SwitchCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    SwitchCustomMessagesComponent_1 = SwitchCustomMessagesComponent;
    Object.defineProperty(SwitchCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var SwitchCustomMessagesComponent_1;
    SwitchCustomMessagesComponent = SwitchCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: Messages,
                    useExisting: forwardRef(function () { return SwitchCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-switch-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], SwitchCustomMessagesComponent);
    return SwitchCustomMessagesComponent;
}(Messages));

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Switch component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Switch module
 * import { SwitchModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, SwitchModule], // import Switch module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var SwitchModule = /** @class */ (function () {
    function SwitchModule() {
    }
    SwitchModule = __decorate([
        NgModule({
            declarations: [
                SwitchComponent,
                SwitchCustomMessagesComponent,
                LocalizedSwitchMessagesDirective
            ],
            exports: [
                SwitchComponent,
                SwitchCustomMessagesComponent,
                LocalizedSwitchMessagesDirective
            ],
            imports: [CommonModule, EventsModule, ResizeSensorModule]
        })
    ], SwitchModule);
    return SwitchModule;
}());

/**
 * @hidden
 */
var LocalizedNumericTextBoxMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedNumericTextBoxMessagesDirective, _super);
    function LocalizedNumericTextBoxMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedNumericTextBoxMessagesDirective_1 = LocalizedNumericTextBoxMessagesDirective;
    var LocalizedNumericTextBoxMessagesDirective_1;
    LocalizedNumericTextBoxMessagesDirective = LocalizedNumericTextBoxMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: NumericTextBoxMessages,
                    useExisting: forwardRef(function () { return LocalizedNumericTextBoxMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoNumericTextBoxLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedNumericTextBoxMessagesDirective);
    return LocalizedNumericTextBoxMessagesDirective;
}(NumericTextBoxMessages));

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the NumericTextBox component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the NumericTextBox module
 * import { NumericTextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, NumericTextBoxModule], // import NumericTextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var NumericTextBoxModule = /** @class */ (function () {
    function NumericTextBoxModule() {
    }
    NumericTextBoxModule = __decorate([
        NgModule({
            declarations: [
                LocalizedNumericTextBoxMessagesDirective,
                NumericTextBoxComponent,
                NumericTextBoxCustomMessagesComponent
            ],
            exports: [
                NumericTextBoxComponent,
                NumericTextBoxCustomMessagesComponent
            ],
            imports: [CommonModule, EventsModule]
        })
    ], NumericTextBoxModule);
    return NumericTextBoxModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the MaskedTextBox component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the MaskedTextBox module
 * import { MaskedTextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, MaskedTextBoxModule], // import MaskedTextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var MaskedTextBoxModule = /** @class */ (function () {
    function MaskedTextBoxModule() {
    }
    MaskedTextBoxModule = __decorate([
        NgModule({
            declarations: [MaskedTextBoxComponent],
            exports: [MaskedTextBoxComponent],
            imports: [CommonModule, EventsModule]
        })
    ], MaskedTextBoxModule);
    return MaskedTextBoxModule;
}());

/**
 * @hidden
 *
 * Returns true if the used browser is Safari.
 */
var isSafari = function (userAgent) {
    var desktopBrowser = detectDesktopBrowser(userAgent);
    var mobileOS$$1 = detectMobileOS(userAgent);
    return (desktopBrowser && desktopBrowser.safari) || (mobileOS$$1 && mobileOS$$1.browser === 'mobilesafari');
};
/**
 * @hidden
 *
 * Checks if input is Japanese IME
 */
var isJapanese = function (input) {
    var japaneseRegex = /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g;
    return japaneseRegex.test(input);
};

/**
 * Specifies the adornments in the suffix container ([see examples]({% slug adornments_textbox %}#toc-suffixadornments)).
 * ```ts-no-run
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-textbox>
 *    <ng-template kendoTextBoxSuffixTemplate>
 *        <button kendoButton look="clear" icon="image"></button>
 *    </ng-template>
 *  </kendo-textbox>
 * `
 * })
 * class AppComponent {}
 * ```
 */
var TextBoxSuffixTemplateDirective = /** @class */ (function () {
    function TextBoxSuffixTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    TextBoxSuffixTemplateDirective = __decorate([
        Directive({
            selector: '[kendoTextBoxSuffixTemplate]'
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [TemplateRef])
    ], TextBoxSuffixTemplateDirective);
    return TextBoxSuffixTemplateDirective;
}());

/**
 * Specifies the adornments in the prefix container ([see examples]({% slug adornments_textbox %}#toc-prefixadornments)).
 * @example
 * ```ts-no-run
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-textbox>
 *    <ng-template kendoTextBoxPrefixTemplate>
 *        <button kendoButton look="clear" icon="image"></button>
 *    </ng-template>
 *  </kendo-textbox>
 * `
 * })
 * class AppComponent {}
 * ```
 */
var TextBoxPrefixTemplateDirective = /** @class */ (function () {
    function TextBoxPrefixTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    TextBoxPrefixTemplateDirective = __decorate([
        Directive({
            selector: '[kendoTextBoxPrefixTemplate]'
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [TemplateRef])
    ], TextBoxPrefixTemplateDirective);
    return TextBoxPrefixTemplateDirective;
}());

var FOCUSED$3 = 'k-focus';
var TextBoxComponent = /** @class */ (function () {
    function TextBoxComponent(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {
        var _this = this;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.injector = injector;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Sets the `title` attribute of the `input` element of the TextBox.
         */
        this.title = '';
        /**
         * Sets the disabled state of the component.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Specifies the `tabindex` of the TextBox.
         *
         * @default 0
         */
        this.tabindex = 0;
        /**
         * Provides a value for the TextBox.
         */
        this.value = null;
        /**
         * Determines whether the whole value will be selected when the TextBox is clicked. Defaults to `false`.
         *
         * @default false
         */
        this.selectOnFocus = false;
        /**
         * Specifies when the Success icon will be shown ([see example]({% slug validation_textbox %})).
         *
         * The possible values are:
         *
         * `boolean`&mdash;The Success icon is displayed, if the condition given by the developer is met.
         *
         * `initial`&mdash;The Success icon will be displayed when the component state is neither `invalid` nor `touched` or `dirty`.
         *
         * @default false
         */
        this.showSuccessIcon = false;
        /**
         * Specifies when the Error icon will be shown ([see example]({% slug validation_textbox %})).
         *
         * The possible values are:
         *
         * * `initial`&mdash;The Error icon will be displayed when the component state is
         * `invalid` and `touched` or `dirty`.
         * * `boolean`&mdash;The Error icon is displayed, if the condition given by the developer is met.
         *
         * @default false
         */
        this.showErrorIcon = false;
        /**
         * Specifies whether a Clear button will be rendered.
         *
         * @default false
         */
        this.clearButton = false;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button
         * ([see example]({% slug overview_textbox %}#toc-events)).
         * When the value of the component is programmatically changed to `ngModel` or `formControl`
         * through its API or form binding, the `valueChange` event is not triggered because it
         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the `input` element.
         */
        this.inputFocus = new EventEmitter();
        /**
         * Fires each time the `input` element gets blurred.
         */
        this.inputBlur = new EventEmitter();
        /**
         * Fires each time the user focuses the TextBox component.
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts-no-run
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-textbox (focus)="handleFocus()"></kendo-textbox>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log('Component is isFocused');
         *   }
         * }
         * ```
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the TextBox component gets blurred.
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts-no-run
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-textbox (blur)="handleBlur()"></kendo-textbox>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log('Component is blurred');
         *   }
         * }
         * ```
         */
        this.onBlur = new EventEmitter();
        this.hostClasses = true;
        this._isFocused = false;
        this.focusChangedProgrammatically = false;
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        /**
         * @hidden
         */
        this.handleInputFocus = function () {
            if (!_this.disabled) {
                if (_this.selectOnFocus && _this.value) {
                    _this.ngZone.run(function () {
                        setTimeout(function () { _this.selectAll(); });
                    });
                }
                if (hasObservers(_this.onFocus)) {
                    if (!_this.isFocused) {
                        _this.ngZone.run(function () {
                            _this.onFocus.emit();
                        });
                    }
                }
                if (hasObservers(_this.inputFocus)) {
                    if (!_this.focusChangedProgrammatically || (_this.focusChangedProgrammatically && _this.clearButtonClicked)) {
                        _this.ngZone.run(function () {
                            _this.inputFocus.emit();
                        });
                    }
                }
                _this.ngZone.run(function () {
                    _this.isFocused = true;
                });
            }
        };
        /**
         * @hidden
         */
        this.handleInputBlur = function () {
            _this.changeDetector.markForCheck();
            if (hasObservers(_this.inputBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.inputBlur.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleInput = function (ev) {
            var target = ev.target;
            var isBrowserSafari = isSafari(navigator.userAgent);
            var incomingValue = isBrowserSafari && isJapanese(target.value) ? ev.data : target.value;
            var _a = [target.selectionStart, target.selectionEnd], caretStart = _a[0], caretEnd = _a[1];
            _this.updateValue(incomingValue);
            if (isBrowserSafari) {
                target.setSelectionRange(caretStart, caretEnd);
            }
        };
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    TextBoxComponent_1 = TextBoxComponent;
    Object.defineProperty(TextBoxComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the padding of the TextBox internal input element
         * ([see example]({% slug appearance_textbox %}#toc-size)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the TextBox
         * ([see example]({% slug appearance_textbox %}#toc-rounded)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `'full'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        /**
         * The fillMode property specifies the background and border styles of the TextBox
         * ([see example]({% slug appearance_textbox %}#toc-fillMode)).
         *
         * The possible values are:
         * * `'flat'`
         * * `'solid'` (default)
         * * `'outline'`
         * * `null`
         */
        set: function (fillMode) {
            this.handleClasses(fillMode, 'fillMode');
            this._fillMode = fillMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    TextBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.control = this.injector.get(NgControl, null);
        this.checkClearButton();
        this.subscriptions = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    TextBoxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var hostElement = this.hostElement.nativeElement;
        var cursorInsideWrapper = false;
        var tabbing = false;
        this.ngZone.runOutsideAngular(function () {
            // focusIn and focusOut are relative to the host element
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {
                if (!_this.isFocused) {
                    _this.ngZone.run(function () {
                        _this.onFocus.emit();
                        _this.isFocused = true;
                    });
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {
                if (!_this.isFocused) {
                    return;
                }
                if (tabbing) {
                    var closestTextbox = closest$1(args.relatedTarget, function (element) { return element === _this.hostElement.nativeElement; });
                    if (!closestTextbox) {
                        _this.handleBlur();
                    }
                    tabbing = false;
                }
                else {
                    if (!cursorInsideWrapper && !_this.clearButtonClicked) {
                        _this.handleBlur();
                    }
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {
                cursorInsideWrapper = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {
                cursorInsideWrapper = false;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {
                if (args.keyCode === Keys.Tab) {
                    tabbing = true;
                }
                else {
                    tabbing = false;
                }
            }));
        });
        var stylingInputs = ['size', 'rounded', 'fillMode'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    TextBoxComponent.prototype.ngOnChanges = function (changes) {
        if (changes.disabled || changes.readonly || changes.value) {
            this.checkClearButton();
        }
    };
    TextBoxComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    /**
     * Focuses the TextBox.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="input.focus()">Focus the input</button>
     *  <kendo-textbox #input></kendo-textbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    TextBoxComponent.prototype.focus = function () {
        if (!this.input) {
            return;
        }
        this.focusChangedProgrammatically = true;
        this.isFocused = true;
        this.input.nativeElement.focus();
        this.focusChangedProgrammatically = false;
    };
    /**
     * Blurs the TextBox.
     */
    TextBoxComponent.prototype.blur = function () {
        this.focusChangedProgrammatically = true;
        var isFocusedElement = this.hostElement.nativeElement.querySelector(':focus');
        if (isFocusedElement) {
            isFocusedElement.blur();
        }
        this.isFocused = false;
        this.focusChangedProgrammatically = false;
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.clearTitle = function () {
        return this.localizationService.get('clear');
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.checkClearButton = function () {
        this.showClearButton =
            !this.disabled &&
                !this.readonly &&
                this.clearButton &&
                !!this.value;
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.clearValue = function (ev) {
        if (ev) {
            ev.preventDefault();
        }
        this.clearButtonClicked = true;
        this.input.nativeElement.value = '';
        this.input.nativeElement.focus();
        this.updateValue('');
        this.checkClearButton();
        this.clearButtonClicked = false;
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.writeValue = function (value) {
        this.value = value;
        this.checkClearButton();
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    TextBoxComponent.prototype.setDisabledState = function (isDisabled) {
        this.changeDetector.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.showErrorsInitial = function () {
        if (!this.control) {
            return false;
        }
        var _a = this.control, invalid = _a.invalid, dirty = _a.dirty, touched = _a.touched;
        return invalid && (dirty || touched);
    };
    /**
     * @hidden
     */
    TextBoxComponent.prototype.showSuccessInitial = function () {
        if (!this.control) {
            return false;
        }
        var _a = this.control, valid = _a.valid, dirty = _a.dirty, touched = _a.touched;
        return valid && (dirty || touched);
    };
    Object.defineProperty(TextBoxComponent.prototype, "successIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            return this.successIcon
                ? "" + this.successIcon
                : "k-input-validation-icon k-icon k-i-check";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "errorIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            return this.errorIcon
                ? "" + this.errorIcon
                : "k-input-validation-icon k-icon k-i-warning";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "clearButtonClasses", {
        /**
         * @hidden
         */
        get: function () {
            return this.clearButtonIcon
                ? this.clearButtonIcon
                : "k-icon k-i-x";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "hasErrors", {
        /**
         * @hidden
         */
        get: function () {
            return this.showErrorIcon === 'initial'
                ? this.showErrorsInitial()
                : this.showErrorIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxComponent.prototype, "isSuccessful", {
        /**
         * @hidden
         */
        get: function () {
            return this.showSuccessIcon === 'initial'
                ? this.showSuccessInitial()
                : this.showSuccessIcon;
        },
        enumerable: true,
        configurable: true
    });
    TextBoxComponent.prototype.setSelection = function (start, end) {
        if (this.isFocused) {
            invokeElementMethod(this.input, 'setSelectionRange', start, end);
        }
    };
    TextBoxComponent.prototype.selectAll = function () {
        if (this.value) {
            this.setSelection(0, this.value.length);
        }
    };
    TextBoxComponent.prototype.updateValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.checkClearButton();
                _this.changeDetector.markForCheck();
            });
        }
    };
    Object.defineProperty(TextBoxComponent.prototype, "isFocused", {
        get: function () {
            return this._isFocused;
        },
        set: function (value) {
            if (this._isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value && !this.disabled) {
                    this.renderer.addClass(element, FOCUSED$3);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED$3);
                }
                this._isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    TextBoxComponent.prototype.handleBlur = function () {
        var _this = this;
        this.ngZone.run(function () {
            if (!_this.focusChangedProgrammatically) {
                _this.onBlur.emit();
            }
            _this.isFocused = false;
        });
    };
    TextBoxComponent.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('input', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    var TextBoxComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextBoxComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextBoxComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextBoxComponent.prototype, "tabindex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextBoxComponent.prototype, "selectOnFocus", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TextBoxComponent.prototype, "showSuccessIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TextBoxComponent.prototype, "showErrorIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextBoxComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "successIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "errorIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "clearButtonIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextBoxComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextBoxComponent.prototype, "rounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextBoxComponent.prototype, "fillMode", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], TextBoxComponent.prototype, "tabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextBoxComponent.prototype, "maxlength", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextBoxComponent.prototype, "valueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextBoxComponent.prototype, "inputFocus", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextBoxComponent.prototype, "inputBlur", void 0);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], TextBoxComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], TextBoxComponent.prototype, "onBlur", void 0);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", ElementRef)
    ], TextBoxComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(TextBoxSuffixTemplateDirective, { static: false }),
        __metadata("design:type", TextBoxSuffixTemplateDirective)
    ], TextBoxComponent.prototype, "suffixTemplate", void 0);
    __decorate([
        ContentChild(TextBoxPrefixTemplateDirective, { static: false }),
        __metadata("design:type", TextBoxPrefixTemplateDirective)
    ], TextBoxComponent.prototype, "prefixTemplate", void 0);
    __decorate([
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], TextBoxComponent.prototype, "disabledClass", null);
    __decorate([
        HostBinding('class.k-textbox'),
        HostBinding('class.k-input'),
        __metadata("design:type", Boolean)
    ], TextBoxComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], TextBoxComponent.prototype, "direction", void 0);
    TextBoxComponent = TextBoxComponent_1 = __decorate([
        Component({
            exportAs: 'kendoTextBox',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.textbox' },
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return TextBoxComponent_1; }),
                    multi: true
                },
                { provide: KendoInput, useExisting: forwardRef(function () { return TextBoxComponent_1; }) }
            ],
            selector: 'kendo-textbox',
            template: "\n        <ng-container kendoTextBoxLocalizedMessages\n            i18n-clear=\"kendo.textbox.clear|The title for the **Clear** button in the TextBox.\"\n            clear=\"Clear\">\n        </ng-container>\n        <span class=\"k-input-prefix\">\n            <ng-template\n                *ngIf=\"prefixTemplate\"\n                [ngTemplateOutlet]=\"prefixTemplate?.templateRef\">\n            </ng-template>\n        </span>\n        <input #input\n            class=\"k-input-inner\"\n            [id]=\"focusableId\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [attr.tabindex]=\"disabled ? undefined : tabindex\"\n            [value]=\"value\"\n            [attr.placeholder]=\"placeholder\"\n            [attr.title]=\"title\"\n            [attr.maxlength]=\"maxlength\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleInputFocus,\n                blur: handleInputBlur,\n                input: handleInput}\"\n        />\n        <span\n            role=\"button\"\n            class=\"k-clear-value\"\n            *ngIf=\"showClearButton\"\n            (click)=\"clearValue()\"\n            (mousedown)=\"$event.preventDefault()\"\n            [tabindex]=\"tabIndex\"\n            [attr.aria-label]=\"clearTitle()\"\n            [title]=\"clearTitle()\"\n            (keydown.enter)=\"clearValue($event)\"\n            (keydown.space)=\"clearValue($event)\">\n                <span [ngClass]=\"clearButtonClasses\"></span>\n        </span>\n        <span *ngIf=\"hasErrors\" [ngClass]=\"errorIconClasses\"></span>\n        <span *ngIf=\"isSuccessful\" [ngClass]=\"successIconClasses\"></span>\n        <span class=\"k-input-suffix\">\n            <ng-template\n                *ngIf=\"suffixTemplate\"\n                [ngTemplateOutlet]=\"suffixTemplate?.templateRef\">\n            </ng-template>\n        </span>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            NgZone,
            ChangeDetectorRef,
            Renderer2,
            Injector,
            ElementRef])
    ], TextBoxComponent);
    return TextBoxComponent;
}());

/**
 * @hidden
 */
var TextBoxMessages = /** @class */ (function (_super) {
    __extends(TextBoxMessages, _super);
    function TextBoxMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextBoxMessages.prototype, "clear", void 0);
    return TextBoxMessages;
}(ComponentMessages));

/**
 * Custom component messages override default component messages.
 */
var TextBoxCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(TextBoxCustomMessagesComponent, _super);
    function TextBoxCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    TextBoxCustomMessagesComponent_1 = TextBoxCustomMessagesComponent;
    Object.defineProperty(TextBoxCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var TextBoxCustomMessagesComponent_1;
    TextBoxCustomMessagesComponent = TextBoxCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: TextBoxMessages,
                    useExisting: forwardRef(function () { return TextBoxCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-textbox-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], TextBoxCustomMessagesComponent);
    return TextBoxCustomMessagesComponent;
}(TextBoxMessages));

/**
 * @hidden
 */
var LocalizedTextBoxMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedTextBoxMessagesDirective, _super);
    function LocalizedTextBoxMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedTextBoxMessagesDirective_1 = LocalizedTextBoxMessagesDirective;
    var LocalizedTextBoxMessagesDirective_1;
    LocalizedTextBoxMessagesDirective = LocalizedTextBoxMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: TextBoxMessages,
                    useExisting: forwardRef(function () { return LocalizedTextBoxMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoTextBoxLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedTextBoxMessagesDirective);
    return LocalizedTextBoxMessagesDirective;
}(TextBoxMessages));

/**
 * Specifies a separator in the content of components like the TextArea and the TextBox. ([see examples]({% slug adornments_textbox %}#toc-separator)).
 * @example
 * ```ts-no-run
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-textbox>
 *    <ng-template kendoTextBoxSuffixTemplate>
 *        <kendo-input-separator></kendo-input-separator>
 *        <button kendoButton look="clear" icon="image"></button>
 *    </ng-template>
 *  </kendo-textbox>
 * `
 * })
 * class AppComponent {}
 * ```
 */
var InputSeparatorComponent = /** @class */ (function () {
    function InputSeparatorComponent() {
        this.hostClass = true;
    }
    __decorate([
        HostBinding('class.k-input-separator'),
        __metadata("design:type", Boolean)
    ], InputSeparatorComponent.prototype, "hostClass", void 0);
    InputSeparatorComponent = __decorate([
        Component({
            selector: 'kendo-input-separator, kendo-textbox-separator',
            template: ""
        })
    ], InputSeparatorComponent);
    return InputSeparatorComponent;
}());

/**
 * @hidden
 */
var SHARED_DIRECTIVES = [
    InputSeparatorComponent,
    TextAreaDirective
];
/**
 * @hidden
 */
var SharedModule = /** @class */ (function () {
    function SharedModule() {
    }
    SharedModule = __decorate([
        NgModule({
            declarations: [SHARED_DIRECTIVES],
            exports: [SHARED_DIRECTIVES]
        })
    ], SharedModule);
    return SharedModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the TextBox directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the TextBox module
 * import { TextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, TextBoxModule], // import TextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var TextBoxModule = /** @class */ (function () {
    function TextBoxModule() {
    }
    TextBoxModule = __decorate([
        NgModule({
            declarations: [
                TextBoxDirective,
                TextBoxComponent,
                TextBoxSuffixTemplateDirective,
                TextBoxPrefixTemplateDirective,
                TextBoxCustomMessagesComponent,
                LocalizedTextBoxMessagesDirective
            ],
            exports: [
                TextBoxDirective,
                TextBoxComponent,
                TextBoxSuffixTemplateDirective,
                TextBoxPrefixTemplateDirective,
                EventsModule,
                TextBoxCustomMessagesComponent,
                LocalizedTextBoxMessagesDirective,
                SHARED_DIRECTIVES
            ],
            imports: [CommonModule, EventsModule, SharedModule]
        })
    ], TextBoxModule);
    return TextBoxModule;
}());

/**
 * @hidden
 */
var TextFieldsBase = /** @class */ (function () {
    function TextFieldsBase(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {
        var _this = this;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.injector = injector;
        this.hostElement = hostElement;
        /**
         * Sets the `title` attribute of the internal textarea input element of the component.
         */
        this.title = '';
        /**
         * Sets the disabled state of the TextArea component.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the TextArea component.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Provides a value for the TextArea component.
         */
        this.value = null;
        /**
         * Determines whether the whole value will be selected when the TextArea is clicked. Defaults to `false`.
         *
         * @default false
         */
        this.selectOnFocus = false;
        /**
         * Fires each time the user focuses the internal textarea element of the component.
         * This event is useful when you need to distinguish between focusing the textarea element and focusing one of its adornments.
         */
        this.inputFocus = new EventEmitter();
        /**
         * Fires each time the internal textarea element gets blurred.
         * This event is useful when adornments are used, in order to distinguish between blurring the textarea element and blurring the whole TextArea component.
         */
        this.inputBlur = new EventEmitter();
        this.subscriptions = new Subscription();
        this._isFocused = false;
        this.focusChangedProgrammatically = false;
        /**
         * @hidden
         */
        this.handleInputBlur = function () {
            _this.changeDetector.markForCheck();
            if (hasObservers(_this.inputBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.inputBlur.emit();
                });
            }
        };
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
    }
    Object.defineProperty(TextFieldsBase.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    TextFieldsBase.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    TextFieldsBase.prototype.setDisabledState = function (isDisabled) {
        this.changeDetector.markForCheck();
        this.disabled = isDisabled;
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextFieldsBase.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextFieldsBase.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextFieldsBase.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextFieldsBase.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextFieldsBase.prototype, "selectOnFocus", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextFieldsBase.prototype, "placeholder", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextFieldsBase.prototype, "inputFocus", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextFieldsBase.prototype, "inputBlur", void 0);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", ElementRef)
    ], TextFieldsBase.prototype, "input", void 0);
    __decorate([
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], TextFieldsBase.prototype, "disabledClass", null);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], TextFieldsBase.prototype, "direction", void 0);
    return TextFieldsBase;
}());

var resizeClasses = {
    'vertical': 'k-resize-vertical',
    'horizontal': 'k-resize-horizontal',
    'both': 'k-resize-both',
    'none': 'k-resize-none',
    'auto': 'k-resize-none'
};
var FOCUSED$4 = 'k-focus';
/**
 * Represents the [Kendo UI TextArea component for Angular]({% slug overview_textarea %}).
 */
var TextAreaComponent = /** @class */ (function (_super) {
    __extends(TextAreaComponent, _super);
    function TextAreaComponent(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {
        var _this = _super.call(this, localizationService, ngZone, changeDetector, renderer, injector, hostElement) || this;
        _this.localizationService = localizationService;
        _this.ngZone = ngZone;
        _this.changeDetector = changeDetector;
        _this.renderer = renderer;
        _this.injector = injector;
        _this.hostElement = hostElement;
        /**
         * @hidden
         */
        _this.focusableId = "k-" + guid();
        _this.hostClasses = true;
        /**
         * Specifies the flow direction of the TextArea sections. This property is useful when adornments are used, in order to specify
         * their position in relation to the textarea element.
         *
         * The possible values are:
         * * `vertical`(Default) &mdash;TextArea sections are placed from top to bottom.
         * * `horizontal`&mdash;TextArea sections are placed from left to right in `ltr`, and from right to left in `rtl` mode.
         */
        _this.flow = 'vertical';
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        _this.tabindex = 0;
        /**
         * Configures the resize behavior of the TextArea.
         *
         * The possible values are:
         * * `vertical`(Default)&mdash;The TextArea component can be resized only vertically.
         * * `horizontal`&mdash;The TextArea component can be resized only horizontally.
         * * `both`&mdash;The TextArea component can be resized in both (horizontal and vertical) directions.
         * * `auto`&mdash;Specifies whether the TextArea component will adjust its height automatically, based on the content.
         * * `none`&mdash;The TextArea cannot be resized.
         *
         */
        _this.resizable = 'vertical';
        /**
         * Fires each time the user focuses the TextArea component.
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-textarea (focus)="handleFocus()"></kendo-textarea>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log('Component is focused');
         *   }
         * }
         * ```
         */
        _this.onFocus = new EventEmitter();
        /**
         * Fires each time the TextArea component gets blurred.
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-textarea (blur)="handleBlur()"></kendo-textarea>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log('Component is blurred');
         *   }
         * }
         * ```
         */
        _this.onBlur = new EventEmitter();
        /**
         * Fires each time the value is changed or the component is blurred
         * ([see example]({% slug overview_textarea %}#toc-events)).
         * When the component value is changed programmatically or via its form control binding, the valueChange event is not emitted.
         */
        _this.valueChange = new EventEmitter();
        _this._size = 'medium';
        _this._rounded = 'medium';
        _this._fillMode = 'solid';
        /**
         * @hidden
         */
        _this.handleInput = function (ev) {
            var incomingValue = ev.target.value;
            _this.updateValue(incomingValue);
            _this.resize();
        };
        /**
         * @hidden
         */
        _this.handleInputFocus = function () {
            if (!_this.disabled) {
                if (_this.selectOnFocus && _this.value) {
                    _this.ngZone.run(function () {
                        setTimeout(function () { _this.selectAll(); });
                    });
                }
                if (hasObservers(_this.onFocus)) {
                    if (!_this.isFocused) {
                        _this.ngZone.run(function () {
                            _this.onFocus.emit();
                        });
                    }
                }
                if (hasObservers(_this.inputFocus)) {
                    if (!_this.focusChangedProgrammatically) {
                        _this.ngZone.run(function () {
                            _this.inputFocus.emit();
                        });
                    }
                }
                _this.ngZone.run(function () {
                    _this.isFocused = true;
                });
            }
        };
        validatePackage(packageMetadata);
        _this.direction = localizationService.rtl ? 'rtl' : 'ltr';
        return _this;
    }
    TextAreaComponent_1 = TextAreaComponent;
    Object.defineProperty(TextAreaComponent.prototype, "flowCol", {
        get: function () {
            return this.flow === 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaComponent.prototype, "flowRow", {
        get: function () {
            return this.flow === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the padding of the internal textarea element
         * ([see example]({% slug appearance_textarea %}#toc-size)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaComponent.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the TextArea
         * ([see example]({% slug appearance_textarea %}#toc-rounded)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaComponent.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        /**
         * The fillMode property specifies the background and border styles of the TextArea
         * ([see example]({% slug appearance_textarea %}#toc-fillMode)).
         *
         * The possible values are:
         * * `'flat'`
         * * `'solid'` (default)
         * * `'outline'`
         * * `null`
         */
        set: function (fillMode) {
            this.handleClasses(fillMode, 'fillMode');
            this._fillMode = fillMode;
        },
        enumerable: true,
        configurable: true
    });
    TextAreaComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var hostElement = this.hostElement.nativeElement;
        var cursorInsideWrapper = false;
        var tabbing = false;
        this.ngZone.runOutsideAngular(function () {
            // focusIn and focusOut are relative to the host element
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {
                if (!_this.isFocused) {
                    _this.ngZone.run(function () {
                        _this.onFocus.emit();
                        _this.isFocused = true;
                    });
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {
                if (!_this.isFocused) {
                    return;
                }
                if (tabbing) {
                    var closestTextbox = closest$1(args.relatedTarget, function (element) { return element === _this.hostElement.nativeElement; });
                    if (!closestTextbox) {
                        _this.handleBlur();
                    }
                    tabbing = false;
                }
                else {
                    if (!cursorInsideWrapper) {
                        _this.handleBlur();
                    }
                }
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {
                cursorInsideWrapper = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {
                cursorInsideWrapper = false;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {
                if (args.keyCode === Keys.Tab) {
                    tabbing = true;
                }
                else {
                    tabbing = false;
                }
            }));
            _this.handleFlow();
        });
        var stylingInputs = ['size', 'rounded', 'fillMode'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    TextAreaComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.control = this.injector.get(NgControl, null);
        if (isDocumentAvailable() && this.resizable === 'auto') {
            this.resizeSubscription = fromEvent(window, 'resize')
                .pipe((debounceTime(50)))
                .subscribe(function () { return _this.resize(); });
        }
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.subscriptions = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    TextAreaComponent.prototype.ngOnChanges = function (changes) {
        var hostElement = this.hostElement.nativeElement;
        var element = this.input.nativeElement;
        if (changes.flow) {
            this.handleFlow();
        }
        if (changes.resizable) {
            if (this.resizable === 'auto') {
                this.renderer.removeClass(element, '\!k-overflow-y-auto');
                this.initialHeight = element.offsetHeight;
            }
            else {
                this.renderer.addClass(element, '\!k-overflow-y-auto');
                element.style.height = this.initialHeight + "px";
            }
        }
        if (changes.cols) {
            if (isPresent(changes.cols.currentValue)) {
                this.renderer.setStyle(hostElement, 'width', 'auto');
            }
            else {
                this.renderer.removeStyle(hostElement, 'width');
            }
        }
    };
    TextAreaComponent.prototype.ngAfterViewChecked = function () {
        this.resize();
    };
    /**
     * @hidden
     */
    TextAreaComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    TextAreaComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    TextAreaComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    TextAreaComponent.prototype.updateValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
    };
    TextAreaComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    };
    Object.defineProperty(TextAreaComponent.prototype, "resizableClass", {
        /**
         * @hidden
         */
        get: function () {
            return resizeClasses[this.resizable];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Focuses the TextArea component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="textarea.focus()">Focus the textarea</button>
     *  <kendo-textarea #textarea></kendo-textarea>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    TextAreaComponent.prototype.focus = function () {
        if (!this.input) {
            return;
        }
        this.focusChangedProgrammatically = true;
        this.isFocused = true;
        this.input.nativeElement.focus();
        this.focusChangedProgrammatically = false;
    };
    /**
     * Blurs the TextArea component.
     */
    TextAreaComponent.prototype.blur = function () {
        this.focusChangedProgrammatically = true;
        var isFocusedElement = this.hostElement.nativeElement.querySelector(':focus');
        if (isFocusedElement) {
            isFocusedElement.blur();
        }
        this.isFocused = false;
        this.focusChangedProgrammatically = false;
    };
    TextAreaComponent.prototype.resize = function () {
        if (this.resizable !== 'auto') {
            return;
        }
        var element = this.input.nativeElement;
        this.renderer.setStyle(element, 'height', this.initialHeight + "px");
        var scrollHeight = element.scrollHeight;
        if (scrollHeight > this.initialHeight) {
            element.style.height = scrollHeight + "px";
        }
    };
    Object.defineProperty(TextAreaComponent.prototype, "isFocused", {
        get: function () {
            return this._isFocused;
        },
        set: function (value) {
            if (this._isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value && !this.disabled) {
                    this.renderer.addClass(element, FOCUSED$4);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED$4);
                }
                this._isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    TextAreaComponent.prototype.handleBlur = function () {
        var _this = this;
        this.ngZone.run(function () {
            if (!_this.focusChangedProgrammatically) {
                _this.onBlur.emit();
            }
            _this.isFocused = false;
        });
    };
    TextAreaComponent.prototype.setSelection = function (start, end) {
        if (this.isFocused) {
            invokeElementMethod(this.input, 'setSelectionRange', start, end);
        }
    };
    TextAreaComponent.prototype.selectAll = function () {
        if (this.value) {
            this.setSelection(0, this.value.length);
        }
    };
    TextAreaComponent.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('input', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    TextAreaComponent.prototype.handleFlow = function () {
        var isVertical = this.flow === 'vertical';
        var hostElement = this.hostElement.nativeElement;
        var element = this.input.nativeElement;
        var suffix = hostElement.children[1];
        this.renderer[isVertical ? 'addClass' : 'removeClass'](element, '\!k-flex-none');
        if (suffix) {
            this.renderer[isVertical ? 'removeClass' : 'addClass'](suffix, '\!k-align-items-start');
        }
    };
    var TextAreaComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextAreaComponent.prototype, "focusableId", void 0);
    __decorate([
        HostBinding('class.k-textarea'),
        HostBinding('class.k-input'),
        __metadata("design:type", Boolean)
    ], TextAreaComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('class.\!k-flex-col'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], TextAreaComponent.prototype, "flowCol", null);
    __decorate([
        HostBinding('class.\!k-flex-row'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], TextAreaComponent.prototype, "flowRow", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextAreaComponent.prototype, "flow", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextAreaComponent.prototype, "rows", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextAreaComponent.prototype, "cols", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextAreaComponent.prototype, "maxlength", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], TextAreaComponent.prototype, "tabindex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], TextAreaComponent.prototype, "tabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextAreaComponent.prototype, "resizable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextAreaComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextAreaComponent.prototype, "rounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TextAreaComponent.prototype, "fillMode", null);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], TextAreaComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], TextAreaComponent.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TextAreaComponent.prototype, "valueChange", void 0);
    TextAreaComponent = TextAreaComponent_1 = __decorate([
        Component({
            exportAs: 'kendoTextArea',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.textarea' },
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return TextAreaComponent_1; }),
                    multi: true
                },
                { provide: KendoInput, useExisting: forwardRef(function () { return TextAreaComponent_1; }) }
            ],
            selector: 'kendo-textarea',
            template: "\n        <textarea\n            #input\n            [attr.aria-multiline]=\"true\"\n            [attr.aria-disabled]=\"disabled ? true : undefined\"\n            [attr.aria-readonly]=\"readonly ? true : undefined\"\n            class=\"k-input-inner\"\n            [ngClass]=\"resizableClass\"\n            [id]=\"focusableId\"\n            [value]=\"value\"\n            [attr.placeholder]=\"placeholder\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [attr.rows]=\"rows\"\n            [attr.cols]=\"cols\"\n            [attr.tabindex]=\"tabIndex\"\n            [attr.title]=\"title\"\n            [attr.maxlength]=\"maxlength\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleInputFocus,\n                blur: handleInputBlur,\n                input: handleInput}\">\n            </textarea>\n            <ng-content select=\"kendo-textarea-suffix\"></ng-content>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService,
            NgZone,
            ChangeDetectorRef,
            Renderer2,
            Injector,
            ElementRef])
    ], TextAreaComponent);
    return TextAreaComponent;
}(TextFieldsBase));

/**
 * Specifies the adornments in the suffix container ([see example]({% slug textarea_adornments %})).
 * ```ts-no-run
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-textarea>
 *    <kendo-textarea-suffix>
 *        <button kendoButton look="clear" icon="image"></button>
 *    </kendo-textarea-suffix>
 *  </kendo-textarea>
 * `
 * })
 * class AppComponent {}
 * ```
 */
var TextAreaSuffixComponent = /** @class */ (function () {
    function TextAreaSuffixComponent() {
        this.hostClass = true;
    }
    __decorate([
        HostBinding('class.k-input-suffix'),
        __metadata("design:type", Boolean)
    ], TextAreaSuffixComponent.prototype, "hostClass", void 0);
    TextAreaSuffixComponent = __decorate([
        Component({
            exportAs: 'kendoTextAreaSuffix',
            selector: 'kendo-textarea-suffix',
            template: "<ng-content></ng-content>"
        })
    ], TextAreaSuffixComponent);
    return TextAreaSuffixComponent;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the TextArea component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the TextArea module
 * import { TextAreaModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, TextAreaModule], // import TextArea module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var TextAreaModule = /** @class */ (function () {
    function TextAreaModule() {
    }
    TextAreaModule = __decorate([
        NgModule({
            declarations: [
                TextAreaComponent,
                TextAreaSuffixComponent
            ],
            exports: [
                TextAreaComponent,
                EventsModule,
                TextAreaSuffixComponent,
                SHARED_DIRECTIVES
            ],
            imports: [CommonModule, EventsModule, SharedModule]
        })
    ], TextAreaModule);
    return TextAreaModule;
}());

/**
 * @hidden
 */
var ColorPickerLocalizationService = /** @class */ (function (_super) {
    __extends(ColorPickerLocalizationService, _super);
    function ColorPickerLocalizationService(prefix, messageService, _rtl) {
        return _super.call(this, prefix, messageService, _rtl) || this;
    }
    ColorPickerLocalizationService = __decorate([
        __param(0, Inject(L10N_PREFIX)),
        __param(1, Optional()),
        __param(2, Optional()), __param(2, Inject(RTL)),
        __metadata("design:paramtypes", [String, MessageService, Boolean])
    ], ColorPickerLocalizationService);
    return ColorPickerLocalizationService;
}(LocalizationService));

/**
 * @hidden
 */
var FlatColorPickerLocalizationService = /** @class */ (function (_super) {
    __extends(FlatColorPickerLocalizationService, _super);
    function FlatColorPickerLocalizationService(prefix, messageService, _rtl, colorPickerLocalization) {
        var _this = _super.call(this, prefix, messageService, _rtl) || this;
        _this.colorPickerLocalization = colorPickerLocalization;
        return _this;
    }
    FlatColorPickerLocalizationService.prototype.get = function (shortKey) {
        if (this.colorPickerLocalization) {
            return this.colorPickerLocalization.get(shortKey);
        }
        return _super.prototype.get.call(this, shortKey);
    };
    FlatColorPickerLocalizationService = __decorate([
        __param(0, Inject(L10N_PREFIX)),
        __param(1, Optional()),
        __param(2, Optional()), __param(2, Inject(RTL)),
        __param(3, Optional()), __param(3, Inject(ColorPickerLocalizationService)),
        __metadata("design:paramtypes", [String, MessageService, Boolean, ColorPickerLocalizationService])
    ], FlatColorPickerLocalizationService);
    return FlatColorPickerLocalizationService;
}(LocalizationService));

/**
 * @hidden
 */
var DEFAULT_OUTPUT_FORMAT = 'rgba';
/**
 * @hidden
 */
var DEFAULT_GRADIENT_BACKGROUND_COLOR = 'rgba(255, 0, 0, 1)';
/**
 * @hidden
 */
var DRAGHANDLE_MOVE_SPEED = 5;
/**
 * @hidden
 */
var AAA_RATIO = 7.0;
/**
 * @hidden
 */
var AA_RATIO = 4.5;
/**
 * @hidden
 */
var DEFAULT_PRESET = 'office';
/**
 * @hidden
 */
var DEFAULT_ACCESSIBLE_PRESET = 'accessible';
/**
 * @hidden
 */
var STEP_COUNT = 16;

// tslint:disable:max-line-length
/**
 * @hidden
 */
var PALETTEPRESETS = {
    basic: {
        colors: '000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7',
        columns: 10
    },
    office: {
        colors: 'ffffff, 000000, e6e6e6, 435569, 4371c4, ed7e32, a5a4a5, febf04, 5a9bd5, 71ae48, f2f2f3, 7f7f7f, d1cece, d5dde3, dae1f4, fce5d4, deeded, fff2cc, deeaf6, e1efd9, d7d8d8, 585959, aeabab, adbaca, b4c5e7, f6caac, dbdbdb, ffe498, bcd6ee, c5e0b2, bfbfc0, 3f3f3f, 767070, 8595b1, 8fabdb, f5b183, c9c8c9, fed965, 9bc4e5, a8d08d, a5a5a6, 262625, 393939, 334050, 2e5496, c45a11, 7b7b7a, bf9000, 2f75b5, 548235, 7f7f7f, 0b0c0c, 161616, 222a34, 203764, 843d0b, 525252, 7f6000, 1d4d79, 375623',
        columns: 10
    },
    apex: {
        colors: 'ffffff, 000000, c9c2d1, 69676d, ceb966, 9cb084, 6bb1c9, 6585cf, 7e6bc9, a379bb, f2f2f2, 7f7f7f, f4f2f5, e0e0e2, f5f1e0, ebefe6, e1eff4, e0e6f5, e5e1f4, ece4f1, d8d8d8, 595959, e9e6ec, c2c1c5, ebe3c1, d7dfcd, c3dfe9, c1ceeb, cbc3e9, dac9e3, bfbfbf, 3f3f3f, dedae3, a4a3a8, e1d5a3, c3cfb5, a6d0de, a2b5e2, b1a6de, c7aed6, a5a5a5, 262626, 9688a5, 4e4d51, ae9638, 758c5a, 3d8da9, 365bb0, 533da9, 7d4d99, 7f7f7f, 0c0c0c, 635672, 343336, 746425, 4e5d3c, 295e70, 243c75, 372970, 533366',
        columns: 10
    },
    austin: {
        colors: 'ffffff, 000000, caf278, 3e3d2d, 94c600, 71685a, ff6700, 909465, 956b43, fea022, f2f2f2, 7f7f7f, f4fce4, dddcd0, efffc0, e3e1dc, ffe0cb, e8e9df, ece1d6, feecd2, d8d8d8, 595959, e9f9c9, bbb9a1, dfff82, c8c3ba, ffc299, d2d4c0, dac3ad, fed9a6, bfbfbf, 3f3f3f, dff7ae, ada598, cfff43, ada598, ffa365, bcbfa1, c8a585, fec67a, a5a5a5, 262626, a9ea25, 2e2d21, 6f9400, 544e43, bf4d00, 6c6f4b, 6f5032, d77b00, 7f7f7f, 0c0c0c, 74a50f, 1f1e16, 4a6300, 38342d, 7f3300, 484a32, 4a3521, 8f5200',
        columns: 10
    },
    clarity: {
        colors: 'ffffff, 292934, f3f2dc, d2533c, 93a299, ad8f67, 726056, 4c5a6a, 808da0, 79463d, f2f2f2, e7e7ec, e7e5b9, f6dcd8, e9ecea, eee8e0, e4dedb, d8dde3, e5e8ec, e9d6d3, d8d8d8, c4c4d1, d5d185, edbab1, d3d9d6, ded2c2, c9beb8, b2bcc8, ccd1d9, d3aea7, bfbfbf, 8a8aa3, aca73b, e4978a, bec7c1, cdbba3, af9e94, 8c9bac, b2bac6, bd857c, a5a5a5, 56566e, 56531d, a43925, 6b7c72, 866b48, 554840, 39434f, 5c697b, 5a342d, 7f7f7f, 3b3b4b, 22210b, 6d2619, 47534c, 594730, 39302b, 262d35, 3d4652, 3c231e',
        columns: 10
    },
    slipstream: {
        colors: 'ffffff, 000000, b4dcfa, 212745, 4e67c8, 5eccf3, a7ea52, 5dceaf, ff8021, f14124, f2f2f2, 7f7f7f, 8bc9f7, c7cce4, dbe0f4, def4fc, edfadc, def5ef, ffe5d2, fcd9d3, d8d8d8, 595959, 4facf3, 909aca, b8c2e9, beeafa, dbf6b9, beebdf, ffcca6, f9b3a7, bfbfbf, 3f3f3f, 0d78c9, 5967af, 94a3de, 9ee0f7, caf297, 9de1cf, ffb279, f68d7b, a5a5a5, 262626, 063c64, 181d33, 31479f, 11b2eb, 81d319, 34ac8b, d85c00, c3260c, 7f7f7f, 0c0c0c, 021828, 101322, 202f6a, 0b769c, 568c11, 22725c, 903d00, 821908',
        columns: 10
    },
    metro: {
        colors: 'ffffff, 000000, d6ecff, 4e5b6f, 7fd13b, ea157a, feb80a, 00addc, 738ac8, 1ab39f, f2f2f2, 7f7f7f, a7d6ff, d9dde4, e5f5d7, fad0e4, fef0cd, c5f2ff, e2e7f4, c9f7f1, d8d8d8, 595959, 60b5ff, b3bcca, cbecb0, f6a1c9, fee29c, 8be6ff, c7d0e9, 94efe3, bfbfbf, 3f3f3f, 007dea, 8d9baf, b2e389, f272af, fed46b, 51d9ff, aab8de, 5fe7d5, a5a5a5, 262626, 003e75, 3a4453, 5ea226, af0f5b, c58c00, 0081a5, 425ea9, 138677, 7f7f7f, 0c0c0c, 00192e, 272d37, 3f6c19, 750a3d, 835d00, 00566e, 2c3f71, 0c594f',
        columns: 10
    },
    flow: {
        colors: 'ffffff, 000000, dbf5f9, 04617b, 0f6fc6, 009dd9, 0bd0d9, 10cf9b, 7cca62, a5c249, f2f2f2, 7f7f7f, b2e9f2, b4ecfc, c7e2fa, c4eeff, c9fafc, c9faed, e4f4df, edf2da, d8d8d8, 595959, 76d9e8, 6adafa, 90c6f6, 89deff, 93f5f9, 94f6db, cae9c0, dbe6b6, bfbfbf, 3f3f3f, 21b2c8, 20c8f7, 59a9f2, 4fceff, 5df0f6, 5ff2ca, b0dfa0, c9da91, a5a5a5, 262626, 105964, 02485c, 0b5394, 0075a2, 089ca2, 0b9b74, 54a838, 7e9532, 7f7f7f, 0c0c0c, 062328, 01303d, 073763, 004e6c, 05686c, 07674d, 387025, 546321',
        columns: 10
    },
    hardcover: {
        colors: 'ffffff, 000000, ece9c6, 895d1d, 873624, d6862d, d0be40, 877f6c, 972109, aeb795, f2f2f2, 7f7f7f, e1dca5, f2e0c6, f0d0c9, f6e6d5, f5f2d8, e7e5e1, fbc7bc, eef0e9, d8d8d8, 595959, d0c974, e6c28d, e2a293, eeceaa, ece5b2, cfccc3, f78f7a, dee2d4, bfbfbf, 3f3f3f, a29a36, daa454, d4735e, e6b681, e2d88c, b7b2a5, f35838, ced3bf, a5a5a5, 262626, 514d1b, 664515, 65281a, a2641f, a39428, 655f50, 711806, 879464, 7f7f7f, 0c0c0c, 201e0a, 442e0e, 431b11, 6c4315, 6d621a, 433f35, 4b1004, 5a6243',
        columns: 10
    },
    trek: {
        colors: 'ffffff, 000000, fbeec9, 4e3b30, f0a22e, a5644e, b58b80, c3986d, a19574, c17529, f2f2f2, 7f7f7f, f7e09e, e1d6cf, fcecd5, eddfda, f0e7e5, f3eae1, ece9e3, f5e3d1, d8d8d8, 595959, f3cc5f, c4ad9f, f9d9ab, dcc0b6, e1d0cc, e7d5c4, d9d4c7, ebc7a3, bfbfbf, 3f3f3f, d29f0f, a78470, f6c781, cba092, d2b9b2, dbc1a7, c6bfab, e1ac76, a5a5a5, 262626, 694f07, 3a2c24, c87d0e, 7b4b3a, 926255, a17242, 7b7153, 90571e, 7f7f7f, 0c0c0c, 2a1f03, 271d18, 855309, 523226, 614138, 6b4c2c, 524b37, 603a14',
        columns: 10
    },
    verve: {
        colors: 'ffffff, 000000, d2d2d2, 666666, ff388c, e40059, 9c007f, 68007f, 005bd3, 00349e, f2f2f2, 7f7f7f, bdbdbd, e0e0e0, ffd7e8, ffc6dc, ffb8f1, f1b2ff, c3dcff, b8cfff, d8d8d8, 595959, 9d9d9d, c1c1c1, ffafd1, ff8eba, ff71e4, e365ff, 87baff, 72a0ff, bfbfbf, 3f3f3f, 696969, a3a3a3, ff87ba, ff5597, ff2ad7, d519ff, 4b98ff, 2b71ff, a5a5a5, 262626, 343434, 4c4c4c, e90062, ab0042, 75005f, 4e005f, 00449e, 002676, 7f7f7f, 0c0c0c, 151515, 333333, 9b0041, 72002c, 4e003f, 34003f, 002d69, 00194f',
        columns: 10
    },
    monochrome: {
        colors: '000000, 1a1a1a, 333333, 4d4d4d, 666666, 808080, 999999, b3b3b3, cccccc, e6e6e6, f2f2f2, ffffff',
        columns: 12
    },
    accessible: {
        colors: 'black, grey, darkred, red, darkorange, gold, green, blue, darkblue, purple, white, darkgrey, saddlebrown, pink, orange, yellow, lightgreen, lightskyblue, lightblue, mediumpurple',
        columns: 10
    }
};

/**
 * @hidden
 */
var FlatColorPickerService = /** @class */ (function () {
    function FlatColorPickerService() {
    }
    FlatColorPickerService.prototype.getPaletteSettings = function (settings, format) {
        var defaultPreset = (format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;
        var settingsPalette = settings.palette;
        var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?
            PALETTEPRESETS[settingsPalette].columns :
            undefined;
        return {
            palette: settingsPalette || defaultPreset,
            tileSize: settings.tileSize || 24,
            columns: settings.columns || presetColumns || 10
        };
    };
    FlatColorPickerService.prototype.paletteTileLayout = function (tileSize) {
        if (typeof tileSize === 'number') {
            return { width: tileSize, height: tileSize };
        }
        return {
            width: tileSize.width ? tileSize.width : tileSize.height,
            height: tileSize.height ? tileSize.height : tileSize.width
        };
    };
    FlatColorPickerService = __decorate([
        Injectable()
    ], FlatColorPickerService);
    return FlatColorPickerService;
}());

/**
 * Arguments for the `cancel` event of the ColorPicker and FlatColorPicker components.
 */
var ColorPickerCancelEvent = /** @class */ (function (_super) {
    __extends(ColorPickerCancelEvent, _super);
    function ColorPickerCancelEvent(originalEvent) {
        var _this = _super.call(this) || this;
        _this.originalEvent = originalEvent;
        return _this;
    }
    return ColorPickerCancelEvent;
}(PreventableEvent));

/**
 * Arguments for the `close` event of the ColorPicker component.
 */
var ColorPickerCloseEvent = /** @class */ (function (_super) {
    __extends(ColorPickerCloseEvent, _super);
    function ColorPickerCloseEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ColorPickerCloseEvent;
}(PreventableEvent));

/**
 * Arguments for the `open` event of the ColorPicker component.
 */
var ColorPickerOpenEvent = /** @class */ (function (_super) {
    __extends(ColorPickerOpenEvent, _super);
    function ColorPickerOpenEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ColorPickerOpenEvent;
}(PreventableEvent));

/**
 * Fires each time the left side of the ColorPicker wrapper is clicked.
 * The event is triggered regardless of whether a ColorPicker icon is set or not.
 *
 * Provides information about the current active color and gives the option to prevent the opening of the popup.
 *
 * @example
 *
 * ```ts-no-run
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-colorpicker
 *           [icon]="'edit-tools'"
 *           [value]="'#900'"
 *           (activeColorClick)="handleActiveColorClick($event)"
 *       >
 *       </kendo-colorpicker>
 *   `
 * })
 * class AppComponent {
 *     public handleActiveColorClick(event: ActiveColorClickEvent): void {
 *         event.preventOpen();
 *
 *         console.log('Open prevented:', event.isOpenPrevented());
 *         console.log('Current color:', event.color);
 *     }
 *  }
 * ```
 */
var ActiveColorClickEvent = /** @class */ (function () {
    /**
     * @hidden
     * @param color Represents the current value of the ColorPicker.
     */
    function ActiveColorClickEvent(color) {
        this.color = color;
        this.openPrevented = false;
    }
    /**
     * Prevents the opening of the popup.
     */
    ActiveColorClickEvent.prototype.preventOpen = function () {
        this.openPrevented = true;
    };
    /**
     * Returns `true` if the popup opening is prevented by any of its subscribers.
     *
     * @returns - Returns `true` if the open action was prevented. Otherwise, returns `false`.
     */
    ActiveColorClickEvent.prototype.isOpenPrevented = function () {
        return this.openPrevented;
    };
    return ActiveColorClickEvent;
}());

/**
 * @hidden
 *
 * Returns the hex or rgba string representation of the color.
 */
var parseColor$1 = function (value, format, opacityEnabled, safe) {
    if (opacityEnabled === void 0) { opacityEnabled = false; }
    if (safe === void 0) { safe = true; }
    var allowedFormats = ['hex', 'rgba', 'name'];
    if (allowedFormats.indexOf(format) === -1) {
        throw new Error("Unsupported color output format '" + format + "'. The available options are 'hex', 'rgba' or 'name'.");
    }
    if (!isPresent(value)) {
        return;
    }
    if (format === 'name') {
        return nameFormat(value, safe);
    }
    var parsedColor = parseColor(value.trim(), safe);
    if (!isPresent(parsedColor)) {
        return;
    }
    var parsedColorResult = format === 'hex' ? getHexValue(parsedColor, opacityEnabled) : parsedColor.toCssRgba();
    return parsedColorResult;
};
/**
 * @hidden
 *
 * Returns an HSV object representation of the color string.
 */
var getHSV = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = parseColor(value, safe);
    if (!isPresent(parsed)) {
        return {};
    }
    return parsed.toHSV();
};
/**
 * @hidden
 *
 * Returns an RGBA object representation of the color string.
 */
var getRGBA = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = parseColor(value, safe);
    if (!isPresent(parsed)) {
        return {};
    }
    return parsed.toBytes();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
var getColorFromHSV = function (hsva, format, opacityEnabled) {
    if (format === void 0) { format = 'rgba'; }
    if (opacityEnabled === void 0) { opacityEnabled = false; }
    var hue = fitIntoBounds(hsva.h, 0, 359.9);
    var saturation = fitIntoBounds(hsva.s, 0, 1);
    var value = fitIntoBounds(hsva.v, 0, 1);
    var alpha = fitIntoBounds(hsva.a, 0, 1);
    var color = Color.fromHSV(hue, saturation, value, alpha);
    return format === 'hex' ? getHexValue(color, opacityEnabled) : color.toCssRgba();
};
/**
 * @hidden
 *
 * Returns the HEX value.
 */
var getHexValue = function (color, opacity) {
    return opacity && color.a < 1 ? color.toCss({ alpha: true }) : color.toCss();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color based on the `hue`, assuming the `value`, `saturation` and `alpha` have value of `1`.
 */
var getColorFromHue = function (hue) {
    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
var getColorFromRGBA = function (rgba) {
    var red = fitIntoBounds(rgba.r, 0, 255);
    var green = fitIntoBounds(rgba.g, 0, 255);
    var blue = fitIntoBounds(rgba.b, 0, 255);
    var alpha = fitIntoBounds(rgba.a, 0, 1);
    return Color.fromBytes(red, green, blue, alpha).toCssRgba();
};
/**
 *
 * @hidden
 */
function nameFormat(value, safe) {
    value = value.toLowerCase().trim();
    if (isPresent(namedColors[value])) {
        return value;
    }
    if (parseColor(value, safe)) {
        value = parseColor(value, safe).toHex();
    }
    var key = Object.keys(namedColors).find(function (key) { return namedColors[key] === value; });
    if (!key && !safe) {
        throw new Error("The provided color " + value + " is not supported for 'format=\"name\"' property.To display " + value + " color, the component 'format' property should be set to 'hex' or 'rgba' ");
    }
    return key;
}
/**
 * @hidden
 *
 * Returns the RGB object representation of the color based on the background color.
 */
var getRGBFromRGBA = function (foregroundColor, backgroundColor) {
    var r1 = fitIntoBounds(foregroundColor.r, 0, 255);
    var g1 = fitIntoBounds(foregroundColor.g, 0, 255);
    var b1 = fitIntoBounds(foregroundColor.b, 0, 255);
    var a1 = fitIntoBounds(foregroundColor.a, 0, 1);
    var r2 = fitIntoBounds(backgroundColor.r, 0, 255);
    var g2 = fitIntoBounds(backgroundColor.g, 0, 255);
    var b2 = fitIntoBounds(backgroundColor.b, 0, 255);
    return {
        r: Math.round(((1 - a1) * r2) + (a1 * r1)),
        g: Math.round(((1 - a1) * g2) + (a1 * g1)),
        b: Math.round(((1 - a1) * b2) + (a1 * b1))
    };
};
/**
 * @hidden
 *
 * Returns the relative luminance.
 */
var getLuminance = function (rgb) {
    var a = [rgb.r, rgb.g, rgb.b].map(function (v) {
        v /= 255;
        return v <= 0.03928
            ? v / 12.92
            : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
};
/**
 * @hidden
 *
 * Returns the color contrast.
 */
var getContrast = function (luminance1, luminance2) {
    var brightest = Math.max(luminance1, luminance2);
    var darkest = Math.min(luminance1, luminance2);
    return (brightest + 0.05)
        / (darkest + 0.05);
};
/**
 * @hidden
 *
 * Returns the color contrast from two RGBA colors.
 */
var getContrastFromTwoRGBAs = function (a, b) {
    return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));
};

/**
 * @hidden
 */
var bezierCommand = function (controlPointCalc) { return function (point, i, a) {
    // start control point
    var _a = controlPointCalc(a[i - 1], a[i - 2], point), cpsX = _a[0], cpsY = _a[1];
    // end control point
    var _b = controlPointCalc(point, a[i - 1], a[i + 1], true), cpeX = _b[0], cpeY = _b[1];
    return "C " + cpsX + "," + cpsY + " " + cpeX + "," + cpeY + " " + point[0] + "," + point[1];
}; };
/**
 * @hidden
 */
var controlPoint = function (lineCalc) {
    return function (current, previous, next, reverse) {
        // when 'current' is the first or last point of the array
        // 'previous' and 'next' are undefined
        // replace with 'current'
        var p = previous || current;
        var n = next || current;
        var smooth = 0.1;
        // properties of the line between previous and next
        var l = lineCalc(p, n);
        // If is end-control-point, add PI to the angle to go backward
        var angle = l.angle + (reverse ? Math.PI : 0);
        var length = l.length * smooth;
        // The control point position is relative to the current point
        var x = current[0] + Math.cos(angle) * length;
        var y = current[1] + Math.sin(angle) * length;
        return [x, y];
    };
};
/**
 * @hidden
 */
var line = function (pointA, pointB) {
    var lengthX = pointB[0] - pointA[0];
    var lengthY = pointB[1] - pointA[1];
    return {
        length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
        angle: Math.atan2(lengthY, lengthX)
    };
};
/**
 * @hidden
 *
 * Render the svg <path> element.
 *
 * @param points (array) Represents the points coordinates as an array of tuples.
 * @param command (function) The command that is used (bezierCommand, lineCommand).
 *      @param point (array) [x,y] Represents the current point coordinates.
 *      @param i (integer) Represents the index of 'point' in the array 'a'.
 *      @param a (array) Represents the complete array of points coordinates.
 *      @output (string) a svg path command.
 * @output (string) a Svg <path> element
 */
var svgPath = function (points, command) {
    if (points.length === 0) {
        return '';
    }
    // build the d attributes by looping over the points
    var d = points.reduce(function (acc, point, i, a) {
        return i === 0 ?
            // if first point
            "M " + point[0] + "," + point[1] :
            // else
            acc + " " + command(point, i, a);
    }, '');
    return d;
};

/**
 * @hidden
 */
var ColorGradientLocalizationService = /** @class */ (function (_super) {
    __extends(ColorGradientLocalizationService, _super);
    function ColorGradientLocalizationService(prefix, messageService, _rtl, flatColorPickerLocalization) {
        var _this = _super.call(this, prefix, messageService, _rtl) || this;
        _this.flatColorPickerLocalization = flatColorPickerLocalization;
        return _this;
    }
    ColorGradientLocalizationService.prototype.get = function (shortKey) {
        if (this.flatColorPickerLocalization) {
            return this.flatColorPickerLocalization.get(shortKey);
        }
        return _super.prototype.get.call(this, shortKey);
    };
    ColorGradientLocalizationService = __decorate([
        __param(0, Inject(L10N_PREFIX)),
        __param(1, Optional()),
        __param(2, Optional()), __param(2, Inject(RTL)),
        __param(3, Optional()), __param(3, Inject(FlatColorPickerLocalizationService)),
        __metadata("design:paramtypes", [String, MessageService, Boolean, FlatColorPickerLocalizationService])
    ], ColorGradientLocalizationService);
    return ColorGradientLocalizationService;
}(LocalizationService));

/**
 * @hidden
 */
var ColorInputComponent = /** @class */ (function () {
    function ColorInputComponent(host, renderer, localizationService) {
        this.host = host;
        this.renderer = renderer;
        this.localizationService = localizationService;
        /**
         * The id of the hex input.
         */
        this.focusableId = "k-" + guid();
        /**
         * Sets whether the alpha slider will be shown.
         */
        this.opacity = true;
        /**
         * Sets the disabled state of the ColorInput.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorInput.
         */
        this.readonly = false;
        /**
         * Emits a parsed rgba string color.
         */
        this.valueChange = new EventEmitter();
        this.colorInputClass = true;
        /**
         * The rgba inputs values.
         */
        this.rgba = {};
        this.subscriptions = new Subscription();
    }
    Object.defineProperty(ColorInputComponent.prototype, "isFocused", {
        /**
         * Indicates whether any of the inputs are focused.
         */
        get: function () {
            if (!(isDocumentAvailable() && isPresent(this.host))) {
                return false;
            }
            var activeElement = document.activeElement;
            return this.host.nativeElement.contains(activeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorInputComponent.prototype, "rgbaInputValid", {
        /**
         * Indicates whether any of the rgba inputs have value.
         */
        get: function () {
            var _this = this;
            return Object.keys(this.rgba).every(function (key) { return isPresent(_this.rgba[key]); });
        },
        enumerable: true,
        configurable: true
    });
    ColorInputComponent.prototype.ngAfterViewInit = function () {
        this.initDomEvents();
    };
    ColorInputComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    ColorInputComponent.prototype.ngOnChanges = function (changes) {
        if (isPresent(changes.value) && !this.isFocused) {
            this.hex = parseColor$1(this.value, 'hex', this.opacity);
            this.rgba = getRGBA(this.value);
            this.rgba.a = parseColor$1(this.value, 'rgba', this.opacity) ? this.rgba.a : 1;
        }
    };
    Object.defineProperty(ColorInputComponent.prototype, "formatButtonTitle", {
        get: function () {
            return this.localizationService.get('formatButton');
        },
        enumerable: true,
        configurable: true
    });
    ColorInputComponent.prototype.handleRgbaValueChange = function () {
        var color = getColorFromRGBA(this.rgba);
        if (!this.rgbaInputValid || color === this.value) {
            return;
        }
        this.value = color;
        this.rgba = getRGBA(this.value);
        this.hex = parseColor$1(color, 'hex', this.opacity);
        this.valueChange.emit(color);
    };
    ColorInputComponent.prototype.handleHexValueChange = function (hex) {
        this.hex = hex;
        var color = parseColor$1(hex, 'rgba', this.opacity);
        if (!isPresent(color) || color === this.value) {
            return;
        }
        this.value = color;
        this.rgba = getRGBA(color);
        this.valueChange.emit(color);
    };
    ColorInputComponent.prototype.handleRgbaInputBlur = function () {
        if (!this.rgbaInputValid) {
            this.rgba = getRGBA(this.value);
        }
    };
    ColorInputComponent.prototype.handleHexInputBlur = function () {
        this.hex = parseColor$1(this.value, 'hex', this.opacity);
    };
    ColorInputComponent.prototype.toggleFormatView = function () {
        this.formatView = this.formatView === 'hex' ? 'rgba' : 'hex';
    };
    ColorInputComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.host) {
            return;
        }
        this.subscriptions.add(this.renderer.listen(this.toggleFormatButton.nativeElement, 'click', function () { return _this.toggleFormatView(); }));
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorInputComponent.prototype, "focusableId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorInputComponent.prototype, "formatView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorInputComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorInputComponent.prototype, "opacity", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorInputComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorInputComponent.prototype, "readonly", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorInputComponent.prototype, "valueChange", void 0);
    __decorate([
        HostBinding('class.k-colorgradient-inputs'),
        HostBinding('class.k-hstack'),
        __metadata("design:type", Boolean)
    ], ColorInputComponent.prototype, "colorInputClass", void 0);
    __decorate([
        ViewChild('opacityInput', { static: false }),
        __metadata("design:type", NumericTextBoxComponent)
    ], ColorInputComponent.prototype, "opacityInput", void 0);
    __decorate([
        ViewChild('hexInput', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], ColorInputComponent.prototype, "hexInput", void 0);
    __decorate([
        ViewChild('blueInput', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], ColorInputComponent.prototype, "blueInput", void 0);
    __decorate([
        ViewChild('toggleFormatButton', { static: false }),
        __metadata("design:type", ElementRef)
    ], ColorInputComponent.prototype, "toggleFormatButton", void 0);
    ColorInputComponent = __decorate([
        Component({
            selector: 'kendo-colorinput',
            template: "\n        <div class=\"k-vstack\">\n            <button #toggleFormatButton\n                class=\"k-colorgradient-toggle-mode k-button k-button-md k-button-flat k-button-flat-base k-icon-button\"\n                [attr.aria-label]=\"formatButtonTitle\"\n                [attr.title]=\"formatButtonTitle\"\n                type=\"button\"\n            >\n                <span class=\"k-button-icon k-icon k-i-arrows-kpi\"></span>\n            </button>\n        </div>\n        <div *ngIf=\"formatView === 'hex'\" class=\"k-vstack\">\n            <input\n                #hexInput\n                [id]=\"focusableId\"\n                class=\"k-input k-textbox k-input-solid k-input-md k-rounded-md k-hex-value\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [value]=\"hex || ''\"\n                (blur)=\"handleHexInputBlur()\"\n                (input)=\"handleHexValueChange(hexInput.value)\"\n            />\n            <label [for]=\"focusableId\" class=\"k-colorgradient-input-label\">HEX</label>\n        </div>\n        <ng-container *ngIf=\"formatView === 'rgba'\">\n            <div class=\"k-vstack\">\n                <kendo-numerictextbox\n                    #red\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [min]=\"0\"\n                    [max]=\"255\"\n                    [(value)]=\"rgba.r\"\n                    [autoCorrect]=\"true\"\n                    [spinners]=\"false\"\n                    [format]=\"'n'\"\n                    [decimals]=\"0\"\n                    (blur)=\"handleRgbaInputBlur()\"\n                    (valueChange)=\"handleRgbaValueChange()\">\n                </kendo-numerictextbox>\n                <label [for]=\"red.focusableId\" class=\"k-colorgradient-input-label\">R</label>\n            </div>\n            <div class=\"k-vstack\">\n                <kendo-numerictextbox\n                    #green\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [min]=\"0\"\n                    [max]=\"255\"\n                    [(value)]=\"rgba.g\"\n                    [autoCorrect]=\"true\"\n                    [spinners]=\"false\"\n                    [format]=\"'n'\"\n                    [decimals]=\"0\"\n                    (blur)=\"handleRgbaInputBlur()\"\n                    (valueChange)=\"handleRgbaValueChange()\">\n                </kendo-numerictextbox>\n                <label [for]=\"green.focusableId\" class=\"k-colorgradient-input-label\">G</label>\n            </div>\n            <div class=\"k-vstack\">\n                <kendo-numerictextbox\n                    #blue\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [min]=\"0\"\n                    [max]=\"255\"\n                    [(value)]=\"rgba.b\"\n                    [autoCorrect]=\"true\"\n                    [spinners]=\"false\"\n                    [format]=\"'n'\"\n                    [decimals]=\"0\"\n                    (blur)=\"handleRgbaInputBlur()\"\n                    (valueChange)=\"handleRgbaValueChange()\">\n                </kendo-numerictextbox>\n                <label [for]=\"blue.focusableId\" class=\"k-colorgradient-input-label\">B</label>\n            </div>\n            <div class=\"k-vstack\" *ngIf=\"opacity\">\n                <kendo-numerictextbox  #opacityInput\n                    #alpha\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [min]=\"0\"\n                    [max]=\"1\"\n                    [(value)]=\"rgba.a\"\n                    [autoCorrect]=\"true\"\n                    [spinners]=\"false\"\n                    [step]=\"0.01\"\n                    [format]=\"'n2'\"\n                    [decimals]=\"2\"\n                    (blur)=\"handleRgbaInputBlur()\"\n                    (valueChange)=\"handleRgbaValueChange()\">\n                </kendo-numerictextbox>\n                <label [for]=\"alpha.focusableId\" class=\"k-colorgradient-input-label\">A</label>\n            </div>\n        </ng-container>\n    "
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            LocalizationService])
    ], ColorInputComponent);
    return ColorInputComponent;
}());

var serial = 0;
/**
 * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.
 * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
var ColorGradientComponent = /** @class */ (function () {
    function ColorGradientComponent(host, ngZone, renderer, cdr, localizationService) {
        var _this = this;
        this.host = host;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.cdr = cdr;
        this.localizationService = localizationService;
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.id = "k-colorgradient-" + serial++;
        /**
         * Defines whether the alpha slider will be displayed.
         *
         * @default true
         */
        this.opacity = true;
        /**
         * Sets the disabled state of the ColorGradient.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorGradient.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Specifies whether the ColorGradient should display a 'Clear color' button.
         *
         * @default false
         */
        this.clearButton = false;
        /**
         * Determines the delay time (in milliseconds) before the value is changed on handle drag. A value of 0 indicates no delay.
         *
         * @default 0
         */
        this.delay = 0;
        /**
         * Specifies the output format of the ColorGradientComponent.
         * The input value may be in a different format, but it will be parsed into the output `format`
         * after the component processes it.
         *
         * The supported values are:
         * * (Default) `rgba`
         * * `hex`
         */
        this.format = DEFAULT_OUTPUT_FORMAT;
        /**
         * Fires each time the user selects a new color.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.backgroundColor = DEFAULT_GRADIENT_BACKGROUND_COLOR;
        /**
         * @hidden
         *
         * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.
         * The values are initially set in `ngOnInit` or in `ngOnChanges` and are
         * updated on moving the drag handle or the sliders.
         */
        this.hsva = new BehaviorSubject({});
        this._tabindex = 0;
        this.listeners = [];
        this.hueSliderTouched = false;
        this.alphaSliderTouched = false;
        this.updateValues = new Subject();
        this.notifyNgChanged = function () { };
        this.notifyNgTouched = function () { };
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    ColorGradientComponent_1 = ColorGradientComponent;
    Object.defineProperty(ColorGradientComponent.prototype, "readonlyAttribute", {
        get: function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "gradientId", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "hostTabindex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format, this.opacity);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "contrastTool", {
        get: function () {
            return this._contrastTool;
        },
        /**
         * Enables the color contrast tool. Accepts the background color that will be compared to the selected value.
         * The tool will calculate the contrast ratio between the two colors.
         */
        set: function (value) {
            this._contrastTool = parseColor$1(value, this.format, this.opacity);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         *
         * @default 0
         */
        set: function (value) {
            if (isPresent(value)) {
                var tabindex = Number(value);
                this._tabindex = !isNaN(tabindex) ? tabindex : 0;
            }
            else {
                // Allows removal of the tabindex attribute
                this._tabindex = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "isFocused", {
        /**
         * Indicates whether the ColorGradient or any of its content is focused.
         */
        get: function () {
            if (!(isDocumentAvailable() && isPresent(this.host))) {
                return false;
            }
            return this.host.nativeElement === document.activeElement || this.host.nativeElement.contains(document.activeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "alphaSliderValue", {
        /**
         * @hidden
         */
        get: function () {
            // setting the initial value to undefined to force the slider to recalculate the height of the slider track on the next cdr run
            if (!(isPresent(this.hsva.value) && isPresent(this.hsva.value.a))) {
                return;
            }
            return this.hsva.value.a * 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "gradientRect", {
        get: function () {
            return this.gradientWrapper.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "contrastToolVisible", {
        /**
         * @hidden
         */
        get: function () {
            return this.contrastTool && this.contrastTool.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    ColorGradientComponent.prototype.ngAfterViewInit = function () {
        this.updateUI();
        this.cdr.detectChanges();
        this.addEventListeners();
        this.subscribeChanges();
    };
    ColorGradientComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged('value', changes) && !this.isFocused) {
            this.updateUI();
        }
        if (isChanged('delay', changes)) {
            this.unsubscribeChanges();
            this.subscribeChanges();
        }
    };
    ColorGradientComponent.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (removeListener) { return removeListener(); });
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.unsubscribeChanges();
    };
    /**
     * Focuses the component.
     */
    ColorGradientComponent.prototype.focus = function () {
        if (this.disabled) {
            return;
        }
        this.gradientDragHandle.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.reset = function () {
        this.handleValueChange(undefined);
        this.updateUI();
        this.host.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleDragPress = function (args) {
        if (this.disabled || this.readonly || !isPresent(args.originalEvent)) {
            return;
        }
        this.focus();
        args.originalEvent.preventDefault();
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.onHandleDrag = function (args) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');
        this.changePosition(args);
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.onHandleRelease = function () {
        if (this.disabled || this.readonly) {
            return;
        }
        this.renderer.removeClass(this.gradientWrapper.nativeElement, 'k-dragging');
        this.handleValueChange(getColorFromHSV(this.hsva.value, this.format, this.opacity));
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.onKeyboardAction = function (args) {
        var _this = this;
        if (this.disabled || this.readonly) {
            return;
        }
        if (args.key && args.key.indexOf('Arrow') !== -1) {
            args.preventDefault();
            var dragHandleElement = this.gradientDragHandle.nativeElement;
            this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');
            var keyboardMoveX = 0;
            var keyboardMoveY = 0;
            switch (args.key) {
                case 'ArrowRight':
                    keyboardMoveX = DRAGHANDLE_MOVE_SPEED;
                    break;
                case 'ArrowLeft':
                    keyboardMoveX = -DRAGHANDLE_MOVE_SPEED;
                    break;
                case 'ArrowUp':
                    keyboardMoveY = -DRAGHANDLE_MOVE_SPEED;
                    break;
                case 'ArrowDown':
                    keyboardMoveY = DRAGHANDLE_MOVE_SPEED;
                    break;
                default: break;
            }
            var newY_1 = parseInt(dragHandleElement.style.top, 10) + keyboardMoveY;
            var newX_1 = parseInt(dragHandleElement.style.left, 10) + keyboardMoveX;
            this.renderer.setStyle(dragHandleElement, 'top', newY_1 + "px");
            this.renderer.setStyle(dragHandleElement, 'left', newX_1 + "px");
            this.ngZone.run(function () { return _this.moveDragHandle(newX_1, newY_1); });
        }
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.changePosition = function (position) {
        var _this = this;
        if (this.disabled || this.readonly) {
            return;
        }
        this.gradientDragHandle.nativeElement.focus();
        var gradientRect = this.gradientRect;
        var newX = position.clientX - gradientRect.left;
        var newY = position.clientY - gradientRect.top;
        this.ngZone.run(function () { return _this.moveDragHandle(newX, newY); });
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleHueSliderChange = function (hue) {
        var hsva = this.hsva.value;
        hsva.h = hue;
        this.hsva.next(hsva);
        this.handleValueChange(getColorFromHSV(this.hsva.value, this.format, this.opacity));
        this.backgroundColor = getColorFromHue(hue);
        this.setBackgroundColor(this.backgroundColor);
        this.setAlphaSliderBackground(this.backgroundColor);
        this.hueSliderTouched = true;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleAlphaSliderChange = function (alpha) {
        var hsva = this.hsva.value;
        hsva.a = alpha / 100;
        this.hsva.next(hsva);
        this.handleValueChange(getColorFromHSV(this.hsva.value, this.format, this.opacity));
        this.alphaSliderTouched = true;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleInputsValueChange = function (color) {
        var parsed = parseColor$1(color, this.format, this.opacity);
        if (this.value !== parsed) {
            this.handleValueChange(parsed);
            this.updateUI();
        }
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (isPresent(this.gradientWrapper)) {
            this.updateUI();
        }
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    Object.defineProperty(ColorGradientComponent.prototype, "colorGradientHandleTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('colorGradientHandle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "colorGradientHandleAriaLabel", {
        /**
         * @hidden
         */
        get: function () {
            var parsed = parseColor$1(this.value, this.format, this.opacity);
            return "" + (this.value ? parsed : this.localizationService.get('colorGradientHandle'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "hueSliderTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('hueSliderHandle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "opacitySliderTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('opacitySliderHandle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "clearButtonTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('clearButton');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    ColorGradientComponent.prototype.isEmpty = function () {
        return false;
    };
    ColorGradientComponent.prototype.moveDragHandle = function (positionX, positionY) {
        var gradientRect = this.gradientRect;
        var gradientRectWidth = gradientRect.width;
        var gradientRectHeight = gradientRect.height;
        var top = fitIntoBounds(positionY, 0, gradientRectHeight);
        var left = fitIntoBounds(positionX, 0, gradientRectWidth);
        this.setDragHandleElementPosition(top, left);
        var hsva = this.hsva.value;
        hsva.s = left / gradientRectWidth;
        hsva.v = 1 - top / gradientRectHeight;
        this.hsva.next(hsva);
        this.updateValues.next(getColorFromHSV(this.hsva.value, this.format, this.opacity));
        this.setAlphaSliderBackground(getColorFromHSV(__assign({}, this.hsva.value, { a: 1 }), this.format, this.opacity));
    };
    ColorGradientComponent.prototype.handleValueChange = function (color) {
        if (this.value === color) {
            return;
        }
        this.value = color;
        this.valueChange.emit(color);
        this.notifyNgChanged(color);
        this.setHostElementAriaLabel();
    };
    ColorGradientComponent.prototype.setDragHandleElementPosition = function (top, left) {
        var dragHandle = this.gradientDragHandle.nativeElement;
        this.renderer.setStyle(dragHandle, 'top', top + "px");
        this.renderer.setStyle(dragHandle, 'left', left + "px");
    };
    ColorGradientComponent.prototype.setAlphaSliderBackground = function (backgroundColor) {
        if (!isPresent(this.alphaSlider)) {
            return;
        }
        var sliderTrack = this.alphaSlider.track.nativeElement;
        this.renderer.setStyle(sliderTrack, 'background', "linear-gradient(to top, transparent, " + backgroundColor + ")");
    };
    ColorGradientComponent.prototype.setHostElementAriaLabel = function () {
        var parsed = parseColor$1(this.value, this.format, this.opacity);
        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', "" + (this.value ? parsed : this.localizationService.get('colorGradientNoColor')));
    };
    ColorGradientComponent.prototype.setBackgroundColor = function (color) {
        this.renderer.setStyle(this.hsvRectangle.nativeElement, 'background', color);
    };
    ColorGradientComponent.prototype.updateUI = function () {
        if (!isDocumentAvailable()) {
            return;
        }
        if (this.hueSliderTouched || this.alphaSliderTouched) {
            this.hueSliderTouched = false;
            this.alphaSliderTouched = false;
            return;
        }
        this.hsva.next(this.value ? getHSV(this.value) : { h: 0, s: 0, v: 1, a: 1 });
        var gradientRect = this.gradientRect;
        var top = (1 - this.hsva.value.v) * gradientRect.height;
        var left = this.hsva.value.s * gradientRect.width;
        this.setDragHandleElementPosition(top, left);
        this.backgroundColor = getColorFromHue(this.hsva.value.h);
        this.setBackgroundColor(this.backgroundColor);
        this.setAlphaSliderBackground(this.backgroundColor);
        this.setHostElementAriaLabel();
    };
    ColorGradientComponent.prototype.addEventListeners = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var focusOutListener = _this.renderer.listen(_this.host.nativeElement, 'focusout', function (event) {
                if (!containsFocus(_this.host.nativeElement, event.relatedTarget) && isUntouched(_this.host)) {
                    _this.ngZone.run(function () { return _this.notifyNgTouched(); });
                }
            });
            var keydownListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'keydown', function (event) {
                _this.onKeyboardAction(event);
            });
            var keyupListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'keyup', function () {
                _this.renderer.removeClass(_this.gradientWrapper.nativeElement, 'k-dragging');
                if (!_this.readonly && !_this.disabled) {
                    _this.ngZone.run(function () { return _this.handleValueChange(getColorFromHSV(_this.hsva.value, _this.format, _this.opacity)); });
                }
            });
            var dragHandleFocusInListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'focusin', function () {
                _this.renderer.addClass(_this.gradientDragHandle.nativeElement, 'k-state-focus');
            });
            var dragHandleFocusOutListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'focusout', function () {
                _this.renderer.removeClass(_this.gradientDragHandle.nativeElement, 'k-state-focus');
            });
            _this.listeners.push(focusOutListener, keydownListener, keyupListener, dragHandleFocusInListener, dragHandleFocusOutListener);
        });
    };
    ColorGradientComponent.prototype.subscribeChanges = function () {
        var _this = this;
        this.changeRequestsSubscription = this.updateValues.pipe(throttleTime(this.delay)).subscribe(function (value) {
            _this.handleValueChange(value);
        });
    };
    ColorGradientComponent.prototype.unsubscribeChanges = function () {
        if (this.changeRequestsSubscription) {
            this.changeRequestsSubscription.unsubscribe();
        }
    };
    var ColorGradientComponent_1;
    __decorate([
        HostBinding('class.k-colorgradient'),
        __metadata("design:type", Boolean)
    ], ColorGradientComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('attr.aria-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorGradientComponent.prototype, "readonlyAttribute", null);
    __decorate([
        HostBinding('class.k-state-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorGradientComponent.prototype, "disabledClass", null);
    __decorate([
        HostBinding('attr.id'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ColorGradientComponent.prototype, "gradientId", null);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], ColorGradientComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('attr.tabindex'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [])
    ], ColorGradientComponent.prototype, "hostTabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorGradientComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorGradientComponent.prototype, "opacity", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorGradientComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorGradientComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorGradientComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ColorGradientComponent.prototype, "delay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorGradientComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorGradientComponent.prototype, "contrastTool", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ColorGradientComponent.prototype, "tabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorGradientComponent.prototype, "format", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorGradientComponent.prototype, "valueChange", void 0);
    __decorate([
        ViewChild('gradientDragHandle', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], ColorGradientComponent.prototype, "gradientDragHandle", void 0);
    __decorate([
        ViewChild('inputs', { static: false }),
        __metadata("design:type", ColorInputComponent)
    ], ColorGradientComponent.prototype, "inputs", void 0);
    __decorate([
        ViewChild('alphaSlider', { static: false }),
        __metadata("design:type", SliderComponent)
    ], ColorGradientComponent.prototype, "alphaSlider", void 0);
    __decorate([
        ViewChild('gradientWrapper', { static: false }),
        __metadata("design:type", ElementRef)
    ], ColorGradientComponent.prototype, "gradientWrapper", void 0);
    __decorate([
        ViewChild('hsvRectangle', { static: false }),
        __metadata("design:type", ElementRef)
    ], ColorGradientComponent.prototype, "hsvRectangle", void 0);
    ColorGradientComponent = ColorGradientComponent_1 = __decorate([
        Component({
            exportAs: 'kendoColorGradient',
            selector: 'kendo-colorgradient',
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return ColorGradientComponent_1; })
                },
                {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return ColorGradientComponent_1; })
                },
                ColorGradientLocalizationService,
                {
                    provide: LocalizationService,
                    useExisting: ColorGradientLocalizationService
                },
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.colorgradient'
                }
            ],
            template: "\n        <ng-container kendoColorGradientLocalizedMessages\n            i18n-colorGradientNoColor=\"kendo.colorgradient.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\"\n            colorGradientNoColor=\"Colorgradient no color chosen\"\n            i18n-colorGradientHandle=\"kendo.colorgradient.colorGradientHandle|The title for the gradient color drag handle chooser.\"\n            colorGradientHandle=\"Choose color\"\n            i18n-clearButton=\"kendo.colorgradient.clearButton|The title for the clear button.\"\n            clearButton=\"Clear value\"\n            i18n-hueSliderHandle=\"kendo.colorgradient.hueSliderHandle|The title for the hue slider handle.\"\n            hueSliderHandle=\"Set hue\"\n            i18n-opacitySliderHandle=\"kendo.colorgradient.opacitySliderHandle|The title for the opacity slider handle.\"\n            opacitySliderHandle=\"Set opacity\"\n            i18n-passContrast=\"kendo.colorgradient.passContrast|The pass message for the contrast tool.\"\n            passContrast=\"Pass\"\n            i18n-failContrast=\"kendo.colorgradient.failContrast|The fail message for the contrast tool.\"\n            failContrast=\"Fail\"\n            i18n-contrastRatio=\"kendo.colorgradient.contrastRatio|The contrast ratio message for the contrast tool.\"\n            contrastRatio=\"Contrast ratio\"\n            i18n-formatButton=\"kendo.colorgradient.formatButton|The message for the input format toggle button.\"\n            formatButton=\"Change color format\">\n        </ng-container>\n        <div class=\"k-colorgradient-canvas k-hstack\">\n            <div class=\"k-hsv-rectangle\" #hsvRectangle>\n                <div\n                    #gradientWrapper\n                    kendoDraggable\n                    class=\"k-hsv-gradient\"\n                    (click)=\"changePosition($event)\"\n                    (kendoPress)=\"handleDragPress($event)\"\n                    (kendoDrag)=\"onHandleDrag($event)\"\n                    (kendoRelease)=\"onHandleRelease()\">\n                    <div\n                        #gradientDragHandle\n                        class=\"k-hsv-draghandle k-draghandle\"\n                        tabindex=\"0\"\n                        [attr.title]=\"colorGradientHandleTitle\"\n                        [attr.aria-label]=\"colorGradientHandleAriaLabel\"\n                    >\n                    </div>\n                </div>\n                <svg kendoColorContrastSvg\n                    *ngIf=\"contrastToolVisible && gradientWrapper\"\n                    class=\"k-color-contrast-svg\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    [wrapper]=\"gradientWrapper ? gradientWrapper : undefined\"\n                    [hsva]=\"hsva\"\n                    [backgroundColor]=\"contrastTool\">\n                </svg>\n            </div>\n            <div class=\"k-hsv-controls k-hstack {{ clearButton ? 'k-sliders-wrap-clearable' : '' }}\">\n                <span class=\"k-clear-color k-button k-button-md k-button-flat k-button-flat-base k-button-icon\"\n                    *ngIf=\"clearButton\"\n                    (click)=\"reset()\"\n                    (keydown.enter)=\"reset()\"\n                    (keydown.space)=\"reset()\"\n                    [attr.aria-label]=\"clearButtonTitle\"\n                    [attr.title]=\"clearButtonTitle\"\n                    tabindex=\"0\">\n                    <span class=\"k-icon k-i-reset-color\"></span>\n                </span>\n                <kendo-slider\n                    [ngClass]=\"{'k-align-self-end': clearButton}\"\n                    class=\"k-hue-slider k-colorgradient-slider\"\n                    [dragHandleTitle]=\"hueSliderTitle\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [showButtons]=\"false\"\n                    [tickPlacement]=\"'none'\"\n                    [vertical]=\"true\"\n                    [min]=\"0\"\n                    [max]=\"360\"\n                    [value]=\"hsva.value.h\"\n                    [smallStep]=\"5\"\n                    [largeStep]=\"10\"\n                    (valueChange)=\"handleHueSliderChange($event)\"\n                >\n                </kendo-slider>\n                <kendo-slider\n                    *ngIf=\"opacity\"\n                    #alphaSlider\n                    [ngClass]=\"{'k-align-self-end': clearButton}\"\n                    class=\"k-alpha-slider k-colorgradient-slider\"\n                    [dragHandleTitle]=\"opacitySliderTitle\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [showButtons]=\"false\"\n                    [tickPlacement]=\"'none'\"\n                    [vertical]=\"true\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [smallStep]=\"1\"\n                    [largeStep]=\"10\"\n                    [value]=\"alphaSliderValue\"\n                    (valueChange)=\"handleAlphaSliderChange($event)\"\n                >\n                </kendo-slider>\n            </div>\n        </div>\n        <kendo-colorinput  #inputs\n            [opacity]=\"opacity\"\n            [formatView]=\"format\"\n            [value]=\"value\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            (valueChange)=\"handleInputsValueChange($event)\"\n        >\n        </kendo-colorinput>\n        <div class=\"k-colorgradient-color-contrast k-vbox\"\n            *ngIf=\"contrastToolVisible\"\n            kendoContrastTool\n            [value]=\"value\"\n            [ratio]=\"contrastTool\">\n        </div>\n    ",
            styles: ["\n        .k-clear-color {\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n        }\n        .k-colorgradient-slider.k-align-self-end {\n            height: 140px;\n        }\n\n        .k-color-contrast-svg {\n            position: absolute;\n            overflow: visible;\n            pointer-events: none;\n            left: 0px;\n            top: 0px;\n        }\n    "]
        }),
        __metadata("design:paramtypes", [ElementRef,
            NgZone,
            Renderer2,
            ChangeDetectorRef,
            LocalizationService])
    ], ColorGradientComponent);
    return ColorGradientComponent;
}());

/**
 * @hidden
 */
var ColorPaletteLocalizationService = /** @class */ (function (_super) {
    __extends(ColorPaletteLocalizationService, _super);
    function ColorPaletteLocalizationService(prefix, messageService, _rtl, flatColorPickerLocalization) {
        var _this = _super.call(this, prefix, messageService, _rtl) || this;
        _this.flatColorPickerLocalization = flatColorPickerLocalization;
        return _this;
    }
    ColorPaletteLocalizationService.prototype.get = function (shortKey) {
        if (this.flatColorPickerLocalization) {
            return this.flatColorPickerLocalization.get(shortKey);
        }
        return _super.prototype.get.call(this, shortKey);
    };
    ColorPaletteLocalizationService = __decorate([
        __param(0, Inject(L10N_PREFIX)),
        __param(1, Optional()),
        __param(2, Optional()), __param(2, Inject(RTL)),
        __param(3, Optional()), __param(3, Inject(FlatColorPickerLocalizationService)),
        __metadata("design:paramtypes", [String, MessageService, Boolean, FlatColorPickerLocalizationService])
    ], ColorPaletteLocalizationService);
    return ColorPaletteLocalizationService;
}(LocalizationService));

/**
 * @hidden
 */
var ColorPaletteService = /** @class */ (function () {
    function ColorPaletteService() {
        this.colorRows = [];
    }
    ColorPaletteService.prototype.setColorMatrix = function (palette, columns) {
        this.colorRows = [];
        if (!(isPresent(palette) && palette.length)) {
            return;
        }
        columns = columns || palette.length;
        for (var start = 0; start < palette.length; start += columns) {
            var row = palette.slice(start, columns + start);
            this.colorRows.push(row);
        }
    };
    ColorPaletteService.prototype.getCellCoordsFor = function (color) {
        if (!isPresent(color)) {
            return;
        }
        for (var row = 0; row < this.colorRows.length; row++) {
            for (var col = 0; col < this.colorRows[row].length; col++) {
                if (this.colorRows[row][col] === color) {
                    return { row: row, col: col };
                }
            }
        }
    };
    ColorPaletteService.prototype.getColorAt = function (cellCoords) {
        if (!(isPresent(cellCoords) && isPresent(this.colorRows[cellCoords.row]))) {
            return;
        }
        return this.colorRows[cellCoords.row][cellCoords.col];
    };
    ColorPaletteService.prototype.getNextCell = function (current, horizontalStep, verticalStep) {
        if (!(isPresent(current) && isPresent(current.row) && isPresent(current.col))) {
            return { row: 0, col: 0 };
        }
        var row = this.clampIndex(current.row + verticalStep, this.colorRows.length - 1);
        var col = this.clampIndex(current.col + horizontalStep, this.colorRows[row].length - 1);
        return { row: row, col: col };
    };
    ColorPaletteService.prototype.clampIndex = function (index, max) {
        var minArrayIndex = 0;
        if (index < minArrayIndex) {
            return minArrayIndex;
        }
        if (index > max) {
            return max;
        }
        return index;
    };
    ColorPaletteService = __decorate([
        Injectable()
    ], ColorPaletteService);
    return ColorPaletteService;
}());

var DEFAULT_TILE_SIZE = 24;
var DEFAULT_COLUMNS_COUNT = 10;
var DEFAULT_PRESET$1 = 'office';
var DEFAULT_ACCESSIBLE_PRESET$1 = 'accessible';
var serial$1 = 0;
/**
 * The ColorPalette component provides a set of predefined palette presets and enables you to implement a custom color palette.
 * The ColorPalette is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
var ColorPaletteComponent = /** @class */ (function () {
    function ColorPaletteComponent(host, service, cdr, renderer, localizationService, ngZone) {
        var _this = this;
        this.host = host;
        this.service = service;
        this.cdr = cdr;
        this.renderer = renderer;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.id = "k-colorpalette-" + serial$1++;
        /**
         * Specifies the output format of the ColorPaletteComponent.
         * The input value may be in a different format. However, it will be parsed into the output `format`
         * after the component processes it.
         *
         * The supported values are:
         * * (Default) `hex`
         * * `rgba`
         * * `name`
         */
        this.format = 'hex';
        /**
         * Sets the disabled state of the ColorPalette.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorPalette.
         */
        this.readonly = false;
        /**
         * Specifies the size of a color cell.
         *
         * The possible values are:
         * * (Default) `tileSize = 24`
         * * `{ width: number, height: number }`
         */
        this.tileSize = { width: DEFAULT_TILE_SIZE, height: DEFAULT_TILE_SIZE };
        /**
         * Fires each time the color selection is changed.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires each time the value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user selects a cell with the mouse or presses `Enter`.
         *
         * @hidden
         */
        this.cellSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.uniqueId = guid();
        this._tabindex = 0;
        this.notifyNgTouched = function () { };
        this.notifyNgChanged = function () { };
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    ColorPaletteComponent_1 = ColorPaletteComponent;
    Object.defineProperty(ColorPaletteComponent.prototype, "paletteId", {
        /**
         * @hidden
         */
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        /**
         * Specifies the number of columns that will be displayed.
         * Defaults to `10`.
         */
        set: function (value) {
            var minColumnsCount = 1;
            this._columns = value > minColumnsCount ? value : minColumnsCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "palette", {
        get: function () {
            return this._palette;
        },
        /**
         * The color palette that will be displayed.
         *
         * The supported values are:
         * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).
         * * A string with comma-separated colors.
         * * A string array.
         */
        set: function (value) {
            var _this = this;
            if (!isPresent(value)) {
                value = DEFAULT_PRESET$1;
            }
            if (typeof value === 'string' && isPresent(PALETTEPRESETS[value])) {
                this.columns = this.columns || PALETTEPRESETS[value].columns;
                value = PALETTEPRESETS[value].colors;
            }
            var colors = (typeof value === 'string') ? value.split(',') : value;
            this._palette = colors.map(function (color) { return parseColor$1(color, _this.format, false, false); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "tileLayout", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this.tileSize !== 'number') {
                return this.tileSize;
            }
            return { width: this.tileSize, height: this.tileSize };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "colorRows", {
        /**
         * @hidden
         */
        get: function () {
            return this.service.colorRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "hostTabindex", {
        /**
         * @hidden
         */
        get: function () { return this.tabindex; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "disabledClass", {
        /**
         * @hidden
         */
        get: function () { return this.disabled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "readonlyAttribute", {
        /**
         * @hidden
         */
        get: function () { return this.readonly; },
        enumerable: true,
        configurable: true
    });
    ColorPaletteComponent.prototype.ngOnInit = function () {
        if (this.colorRows.length === 0) {
            var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET$1 : DEFAULT_ACCESSIBLE_PRESET$1;
            this.palette = this.palette || defaultPreset;
            this.setRows();
        }
    };
    ColorPaletteComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setHostElementAriaLabel();
        if (this.value) {
            this.ngZone.onStable.pipe(take(1)).subscribe(function () {
                _this.selectCell(_this.value);
            });
        }
    };
    ColorPaletteComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    ColorPaletteComponent.prototype.ngOnChanges = function (changes) {
        if (changes.palette || changes.columns) {
            this.setRows();
        }
        if (changes.palette || changes.value || changes.columns) {
            this.selectCell(this.value);
            this.setHostElementAriaLabel();
        }
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleKeydown = function (event) {
        var isRTL = this.direction === 'rtl';
        switch (event.keyCode) {
            case Keys.ArrowDown:
                this.handleCellNavigation(0, 1);
                break;
            case Keys.ArrowUp:
                this.handleCellNavigation(0, -1);
                break;
            case Keys.ArrowRight:
                this.handleCellNavigation(isRTL ? -1 : 1, 0);
                break;
            case Keys.ArrowLeft:
                this.handleCellNavigation(isRTL ? 1 : -1, 0);
                break;
            case Keys.Enter:
                this.handleEnter();
                break;
            default: return;
        }
        event.preventDefault();
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleHostBlur = function () {
        this.notifyNgTouched();
        this.handleCellFocusOnBlur();
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleCellSelection = function (value, focusedCell) {
        if (this.readonly) {
            return;
        }
        this.selectedCell = focusedCell;
        this.focusedCell = this.selectedCell;
        this.focusInComponent = true;
        var parsedColor = parseColor$1(value, this.format, false, false);
        this.cellSelection.emit(parsedColor);
        this.handleValueChange(parsedColor);
        if (this.selection !== parsedColor) {
            this.selection = parsedColor;
            this.selectionChange.emit(parsedColor);
        }
        if (focusedCell) {
            this.activeCellId = "k-" + this.selectedCell.row + "-" + this.selectedCell.col + "-" + this.uniqueId;
        }
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.writeValue = function (value) {
        this.value = value;
        this.selectCell(value);
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    ColorPaletteComponent.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Clears the color value of the ColorPalette.
     */
    ColorPaletteComponent.prototype.reset = function () {
        this.focusedCell = null;
        if (isPresent(this.value)) {
            this.handleValueChange(undefined);
        }
        this.selectedCell = undefined;
    };
    ColorPaletteComponent.prototype.handleValueChange = function (color) {
        if (this.value === color) {
            return;
        }
        this.value = color;
        this.valueChange.emit(color);
        this.notifyNgChanged(color);
        this.setHostElementAriaLabel();
    };
    ColorPaletteComponent.prototype.handleCellFocusOnBlur = function () {
        this.focusInComponent = false;
        this.focusedCell = this.selectedCell;
    };
    ColorPaletteComponent.prototype.selectCell = function (value) {
        this.selectedCell = this.service.getCellCoordsFor(value);
        this.focusedCell = this.selectedCell;
    };
    ColorPaletteComponent.prototype.setRows = function () {
        if (!isPresent(this.palette)) {
            return;
        }
        this.columns = this.columns || DEFAULT_COLUMNS_COUNT;
        this.service.setColorMatrix(this.palette, this.columns);
    };
    ColorPaletteComponent.prototype.handleCellNavigation = function (horizontalStep, verticalStep) {
        if (this.readonly) {
            return;
        }
        this.focusedCell = this.service.getNextCell(this.focusedCell, horizontalStep, verticalStep);
        this.focusInComponent = true;
    };
    ColorPaletteComponent.prototype.setHostElementAriaLabel = function () {
        var parsed = parseColor$1(this.value, this.format);
        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', "" + (this.value ? parsed : this.localizationService.get('colorPaletteNoColor')));
    };
    ColorPaletteComponent.prototype.handleEnter = function () {
        if (!isPresent(this.focusedCell)) {
            return;
        }
        var selectedColor = this.service.getColorAt(this.focusedCell);
        this.handleCellSelection(selectedColor, this.focusedCell);
    };
    var ColorPaletteComponent_1;
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], ColorPaletteComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('attr.id'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ColorPaletteComponent.prototype, "paletteId", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPaletteComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPaletteComponent.prototype, "format", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPaletteComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ColorPaletteComponent.prototype, "columns", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ColorPaletteComponent.prototype, "palette", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ColorPaletteComponent.prototype, "tabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPaletteComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPaletteComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ColorPaletteComponent.prototype, "tileSize", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPaletteComponent.prototype, "selectionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPaletteComponent.prototype, "valueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPaletteComponent.prototype, "cellSelection", void 0);
    __decorate([
        HostBinding('attr.tabindex'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [])
    ], ColorPaletteComponent.prototype, "hostTabindex", null);
    __decorate([
        HostBinding('class.k-colorpalette'),
        __metadata("design:type", Boolean)
    ], ColorPaletteComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('attr.aria-disabled'),
        HostBinding('class.k-state-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPaletteComponent.prototype, "disabledClass", null);
    __decorate([
        HostBinding('attr.aria-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPaletteComponent.prototype, "readonlyAttribute", null);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ColorPaletteComponent.prototype, "handleKeydown", null);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ColorPaletteComponent.prototype, "handleHostBlur", null);
    ColorPaletteComponent = ColorPaletteComponent_1 = __decorate([
        Component({
            exportAs: 'kendoColorPalette',
            selector: 'kendo-colorpalette',
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return ColorPaletteComponent_1; }) // tslint:disable-line:no-forward-ref
                }, {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return ColorPaletteComponent_1; })
                },
                ColorPaletteService,
                ColorPaletteLocalizationService,
                {
                    provide: LocalizationService,
                    useExisting: ColorPaletteLocalizationService
                },
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.colorpalette'
                }
            ],
            template: "\n        <ng-container kendoColorPaletteLocalizedMessages\n            i18n-colorPaletteNoColor=\"kendo.colorpalette.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\"\n            colorPaletteNoColor=\"Colorpalette no color chosen\">\n        </ng-container>\n        <div role=\"listbox\" class=\"k-colorpalette-table-wrap\"\n            [attr.aria-activedescendant]=\"activeCellId\">\n            <table class=\"k-colorpalette-table k-palette\">\n                <tbody>\n                    <tr *ngFor=\"let row of colorRows; let rowIndex = index\">\n                        <td *ngFor=\"let color of row; let colIndex = index\"\n                            role=\"option\"\n                            [class.k-state-selected]=\"selectedCell?.row === rowIndex && selectedCell?.col === colIndex\"\n                            [class.k-state-focus]=\"focusInComponent && focusedCell?.row === rowIndex && focusedCell?.col === colIndex\"\n                            [attr.aria-selected]=\"selectedCell?.row === rowIndex && selectedCell?.col === colIndex\"\n                            [attr.aria-label]=\"color\"\n                            class=\"k-colorpalette-tile\"\n                            [id]=\"'k-' + rowIndex + '-' + colIndex + '-' + uniqueId\"\n                            [attr.value]=\"color\"\n                            (click)=\"handleCellSelection(color, { row: rowIndex, col: colIndex })\"\n                            [ngStyle]=\"{\n                                backgroundColor: color,\n                                width: tileLayout.width + 'px',\n                                height: tileLayout.height + 'px',\n                                minWidth: tileLayout.width + 'px'\n                            }\">\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    "
        }),
        __metadata("design:paramtypes", [ElementRef,
            ColorPaletteService,
            ChangeDetectorRef,
            Renderer2,
            LocalizationService,
            NgZone])
    ], ColorPaletteComponent);
    return ColorPaletteComponent;
}());

/**
 * @hidden
 */
var FlatColorPickerHeaderComponent = /** @class */ (function () {
    function FlatColorPickerHeaderComponent(localizationService) {
        this.localizationService = localizationService;
        this.hostClasses = true;
        this.viewChange = new EventEmitter();
        this.valuePaneClick = new EventEmitter();
        this.clearButtonClick = new EventEmitter();
    }
    FlatColorPickerHeaderComponent.prototype.onViewButtonClick = function (view) {
        this.activeView = view;
        this.viewChange.emit(view);
    };
    Object.defineProperty(FlatColorPickerHeaderComponent.prototype, "viewButtons", {
        get: function () {
            return this.views && this.views.indexOf('gradient') >= 0 && this.views.indexOf('palette') >= 0;
        },
        enumerable: true,
        configurable: true
    });
    FlatColorPickerHeaderComponent.prototype.getViewButtonIcon = function (view) {
        return view === 'gradient' ? 'k-i-color-canvas' : 'k-i-palette';
    };
    FlatColorPickerHeaderComponent.prototype.getText = function (text) {
        return this.localizationService.get(text);
    };
    __decorate([
        HostBinding('class.k-coloreditor-header'),
        HostBinding('class.k-hstack'),
        __metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "hostClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "activeView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], FlatColorPickerHeaderComponent.prototype, "views", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "preview", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "selection", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "viewChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "valuePaneClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "clearButtonClick", void 0);
    __decorate([
        ViewChildren('viewButtons', { read: ElementRef }),
        __metadata("design:type", QueryList)
    ], FlatColorPickerHeaderComponent.prototype, "viewButtonsCollection", void 0);
    __decorate([
        ViewChild('clearButton', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], FlatColorPickerHeaderComponent.prototype, "clearButtonElement", void 0);
    FlatColorPickerHeaderComponent = __decorate([
        Component({
            selector: '[kendoFlatColorPickerHeader]',
            template: "\n        <div class=\"k-coloreditor-header-actions k-hstack\">\n            <div *ngIf=\"viewButtons\" class=\"k-button-group k-button-group-flat\">\n                <button *ngFor=\"let view of views\"\n                    #viewButtons\n                    type=\"button\"\n                    (click)=\"onViewButtonClick(view)\"\n                    class=\"k-button k-button-md k-button-flat k-button-flat-base k-icon-button\"\n                    [attr.title]=\"getText(view === 'gradient' ? 'gradientView' : 'paletteView')\"\n                    [attr.aria-label]=\"getText(view === 'gradient' ? 'gradientView' : 'paletteView')\"\n                    [attr.aria-pressed]=\"activeView === view\"\n                    [ngClass]=\"activeView === view ? 'k-state-selected' : ''\"\n                >\n                    <span\n                        class=\"k-button-icon k-icon\"\n                        [ngClass]=\"getViewButtonIcon(view)\">\n                    </span>\n                </button>\n            </div>\n        </div>\n        <div class=\"k-spacer\"></div>\n        <div class=\"k-coloreditor-header-actions k-hstack\">\n            <button *ngIf=\"clearButton\"\n                #clearButton\n                type=\"button\"\n                class=\"k-button k-button-md k-button-flat k-button-flat-base k-icon-button k-coloreditor-reset\"\n                [attr.aria-label]=\"getText('clearButton')\"\n                [attr.title]=\"getText('clearButton')\"\n                (click)=\"clearButtonClick.emit()\">\n                    <span class=\"k-button-icon k-icon k-i-reset-color\"></span>\n            </button>\n            <div class=\"k-coloreditor-preview k-vstack\" *ngIf=\"preview\">\n                <span\n                    class=\"k-coloreditor-preview-color k-color-preview\"\n                    [attr.title]=\"getText('previewColor')\"\n                    [style.background-color]=\"selection\">\n                </span>\n                <span class=\"k-coloreditor-current-color k-color-preview\"\n                    [style.background-color]=\"value\"\n                    [attr.title]=\"getText('revertSelection')\"\n                    (click)=\"valuePaneClick.emit($event)\">\n                </span>\n            </div>\n        </div>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], FlatColorPickerHeaderComponent);
    return FlatColorPickerHeaderComponent;
}());

/**
 * @hidden
 */
var FlatColorPickerActionButtonsComponent = /** @class */ (function () {
    function FlatColorPickerActionButtonsComponent(localizationService) {
        this.localizationService = localizationService;
        this.hostClasses = true;
        this.actionButtonClick = new EventEmitter();
    }
    FlatColorPickerActionButtonsComponent.prototype.getText = function (text) {
        return this.localizationService.get(text);
    };
    FlatColorPickerActionButtonsComponent.prototype.onActionButtonClick = function (type, ev) {
        var args = {
            target: type,
            originalEvent: ev
        };
        this.actionButtonClick.emit(args);
    };
    __decorate([
        HostBinding('class.k-coloreditor-footer'),
        HostBinding('class.k-actions'),
        HostBinding('class.k-hstack'),
        __metadata("design:type", Boolean)
    ], FlatColorPickerActionButtonsComponent.prototype, "hostClasses", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerActionButtonsComponent.prototype, "actionButtonClick", void 0);
    __decorate([
        ViewChild('last', { read: ElementRef, static: false }),
        __metadata("design:type", ElementRef)
    ], FlatColorPickerActionButtonsComponent.prototype, "lastButton", void 0);
    FlatColorPickerActionButtonsComponent = __decorate([
        Component({
            selector: '[kendoFlatColorPickerActionButtons]',
            template: "\n        <button\n            class=\"k-coloreditor-cancel k-button k-button-md k-button-solid k-button-solid-base\"\n            [attr.title]=\"getText('cancelButton')\"\n            (click)=\"onActionButtonClick('cancel', $event)\"\n            type=\"button\"\n        >{{getText('cancelButton')}}</button>\n        <button #last\n            class=\"k-coloreditor-apply k-button k-button-md k-button-solid k-button-solid-primary\"\n            [attr.title]=\"getText('applyButton')\"\n            (click)=\"onActionButtonClick('apply', $event)\"\n            type=\"button\"\n        >{{getText('applyButton')}}</button>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], FlatColorPickerActionButtonsComponent);
    return FlatColorPickerActionButtonsComponent;
}());

/**
 * Represents the [Kendo UI FlatColorPicker component for Angular]({% slug overview_flatcolorpicker %}).
 *
 * The FlatColorPicker is a powerful tool which allows the user to choose colors through palettes with predefined sets of colors and
 * through a gradient that renders an hsv canvas. It supports previewing the selected color, reverting it to its previous state or clearing it completely.
 */
var FlatColorPickerComponent = /** @class */ (function () {
    function FlatColorPickerComponent(host, service, localizationService, cdr, renderer, ngZone) {
        var _this = this;
        this.host = host;
        this.service = service;
        this.localizationService = localizationService;
        this.cdr = cdr;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.hostClasses = true;
        /**
         * Sets the read-only state of the FlatColorPicker.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Sets the disabled state of the FlatColorPicker.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Specifies the output format of the FlatColorPicker.
         *
         * If the input value is in a different format, it will be parsed into the specified output `format`.
         *
         * The supported values are:
         * * `rgba` (default)
         * * `hex`
         */
        this.format = 'rgba';
        /**
         * Specifies whether the FlatColorPicker should display a 'Clear color' button.
         *
         * @default true
         */
        this.clearButton = true;
        /**
         * Displays `Apply` and `Cancel` action buttons and a color preview pane.
         *
         * When enabled, the component value will not change immediately upon
         * color selection, but only after the `Apply` button is clicked.
         *
         * The `Cancel` button reverts the current selection to its
         * initial state i.e. to the current value.
         *
         * @default true
         */
        this.preview = true;
        /**
         * Configures the layout of the `Apply` and `Cancel` action buttons.
         * * `start`
         * * `center`
         * * `end` (default)
         * * `stretch`
         */
        this.actionsLayout = 'end';
        /**
         * Specifies the views that will be rendered. Default value is gradient and palette.
         */
        this.views = ['gradient', 'palette'];
        /**
         * Fires each time the component value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires when the user cancels the current color selection.
         *
         * The event is emitted on preview pane or on 'Cancel' button click.
         */
        this.cancel = new EventEmitter();
        /**
         * Fires each time the view is about to change.
         * Used to provide a two-way binding for the `activeView` property.
         */
        this.activeViewChange = new EventEmitter();
        /**
         * @hidden
         */
        this.actionButtonClick = new EventEmitter();
        this._tabindex = 0;
        this._gradientSettings = { opacity: true, delay: 0 };
        this._paletteSettings = {};
        this.subscriptions = new Subscription();
        this.notifyNgChanged = function () { };
        this.notifyNgTouched = function () { };
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    FlatColorPickerComponent_1 = FlatColorPickerComponent;
    Object.defineProperty(FlatColorPickerComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "hostTabindex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format, this.gradientSettings.opacity);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         *
         * @default 0
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "gradientSettings", {
        get: function () {
            return this._gradientSettings;
        },
        /**
         * Configures the gradient view.
         */
        set: function (value) {
            Object.assign(this._gradientSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "paletteSettings", {
        get: function () {
            return this._paletteSettings;
        },
        /**
         * Configures the palette view.
         */
        set: function (value) {
            Object.assign(this._paletteSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    FlatColorPickerComponent.prototype.ngOnInit = function () {
        this.selection = this.value;
        this._paletteSettings = this.service.getPaletteSettings(this._paletteSettings, this.format);
        this.setActiveView();
    };
    FlatColorPickerComponent.prototype.ngAfterViewInit = function () {
        this.setHostElementAriaLabel();
        this.initDomEvents();
        this.setSizingVariables();
    };
    FlatColorPickerComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged('value', changes)) {
            this.selection = this.value;
            this.setHostElementAriaLabel();
        }
        if (isChanged('paletteSettings', changes)) {
            this.setSizingVariables();
        }
    };
    FlatColorPickerComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.subscriptions.unsubscribe();
    };
    Object.defineProperty(FlatColorPickerComponent.prototype, "headerHasContent", {
        /**
         * @hidden
         */
        get: function () {
            return this.preview || this.views.length > 1 || this.clearButton;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    FlatColorPickerComponent.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Focuses the wrapper of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.focus = function () {
        if (this.disabled && this.focused) {
            return;
        }
        this.host.nativeElement.focus();
        this.focused = true;
    };
    /**
     * Blurs the wrapper of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.blur = function () {
        if (!this.focused) {
            return;
        }
        this.notifyNgTouched();
        this.host.nativeElement.blur();
        this.focused = false;
    };
    /**
     * Clears the value of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.reset = function () {
        if (!isPresent(this.value)) {
            return;
        }
        this.value = undefined;
        this.notifyNgChanged(undefined);
        this.setHostElementAriaLabel();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onViewChange = function (view) {
        var _this = this;
        if (this.activeView === view) {
            return;
        }
        this.activeView = view;
        this.activeViewChange.emit(view);
        if (this.activeView === 'gradient') {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.gradient.gradientDragHandle.nativeElement.focus();
                });
            });
        }
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onClearButtonClick = function () {
        this.resetInnerComponentValue();
        this.host.nativeElement.focus();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.handleValueChange = function (color) {
        this.preview ? this.changeCurrentValue(color) : this.setFlatColorPickerValue(color);
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onAction = function (ev) {
        ev.target === 'apply' ? this.setFlatColorPickerValue(this.selection) : this.resetSelection(ev.originalEvent);
        this.actionButtonClick.emit();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.resetSelection = function (ev) {
        var eventArgs = new ColorPickerCancelEvent(ev);
        this.cancel.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.selection = this.value;
        }
        this.notifyNgTouched();
    };
    FlatColorPickerComponent.prototype.setHostElementAriaLabel = function () {
        var parsed = parseColor$1(this.value, this.format, this.gradientSettings.opacity);
        var ariaLabelValue = "" + (this.value ? parsed : this.localizationService.get('flatColorPickerNoColor'));
        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', ariaLabelValue);
    };
    FlatColorPickerComponent.prototype.setSizingVariables = function () {
        var paletteTileSize = this.service.paletteTileLayout(this.paletteSettings.tileSize);
        var value = "--kendo-color-preview-columns: " + this.paletteSettings.columns + ";\n            --kendo-color-preview-width: " + paletteTileSize.width + "px;\n            --kendo-color-preview-height: " + paletteTileSize.height + "px;";
        this.host.nativeElement.querySelector('.k-coloreditor-views.k-vstack').setAttribute('style', value);
    };
    FlatColorPickerComponent.prototype.changeCurrentValue = function (color) {
        this.selection = color;
        this.notifyNgTouched();
    };
    FlatColorPickerComponent.prototype.resetInnerComponentValue = function () {
        this.selection = null;
        if (this.gradient) {
            this.gradient.reset();
            return;
        }
        this.palette.reset();
    };
    FlatColorPickerComponent.prototype.setFlatColorPickerValue = function (color) {
        if (this.value === color) {
            return;
        }
        this.value = color;
        this.valueChange.emit(color);
        this.notifyNgChanged(color);
        this.setHostElementAriaLabel();
    };
    FlatColorPickerComponent.prototype.setActiveView = function () {
        if (!isPresent(this.activeView)) {
            this.activeView = this.views[0];
            return;
        }
        if (isDevMode() && this.views.indexOf(this.activeView) === -1) {
            throw new Error("Invalid configuration: The current activeView is not present in the views collection");
        }
    };
    FlatColorPickerComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.host) {
            return;
        }
        var hostElement = this.host.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focus', function () {
                _this.focused = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'blur', function () {
                _this.focused = false;
                _this.notifyNgTouched();
            }));
        });
    };
    var FlatColorPickerComponent_1;
    __decorate([
        HostBinding('class.k-flatcolorpicker'),
        HostBinding('class.k-coloreditor'),
        __metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('class.k-state-disabled'),
        HostBinding('attr.aria-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "disabledClass", null);
    __decorate([
        HostBinding('attr.aria-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "ariaReadonly", null);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('attr.tabindex'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "hostTabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "format", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], FlatColorPickerComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], FlatColorPickerComponent.prototype, "tabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "preview", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "actionsLayout", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "activeView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], FlatColorPickerComponent.prototype, "views", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], FlatColorPickerComponent.prototype, "gradientSettings", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], FlatColorPickerComponent.prototype, "paletteSettings", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerComponent.prototype, "valueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerComponent.prototype, "cancel", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerComponent.prototype, "activeViewChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], FlatColorPickerComponent.prototype, "actionButtonClick", void 0);
    __decorate([
        ViewChild('header', { static: false }),
        __metadata("design:type", FlatColorPickerHeaderComponent)
    ], FlatColorPickerComponent.prototype, "header", void 0);
    __decorate([
        ViewChild('gradient', { static: false }),
        __metadata("design:type", ColorGradientComponent)
    ], FlatColorPickerComponent.prototype, "gradient", void 0);
    __decorate([
        ViewChild('palette', { static: false }),
        __metadata("design:type", ColorPaletteComponent)
    ], FlatColorPickerComponent.prototype, "palette", void 0);
    __decorate([
        ViewChild('footer', { static: false }),
        __metadata("design:type", FlatColorPickerActionButtonsComponent)
    ], FlatColorPickerComponent.prototype, "footer", void 0);
    FlatColorPickerComponent = FlatColorPickerComponent_1 = __decorate([
        Component({
            exportAs: 'kendoFlatColorPicker',
            selector: 'kendo-flatcolorpicker',
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return FlatColorPickerComponent_1; })
                },
                {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return FlatColorPickerComponent_1; })
                },
                FlatColorPickerService,
                FlatColorPickerLocalizationService,
                {
                    provide: LocalizationService,
                    useExisting: FlatColorPickerLocalizationService
                },
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.flatcolorpicker'
                }
            ],
            template: "\n        <ng-container kendoFlatColorPickerLocalizedMessages\n            i18n-flatColorPickerNoColor=\"kendo.flatcolorpicker.flatColorPickerNoColor|The aria-label applied to the FlatColorPicker component when the value is empty.\"\n            flatColorPickerNoColor=\"Flatcolorpicker no color chosen\"\n            i18n-colorGradientNoColor=\"kendo.flatcolorpicker.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\"\n            colorGradientNoColor=\"Colorgradient no color chosen\"\n            i18n-colorPaletteNoColor=\"kendo.flatcolorpicker.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\"\n            colorPaletteNoColor=\"Colorpalette no color chosen\"\n            i18n-colorGradientHandle=\"kendo.flatcolorpicker.colorGradientHandle|The title for the gradient color drag handle chooser.\"\n            colorGradientHandle=\"Choose color\"\n            i18n-clearButton=\"kendo.flatcolorpicker.clearButton|The title for the clear button.\"\n            clearButton=\"Clear value\"\n            i18n-hueSliderHandle=\"kendo.flatcolorpicker.hueSliderHandle|The title for the hue slider handle.\"\n            hueSliderHandle=\"Set hue\"\n            i18n-opacitySliderHandle=\"kendo.flatcolorpicker.opacitySliderHandle|The title for the opacity slider handle.\"\n            opacitySliderHandle=\"Set opacity\"\n            i18n-contrastRatio=\"kendo.flatcolorpicker.contrastRatio|The contrast ratio message for the contrast tool.\"\n            contrastRatio=\"Contrast ratio\"\n            i18n-previewColor=\"kendo.flatcolorpicker.previewColor|The message for the color preview pane.\"\n            previewColor=\"Color preview\"\n            i18n-revertSelection=\"kendo.flatcolorpicker.revertSelection|The message for the selected color pane.\"\n            revertSelection=\"Revert selection\"\n            i18n-gradientView=\"kendo.flatcolorpicker.gradientView|The message for the gradient view button.\"\n            gradientView=\"Gradient view\"\n            i18n-paletteView=\"kendo.flatcolorpicker.paletteView|The message for the palette view button.\"\n            paletteView=\"Palette view\"\n            i18n-formatButton=\"kendo.flatcolorpicker.formatButton|The message for the input format toggle button.\"\n            formatButton=\"Change color format\"\n            i18n-applyButton=\"kendo.flatcolorpicker.applyButton|The message for the Apply action button.\"\n            applyButton=\"Apply\"\n            i18n-cancelButton=\"kendo.flatcolorpicker.cancelButton|The message for the Cancel action button.\"\n            cancelButton=\"Cancel\">\n        </ng-container>\n        <div kendoFlatColorPickerHeader\n            *ngIf=\"headerHasContent\"\n            #header\n            [clearButton]=\"clearButton\"\n            [activeView]=\"activeView\"\n            [views]=\"views\"\n            [value]=\"value\"\n            [selection]=\"selection\"\n            [preview]=\"preview\"\n            (clearButtonClick)=\"onClearButtonClick()\"\n            (viewChange)=\"onViewChange($event)\"\n            (valuePaneClick)=\"resetSelection($event)\">\n        </div>\n        <div class=\"k-coloreditor-views k-vstack\">\n            <kendo-colorgradient #gradient\n                *ngIf=\"activeView === 'gradient'\"\n                [tabindex]=\"null\"\n                [value]=\"selection\"\n                [format]=\"format\"\n                [opacity]=\"gradientSettings.opacity\"\n                [delay]=\"gradientSettings.delay\"\n                [contrastTool]=\"gradientSettings.contrastTool\"\n                [readonly]=\"readonly\"\n                (valueChange)=\"handleValueChange($event)\"\n            >\n            </kendo-colorgradient>\n            <kendo-colorpalette #palette\n                *ngIf=\"activeView === 'palette'\"\n                kendoFocusOnDomReady\n                [palette]=\"paletteSettings.palette\"\n                [columns]=\"paletteSettings.columns\"\n                [tileSize]=\"paletteSettings.tileSize\"\n                [format]=\"format\"\n                [value]=\"selection\"\n                (valueChange)=\"handleValueChange($event)\"\n            >\n            </kendo-colorpalette>\n        </div>\n        <div kendoFlatColorPickerActionButtons *ngIf=\"preview\"\n            #footer\n            [ngClass]=\"'k-justify-content-' + actionsLayout\"\n            (actionButtonClick)=\"onAction($event)\">\n        </div>\n"
        }),
        __metadata("design:paramtypes", [ElementRef,
            FlatColorPickerService,
            LocalizationService,
            ChangeDetectorRef,
            Renderer2,
            NgZone])
    ], FlatColorPickerComponent);
    return FlatColorPickerComponent;
}());

var DOM_FOCUS_EVENTS = ['focus', 'blur'];
/**
 * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).
 *
 * The ColorPicker is a powerful tool for choosing colors from Gradient and Palette views
 * which are rendered in its popup. It supports previewing the selected color, reverting it to its previous state or clearing it completely.
 */
var ColorPickerComponent = /** @class */ (function () {
    function ColorPickerComponent(host, popupService, cdr, localizationService, ngZone, renderer) {
        var _this = this;
        this.host = host;
        this.popupService = popupService;
        this.cdr = cdr;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.hostClasses = true;
        this.role = 'listbox';
        /**
         * Specifies the views that will be rendered in the popup.
         * By default both the gradient and palette views will be rendered.
         */
        this.views = ['gradient', 'palette'];
        /**
         * Sets the read-only state of the ColorPicker.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Sets the disabled state of the ColorPicker.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Specifies the output format of the ColorPicker.
         *
         * If the input value is in a different format, it will be parsed into the specified output `format`.
         *
         * The supported values are:
         * * `rgba` (default)
         * * `hex`
         */
        this.format = 'rgba';
        /**
         * Specifies whether the ColorPicker should display a 'Clear color' button.
         *
         * @default true
         */
        this.clearButton = true;
        /**
         * Displays `Apply` and `Cancel` action buttons and color preview panes.
         *
         * When enabled, the component value will not change immediately upon
         * color selection, but only after the `Apply` button is clicked.
         *
         * The `Cancel` button reverts the current selection to its
         * previous state i.e. to the current value.
         *
         * @default false
         */
        this.preview = false;
        /**
         * Configures the layout of the `Apply` and `Cancel` action buttons.
         *
         * The possible values are:
         * * `start`
         * * `center`
         * * `end` (default)
         * * `stretch`
         */
        this.actionsLayout = 'end';
        /**
         * Fires each time the value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time ColorPicker is focused.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the ColorPicker is blurred.
         */
        this.onBlur = new EventEmitter();
        /**
         * Fires when the user cancels the current color selection.
         *
         * Fires on preview pane or 'Cancel' button click.
         */
        this.cancel = new EventEmitter();
        /**
         * Fires each time the left side of the ColorPicker wrapper is clicked.
         * The event is triggered regardless of whether a ColorPicker icon is set or not.
         *
         * The [ActiveColorClickEvent]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.
         */
        this.activeColorClick = new EventEmitter();
        /**
         * Fires each time the view is about to change.
         * Used to provide a two-way binding for the `activeView` property.
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Indicates whether the ColorPicker wrapper is focused.
         */
        this.isFocused = false;
        this._tabindex = 0;
        this._popupSettings = { animate: true };
        this._paletteSettings = {};
        this._gradientSettings = { opacity: true, delay: 0 };
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        this.subscriptions = new Subscription();
        this.notifyNgTouched = function () { };
        this.notifyNgChanged = function () { };
        this.domFocusListener = function (event) { return event.stopImmediatePropagation(); };
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    ColorPickerComponent_1 = ColorPickerComponent;
    Object.defineProperty(ColorPickerComponent.prototype, "focusedClass", {
        get: function () {
            return this.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "ariaExpanded", {
        get: function () {
            return this.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "hostTabindex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "view", {
        get: function () {
            return (this.views && this.views.length > 0) ? this.views[0] : null;
        },
        /**
         * @hidden
         */
        set: function (view) {
            this.views = [view];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format, this.gradientSettings.opacity);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the ColorPicker.
         */
        set: function (value) {
            this._popupSettings = Object.assign(this._popupSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "paletteSettings", {
        get: function () {
            return this._paletteSettings;
        },
        /**
         * Configures the palette that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._paletteSettings = Object.assign(this._paletteSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "gradientSettings", {
        get: function () {
            return this._gradientSettings;
        },
        /**
         * Configures the gradient that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._gradientSettings = Object.assign(this._gradientSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         *
         * @default 0
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the padding of the ColorPicker internal elements
         * ([see example]({% slug appearance_colorpicker %}#toc-size)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the ColorPicker
         * ([see example]({% slug appearance_colorpicker %}#toc-rounded)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `'full'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        /**
         * The fillMode property specifies the background and border styles of the ColorPicker
         * ([see example]({% slug appearance_colorpicker %}#toc-fillMode)).
         *
         * The possible values are:
         * * `'flat'`
         * * `'solid'` (default)
         * * `'outline'`
         * * `null`
         */
        set: function (fillMode) {
            this.handleClasses(fillMode, 'fillMode');
            this._fillMode = fillMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "isOpen", {
        /**
         * Indicates whether the ColorPicker popup is open.
         */
        get: function () {
            return isPresent(this.popupRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "iconStyles", {
        /**
         * @hidden
         */
        get: function () {
            if (this.iconClass) {
                return this.iconClass;
            }
            if (this.icon) {
                return "k-icon k-i-" + this.icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    ColorPickerComponent.prototype.ngOnInit = function () {
        var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;
        var settingsPalette = this._paletteSettings.palette;
        var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?
            PALETTEPRESETS[settingsPalette].columns :
            undefined;
        this._paletteSettings = {
            palette: settingsPalette || defaultPreset,
            tileSize: this._paletteSettings.tileSize || 24,
            columns: this._paletteSettings.columns || presetColumns || 10
        };
    };
    ColorPickerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var stylingInputs = ['size', 'rounded', 'fillMode'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
        this.setHostElementAriaLabel();
        this.handleHostId();
        this.initDomEvents();
    };
    ColorPickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.format && changes.format.currentValue === 'name') {
            this.activeView = 'palette';
        }
        if (this.activeView === 'gradient' && this.gradientSettings.opacity) {
            this.format = 'rgba';
            this.value = parseColor$1(this.value, this.format, this.gradientSettings.opacity);
        }
        if (isChanged('value', changes)) {
            this.setHostElementAriaLabel();
        }
    };
    ColorPickerComponent.prototype.ngOnDestroy = function () {
        this.closePopup();
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.subscriptions.unsubscribe();
        this.handleDomEvents('remove', DOM_FOCUS_EVENTS);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleCancelEvent = function (ev) {
        this.cancel.emit(ev);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.togglePopup = function () {
        this.focus();
        this.toggleWithEvents(!this.isOpen);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperClick = function (event) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.focus();
        if (closest(event.target, function (element) { return element === _this.activeColor.nativeElement; })) {
            var event_1 = new ActiveColorClickEvent(this.value);
            this.activeColorClick.emit(event_1);
            if (!event_1.isOpenPrevented() || this.isOpen) {
                this.toggleWithEvents(!this.isOpen);
            }
            return;
        }
        this.toggleWithEvents(!this.isOpen);
    };
    /**
     * Focuses the wrapper of the ColorPicker.
     */
    ColorPickerComponent.prototype.focus = function () {
        this.isFocused = true;
        this.host.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperFocus = function () {
        var _this = this;
        if (this.isFocused) {
            return;
        }
        this.ngZone.run(function () {
            _this.focus();
            _this.onFocus.emit();
        });
    };
    /**
     * Blurs the ColorPicker.
     */
    ColorPickerComponent.prototype.blur = function () {
        this.isFocused = false;
        this.host.nativeElement.blur();
        this.notifyNgTouched();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperBlur = function () {
        var _this = this;
        if (this.isOpen) {
            return;
        }
        this.ngZone.run(function () {
            _this.onBlur.emit();
            _this.isFocused = false;
        });
    };
    /**
     * Clears the value of the ColorPicker.
     */
    ColorPickerComponent.prototype.reset = function () {
        if (!isPresent(this.value)) {
            return;
        }
        this._value = undefined;
        this.setHostElementAriaLabel();
        this.notifyNgChanged(undefined);
    };
    /**
     * Toggles the popup of the ColorPicker.
     * Does not trigger the `open` and `close` events of the component.
     *
     * @param open An optional parameter. Specifies whether the popup will be opened or closed.
     */
    ColorPickerComponent.prototype.toggle = function (open) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.cdr.markForCheck();
        this.closePopup();
        open = isPresent(open) ? open : !this.isOpen;
        if (open) {
            this.openPopup();
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleValueChange = function (color) {
        var parsedColor = parseColor$1(color, this.format, this.gradientSettings.opacity);
        var valueChange = parsedColor !== this.value;
        if (valueChange) {
            this.value = parsedColor;
            this.valueChange.emit(parsedColor);
            this.setHostElementAriaLabel();
            this.notifyNgChanged(parsedColor);
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupBlur = function (event) {
        if (this.popupBlurInvalid(event)) {
            return;
        }
        this.isFocused = false;
        this.onBlur.emit();
        this.notifyNgTouched();
        this.toggleWithEvents(false);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperKeyDown = function (event) {
        var _this = this;
        if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {
            event.preventDefault();
            this.ngZone.run(function () {
                _this.toggleWithEvents(true);
            });
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupKeyDown = function (event) {
        if (event.keyCode === Keys.Escape) {
            this.toggleWithEvents(false);
            this.host.nativeElement.focus();
        }
        if (event.keyCode === Keys.Tab) {
            var currentElement = event.shiftKey ? this.firstFocusableElement.nativeElement : this.lastFocusableElement.nativeElement;
            var nextElement = event.shiftKey ? this.lastFocusableElement.nativeElement : this.firstFocusableElement.nativeElement;
            if (event.target === currentElement) {
                event.preventDefault();
                nextElement.focus();
            }
        }
    };
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    ColorPickerComponent.prototype.isEmpty = function () {
        return false;
    };
    ColorPickerComponent.prototype.setHostElementAriaLabel = function () {
        var ariaLabelValue = "" + (this.value ? this.value : this.localizationService.get('colorPickerNoColor'));
        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', ariaLabelValue);
    };
    ColorPickerComponent.prototype.handleClasses = function (value, input) {
        var elem = this.host.nativeElement;
        var classes = getStylingClasses('picker', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    ColorPickerComponent.prototype.popupBlurInvalid = function (ev) {
        var _this = this;
        var focusInFlatColorPickerElement = this.popupRef.popupElement.contains(ev.relatedTarget);
        var hostClicked = closest(ev.relatedTarget, function (element) { return element === _this.host.nativeElement; });
        return hostClicked || focusInFlatColorPickerElement;
    };
    ColorPickerComponent.prototype.toggleWithEvents = function (open) {
        var sameState = this.isOpen === open;
        if (this.disabled || this.readonly || sameState) {
            return;
        }
        var eventArgs;
        if (open) {
            eventArgs = new ColorPickerOpenEvent();
            this.open.emit(eventArgs);
        }
        else {
            eventArgs = new ColorPickerCloseEvent();
            this.close.emit(eventArgs);
        }
        if (!eventArgs.isDefaultPrevented()) {
            this.toggle(open);
        }
        if (open) {
            this.focusFirstElement();
        }
    };
    ColorPickerComponent.prototype.focusFirstElement = function () {
        var _this = this;
        this.ngZone.onStable.pipe(take(1)).subscribe(function () {
            if (_this.flatColorPicker) {
                var gradient = _this.flatColorPicker.gradient;
                var elementToFocus = gradient ? gradient.gradientDragHandle :
                    _this.flatColorPicker.palette.host;
                elementToFocus.nativeElement.focus();
            }
        });
    };
    ColorPickerComponent.prototype.openPopup = function () {
        var _this = this;
        var horizontalAlign = this.direction === "rtl" ? "right" : "left";
        var anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        var popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.activeColor,
            animate: this.popupSettings.animate,
            appendTo: this.popupSettings.appendTo,
            popupAlign: popupPosition,
            anchorAlign: anchorPosition,
            popupClass: 'k-colorpicker-popup',
            content: this.popupTemplate,
            positionMode: 'absolute'
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(function () {
            _this.toggleWithEvents(false);
            if (!_this.isOpen) {
                _this.host.nativeElement.focus({
                    preventScroll: true
                });
            }
        });
    };
    ColorPickerComponent.prototype.closePopup = function () {
        if (!this.isOpen) {
            return;
        }
        this.popupRef.close();
        this.popupRef = null;
    };
    Object.defineProperty(ColorPickerComponent.prototype, "firstFocusableElement", {
        get: function () {
            if (!this.flatColorPicker.header || (this.views.length <= 1 && !this.flatColorPicker.clearButton)) {
                var gradient = this.flatColorPicker.gradient;
                return gradient ? gradient.gradientDragHandle : this.flatColorPicker.palette.host;
            }
            return this.views.length > 1 ? this.flatColorPicker.header.viewButtonsCollection.toArray()[0] : this.flatColorPicker.header.clearButtonElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "lastFocusableElement", {
        get: function () {
            if (this.preview) {
                return this.flatColorPicker.footer.lastButton;
            }
            if (this.flatColorPicker.palette) {
                return this.flatColorPicker.palette.host;
            }
            var gradient = this.flatColorPicker.gradient;
            var inputs = gradient && gradient.inputs;
            if (gradient && inputs && inputs.formatView === 'hex') {
                return inputs.hexInput;
            }
            return this.gradientSettings.opacity ? inputs.opacityInput.numericInput : inputs.blueInput;
        },
        enumerable: true,
        configurable: true
    });
    ColorPickerComponent.prototype.handleDomEvents = function (action, events) {
        var _this = this;
        var hostElement = this.host.nativeElement;
        events.forEach(function (ev) { return hostElement[action + "EventListener"](ev, _this.domFocusListener, true); });
    };
    ColorPickerComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.host) {
            return;
        }
        var hostElement = this.host.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {
                _this.handleWrapperFocus();
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (event) {
                var closestPopup = _this.popupRef ?
                    closest(event.relatedTarget, function (element) { return element === _this.flatColorPicker.host.nativeElement; }) :
                    false;
                var closestWrapper = closest(event.relatedTarget, function (element) { return element === _this.host.nativeElement; });
                if (!closestPopup && !closestWrapper) {
                    _this.handleWrapperBlur();
                }
            }));
            _this.handleDomEvents('add', DOM_FOCUS_EVENTS);
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (event) {
                _this.handleWrapperKeyDown(event);
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'click', function (event) {
                _this.ngZone.run(function () {
                    _this.handleWrapperClick(event);
                });
            }));
        });
    };
    ColorPickerComponent.prototype.handleHostId = function () {
        var hostElement = this.host.nativeElement;
        var existingId = hostElement.getAttribute('id');
        if (existingId) {
            this.focusableId = existingId;
        }
        else {
            var id = "k-" + guid();
            hostElement.setAttribute('id', id);
            this.focusableId = id;
        }
    };
    var ColorPickerComponent_1;
    __decorate([
        HostBinding('class.k-colorpicker'),
        HostBinding('class.k-icon-picker'),
        HostBinding('class.k-picker'),
        __metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "hostClasses", void 0);
    __decorate([
        HostBinding('class.k-focus'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPickerComponent.prototype, "focusedClass", null);
    __decorate([
        HostBinding('attr.aria-disabled'),
        HostBinding('class.k-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPickerComponent.prototype, "disabledClass", null);
    __decorate([
        HostBinding('attr.aria-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPickerComponent.prototype, "ariaReadonly", null);
    __decorate([
        HostBinding('attr.aria-expanded'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ColorPickerComponent.prototype, "ariaExpanded", null);
    __decorate([
        HostBinding('attr.tabindex'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [])
    ], ColorPickerComponent.prototype, "hostTabindex", null);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('attr.role'),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], ColorPickerComponent.prototype, "views", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "view", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "activeView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "format", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "popupSettings", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "paletteSettings", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "gradientSettings", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ColorPickerComponent.prototype, "iconClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ColorPickerComponent.prototype, "tabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "preview", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerComponent.prototype, "actionsLayout", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "rounded", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "fillMode", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "valueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "open", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "close", void 0);
    __decorate([
        Output('focus'),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "onFocus", void 0);
    __decorate([
        Output('blur'),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "cancel", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "activeColorClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "activeViewChange", void 0);
    __decorate([
        ViewChild('container', { read: ViewContainerRef, static: true }),
        __metadata("design:type", ViewContainerRef)
    ], ColorPickerComponent.prototype, "container", void 0);
    __decorate([
        ViewChild('activeColor', { static: true }),
        __metadata("design:type", ElementRef)
    ], ColorPickerComponent.prototype, "activeColor", void 0);
    __decorate([
        ViewChild('popupTemplate', { static: true }),
        __metadata("design:type", TemplateRef)
    ], ColorPickerComponent.prototype, "popupTemplate", void 0);
    __decorate([
        ViewChild('flatColorPicker', { static: false }),
        __metadata("design:type", FlatColorPickerComponent)
    ], ColorPickerComponent.prototype, "flatColorPicker", void 0);
    ColorPickerComponent = ColorPickerComponent_1 = __decorate([
        Component({
            exportAs: 'kendoColorPicker',
            selector: 'kendo-colorpicker',
            providers: [{
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return ColorPickerComponent_1; })
                }, {
                    provide: KendoInput,
                    useExisting: forwardRef(function () { return ColorPickerComponent_1; })
                },
                ColorPickerLocalizationService,
                {
                    provide: LocalizationService,
                    useExisting: ColorPickerLocalizationService
                },
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.colorpicker'
                }
            ],
            template: "\n        <ng-container kendoColorPickerLocalizedMessages\n            i18n-colorPickerNoColor=\"kendo.colorpicker.colorPickerNoColor|The aria-label applied to the ColorPicker component when the value is empty.\"\n            colorPickerNoColor=\"Colorpicker no color chosen\"\n            i18n-flatColorPickerNoColor=\"kendo.colorpicker.flatColorPickerNoColor|The aria-label applied to the FlatColorPicker component when the value is empty.\"\n            flatColorPickerNoColor=\"Flatcolorpicker no color chosen\"\n            i18n-colorGradientNoColor=\"kendo.colorpicker.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\"\n            colorGradientNoColor=\"Colorgradient no color chosen\"\n            i18n-colorPaletteNoColor=\"kendo.colorpicker.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\"\n            colorPaletteNoColor=\"Colorpalette no color chosen\"\n            i18n-colorGradientHandle=\"kendo.colorpicker.colorGradientHandle|The title for the gradient color drag handle chooser.\"\n            colorGradientHandle=\"Choose color\"\n            i18n-clearButton=\"kendo.colorpicker.clearButton|The title for the clear button.\"\n            clearButton=\"Clear value\"\n            i18n-hueSliderHandle=\"kendo.colorpicker.hueSliderHandle|The title for the hue slider handle.\"\n            hueSliderHandle=\"Set hue\"\n            i18n-opacitySliderHandle=\"kendo.colorpicker.opacitySliderHandle|The title for the opacity slider handle.\"\n            opacitySliderHandle=\"Set opacity\"\n            i18n-contrastRatio=\"kendo.colorpicker.contrastRatio|The contrast ratio message for the contrast tool.\"\n            contrastRatio=\"Contrast ratio\"\n            i18n-previewColor=\"kendo.colorpicker.previewColor|The message for the color preview pane.\"\n            previewColor=\"Color preview\"\n            i18n-revertSelection=\"kendo.colorpicker.revertSelection|The message for the selected color pane.\"\n            revertSelection=\"Revert selection\"\n            i18n-gradientView=\"kendo.colorpicker.gradientView|The message for the gradient view button.\"\n            gradientView=\"Gradient view\"\n            i18n-paletteView=\"kendo.colorpicker.paletteView|The message for the palette view button.\"\n            paletteView=\"Palette view\"\n            i18n-formatButton=\"kendo.colorpicker.formatButton|The message for the input format toggle button.\"\n            formatButton=\"Change color format\"\n            i18n-applyButton=\"kendo.colorpicker.applyButton|The message for the Apply action button.\"\n            applyButton=\"Apply\"\n            i18n-cancelButton=\"kendo.colorpicker.cancelButton|The message for the Cancel action button.\"\n            cancelButton=\"Cancel\">\n        </ng-container>\n        <span #activeColor class=\"k-input-inner\">\n            <span\n                class=\"k-value-icon k-color-preview\"\n                [ngClass]=\"{'k-icon-color-preview': iconStyles, 'k-no-color': !value}\">\n                <span *ngIf=\"iconClass || icon\" class=\"k-color-preview-icon k-icon\" [ngClass]=\"iconStyles\"></span>\n                <span class=\"k-color-preview-mask\" [style.background-color]=\"value\"></span>\n            </span>\n        </span>\n        <button\n            tabindex=\"-1\"\n            type=\"button\"\n            class=\"k-input-button k-button k-button-md k-button-solid k-button-solid-base k-icon-button\">\n                <span class=\"k-button-icon k-icon k-i-arrow-s\"></span>\n        </button>\n        <ng-template #popupTemplate>\n            <kendo-flatcolorpicker\n                #flatColorPicker\n                [value]=\"value\"\n                [format]=\"format\"\n                [views]=\"views\"\n                [activeView]=\"activeView\"\n                [actionsLayout]=\"actionsLayout\"\n                [preview]=\"preview\"\n                [gradientSettings]=\"gradientSettings\"\n                [paletteSettings]=\"paletteSettings\"\n                [clearButton]=\"clearButton\"\n                (cancel)=\"handleCancelEvent($event)\"\n                (focusout)=\"handlePopupBlur($event)\"\n                (valueChange)=\"handleValueChange($event)\"\n                (keydown)=\"handlePopupKeyDown($event)\"\n                (activeViewChange)=\"activeViewChange.emit($event)\"\n                (actionButtonClick)=\"togglePopup()\">\n            </kendo-flatcolorpicker>\n        </ng-template>\n        <ng-container #container></ng-container>\n    "
        }),
        __metadata("design:paramtypes", [ElementRef,
            PopupService,
            ChangeDetectorRef,
            LocalizationService,
            NgZone,
            Renderer2])
    ], ColorPickerComponent);
    return ColorPickerComponent;
}());

/**
 * @hidden
 */
var ColorPickerMessages = /** @class */ (function (_super) {
    __extends(ColorPickerMessages, _super);
    function ColorPickerMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "colorPaletteNoColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "colorGradientNoColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "flatColorPickerNoColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "colorPickerNoColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "colorGradientHandle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "hueSliderHandle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "opacitySliderHandle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "hexInputPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "redInputPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "greenInputPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "blueInputPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "alphaInputPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "passContrast", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "failContrast", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "contrastRatio", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "previewColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "revertSelection", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "gradientView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "paletteView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "formatButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "applyButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorPickerMessages.prototype, "cancelButton", void 0);
    return ColorPickerMessages;
}(ComponentMessages));

/**
 * Custom component messages override default component messages.
 */
var ColorPickerCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(ColorPickerCustomMessagesComponent, _super);
    function ColorPickerCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    ColorPickerCustomMessagesComponent_1 = ColorPickerCustomMessagesComponent;
    Object.defineProperty(ColorPickerCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    var ColorPickerCustomMessagesComponent_1;
    ColorPickerCustomMessagesComponent = ColorPickerCustomMessagesComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: ColorPickerMessages,
                    useExisting: forwardRef(function () { return ColorPickerCustomMessagesComponent_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: 'kendo-colorpicker-messages, kendo-flatcolorpicker-messages, kendo-colorgradient-messages, kendo-colorpalette-messages',
            template: ""
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], ColorPickerCustomMessagesComponent);
    return ColorPickerCustomMessagesComponent;
}(ColorPickerMessages));

/**
 * @hidden
 */
var LocalizedColorPickerMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedColorPickerMessagesDirective, _super);
    function LocalizedColorPickerMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    LocalizedColorPickerMessagesDirective_1 = LocalizedColorPickerMessagesDirective;
    var LocalizedColorPickerMessagesDirective_1;
    LocalizedColorPickerMessagesDirective = LocalizedColorPickerMessagesDirective_1 = __decorate([
        Directive({
            providers: [
                {
                    provide: ColorPickerMessages,
                    useExisting: forwardRef(function () { return LocalizedColorPickerMessagesDirective_1; }) // tslint:disable-line:no-forward-ref
                }
            ],
            selector: '[kendoColorPickerLocalizedMessages], [kendoFlatColorPickerLocalizedMessages], [kendoColorGradientLocalizedMessages], [kendoColorPaletteLocalizedMessages]'
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], LocalizedColorPickerMessagesDirective);
    return LocalizedColorPickerMessagesDirective;
}(ColorPickerMessages));

/**
 * @hidden
 */
var FocusOnDomReadyDirective = /** @class */ (function () {
    function FocusOnDomReadyDirective(host, ngZone) {
        this.host = host;
        this.ngZone = ngZone;
    }
    FocusOnDomReadyDirective.prototype.ngAfterContentInit = function () {
        this.focusOnNextTick();
    };
    FocusOnDomReadyDirective.prototype.focusOnNextTick = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () { return setTimeout(function () { return _this.host.nativeElement.focus(); }); });
    };
    FocusOnDomReadyDirective = __decorate([
        Directive({
            selector: '[kendoFocusOnDomReady]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            NgZone])
    ], FocusOnDomReadyDirective);
    return FocusOnDomReadyDirective;
}());

/**
 * @hidden
 */
var ContrastValidationComponent = /** @class */ (function () {
    function ContrastValidationComponent(localization) {
        this.localization = localization;
    }
    Object.defineProperty(ContrastValidationComponent.prototype, "passMessage", {
        get: function () {
            return this.localization.get('passContrast');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastValidationComponent.prototype, "failMessage", {
        get: function () {
            return this.localization.get('failContrast');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastValidationComponent.prototype, "contrastText", {
        get: function () {
            var ratio = this.type === 'AA' ? AA_RATIO : AAA_RATIO;
            return this.type + ": " + ratio.toFixed(1);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ContrastValidationComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ContrastValidationComponent.prototype, "pass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ContrastValidationComponent.prototype, "value", void 0);
    ContrastValidationComponent = __decorate([
        Component({
            selector: '[kendoContrastValidation]',
            template: "\n        <span>{{contrastText}}</span>\n        <ng-container *ngIf=\"value\">\n            <span class=\"k-contrast-validation k-text-success\" *ngIf=\"pass\">\n                {{passMessage}}\n                <span class=\"k-icon k-i-check\"></span>\n            </span>\n            <span class=\"k-contrast-validation k-text-error\" *ngIf=\"!pass\">\n                {{failMessage}}\n                <span class=\"k-icon k-i-close\"></span>\n            </span>\n        </ng-container>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], ContrastValidationComponent);
    return ContrastValidationComponent;
}());

/**
 * @hidden
 */
var ContrastComponent = /** @class */ (function () {
    function ContrastComponent(localization) {
        this.localization = localization;
    }
    Object.defineProperty(ContrastComponent.prototype, "formatedRatio", {
        get: function () {
            return this.contrastRatio.toFixed(2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastComponent.prototype, "contrastRatioText", {
        get: function () {
            return this.localization.get('contrastRatio') + ": " + (this.value ? this.formatedRatio : 'n/a');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastComponent.prototype, "satisfiesAACondition", {
        get: function () {
            return this.contrastRatio >= AA_RATIO;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastComponent.prototype, "satisfiesAAACondition", {
        get: function () {
            return this.contrastRatio >= AAA_RATIO;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContrastComponent.prototype, "contrastRatio", {
        get: function () {
            var contrast = getContrastFromTwoRGBAs(getRGBA(this.value), getRGBA(this.ratio));
            return contrast;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ContrastComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ContrastComponent.prototype, "ratio", void 0);
    ContrastComponent = __decorate([
        Component({
            selector: '[kendoContrastTool]',
            template: "\n        <div class=\"k-contrast-ratio\">\n            <span class=\"k-contrast-ratio-text\">{{contrastRatioText}}</span>\n            <ng-container *ngIf=\"value\">\n                <span class=\"k-contrast-validation k-text-success\" *ngIf=\"satisfiesAACondition\">\n                    <span class=\"k-icon k-i-check\"></span>\n                    <span class=\"k-icon k-i-check\" *ngIf=\"satisfiesAAACondition\"></span>\n                </span>\n                <span class=\"k-contrast-validation k-text-error\" *ngIf=\"!satisfiesAACondition\">\n                    <span class=\"k-icon k-i-close\"></span>\n                </span>\n            </ng-container>\n        </div>\n        <div kendoContrastValidation\n            type=\"AA\"\n            [value]=\"value\"\n            [pass]=\"satisfiesAACondition\">\n        </div>\n        <div kendoContrastValidation\n            type=\"AAA\"\n            [value]=\"value\"\n            [pass]=\"satisfiesAAACondition\">\n        </div>\n    "
        }),
        __metadata("design:paramtypes", [LocalizationService])
    ], ContrastComponent);
    return ContrastComponent;
}());

/**
 * @hidden
 */
var ColorContrastSvgComponent = /** @class */ (function () {
    function ColorContrastSvgComponent() {
        this.hostClass = true;
    }
    ColorContrastSvgComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.metrics = this.wrapper.getBoundingClientRect();
        this.oldA = this.hsva.value.a;
        this.oldH = this.hsva.value.h;
        this.hsva.subscribe(function (value) {
            if (value.h !== _this.oldH || value.a !== _this.oldA) {
                _this.oldH = value.h;
                _this.oldA = value.a;
                _this.setPaths();
            }
        });
    };
    ColorContrastSvgComponent.prototype.ngOnChanges = function (changes) {
        if (isPresent(changes.backgroundColor) && this.metrics) {
            this.setPaths();
        }
    };
    ColorContrastSvgComponent.prototype.setPaths = function () {
        var bezierCommandCalc = bezierCommand(controlPoint(line));
        this.paths = [svgPath(this.getPaths(AA_RATIO, STEP_COUNT), bezierCommandCalc),
            svgPath(this.getPaths(AA_RATIO, STEP_COUNT, true), bezierCommandCalc),
            svgPath(this.getPaths(AAA_RATIO, STEP_COUNT), bezierCommandCalc),
            svgPath(this.getPaths(AAA_RATIO, STEP_COUNT, true), bezierCommandCalc)];
    };
    ColorContrastSvgComponent.prototype.findValue = function (contrast, saturation, low, high, comparer) {
        var mid = (low + high) / 2;
        var hsva = Object.assign({}, this.hsva.value, { s: saturation / this.metrics.width, v: 1 - mid / this.metrics.height });
        var currentContrast = getContrastFromTwoRGBAs(getRGBA(getColorFromHSV(hsva)), getRGBA(this.backgroundColor || ''));
        if (low + 0.5 > high) {
            if (currentContrast < contrast + 1 && currentContrast > contrast - 1) {
                return mid;
            }
            else {
                return null;
            }
        }
        if (comparer(currentContrast, contrast)) {
            return this.findValue(contrast, saturation, low, high - (high - low) / 2, comparer);
        }
        return this.findValue(contrast, saturation, low + (high - low) / 2, high, comparer);
    };
    ColorContrastSvgComponent.prototype.getPaths = function (contrast, stepCount, reversed) {
        if (reversed === void 0) { reversed = false; }
        var points = [];
        for (var i = 0; i <= this.metrics.width; i += this.metrics.width / stepCount) {
            var value = this.findValue(contrast, i, 0, this.metrics.height, reversed ? (function (a, b) { return a < b; }) : (function (a, b) { return a > b; }));
            if (value !== null) {
                points.push([i, value]);
            }
        }
        return points;
    };
    __decorate([
        HostBinding('class.k-color-contrast-svg'),
        __metadata("design:type", Boolean)
    ], ColorContrastSvgComponent.prototype, "hostClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ColorContrastSvgComponent.prototype, "wrapper", void 0);
    __decorate([
        Input(),
        __metadata("design:type", BehaviorSubject)
    ], ColorContrastSvgComponent.prototype, "hsva", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ColorContrastSvgComponent.prototype, "backgroundColor", void 0);
    ColorContrastSvgComponent = __decorate([
        Component({
            selector: '[kendoColorContrastSvg]',
            template: "\n        <svg:path *ngFor=\"let path of paths\" [attr.d]=\"path\" fill=\"none\" stroke=\"white\" stroke-width=\"1\"></svg:path>\n    "
        })
    ], ColorContrastSvgComponent);
    return ColorContrastSvgComponent;
}());

var PUBLIC_DIRECTIVES = [
    ColorPickerComponent,
    ColorPaletteComponent,
    ColorGradientComponent,
    FlatColorPickerComponent,
    LocalizedColorPickerMessagesDirective,
    ColorPickerCustomMessagesComponent
];
var INTERNAL_DIRECTIVES = [
    ColorInputComponent,
    FocusOnDomReadyDirective,
    ContrastComponent,
    ContrastValidationComponent,
    FlatColorPickerHeaderComponent,
    FlatColorPickerActionButtonsComponent,
    ColorContrastSvgComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the ColorPicker.
 */
var ColorPickerModule = /** @class */ (function () {
    function ColorPickerModule() {
    }
    ColorPickerModule = __decorate([
        NgModule({
            declarations: [
                PUBLIC_DIRECTIVES,
                INTERNAL_DIRECTIVES
            ],
            exports: [PUBLIC_DIRECTIVES],
            imports: [
                SliderModule,
                NumericTextBoxModule,
                CommonModule,
                PopupModule,
                DraggableModule
            ]
        })
    ], ColorPickerModule);
    return ColorPickerModule;
}());

/**
 * Represents the directive that renders the [Kendo UI CheckBox]({% slug overview_checkbox %}) input component.
 * The directive is placed on input type="checkbox" elements.
 *
 * @example
 * ```ts-no-run
 * <input type="checkbox" kendoCheckBox />
 * ```
 */
var CheckBoxDirective = /** @class */ (function () {
    function CheckBoxDirective(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.kendoClass = true;
        this._size = 'medium';
        this._rounded = 'medium';
    }
    Object.defineProperty(CheckBoxDirective.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the width and height of the CheckBox
         * ([see example]({% slug appearance_checkboxdirective %}#toc-size)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckBoxDirective.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        /**
         * The rounded property specifies the border radius of the CheckBox
         * ([see example]({% slug appearance_checkboxdirective %}#toc-rounded)).
         *
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (rounded) {
            this.handleClasses(rounded, 'rounded');
            this._rounded = rounded;
        },
        enumerable: true,
        configurable: true
    });
    CheckBoxDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var stylingInputs = ['size', 'rounded'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    CheckBoxDirective.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('checkbox', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    __decorate([
        HostBinding('class.k-checkbox'),
        __metadata("design:type", Boolean)
    ], CheckBoxDirective.prototype, "kendoClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], CheckBoxDirective.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], CheckBoxDirective.prototype, "rounded", null);
    CheckBoxDirective = __decorate([
        Directive({
            selector: 'input[kendoCheckBox]'
        }),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef])
    ], CheckBoxDirective);
    return CheckBoxDirective;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the CheckBox directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the CheckBox module
 * import { CheckBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, CheckBoxModule], // import CheckBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var CheckBoxModule = /** @class */ (function () {
    function CheckBoxModule() {
    }
    CheckBoxModule = __decorate([
        NgModule({
            declarations: [CheckBoxDirective],
            exports: [CheckBoxDirective],
            imports: [CommonModule]
        })
    ], CheckBoxModule);
    return CheckBoxModule;
}());

/**
 * Represents the directive that renders the [Kendo UI RadioButton]({% slug overview_checkbox %}) input component.
 * The directive is placed on input type="radio" elements.
 *
 * @example
 * ```ts-no-run
 * <input type="radio" kendoRadioButton />
 * ```
 */
var RadioButtonDirective = /** @class */ (function () {
    function RadioButtonDirective(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.kendoClass = true;
        this._size = 'medium';
        validatePackage(packageMetadata);
    }
    Object.defineProperty(RadioButtonDirective.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * The size property specifies the width and height of the RadioButton
         * ([see example]({% slug appearance_radiobuttondirective %}#toc-size)).
         * The possible values are:
         * * `'small'`
         * * `'medium'` (default)
         * * `'large'`
         * * `null`
         */
        set: function (size) {
            this.handleClasses(size, 'size');
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    RadioButtonDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // kept in sync with other inputs for easier refactoring
        // to a common base class
        var stylingInputs = ['size'];
        stylingInputs.forEach(function (input) {
            _this.handleClasses(_this[input], input);
        });
    };
    RadioButtonDirective.prototype.handleClasses = function (value, input) {
        var elem = this.hostElement.nativeElement;
        var classes = getStylingClasses('radio', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    };
    __decorate([
        HostBinding('class.k-radio'),
        __metadata("design:type", Boolean)
    ], RadioButtonDirective.prototype, "kendoClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], RadioButtonDirective.prototype, "size", null);
    RadioButtonDirective = __decorate([
        Directive({
            selector: 'input[kendoRadioButton]'
        }),
        __metadata("design:paramtypes", [Renderer2, ElementRef])
    ], RadioButtonDirective);
    return RadioButtonDirective;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the RadioButton directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the RadioButton module
 * import { RadioButtonModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, RadioButtonModule], // import RadioButton module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var RadioButtonModule = /** @class */ (function () {
    function RadioButtonModule() {
    }
    RadioButtonModule = __decorate([
        NgModule({
            declarations: [RadioButtonDirective],
            exports: [RadioButtonDirective],
            imports: [CommonModule]
        })
    ], RadioButtonModule);
    return RadioButtonModule;
}());

var serial$2 = 0;
/**
 * Represents an error message that will be shown underneath
 * a Kendo control or native HTML form-bound component after a validation.
 */
var ErrorComponent = /** @class */ (function () {
    function ErrorComponent() {
        this.hostClass = true;
        /**
         * Specifies the alignment of the Error message.
         *
         * The possible values are:
         * * (Default) `start`
         * * `end`
         */
        this.align = 'start';
        /**
         * @hidden
         */
        this.id = "kendo-error-" + serial$2++;
        this.roleAttribute = 'alert';
    }
    Object.defineProperty(ErrorComponent.prototype, "startClass", {
        get: function () {
            return this.align === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErrorComponent.prototype, "endClass", {
        get: function () {
            return this.align === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErrorComponent.prototype, "idAttribute", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        HostBinding('class.k-form-error'),
        __metadata("design:type", Boolean)
    ], ErrorComponent.prototype, "hostClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ErrorComponent.prototype, "align", void 0);
    __decorate([
        HostBinding('attr.role'),
        __metadata("design:type", String)
    ], ErrorComponent.prototype, "roleAttribute", void 0);
    __decorate([
        HostBinding('class.k-text-start'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ErrorComponent.prototype, "startClass", null);
    __decorate([
        HostBinding('class.k-text-end'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], ErrorComponent.prototype, "endClass", null);
    __decorate([
        HostBinding('attr.id'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], ErrorComponent.prototype, "idAttribute", null);
    ErrorComponent = __decorate([
        Component({
            selector: 'kendo-formerror',
            template: "\n        <ng-content></ng-content>\n    "
        })
    ], ErrorComponent);
    return ErrorComponent;
}());

var serial$3 = 0;
/**
 * Represents a hint message that will be shown underneath a form-bound component.
 */
var HintComponent = /** @class */ (function () {
    function HintComponent() {
        /**
         * Specifies the alignment of the Hint message.
         *
         * The possible values are:
         * * (Default) `start`
         * * `end`
         */
        this.align = 'start';
        /**
         * @hidden
         */
        this.id = "kendo-hint-" + serial$3++;
        this.hostClass = true;
    }
    Object.defineProperty(HintComponent.prototype, "startClass", {
        get: function () {
            return this.align === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HintComponent.prototype, "endClass", {
        get: function () {
            return this.align === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HintComponent.prototype, "idAttribute", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HintComponent.prototype, "align", void 0);
    __decorate([
        HostBinding('class.k-form-hint'),
        __metadata("design:type", Boolean)
    ], HintComponent.prototype, "hostClass", void 0);
    __decorate([
        HostBinding('class.k-text-start'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], HintComponent.prototype, "startClass", null);
    __decorate([
        HostBinding('class.k-text-end'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], HintComponent.prototype, "endClass", null);
    __decorate([
        HostBinding('attr.id'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], HintComponent.prototype, "idAttribute", null);
    HintComponent = __decorate([
        Component({
            selector: 'kendo-formhint',
            template: "\n        <ng-content></ng-content>\n    "
        })
    ], HintComponent);
    return HintComponent;
}());

/**
 * Specifies a container for form-bound controls (Kendo controls or native HTML controls).
 * Applies styling and behavior rules.
 */
var FormFieldComponent = /** @class */ (function () {
    function FormFieldComponent(renderer, localizationService, hostElement) {
        var _this = this;
        this.renderer = renderer;
        this.localizationService = localizationService;
        this.hostElement = hostElement;
        this.hostClass = true;
        /**
         *
         * Specifies when the Hint messages will be shown.
         *
         * The possible values are:
         *
         * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is
         * `valid` or `untouched` and `pristine`.
         * * `always`&mdash;Allows full control over the visibility of the hints.
         *
         */
        this.showHints = 'initial';
        /**
         * Specifies the layout orientation of the form field.
         *
         * * The possible values are:
         *
         * * (Default) `vertical`
         * * `horizontal`
         */
        this.orientation = 'vertical';
        /**
         * Specifies when the Error messages will be shown.
         *
         * The possible values are:
         *
         * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is
         * `invalid` and `touched` or `dirty`.
         * * `always`&mdash;Allows full control over the visibility of the errors.
         *
         */
        this.showErrors = 'initial';
        this.subscriptions = new Subscription();
        this.rtl = false;
        validatePackage(packageMetadata);
        this.subscriptions.add(this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.rtl = rtl;
            _this.direction = _this.rtl ? 'rtl' : 'ltr';
        }));
    }
    Object.defineProperty(FormFieldComponent.prototype, "errorClass", {
        get: function () {
            if (!this.control) {
                return false;
            }
            return this.control.invalid && (this.control.touched || this.control.dirty);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldComponent.prototype, "disabledClass", {
        get: function () {
            if (!this.control) {
                return false;
            }
            // radiobutton group
            if (this.isRadioControl(this.control)) {
                return false;
            }
            return this.disabledControl() ||
                this.disabledElement() ||
                this.disabledKendoInput();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldComponent.prototype, "formControls", {
        set: function (formControls) {
            this.validateFormControl(formControls);
            this.control = formControls.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldComponent.prototype, "horizontal", {
        /**
         * @hidden
         */
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldComponent.prototype, "hasHints", {
        /**
         * @hidden
         */
        get: function () {
            return this.showHints === 'always' ? true : this.showHintsInitial();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldComponent.prototype, "hasErrors", {
        /**
         * @hidden
         */
        get: function () {
            return this.showErrors === 'always' ? true : this.showErrorsInitial();
        },
        enumerable: true,
        configurable: true
    });
    FormFieldComponent.prototype.ngAfterViewInit = function () {
        this.setDescription();
    };
    FormFieldComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    FormFieldComponent.prototype.disabledKendoInput = function () {
        return this.kendoInput && this.kendoInput.disabled;
    };
    FormFieldComponent.prototype.disabledControl = function () {
        return this.control.disabled;
    };
    FormFieldComponent.prototype.disabledElement = function () {
        var elements = this.controlElementRefs.toArray();
        return elements.every(function (e) { return e.nativeElement.hasAttribute('disabled'); });
    };
    FormFieldComponent.prototype.validateFormControl = function (formControls) {
        if (isDevMode() && formControls.length !== 1 && !this.isControlGroup(formControls)) {
            throw new Error('The `kendo-formfield` component should contain ' +
                'only one control of type NgControl with a formControlName(https://angular.io/api/forms/FormControlName)' +
                'or an ngModel(https://angular.io/api/forms/NgModel) binding.');
        }
    };
    FormFieldComponent.prototype.isControlGroup = function (formControls) {
        var _this = this;
        if (!formControls.length) {
            return false;
        }
        var name = formControls.first.name;
        return formControls.toArray().every(function (c) { return c.name === name && (_this.isRadioControl(c)); });
    };
    FormFieldComponent.prototype.isRadioControl = function (control) {
        return control.valueAccessor instanceof RadioControlValueAccessor;
    };
    FormFieldComponent.prototype.updateDescription = function () {
        var _this = this;
        var controls = this.findControlElements();
        if (!controls) {
            return;
        }
        controls.forEach(function (control) {
            if (_this.errorChildren.length > 0 || _this.hintChildren.length > 0) {
                var ariaIds = _this.generateDescriptionIds(control);
                _this.renderer.setAttribute(control, 'aria-describedby', ariaIds);
            }
        });
    };
    FormFieldComponent.prototype.findControlElements = function () {
        if (!this.controlElementRefs) {
            return;
        }
        // if the control is KendoInput and has focusableId - dropdowns, dateinputs
        if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {
            return [this.hostElement.nativeElement.querySelector("#" + this.kendoInput.focusableId)];
        }
        return this.controlElementRefs.map(function (el) { return el.nativeElement; });
    };
    FormFieldComponent.prototype.generateDescriptionIds = function (control) {
        var ids = new Set();
        if (control.hasAttribute('aria-describedby')) {
            var attributes = control.getAttribute('aria-describedby').split(' ');
            attributes.forEach(function (attr) {
                if (attr.includes('kendo-hint-') || attr.includes('kendo-error-')) {
                    return;
                }
                ids.add(attr);
            });
        }
        this.hintChildren.forEach(function (hint) {
            ids.add(hint.id);
        });
        this.errorChildren.forEach(function (error) {
            ids.add(error.id);
        });
        return Array.from(ids).join(' ');
    };
    FormFieldComponent.prototype.showHintsInitial = function () {
        if (!this.control) {
            return true;
        }
        var _a = this.control, valid = _a.valid, untouched = _a.untouched, pristine = _a.pristine;
        return valid || (untouched && pristine);
    };
    FormFieldComponent.prototype.showErrorsInitial = function () {
        if (!this.control) {
            return false;
        }
        var _a = this.control, invalid = _a.invalid, dirty = _a.dirty, touched = _a.touched;
        return invalid && (dirty || touched);
    };
    FormFieldComponent.prototype.setDescription = function () {
        var _this = this;
        this.updateDescription();
        this.subscriptions.add(this.errorChildren.changes.subscribe(function () { return _this.updateDescription(); }));
        this.subscriptions.add(this.hintChildren.changes.subscribe(function () { return _this.updateDescription(); }));
    };
    __decorate([
        HostBinding('class.k-form-field'),
        __metadata("design:type", Boolean)
    ], FormFieldComponent.prototype, "hostClass", void 0);
    __decorate([
        HostBinding('attr.dir'),
        __metadata("design:type", String)
    ], FormFieldComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('class.k-form-field-error'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FormFieldComponent.prototype, "errorClass", null);
    __decorate([
        HostBinding('class.k-form-field-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FormFieldComponent.prototype, "disabledClass", null);
    __decorate([
        ContentChildren(NgControl, { descendants: true }),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [QueryList])
    ], FormFieldComponent.prototype, "formControls", null);
    __decorate([
        ContentChildren(NgControl, { read: ElementRef, descendants: true }),
        __metadata("design:type", QueryList)
    ], FormFieldComponent.prototype, "controlElementRefs", void 0);
    __decorate([
        ContentChild(KendoInput, { static: true }),
        __metadata("design:type", Object)
    ], FormFieldComponent.prototype, "kendoInput", void 0);
    __decorate([
        ContentChildren(ErrorComponent, { descendants: true }),
        __metadata("design:type", QueryList)
    ], FormFieldComponent.prototype, "errorChildren", void 0);
    __decorate([
        ContentChildren(HintComponent, { descendants: true }),
        __metadata("design:type", QueryList)
    ], FormFieldComponent.prototype, "hintChildren", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormFieldComponent.prototype, "showHints", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormFieldComponent.prototype, "orientation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormFieldComponent.prototype, "showErrors", void 0);
    FormFieldComponent = __decorate([
        Component({
            selector: 'kendo-formfield',
            template: "\n        <ng-content select=\"label, kendo-label\"></ng-content>\n        <div [class.k-form-field-wrap]=\"horizontal\">\n            <ng-content></ng-content>\n            <ng-content select=\"kendo-formhint\" *ngIf=\"hasHints\"></ng-content>\n            <ng-content select=\"kendo-formerror\" *ngIf=\"hasErrors\"></ng-content>\n        </div>\n    ",
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.formfield'
                }
            ]
        }),
        __metadata("design:paramtypes", [Renderer2,
            LocalizationService,
            ElementRef])
    ], FormFieldComponent);
    return FormFieldComponent;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the FormField, Error and Hint components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the FormField module
 * import { FormFieldModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, FormFieldModule], // import FormField module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var FormFieldModule = /** @class */ (function () {
    function FormFieldModule() {
    }
    FormFieldModule = __decorate([
        NgModule({
            declarations: [HintComponent, ErrorComponent, FormFieldComponent],
            exports: [HintComponent, ErrorComponent, FormFieldComponent],
            imports: [CommonModule]
        })
    ], FormFieldModule);
    return FormFieldModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Inputs components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Inputs module
 * import { InputsModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BrowserAnimationsModule, InputsModule], // import Inputs module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var InputsModule = /** @class */ (function () {
    function InputsModule() {
    }
    InputsModule = __decorate([
        NgModule({
            exports: [
                TextAreaModule,
                TextBoxModule,
                SliderModule,
                RangeSliderModule,
                SwitchModule,
                NumericTextBoxModule,
                MaskedTextBoxModule,
                ColorPickerModule,
                CheckBoxModule,
                RadioButtonModule,
                FormFieldModule
            ],
            imports: [CommonModule]
        })
    ], InputsModule);
    return InputsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ColorContrastSvgComponent, ColorInputComponent, ContrastValidationComponent, ContrastComponent, FlatColorPickerActionButtonsComponent, FlatColorPickerHeaderComponent, FocusOnDomReadyDirective, ColorGradientLocalizationService, ColorPaletteLocalizationService, ColorPickerLocalizationService, ColorPickerCustomMessagesComponent, FlatColorPickerLocalizationService, ColorPickerMessages, ColorPaletteService, FlatColorPickerService, MaskingService, NumericTextBoxMessages, RangeSliderCustomMessagesComponent, RangeSliderMessages, SHARED_DIRECTIVES, SliderCustomMessagesComponent, SliderMessages, SliderBase, SlidersCommonModule, SwitchCustomMessagesComponent, Messages, TextFieldsBase, TextBoxCustomMessagesComponent, TextBoxMessages, SliderComponent, RangeSliderComponent, LabelTemplateDirective, SwitchComponent, TextBoxDirective, TextAreaDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent, MaskedTextBoxComponent, InputsModule, SliderTicksComponent, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, TextBoxModule, TextAreaModule, CheckBoxModule, RadioButtonModule, ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent, ColorPickerModule, FlatColorPickerComponent, CheckBoxDirective, RadioButtonDirective, HintComponent, ErrorComponent, FormFieldComponent, FormFieldModule, TextBoxComponent, TextBoxPrefixTemplateDirective, TextBoxSuffixTemplateDirective, TextAreaComponent, TextAreaSuffixComponent, InputSeparatorComponent, SharedModule, LocalizedColorPickerMessagesDirective, LocalizedNumericTextBoxMessagesDirective, LocalizedTextBoxMessagesDirective, LocalizedSliderMessagesDirective, LocalizedRangeSliderMessagesDirective, LocalizedSwitchMessagesDirective, ColorPickerCancelEvent, ColorPickerCloseEvent, ColorPickerOpenEvent, ActiveColorClickEvent };
