/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, ViewChildren, QueryList, ElementRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
var FlatColorPickerHeaderComponent = /** @class */ (function () {
    function FlatColorPickerHeaderComponent(localizationService) {
        this.localizationService = localizationService;
        this.hostClasses = true;
        this.viewChange = new EventEmitter();
        this.valuePaneClick = new EventEmitter();
        this.clearButtonClick = new EventEmitter();
    }
    FlatColorPickerHeaderComponent.prototype.onViewButtonClick = function (view) {
        this.activeView = view;
        this.viewChange.emit(view);
    };
    Object.defineProperty(FlatColorPickerHeaderComponent.prototype, "viewButtons", {
        get: function () {
            return this.views && this.views.indexOf('gradient') >= 0 && this.views.indexOf('palette') >= 0;
        },
        enumerable: true,
        configurable: true
    });
    FlatColorPickerHeaderComponent.prototype.getViewButtonIcon = function (view) {
        return view === 'gradient' ? 'k-i-color-canvas' : 'k-i-palette';
    };
    FlatColorPickerHeaderComponent.prototype.getText = function (text) {
        return this.localizationService.get(text);
    };
    tslib_1.__decorate([
        HostBinding('class.k-coloreditor-header'),
        HostBinding('class.k-hstack'),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "clearButton", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], FlatColorPickerHeaderComponent.prototype, "views", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerHeaderComponent.prototype, "preview", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "value", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerHeaderComponent.prototype, "selection", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "viewChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "valuePaneClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], FlatColorPickerHeaderComponent.prototype, "clearButtonClick", void 0);
    tslib_1.__decorate([
        ViewChildren('viewButtons', { read: ElementRef }),
        tslib_1.__metadata("design:type", QueryList)
    ], FlatColorPickerHeaderComponent.prototype, "viewButtonsCollection", void 0);
    tslib_1.__decorate([
        ViewChild('clearButton', { read: ElementRef, static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FlatColorPickerHeaderComponent.prototype, "clearButtonElement", void 0);
    FlatColorPickerHeaderComponent = tslib_1.__decorate([
        Component({
            selector: '[kendoFlatColorPickerHeader]',
            template: "\n        <div class=\"k-coloreditor-header-actions k-hstack\">\n            <div *ngIf=\"viewButtons\" class=\"k-button-group k-button-group-flat\">\n                <button *ngFor=\"let view of views\"\n                    #viewButtons\n                    type=\"button\"\n                    (click)=\"onViewButtonClick(view)\"\n                    class=\"k-button k-button-md k-button-flat k-button-flat-base k-icon-button\"\n                    [attr.title]=\"getText(view === 'gradient' ? 'gradientView' : 'paletteView')\"\n                    [attr.aria-label]=\"getText(view === 'gradient' ? 'gradientView' : 'paletteView')\"\n                    [attr.aria-pressed]=\"activeView === view\"\n                    [ngClass]=\"activeView === view ? 'k-state-selected' : ''\"\n                >\n                    <span\n                        class=\"k-button-icon k-icon\"\n                        [ngClass]=\"getViewButtonIcon(view)\">\n                    </span>\n                </button>\n            </div>\n        </div>\n        <div class=\"k-spacer\"></div>\n        <div class=\"k-coloreditor-header-actions k-hstack\">\n            <button *ngIf=\"clearButton\"\n                #clearButton\n                type=\"button\"\n                class=\"k-button k-button-md k-button-flat k-button-flat-base k-icon-button k-coloreditor-reset\"\n                [attr.aria-label]=\"getText('clearButton')\"\n                [attr.title]=\"getText('clearButton')\"\n                (click)=\"clearButtonClick.emit()\">\n                    <span class=\"k-button-icon k-icon k-i-reset-color\"></span>\n            </button>\n            <div class=\"k-coloreditor-preview k-vstack\" *ngIf=\"preview\">\n                <span\n                    class=\"k-coloreditor-preview-color k-color-preview\"\n                    [attr.title]=\"getText('previewColor')\"\n                    [style.background-color]=\"selection\">\n                </span>\n                <span class=\"k-coloreditor-current-color k-color-preview\"\n                    [style.background-color]=\"value\"\n                    [attr.title]=\"getText('revertSelection')\"\n                    (click)=\"valuePaneClick.emit($event)\">\n                </span>\n            </div>\n        </div>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [LocalizationService])
    ], FlatColorPickerHeaderComponent);
    return FlatColorPickerHeaderComponent;
}());
export { FlatColorPickerHeaderComponent };
