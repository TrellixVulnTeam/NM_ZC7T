/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var rxjs_1 = require("rxjs");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_licensing_1 = require("@progress/kendo-licensing");
var flatcolorpicker_localization_service_1 = require("./localization/flatcolorpicker-localization.service");
var flatcolorpicker_service_1 = require("./services/flatcolorpicker.service");
var package_metadata_1 = require("../package-metadata");
var events_1 = require("./events");
var utils_1 = require("./utils");
var utils_2 = require("../common/utils");
var color_gradient_component_1 = require("./color-gradient.component");
var color_palette_component_1 = require("./color-palette.component");
var flatcolorpicker_header_component_1 = require("./flatcolorpicker-header.component");
var flatcolorpicker_actions_component_1 = require("./flatcolorpicker-actions.component");
/**
 * Represents the [Kendo UI FlatColorPicker component for Angular]({% slug overview_flatcolorpicker %}).
 *
 * The FlatColorPicker is a powerful tool which allows the user to choose colors through palettes with predefined sets of colors and
 * through a gradient that renders an hsv canvas. It supports previewing the selected color, reverting it to its previous state or clearing it completely.
 */
var FlatColorPickerComponent = /** @class */ (function () {
    function FlatColorPickerComponent(host, service, localizationService, cdr, renderer, ngZone) {
        var _this = this;
        this.host = host;
        this.service = service;
        this.localizationService = localizationService;
        this.cdr = cdr;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.hostClasses = true;
        /**
         * Sets the read-only state of the FlatColorPicker.
         *
         * @default false
         */
        this.readonly = false;
        /**
         * Sets the disabled state of the FlatColorPicker.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Specifies the output format of the FlatColorPicker.
         *
         * If the input value is in a different format, it will be parsed into the specified output `format`.
         *
         * The supported values are:
         * * `rgba` (default)
         * * `hex`
         */
        this.format = 'rgba';
        /**
         * Specifies whether the FlatColorPicker should display a 'Clear color' button.
         *
         * @default true
         */
        this.clearButton = true;
        /**
         * Displays `Apply` and `Cancel` action buttons and a color preview pane.
         *
         * When enabled, the component value will not change immediately upon
         * color selection, but only after the `Apply` button is clicked.
         *
         * The `Cancel` button reverts the current selection to its
         * initial state i.e. to the current value.
         *
         * @default true
         */
        this.preview = true;
        /**
         * Configures the layout of the `Apply` and `Cancel` action buttons.
         * * `start`
         * * `center`
         * * `end` (default)
         * * `stretch`
         */
        this.actionsLayout = 'end';
        /**
         * Specifies the views that will be rendered. Default value is gradient and palette.
         */
        this.views = ['gradient', 'palette'];
        /**
         * Fires each time the component value is changed.
         */
        this.valueChange = new core_1.EventEmitter();
        /**
         * Fires when the user cancels the current color selection.
         *
         * The event is emitted on preview pane or on 'Cancel' button click.
         */
        this.cancel = new core_1.EventEmitter();
        /**
         * Fires each time the view is about to change.
         * Used to provide a two-way binding for the `activeView` property.
         */
        this.activeViewChange = new core_1.EventEmitter();
        /**
         * @hidden
         */
        this.actionButtonClick = new core_1.EventEmitter();
        this._tabindex = 0;
        this._gradientSettings = { opacity: true, delay: 0 };
        this._paletteSettings = {};
        this.subscriptions = new rxjs_1.Subscription();
        this.notifyNgChanged = function () { };
        this.notifyNgTouched = function () { };
        kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    FlatColorPickerComponent_1 = FlatColorPickerComponent;
    Object.defineProperty(FlatColorPickerComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "hostTabindex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the initially selected color.
         */
        set: function (value) {
            this._value = utils_1.parseColor(value, this.format, this.gradientSettings.opacity);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         *
         * @default 0
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "gradientSettings", {
        get: function () {
            return this._gradientSettings;
        },
        /**
         * Configures the gradient view.
         */
        set: function (value) {
            Object.assign(this._gradientSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatColorPickerComponent.prototype, "paletteSettings", {
        get: function () {
            return this._paletteSettings;
        },
        /**
         * Configures the palette view.
         */
        set: function (value) {
            Object.assign(this._paletteSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    FlatColorPickerComponent.prototype.ngOnInit = function () {
        this.selection = this.value;
        this._paletteSettings = this.service.getPaletteSettings(this._paletteSettings, this.format);
        this.setActiveView();
    };
    FlatColorPickerComponent.prototype.ngAfterViewInit = function () {
        this.setHostElementAriaLabel();
        this.initDomEvents();
        this.setSizingVariables();
    };
    FlatColorPickerComponent.prototype.ngOnChanges = function (changes) {
        if (kendo_angular_common_1.isChanged('value', changes)) {
            this.selection = this.value;
            this.setHostElementAriaLabel();
        }
        if (kendo_angular_common_1.isChanged('paletteSettings', changes)) {
            this.setSizingVariables();
        }
    };
    FlatColorPickerComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.subscriptions.unsubscribe();
    };
    Object.defineProperty(FlatColorPickerComponent.prototype, "headerHasContent", {
        /**
         * @hidden
         */
        get: function () {
            return this.preview || this.views.length > 1 || this.clearButton;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the FloatingLabel to determine if the component is empty.
     */
    FlatColorPickerComponent.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Focuses the wrapper of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.focus = function () {
        if (this.disabled && this.focused) {
            return;
        }
        this.host.nativeElement.focus();
        this.focused = true;
    };
    /**
     * Blurs the wrapper of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.blur = function () {
        if (!this.focused) {
            return;
        }
        this.notifyNgTouched();
        this.host.nativeElement.blur();
        this.focused = false;
    };
    /**
     * Clears the value of the FlatColorPicker.
     */
    FlatColorPickerComponent.prototype.reset = function () {
        if (!utils_2.isPresent(this.value)) {
            return;
        }
        this.value = undefined;
        this.notifyNgChanged(undefined);
        this.setHostElementAriaLabel();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onViewChange = function (view) {
        var _this = this;
        if (this.activeView === view) {
            return;
        }
        this.activeView = view;
        this.activeViewChange.emit(view);
        if (this.activeView === 'gradient') {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.gradient.gradientDragHandle.nativeElement.focus();
                });
            });
        }
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onClearButtonClick = function () {
        this.resetInnerComponentValue();
        this.host.nativeElement.focus();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.handleValueChange = function (color) {
        this.preview ? this.changeCurrentValue(color) : this.setFlatColorPickerValue(color);
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.onAction = function (ev) {
        ev.target === 'apply' ? this.setFlatColorPickerValue(this.selection) : this.resetSelection(ev.originalEvent);
        this.actionButtonClick.emit();
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    FlatColorPickerComponent.prototype.resetSelection = function (ev) {
        var eventArgs = new events_1.ColorPickerCancelEvent(ev);
        this.cancel.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.selection = this.value;
        }
        this.notifyNgTouched();
    };
    FlatColorPickerComponent.prototype.setHostElementAriaLabel = function () {
        var parsed = utils_1.parseColor(this.value, this.format, this.gradientSettings.opacity);
        var ariaLabelValue = "" + (this.value ? parsed : this.localizationService.get('flatColorPickerNoColor'));
        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', ariaLabelValue);
    };
    FlatColorPickerComponent.prototype.setSizingVariables = function () {
        var paletteTileSize = this.service.paletteTileLayout(this.paletteSettings.tileSize);
        var value = "--kendo-color-preview-columns: " + this.paletteSettings.columns + ";\n            --kendo-color-preview-width: " + paletteTileSize.width + "px;\n            --kendo-color-preview-height: " + paletteTileSize.height + "px;";
        this.host.nativeElement.querySelector('.k-coloreditor-views.k-vstack').setAttribute('style', value);
    };
    FlatColorPickerComponent.prototype.changeCurrentValue = function (color) {
        this.selection = color;
        this.notifyNgTouched();
    };
    FlatColorPickerComponent.prototype.resetInnerComponentValue = function () {
        this.selection = null;
        if (this.gradient) {
            this.gradient.reset();
            return;
        }
        this.palette.reset();
    };
    FlatColorPickerComponent.prototype.setFlatColorPickerValue = function (color) {
        if (this.value === color) {
            return;
        }
        this.value = color;
        this.valueChange.emit(color);
        this.notifyNgChanged(color);
        this.setHostElementAriaLabel();
    };
    FlatColorPickerComponent.prototype.setActiveView = function () {
        if (!utils_2.isPresent(this.activeView)) {
            this.activeView = this.views[0];
            return;
        }
        if (core_1.isDevMode() && this.views.indexOf(this.activeView) === -1) {
            throw new Error("Invalid configuration: The current activeView is not present in the views collection");
        }
    };
    FlatColorPickerComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.host) {
            return;
        }
        var hostElement = this.host.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focus', function () {
                _this.focused = true;
            }));
            _this.subscriptions.add(_this.renderer.listen(hostElement, 'blur', function () {
                _this.focused = false;
                _this.notifyNgTouched();
            }));
        });
    };
    var FlatColorPickerComponent_1;
    tslib_1.__decorate([
        core_1.HostBinding('class.k-flatcolorpicker'),
        core_1.HostBinding('class.k-coloreditor'),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-state-disabled'),
        core_1.HostBinding('attr.aria-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "disabledClass", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-readonly'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "ariaReadonly", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.tabindex'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], FlatColorPickerComponent.prototype, "hostTabindex", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "format", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], FlatColorPickerComponent.prototype, "value", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], FlatColorPickerComponent.prototype, "tabindex", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "clearButton", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatColorPickerComponent.prototype, "preview", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "actionsLayout", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatColorPickerComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], FlatColorPickerComponent.prototype, "views", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], FlatColorPickerComponent.prototype, "gradientSettings", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], FlatColorPickerComponent.prototype, "paletteSettings", null);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], FlatColorPickerComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], FlatColorPickerComponent.prototype, "cancel", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], FlatColorPickerComponent.prototype, "activeViewChange", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], FlatColorPickerComponent.prototype, "actionButtonClick", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('header', { static: false }),
        tslib_1.__metadata("design:type", flatcolorpicker_header_component_1.FlatColorPickerHeaderComponent)
    ], FlatColorPickerComponent.prototype, "header", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('gradient', { static: false }),
        tslib_1.__metadata("design:type", color_gradient_component_1.ColorGradientComponent)
    ], FlatColorPickerComponent.prototype, "gradient", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('palette', { static: false }),
        tslib_1.__metadata("design:type", color_palette_component_1.ColorPaletteComponent)
    ], FlatColorPickerComponent.prototype, "palette", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('footer', { static: false }),
        tslib_1.__metadata("design:type", flatcolorpicker_actions_component_1.FlatColorPickerActionButtonsComponent)
    ], FlatColorPickerComponent.prototype, "footer", void 0);
    FlatColorPickerComponent = FlatColorPickerComponent_1 = tslib_1.__decorate([
        core_1.Component({
            exportAs: 'kendoFlatColorPicker',
            selector: 'kendo-flatcolorpicker',
            providers: [
                {
                    multi: true,
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return FlatColorPickerComponent_1; })
                },
                {
                    provide: kendo_angular_common_1.KendoInput,
                    useExisting: core_1.forwardRef(function () { return FlatColorPickerComponent_1; })
                },
                flatcolorpicker_service_1.FlatColorPickerService,
                flatcolorpicker_localization_service_1.FlatColorPickerLocalizationService,
                {
                    provide: kendo_angular_l10n_1.LocalizationService,
                    useExisting: flatcolorpicker_localization_service_1.FlatColorPickerLocalizationService
                },
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.flatcolorpicker'
                }
            ],
            template: "\n        <ng-container kendoFlatColorPickerLocalizedMessages\n            i18n-flatColorPickerNoColor=\"kendo.flatcolorpicker.flatColorPickerNoColor|The aria-label applied to the FlatColorPicker component when the value is empty.\"\n            flatColorPickerNoColor=\"Flatcolorpicker no color chosen\"\n            i18n-colorGradientNoColor=\"kendo.flatcolorpicker.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\"\n            colorGradientNoColor=\"Colorgradient no color chosen\"\n            i18n-colorPaletteNoColor=\"kendo.flatcolorpicker.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\"\n            colorPaletteNoColor=\"Colorpalette no color chosen\"\n            i18n-colorGradientHandle=\"kendo.flatcolorpicker.colorGradientHandle|The title for the gradient color drag handle chooser.\"\n            colorGradientHandle=\"Choose color\"\n            i18n-clearButton=\"kendo.flatcolorpicker.clearButton|The title for the clear button.\"\n            clearButton=\"Clear value\"\n            i18n-hueSliderHandle=\"kendo.flatcolorpicker.hueSliderHandle|The title for the hue slider handle.\"\n            hueSliderHandle=\"Set hue\"\n            i18n-opacitySliderHandle=\"kendo.flatcolorpicker.opacitySliderHandle|The title for the opacity slider handle.\"\n            opacitySliderHandle=\"Set opacity\"\n            i18n-contrastRatio=\"kendo.flatcolorpicker.contrastRatio|The contrast ratio message for the contrast tool.\"\n            contrastRatio=\"Contrast ratio\"\n            i18n-previewColor=\"kendo.flatcolorpicker.previewColor|The message for the color preview pane.\"\n            previewColor=\"Color preview\"\n            i18n-revertSelection=\"kendo.flatcolorpicker.revertSelection|The message for the selected color pane.\"\n            revertSelection=\"Revert selection\"\n            i18n-gradientView=\"kendo.flatcolorpicker.gradientView|The message for the gradient view button.\"\n            gradientView=\"Gradient view\"\n            i18n-paletteView=\"kendo.flatcolorpicker.paletteView|The message for the palette view button.\"\n            paletteView=\"Palette view\"\n            i18n-formatButton=\"kendo.flatcolorpicker.formatButton|The message for the input format toggle button.\"\n            formatButton=\"Change color format\"\n            i18n-applyButton=\"kendo.flatcolorpicker.applyButton|The message for the Apply action button.\"\n            applyButton=\"Apply\"\n            i18n-cancelButton=\"kendo.flatcolorpicker.cancelButton|The message for the Cancel action button.\"\n            cancelButton=\"Cancel\">\n        </ng-container>\n        <div kendoFlatColorPickerHeader\n            *ngIf=\"headerHasContent\"\n            #header\n            [clearButton]=\"clearButton\"\n            [activeView]=\"activeView\"\n            [views]=\"views\"\n            [value]=\"value\"\n            [selection]=\"selection\"\n            [preview]=\"preview\"\n            (clearButtonClick)=\"onClearButtonClick()\"\n            (viewChange)=\"onViewChange($event)\"\n            (valuePaneClick)=\"resetSelection($event)\">\n        </div>\n        <div class=\"k-coloreditor-views k-vstack\">\n            <kendo-colorgradient #gradient\n                *ngIf=\"activeView === 'gradient'\"\n                [tabindex]=\"null\"\n                [value]=\"selection\"\n                [format]=\"format\"\n                [opacity]=\"gradientSettings.opacity\"\n                [delay]=\"gradientSettings.delay\"\n                [contrastTool]=\"gradientSettings.contrastTool\"\n                [readonly]=\"readonly\"\n                (valueChange)=\"handleValueChange($event)\"\n            >\n            </kendo-colorgradient>\n            <kendo-colorpalette #palette\n                *ngIf=\"activeView === 'palette'\"\n                kendoFocusOnDomReady\n                [palette]=\"paletteSettings.palette\"\n                [columns]=\"paletteSettings.columns\"\n                [tileSize]=\"paletteSettings.tileSize\"\n                [format]=\"format\"\n                [value]=\"selection\"\n                (valueChange)=\"handleValueChange($event)\"\n            >\n            </kendo-colorpalette>\n        </div>\n        <div kendoFlatColorPickerActionButtons *ngIf=\"preview\"\n            #footer\n            [ngClass]=\"'k-justify-content-' + actionsLayout\"\n            (actionButtonClick)=\"onAction($event)\">\n        </div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef,
            flatcolorpicker_service_1.FlatColorPickerService,
            kendo_angular_l10n_1.LocalizationService,
            core_1.ChangeDetectorRef,
            core_1.Renderer2,
            core_1.NgZone])
    ], FlatColorPickerComponent);
    return FlatColorPickerComponent;
}());
exports.FlatColorPickerComponent = FlatColorPickerComponent;
