{"version":3,"file":"flatcolorpicker.component.d.ts","sources":["flatcolorpicker.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, NgZone, ChangeDetectorRef, OnInit, AfterViewInit, OnDestroy, Renderer2, SimpleChanges } from \"@angular/core\";\nimport { ControlValueAccessor } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { FlatColorPickerService } from './services/flatcolorpicker.service';\nimport { ColorPickerView, GradientSettings, OutputFormat, PaletteSettings, ColorPickerActionsLayout } from \"./models\";\nimport { ColorPickerCancelEvent } from './events';\nimport { ColorGradientComponent } from './color-gradient.component';\nimport { ColorPaletteComponent } from './color-palette.component';\nimport { FlatColorPickerHeaderComponent } from './flatcolorpicker-header.component';\nimport { FlatColorPickerActionButtonsComponent } from './flatcolorpicker-actions.component';\n/**\n * Represents the [Kendo UI FlatColorPicker component for Angular]({% slug overview_flatcolorpicker %}).\n *\n * The FlatColorPicker is a powerful tool which allows the user to choose colors through palettes with predefined sets of colors and\n * through a gradient that renders an hsv canvas. It supports previewing the selected color, reverting it to its previous state or clearing it completely.\n */\nexport declare class FlatColorPickerComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n    host: ElementRef;\n    private service;\n    private localizationService;\n    private cdr;\n    private renderer;\n    private ngZone;\n    hostClasses: boolean;\n    readonly disabledClass: boolean;\n    readonly ariaReadonly: boolean;\n    direction: string;\n    readonly hostTabindex: number;\n    /**\n     * Sets the read-only state of the FlatColorPicker.\n     *\n     * @default false\n     */\n    readonly: boolean;\n    /**\n     * Sets the disabled state of the FlatColorPicker.\n     *\n     * @default false\n     */\n    disabled: boolean;\n    /**\n     * Specifies the output format of the FlatColorPicker.\n     *\n     * If the input value is in a different format, it will be parsed into the specified output `format`.\n     *\n     * The supported values are:\n     * * `rgba` (default)\n     * * `hex`\n     */\n    format: OutputFormat;\n    /**\n     * Specifies the initially selected color.\n     */\n    value: string;\n    /**\n     * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     *\n     * @default 0\n     */\n    tabindex: number;\n    /**\n     * Specifies whether the FlatColorPicker should display a 'Clear color' button.\n     *\n     * @default true\n     */\n    clearButton: boolean;\n    /**\n     * Displays `Apply` and `Cancel` action buttons and a color preview pane.\n     *\n     * When enabled, the component value will not change immediately upon\n     * color selection, but only after the `Apply` button is clicked.\n     *\n     * The `Cancel` button reverts the current selection to its\n     * initial state i.e. to the current value.\n     *\n     * @default true\n     */\n    preview: boolean;\n    /**\n     * Configures the layout of the `Apply` and `Cancel` action buttons.\n     * * `start`\n     * * `center`\n     * * `end` (default)\n     * * `stretch`\n     */\n    actionsLayout: ColorPickerActionsLayout;\n    /**\n     * Sets the initially active view in the FlatColorPicker. The property supports two-way binding.\n     * * `gradient` (default)\n     * * `palette`\n     */\n    activeView: ColorPickerView;\n    /**\n     * Specifies the views that will be rendered. Default value is gradient and palette.\n     */\n    views: Array<ColorPickerView>;\n    /**\n     * Configures the gradient view.\n     */\n    gradientSettings: GradientSettings;\n    /**\n     * Configures the palette view.\n     */\n    paletteSettings: PaletteSettings;\n    /**\n     * Fires each time the component value is changed.\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires when the user cancels the current color selection.\n     *\n     * The event is emitted on preview pane or on 'Cancel' button click.\n     */\n    cancel: EventEmitter<ColorPickerCancelEvent>;\n    /**\n     * Fires each time the view is about to change.\n     * Used to provide a two-way binding for the `activeView` property.\n     */\n    activeViewChange: EventEmitter<string>;\n    /**\n     * @hidden\n     */\n    actionButtonClick: EventEmitter<any>;\n    header: FlatColorPickerHeaderComponent;\n    gradient: ColorGradientComponent;\n    palette: ColorPaletteComponent;\n    footer: FlatColorPickerActionButtonsComponent;\n    /**\n     * @hidden\n     */\n    selection: string;\n    private focused;\n    private _value;\n    private _tabindex;\n    private _gradientSettings;\n    private _paletteSettings;\n    private dynamicRTLSubscription;\n    private subscriptions;\n    constructor(host: ElementRef, service: FlatColorPickerService, localizationService: LocalizationService, cdr: ChangeDetectorRef, renderer: Renderer2, ngZone: NgZone);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly headerHasContent: boolean;\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    /**\n     * Focuses the wrapper of the FlatColorPicker.\n     */\n    focus(): void;\n    /**\n     * Blurs the wrapper of the FlatColorPicker.\n     */\n    blur(): void;\n    /**\n     * Clears the value of the FlatColorPicker.\n     */\n    reset(): void;\n    /**\n     * @hidden\n     */\n    onViewChange(view: ColorPickerView): void;\n    /**\n     * @hidden\n     */\n    onClearButtonClick(): void;\n    /**\n     * @hidden\n     */\n    handleValueChange(color: string): void;\n    /**\n     * @hidden\n     */\n    onAction(ev: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    resetSelection(ev: any): void;\n    private setHostElementAriaLabel;\n    private setSizingVariables;\n    private changeCurrentValue;\n    private resetInnerComponentValue;\n    private setFlatColorPickerValue;\n    private setActiveView;\n    private notifyNgChanged;\n    private notifyNgTouched;\n    private initDomEvents;\n}\n"]}