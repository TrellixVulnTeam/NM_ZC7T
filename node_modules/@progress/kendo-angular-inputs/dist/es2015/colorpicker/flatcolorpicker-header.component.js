/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, ViewChildren, QueryList, ElementRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
let FlatColorPickerHeaderComponent = class FlatColorPickerHeaderComponent {
    constructor(localizationService) {
        this.localizationService = localizationService;
        this.hostClasses = true;
        this.viewChange = new EventEmitter();
        this.valuePaneClick = new EventEmitter();
        this.clearButtonClick = new EventEmitter();
    }
    onViewButtonClick(view) {
        this.activeView = view;
        this.viewChange.emit(view);
    }
    get viewButtons() {
        return this.views && this.views.indexOf('gradient') >= 0 && this.views.indexOf('palette') >= 0;
    }
    getViewButtonIcon(view) {
        return view === 'gradient' ? 'k-i-color-canvas' : 'k-i-palette';
    }
    getText(text) {
        return this.localizationService.get(text);
    }
};
tslib_1.__decorate([
    HostBinding('class.k-coloreditor-header'),
    HostBinding('class.k-hstack'),
    tslib_1.__metadata("design:type", Boolean)
], FlatColorPickerHeaderComponent.prototype, "hostClasses", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FlatColorPickerHeaderComponent.prototype, "clearButton", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FlatColorPickerHeaderComponent.prototype, "activeView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], FlatColorPickerHeaderComponent.prototype, "views", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FlatColorPickerHeaderComponent.prototype, "preview", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FlatColorPickerHeaderComponent.prototype, "value", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FlatColorPickerHeaderComponent.prototype, "selection", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], FlatColorPickerHeaderComponent.prototype, "viewChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], FlatColorPickerHeaderComponent.prototype, "valuePaneClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], FlatColorPickerHeaderComponent.prototype, "clearButtonClick", void 0);
tslib_1.__decorate([
    ViewChildren('viewButtons', { read: ElementRef }),
    tslib_1.__metadata("design:type", QueryList)
], FlatColorPickerHeaderComponent.prototype, "viewButtonsCollection", void 0);
tslib_1.__decorate([
    ViewChild('clearButton', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], FlatColorPickerHeaderComponent.prototype, "clearButtonElement", void 0);
FlatColorPickerHeaderComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoFlatColorPickerHeader]',
        template: `
        <div class="k-coloreditor-header-actions k-hstack">
            <div *ngIf="viewButtons" class="k-button-group k-button-group-flat">
                <button *ngFor="let view of views"
                    #viewButtons
                    type="button"
                    (click)="onViewButtonClick(view)"
                    class="k-button k-button-md k-button-flat k-button-flat-base k-icon-button"
                    [attr.title]="getText(view === 'gradient' ? 'gradientView' : 'paletteView')"
                    [attr.aria-label]="getText(view === 'gradient' ? 'gradientView' : 'paletteView')"
                    [attr.aria-pressed]="activeView === view"
                    [ngClass]="activeView === view ? 'k-state-selected' : ''"
                >
                    <span
                        class="k-button-icon k-icon"
                        [ngClass]="getViewButtonIcon(view)">
                    </span>
                </button>
            </div>
        </div>
        <div class="k-spacer"></div>
        <div class="k-coloreditor-header-actions k-hstack">
            <button *ngIf="clearButton"
                #clearButton
                type="button"
                class="k-button k-button-md k-button-flat k-button-flat-base k-icon-button k-coloreditor-reset"
                [attr.aria-label]="getText('clearButton')"
                [attr.title]="getText('clearButton')"
                (click)="clearButtonClick.emit()">
                    <span class="k-button-icon k-icon k-i-reset-color"></span>
            </button>
            <div class="k-coloreditor-preview k-vstack" *ngIf="preview">
                <span
                    class="k-coloreditor-preview-color k-color-preview"
                    [attr.title]="getText('previewColor')"
                    [style.background-color]="selection">
                </span>
                <span class="k-coloreditor-current-color k-color-preview"
                    [style.background-color]="value"
                    [attr.title]="getText('revertSelection')"
                    (click)="valuePaneClick.emit($event)">
                </span>
            </div>
        </div>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [LocalizationService])
], FlatColorPickerHeaderComponent);
export { FlatColorPickerHeaderComponent };
