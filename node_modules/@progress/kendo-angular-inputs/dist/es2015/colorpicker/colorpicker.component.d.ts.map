{"version":3,"file":"colorpicker.component.d.ts","sources":["colorpicker.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, ElementRef, OnDestroy, ViewContainerRef, ChangeDetectorRef, NgZone, OnChanges, OnInit, AfterViewInit, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupSettings, PaletteSettings, OutputFormat, ColorPickerView, GradientSettings, ColorPickerActionsLayout } from './models';\nimport { ActiveColorClickEvent, ColorPickerCancelEvent, ColorPickerCloseEvent, ColorPickerOpenEvent } from './events';\nimport { InputFillMode, InputRounded, InputSize } from '../common/models';\n/**\n * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).\n *\n * The ColorPicker is a powerful tool for choosing colors from Gradient and Palette views\n * which are rendered in its popup. It supports previewing the selected color, reverting it to its previous state or clearing it completely.\n */\nexport declare class ColorPickerComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n    private host;\n    private popupService;\n    private cdr;\n    private localizationService;\n    private ngZone;\n    private renderer;\n    hostClasses: boolean;\n    readonly focusedClass: boolean;\n    readonly disabledClass: boolean;\n    readonly ariaReadonly: boolean;\n    readonly ariaExpanded: boolean;\n    readonly hostTabindex: number;\n    direction: string;\n    role: string;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Specifies the views that will be rendered in the popup.\n     * By default both the gradient and palette views will be rendered.\n     */\n    views: Array<ColorPickerView>;\n    /**\n     * @hidden\n     */\n    view: ColorPickerView;\n    /**\n     * Sets the initially active view in the popup. The property supports two-way binding.\n     *\n     * The supported values are:\n     * * `gradient`\n     * * `palette`\n     */\n    activeView: ColorPickerView;\n    /**\n     * Sets the read-only state of the ColorPicker.\n     *\n     * @default false\n     */\n    readonly: boolean;\n    /**\n     * Sets the disabled state of the ColorPicker.\n     *\n     * @default false\n     */\n    disabled: boolean;\n    /**\n     * Specifies the output format of the ColorPicker.\n     *\n     * If the input value is in a different format, it will be parsed into the specified output `format`.\n     *\n     * The supported values are:\n     * * `rgba` (default)\n     * * `hex`\n     */\n    format: OutputFormat;\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    value: string;\n    /**\n     * Configures the popup of the ColorPicker.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Configures the palette that is displayed in the ColorPicker popup.\n     */\n    paletteSettings: PaletteSettings;\n    /**\n     * Configures the gradient that is displayed in the ColorPicker popup.\n     */\n    gradientSettings: GradientSettings;\n    /**\n     * Defines the name of an [existing icon in the Kendo UI theme]({% slug icons %}).\n     * Provide only the name of the icon without the `k-icon` or the `k-i-` prefixes.\n     *\n     * For example, `edit-tools` will be parsed to `k-icon k-i-edit-tools`.\n     */\n    icon: string;\n    /**\n     * A CSS class name which displays an icon in the ColorPicker button.\n     * `iconClass` is compatible with the `ngClass` syntax.\n     *\n     * Takes precedence over `icon` if both are defined.\n     */\n    iconClass: string | Array<string> | {\n        [key: string]: boolean;\n    };\n    /**\n     * Specifies whether the ColorPicker should display a 'Clear color' button.\n     *\n     * @default true\n     */\n    clearButton: boolean;\n    /**\n     * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     *\n     * @default 0\n     */\n    tabindex: number;\n    /**\n     * Displays `Apply` and `Cancel` action buttons and color preview panes.\n     *\n     * When enabled, the component value will not change immediately upon\n     * color selection, but only after the `Apply` button is clicked.\n     *\n     * The `Cancel` button reverts the current selection to its\n     * previous state i.e. to the current value.\n     *\n     * @default false\n     */\n    preview: boolean;\n    /**\n     * Configures the layout of the `Apply` and `Cancel` action buttons.\n     *\n     * The possible values are:\n     * * `start`\n     * * `center`\n     * * `end` (default)\n     * * `stretch`\n     */\n    actionsLayout: ColorPickerActionsLayout;\n    /**\n     * The size property specifies the padding of the ColorPicker internal elements\n     * ([see example]({% slug appearance_colorpicker %}#toc-size)).\n     *\n     * The possible values are:\n     * * `'small'`\n     * * `'medium'` (default)\n     * * `'large'`\n     * * `null`\n     */\n    size: InputSize;\n    /**\n     * The rounded property specifies the border radius of the ColorPicker\n     * ([see example]({% slug appearance_colorpicker %}#toc-rounded)).\n     *\n     * The possible values are:\n     * * `'small'`\n     * * `'medium'` (default)\n     * * `'large'`\n     * * `'full'`\n     * * `null`\n     */\n    rounded: InputRounded;\n    /**\n     * The fillMode property specifies the background and border styles of the ColorPicker\n     * ([see example]({% slug appearance_colorpicker %}#toc-fillMode)).\n     *\n     * The possible values are:\n     * * `'flat'`\n     * * `'solid'` (default)\n     * * `'outline'`\n     * * `null`\n     */\n    fillMode: InputFillMode;\n    /**\n     * Fires each time the value is changed.\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<ColorPickerOpenEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<ColorPickerCloseEvent>;\n    /**\n     * Fires each time ColorPicker is focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the ColorPicker is blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires when the user cancels the current color selection.\n     *\n     * Fires on preview pane or 'Cancel' button click.\n     */\n    cancel: EventEmitter<ColorPickerCancelEvent>;\n    /**\n     * Fires each time the left side of the ColorPicker wrapper is clicked.\n     * The event is triggered regardless of whether a ColorPicker icon is set or not.\n     *\n     * The [ActiveColorClickEvent]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.\n     */\n    activeColorClick: EventEmitter<ActiveColorClickEvent>;\n    /**\n     * Fires each time the view is about to change.\n     * Used to provide a two-way binding for the `activeView` property.\n     */\n    activeViewChange: EventEmitter<string>;\n    /**\n     * Indicates whether the ColorPicker wrapper is focused.\n     */\n    isFocused: boolean;\n    /**\n     * Indicates whether the ColorPicker popup is open.\n     */\n    readonly isOpen: boolean;\n    /**\n     * @hidden\n     */\n    readonly iconStyles: string | string[] | {\n        [key: string]: boolean;\n    };\n    /**\n     * Provides a reference to a container element inside the component markup.\n     * The container element references the location of the appended popup&mdash;\n     * for example, inside the component markup.\n     */\n    container: ViewContainerRef;\n    private activeColor;\n    private popupTemplate;\n    private flatColorPicker;\n    private popupRef;\n    private _value;\n    private _tabindex;\n    private _popupSettings;\n    private _paletteSettings;\n    private _gradientSettings;\n    private _size;\n    private _rounded;\n    private _fillMode;\n    private dynamicRTLSubscription;\n    private subscriptions;\n    constructor(host: ElementRef, popupService: PopupService, cdr: ChangeDetectorRef, localizationService: LocalizationService, ngZone: NgZone, renderer: Renderer2);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: any): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    handleCancelEvent(ev: ColorPickerCancelEvent): void;\n    /**\n     * @hidden\n     */\n    togglePopup(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperClick(event: MouseEvent): void;\n    /**\n     * Focuses the wrapper of the ColorPicker.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperFocus(): void;\n    /**\n     * Blurs the ColorPicker.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperBlur(): void;\n    /**\n     * Clears the value of the ColorPicker.\n     */\n    reset(): void;\n    /**\n     * Toggles the popup of the ColorPicker.\n     * Does not trigger the `open` and `close` events of the component.\n     *\n     * @param open An optional parameter. Specifies whether the popup will be opened or closed.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * @hidden\n     */\n    handleValueChange(color: string): void;\n    /**\n     * @hidden\n     */\n    handlePopupBlur(event: FocusEvent): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    handleWrapperKeyDown(event: any): void;\n    /**\n     * @hidden\n     */\n    handlePopupKeyDown(event: any): void;\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private setHostElementAriaLabel;\n    private handleClasses;\n    private popupBlurInvalid;\n    private toggleWithEvents;\n    private focusFirstElement;\n    private openPopup;\n    private closePopup;\n    private readonly firstFocusableElement;\n    private readonly lastFocusableElement;\n    private notifyNgTouched;\n    private notifyNgChanged;\n    private handleDomEvents;\n    private initDomEvents;\n    private domFocusListener;\n    private handleHostId;\n}\n"]}