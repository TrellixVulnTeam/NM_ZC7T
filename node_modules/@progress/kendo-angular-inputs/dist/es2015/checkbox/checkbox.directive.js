/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { getStylingClasses } from '../common/utils';
/**
 * Represents the directive that renders the [Kendo UI CheckBox]({% slug overview_checkbox %}) input component.
 * The directive is placed on input type="checkbox" elements.
 *
 * @example
 * ```ts-no-run
 * <input type="checkbox" kendoCheckBox />
 * ```
 */
let CheckBoxDirective = class CheckBoxDirective {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.kendoClass = true;
        this._size = 'medium';
        this._rounded = 'medium';
    }
    /**
     * The size property specifies the width and height of the CheckBox
     * ([see example]({% slug appearance_checkboxdirective %}#toc-size)).
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (default)
     * * `'large'`
     * * `null`
     */
    set size(size) {
        this.handleClasses(size, 'size');
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * The rounded property specifies the border radius of the CheckBox
     * ([see example]({% slug appearance_checkboxdirective %}#toc-rounded)).
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (default)
     * * `'large'`
     * * `null`
     */
    set rounded(rounded) {
        this.handleClasses(rounded, 'rounded');
        this._rounded = rounded;
    }
    get rounded() {
        return this._rounded;
    }
    ngAfterViewInit() {
        const stylingInputs = ['size', 'rounded'];
        stylingInputs.forEach(input => {
            this.handleClasses(this[input], input);
        });
    }
    handleClasses(value, input) {
        const elem = this.hostElement.nativeElement;
        const classes = getStylingClasses('checkbox', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.k-checkbox'),
    tslib_1.__metadata("design:type", Boolean)
], CheckBoxDirective.prototype, "kendoClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], CheckBoxDirective.prototype, "size", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], CheckBoxDirective.prototype, "rounded", null);
CheckBoxDirective = tslib_1.__decorate([
    Directive({
        selector: 'input[kendoCheckBox]'
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef])
], CheckBoxDirective);
export { CheckBoxDirective };
