/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __param } from 'tslib';
import { Injectable, EventEmitter, Injector, Input, TemplateRef, Output, HostBinding, Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Renderer2, isDevMode, Directive, forwardRef, ContentChild, ViewChild, HostListener, Optional, NgZone, InjectionToken, Inject, ViewContainerRef, ViewChildren, QueryList, ContentChildren, IterableDiffers, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl } from '@angular/forms';
import { LocalizationService, L10N_PREFIX, RTL, ComponentMessages } from '@progress/kendo-angular-l10n';
import { getDate, isEqual, cloneDate, addDays, addDecades, addCenturies, firstDecadeOfCentury, lastDecadeOfCentury, firstYearOfDecade, createDate, lastYearOfDecade, lastMonthOfYear, lastDayOfMonth, durationInCenturies, addYears, durationInDecades, addWeeks, addMonths, firstDayOfMonth, dayOfWeek, durationInMonths, firstMonthOfYear, durationInYears, weekInYear } from '@progress/kendo-date-math';
import { isDocumentAvailable, guid, Keys, hasObservers, KendoInput, EventsModule, ResizeSensorModule } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { IntlService, IntlModule } from '@progress/kendo-angular-intl';
import { Subject, Subscription, ReplaySubject, Observable, combineLatest, of, interval, animationFrameScheduler, fromEvent, EMPTY, from, BehaviorSubject, merge } from 'rxjs';
import { map, scan, takeWhile, tap, filter, debounceTime } from 'rxjs/operators';
import { PopupService, PopupModule } from '@progress/kendo-angular-popup';
import { CommonModule } from '@angular/common';
import { touchEnabled } from '@progress/kendo-common';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-intl';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@progress/kendo-angular-l10n';
import * as ɵngcc4 from '@progress/kendo-angular-common';
import * as ɵngcc5 from '@progress/kendo-angular-popup';

function HorizontalViewListComponent_ng_template_0_caption_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "caption", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const date_r5 = ɵngcc0.ɵɵnextContext().date;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r7.getCaptionClass());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.getCaptionTitle(date_r5));
} }
function HorizontalViewListComponent_ng_template_0_thead_2_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(name_r11);
} }
function HorizontalViewListComponent_ng_template_0_thead_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thead", 8)(1, "tr", 9);
    ɵngcc0.ɵɵtemplate(2, HorizontalViewListComponent_ng_template_0_thead_2_th_2_Template, 2, 1, "th", 10);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.weekNames);
} }
function HorizontalViewListComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "table", 3);
    ɵngcc0.ɵɵtemplate(1, HorizontalViewListComponent_ng_template_0_caption_1_Template, 2, 2, "caption", 4);
    ɵngcc0.ɵɵtemplate(2, HorizontalViewListComponent_ng_template_0_thead_2_Template, 3, 1, "thead", 5);
    ɵngcc0.ɵɵelementStart(3, "tbody", 6);
    ɵngcc0.ɵɵlistener("cellClick", function HorizontalViewListComponent_ng_template_0_Template_tbody_cellClick_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.cellClick.emit($event); })("weekNumberCellClick", function HorizontalViewListComponent_ng_template_0_Template_tbody_weekNumberCellClick_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.weekNumberCellClick.emit($event); })("cellEnter", function HorizontalViewListComponent_ng_template_0_Template_tbody_cellEnter_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.cellEnter.emit($event); })("cellLeave", function HorizontalViewListComponent_ng_template_0_Template_tbody_cellLeave_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.cellLeave.emit($event); });
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const date_r5 = ctx.date;
    const class_r6 = ctx.className;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", class_r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showViewHeader);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isMonthView());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("activeView", ctx_r1.activeView)("isActive", ctx_r1.isActive)("min", ctx_r1.min)("max", ctx_r1.max)("cellUID", ctx_r1.cellUID)("focusedDate", ctx_r1.focusedDate)("selectedDates", ctx_r1.selectedDates)("selectionRange", ctx_r1.selectionRange)("activeRangeEnd", ctx_r1.activeRangeEnd)("weekNumber", ctx_r1.weekNumber)("templateRef", ctx_r1.cellTemplateRef)("weekNumberTemplateRef", ctx_r1.weekNumberTemplateRef)("viewDate", date_r5);
} }
function HorizontalViewListComponent_2_ng_template_0_Template(rf, ctx) { }
const _c0 = function (a0) { return { date: a0, className: "k-pointer-events-none" }; };
function HorizontalViewListComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, HorizontalViewListComponent_2_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r2.nextAnimationDate));
} }
function HorizontalViewListComponent_3_ng_template_0_Template(rf, ctx) { }
const _c1 = function (a0) { return { date: a0 }; };
function HorizontalViewListComponent_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, HorizontalViewListComponent_3_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const date_r18 = ctx.$implicit;
    ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c1, date_r18));
} }
function HorizontalViewListComponent_4_ng_template_0_Template(rf, ctx) { }
function HorizontalViewListComponent_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, HorizontalViewListComponent_4_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r4.prevAnimationDate));
} }
function HeaderComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
} }
function HeaderComponent_ng_template_2_Template(rf, ctx) { }
function HeaderComponent_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.prevButtonClick.emit(); });
    ɵngcc0.ɵɵelement(1, "span", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isPrevDisabled)("title", ctx_r2.prevButtonTitle);
    ɵngcc0.ɵɵattribute("aria-disabled", ctx_r2.isPrevDisabled);
} }
function HeaderComponent_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.nextButtonClick.emit(); });
    ɵngcc0.ɵɵelement(1, "span", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.isNextDisabled)("title", ctx_r3.nextButtonTitle);
    ɵngcc0.ɵɵattribute("aria-disabled", ctx_r3.isNextDisabled);
} }
const _c2 = function (a0) { return { click: a0 }; };
const _c3 = function (a0, a1, a2) { return { $implicit: a0, activeView: a1, date: a2 }; };
const _c10 = function (a0) { return { focusin: a0 }; };
const _c11 = ["*"];
const _c12 = ["list"];
function NavigationComponent_li_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const date_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.service.navigationTitle(date_r2));
} }
function NavigationComponent_li_4_ng_template_3_Template(rf, ctx) { }
function NavigationComponent_li_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li")(1, "span");
    ɵngcc0.ɵɵtemplate(2, NavigationComponent_li_4_ng_template_2_Template, 1, 1, "ng-template", 5);
    ɵngcc0.ɵɵtemplate(3, NavigationComponent_li_4_ng_template_3_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const date_r2 = ctx.$implicit;
    const index_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-date-index", index_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("k-calendar-navigation-marker", ctx_r1.service.isRangeStart(date_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.templateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.templateRef)("ngTemplateOutlet", ctx_r1.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(7, _c3, ctx_r1.service.navigationTitle(date_r2), ctx_r1.activeViewValue, date_r2));
} }
function ViewListComponent_table_1_th_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("width", ctx_r4.colWidth, "%");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(name_r5);
} }
function ViewListComponent_table_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 7)(1, "thead", 8)(2, "tr", 9);
    ɵngcc0.ɵɵtemplate(3, ViewListComponent_table_1_th_3_Template, 2, 3, "th", 10);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.weekNames);
} }
function ViewListComponent_col_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "col");
} }
function ViewListComponent_tbody_7_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tbody", 12);
    ɵngcc0.ɵɵlistener("cellClick", function ViewListComponent_tbody_7_Template_tbody_cellClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.cellClick.emit($event); })("weekNumberCellClick", function ViewListComponent_tbody_7_Template_tbody_weekNumberCellClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.weekNumberCellClick.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const date_r7 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeView", ctx_r3.activeView)("isActive", ctx_r3.isActive)("min", ctx_r3.min)("max", ctx_r3.max)("cellUID", ctx_r3.cellUID)("focusedDate", ctx_r3.focusedDate)("selectedDates", ctx_r3.selectedDates)("weekNumber", ctx_r3.weekNumber)("templateRef", ctx_r3.cellTemplateRef)("weekNumberTemplateRef", ctx_r3.weekNumberTemplateRef)("viewDate", date_r7);
} }
function CalendarComponent_ng_container_1_kendo_calendar_navigation_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-calendar-navigation", 5);
    ɵngcc0.ɵɵlistener("valueChange", function CalendarComponent_ng_container_1_kendo_calendar_navigation_1_Template_kendo_calendar_navigation_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.handleNavigation($event); })("pageChange", function CalendarComponent_ng_container_1_kendo_calendar_navigation_1_Template_kendo_calendar_navigation_pageChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.onPageChange(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("activeView", ctx_r2.activeViewEnum)("focusedDate", ctx_r2.focusedDate)("min", ctx_r2.min)("max", ctx_r2.max)("templateRef", ctx_r2.navigationItemTemplateRef == null ? null : ctx_r2.navigationItemTemplateRef.templateRef);
} }
function CalendarComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, CalendarComponent_ng_container_1_kendo_calendar_navigation_1_Template, 1, 5, "kendo-calendar-navigation", 2);
    ɵngcc0.ɵɵelementStart(2, "kendo-calendar-viewlist", 3);
    ɵngcc0.ɵɵlistener("todayButtonClick", function CalendarComponent_ng_container_1_Template_kendo_calendar_viewlist_todayButtonClick_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleDateChange({ selectedDates: [$event], focusedDate: $event }); })("cellClick", function CalendarComponent_ng_container_1_Template_kendo_calendar_viewlist_cellClick_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.handleCellClick($event); })("weekNumberCellClick", function CalendarComponent_ng_container_1_Template_kendo_calendar_viewlist_weekNumberCellClick_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.handleWeekNumberClick($event); })("activeDateChange", function CalendarComponent_ng_container_1_Template_kendo_calendar_viewlist_activeDateChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.handleActiveDateChange($event); })("pageChange", function CalendarComponent_ng_container_1_Template_kendo_calendar_viewlist_pageChange_2_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onPageChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "kendo-resize-sensor", 4);
    ɵngcc0.ɵɵlistener("resize", function CalendarComponent_ng_container_1_Template_kendo_resize_sensor_resize_3_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onResize(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    let tmp_3_0;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.navigation);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("activeView", ctx_r0.activeViewEnum)("isActive", ctx_r0.isActive)("cellTemplateRef", (tmp_3_0 = ctx_r0.activeCellTemplate()) == null ? null : tmp_3_0.templateRef)("headerTitleTemplateRef", ctx_r0.headerTitleTemplateRef == null ? null : ctx_r0.headerTitleTemplateRef.templateRef)("weekNumberTemplateRef", ctx_r0.weekNumberTemplateRef == null ? null : ctx_r0.weekNumberTemplateRef.templateRef)("cellUID", ctx_r0.cellUID)("min", ctx_r0.min)("max", ctx_r0.max)("focusedDate", ctx_r0.focusedDate)("weekNumber", ctx_r0.weekNumber)("selectedDates", ctx_r0.selectedDates);
} }
function CalendarComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "kendo-multiviewcalendar", 6, 7);
    ɵngcc0.ɵɵlistener("activeViewChange", function CalendarComponent_ng_container_2_Template_kendo_multiviewcalendar_activeViewChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.handleActiveViewChange($event); })("navigate", function CalendarComponent_ng_container_2_Template_kendo_multiviewcalendar_navigate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.handleNavigate($event); })("valueChange", function CalendarComponent_ng_container_2_Template_kendo_multiviewcalendar_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const _r13 = ɵngcc0.ɵɵreference(2); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.handleMultiViewCalendarValueChange($event, _r13.focusedDate); })("focus", function CalendarComponent_ng_container_2_Template_kendo_multiviewcalendar_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.handleFocus(); })("blur", function CalendarComponent_ng_container_2_Template_kendo_multiviewcalendar_blur_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.handleBlur($event); });
    ɵngcc0.ɵɵelement(3, "kendo-multiviewcalendar-messages", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("views", 1)("min", ctx_r1.min)("max", ctx_r1.max)("isActive", ctx_r1.isActive)("activeView", ctx_r1.activeView)("bottomView", ctx_r1.bottomView)("topView", ctx_r1.topView)("weekNumber", ctx_r1.weekNumber)("animateNavigation", ctx_r1.animateNavigation)("cellTemplate", ctx_r1.activeCellTemplate())("monthCellTemplate", ctx_r1.monthCellTemplateRef)("yearCellTemplate", ctx_r1.yearCellTemplateRef)("decadeCellTemplate", ctx_r1.decadeCellTemplateRef)("centuryCellTemplate", ctx_r1.centuryCellTemplateRef)("headerTitleTemplate", ctx_r1.headerTitleTemplateRef)("weekNumberTemplate", ctx_r1.weekNumberTemplateRef)("focusedDate", ctx_r1.focusedDate)("selection", ctx_r1.selection)("value", ctx_r1.value)("disabledDates", ctx_r1.disabledDates);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("today", ctx_r1.localization.get("today"))("prevButtonTitle", ctx_r1.localization.get("prevButtonTitle"))("nextButtonTitle", ctx_r1.localization.get("nextButtonTitle"));
} }
const _c19 = ["dateInput"];
const _c20 = ["spinup"];
const _c21 = ["spindown"];
function DateInputComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵlistener("mousedown", function DateInputComponent_span_3_Template_span_mousedown_0_listener($event) { return $event.preventDefault(); });
    ɵngcc0.ɵɵelementStart(1, "button", 5, 6);
    ɵngcc0.ɵɵlistener("mousedown", function DateInputComponent_span_3_Template_button_mousedown_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.arrowDirection = ctx_r5.arrow.Up; })("mouseleave", function DateInputComponent_span_3_Template_button_mouseleave_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.arrowDirection = ctx_r7.arrow.None; })("click", function DateInputComponent_span_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.handleButtonClick(1); });
    ɵngcc0.ɵɵelement(3, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 8, 9);
    ɵngcc0.ɵɵlistener("click", function DateInputComponent_span_3_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.handleButtonClick(-1); })("mousedown", function DateInputComponent_span_3_Template_button_mousedown_4_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.arrowDirection = ctx_r10.arrow.Down; })("mouseleave", function DateInputComponent_span_3_Template_button_mouseleave_4_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.arrowDirection = ctx_r11.arrow.None; });
    ɵngcc0.ɵɵelement(6, "span", 10);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("k-active", ctx_r1.arrowDirection === ctx_r1.arrow.Up);
    ɵngcc0.ɵɵproperty("title", ctx_r1.localization.get("increment"));
    ɵngcc0.ɵɵattribute("aria-label", ctx_r1.localization.get("increment"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("k-active", ctx_r1.arrowDirection === ctx_r1.arrow.Down);
    ɵngcc0.ɵɵproperty("title", ctx_r1.localization.get("decrement"));
    ɵngcc0.ɵɵattribute("aria-label", ctx_r1.localization.get("decrement"));
} }
const _c26 = function (a0, a1, a2, a3, a4, a5, a6) { return { click: a0, focus: a1, mousedown: a2, touchstart: a3, dragstart: a4, drop: a5, blur: a6 }; };
const _c27 = ["container"];
const _c28 = ["popupTemplate"];
const _c29 = ["toggleButton"];
function DatePickerComponent_ng_template_8_ng_template_3_Template(rf, ctx) { }
const _c38 = function (a0) { return { keydown: a0 }; };
function DatePickerComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-calendar", 8, 9);
    ɵngcc0.ɵɵlistener("valueChange", function DatePickerComponent_ng_template_8_Template_kendo_calendar_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.handleChange(ctx_r7.mergeTime($event)); });
    ɵngcc0.ɵɵelement(2, "kendo-calendar-messages", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DatePickerComponent_ng_template_8_ng_template_3_Template, 0, 0, "ng-template");
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("type", ctx_r4.calendarType)("min", ctx_r4.min)("max", ctx_r4.max)("navigation", ctx_r4.navigation)("animateNavigation", ctx_r4.animateCalendarNavigation)("activeView", ctx_r4.activeView)("bottomView", ctx_r4.bottomView)("topView", ctx_r4.topView)("weekNumber", ctx_r4.weekNumber)("cellTemplate", ctx_r4.cellTemplate)("monthCellTemplate", ctx_r4.monthCellTemplate)("yearCellTemplate", ctx_r4.yearCellTemplate)("decadeCellTemplate", ctx_r4.decadeCellTemplate)("centuryCellTemplate", ctx_r4.centuryCellTemplate)("weekNumberTemplate", ctx_r4.weekNumberTemplate)("headerTitleTemplate", ctx_r4.headerTitleTemplate)("navigationItemTemplate", ctx_r4.navigationItemTemplate)("focusedDate", ctx_r4.focusedDate)("value", ctx_r4.value)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(25, _c38, ctx_r4.handleKeydown))("scope", ctx_r4)("disabledDates", ctx_r4.disabledDates);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("today", ctx_r4.localization.get("today"))("prevButtonTitle", ctx_r4.localization.get("prevButtonTitle"))("nextButtonTitle", ctx_r4.localization.get("nextButtonTitle"));
} }
const _c39 = function (a0, a1) { return { click: a0, mousedown: a1 }; };
const _c54 = function (a0, a1) { return { keydown: a0, mousedown: a1 }; };
function TimePickerComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-timeselector", 8, 9);
    ɵngcc0.ɵɵlistener("valueChange", function TimePickerComponent_ng_template_6_Template_kendo_timeselector_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleChange($event); })("valueReject", function TimePickerComponent_ng_template_6_Template_kendo_timeselector_valueReject_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.handleReject(); });
    ɵngcc0.ɵɵelement(2, "kendo-timeselector-messages", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cancelButton", ctx_r3.cancelButton)("nowButton", ctx_r3.nowButton)("format", ctx_r3.format)("min", ctx_r3.min)("max", ctx_r3.max)("steps", ctx_r3.steps)("value", ctx_r3.value)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(15, _c54, ctx_r3.handleKeydown, ctx_r3.handleMousedown))("scope", ctx_r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("acceptLabel", ctx_r3.localization.get("acceptLabel"))("accept", ctx_r3.localization.get("accept"))("cancelLabel", ctx_r3.localization.get("cancelLabel"))("cancel", ctx_r3.localization.get("cancel"))("nowLabel", ctx_r3.localization.get("nowLabel"))("now", ctx_r3.localization.get("now"));
} }
function DateTimePickerComponent_ng_template_7_button_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r5.popupButtonsClasses())("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(6, _c2, ctx_r5.handleCancel))("scope", ctx_r5);
    ɵngcc0.ɵɵattribute("title", ctx_r5.localization.get("cancelLabel"))("aria-label", ctx_r5.localization.get("cancelLabel"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.localization.get("cancel"), " ");
} }
const _c83 = function (a0, a1) { return { mousedown: a0, keydown: a1 }; };
const _c84 = function (a0, a1) { return { focusin: a0, focusout: a1 }; };
const _c85 = function (a0, a1) { return { click: a0, keydown: a1 }; };
const _c86 = function (a0) { return { transitionend: a0 }; };
const _c87 = function (a0, a1, a2) { return { keydown: a0, focusin: a1, focusout: a2 }; };
function DateTimePickerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7)(1, "div", 8)(2, "div", 9)(3, "button", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 11);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd()()();
    ɵngcc0.ɵɵelementStart(7, "div", 12, 13)(9, "div", 14)(10, "kendo-calendar", 15);
    ɵngcc0.ɵɵlistener("valueChange", function DateTimePickerComponent_ng_template_7_Template_kendo_calendar_valueChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.calendarValue = $event; })("valueChange", function DateTimePickerComponent_ng_template_7_Template_kendo_calendar_valueChange_10_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.handleCalendarValueChange(); });
    ɵngcc0.ɵɵelement(11, "kendo-calendar-messages", 16);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(12, "div", 17)(13, "kendo-timeselector", 18);
    ɵngcc0.ɵɵelement(14, "kendo-timeselector-messages", 19);
    ɵngcc0.ɵɵelementEnd()()();
    ɵngcc0.ɵɵelementStart(15, "div", 20);
    ɵngcc0.ɵɵtemplate(16, DateTimePickerComponent_ng_template_7_button_16_Template, 2, 8, "button", 21);
    ɵngcc0.ɵɵelementStart(17, "button", 22);
    ɵngcc0.ɵɵtext(18);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(8);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("k-datetime-wrap k-", ctx_r3.activeTab, "-tab");
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(65, _c83, ctx_r3.preventMouseDown, ctx_r3.handleKeyDown))("scope", ctx_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(68, _c84, ctx_r3.handleFocus, ctx_r3.handleBlur))("scope", ctx_r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("k-active", ctx_r3.activeTab === "date");
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.popupButtonsClasses())("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(71, _c85, ctx_r3.changeActiveTab.bind(ctx_r3, "date"), ctx_r3.handleBackTabOut))("scope", ctx_r3);
    ɵngcc0.ɵɵattribute("title", ctx_r3.localization.get("dateTabLabel"))("aria-label", ctx_r3.localization.get("dateTabLabel"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.localization.get("dateTab"), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("k-active", ctx_r3.activeTab === "time");
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.popupButtonsClasses())("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(74, _c2, ctx_r3.changeActiveTab.bind(ctx_r3, "time")));
    ɵngcc0.ɵɵattribute("title", ctx_r3.localization.get("timeTabLabel"))("aria-label", ctx_r3.localization.get("timeTabLabel"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.localization.get("timeTab"), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("transition", ctx_r3.tabSwitchTransition);
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(76, _c86, ctx_r3.handleTabChangeTransitionEnd.bind(ctx_r3, _r4)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("value", ctx_r3.calendarValue)("type", ctx_r3.calendarType)("min", ctx_r3.calendarMin)("max", ctx_r3.calendarMax)("focusedDate", ctx_r3.focusedDate)("weekNumber", ctx_r3.weekNumber)("navigation", false)("animateNavigation", ctx_r3.animateCalendarNavigation)("cellTemplate", ctx_r3.cellTemplate)("monthCellTemplate", ctx_r3.monthCellTemplate)("yearCellTemplate", ctx_r3.yearCellTemplate)("decadeCellTemplate", ctx_r3.decadeCellTemplate)("centuryCellTemplate", ctx_r3.centuryCellTemplate)("weekNumberTemplate", ctx_r3.weekNumberTemplate)("headerTitleTemplate", ctx_r3.headerTitleTemplate)("disabled", ctx_r3.disableCalendar)("disabledDates", ctx_r3.disabledDates);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("today", ctx_r3.localization.get("today"))("prevButtonTitle", ctx_r3.localization.get("prevButtonTitle"))("nextButtonTitle", ctx_r3.localization.get("nextButtonTitle"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", ctx_r3.value)("format", ctx_r3.timeSelectorFormat)("min", ctx_r3.timeSelectorMin)("max", ctx_r3.timeSelectorMax)("setButton", false)("cancelButton", false)("steps", ctx_r3.steps)("disabled", ctx_r3.disableTimeSelector);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("now", ctx_r3.localization.get("now"))("nowLabel", ctx_r3.localization.get("nowLabel"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction3(78, _c87, ctx_r3.handleTabOut, ctx_r3.handleFocus, ctx_r3.handleBlur))("scope", ctx_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.cancelButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.popupButtonsClasses("primary"))("disabled", !ctx_r3.calendarValue)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(82, _c2, ctx_r3.handleAccept))("scope", ctx_r3);
    ɵngcc0.ɵɵattribute("title", ctx_r3.localization.get("acceptLabel"))("aria-label", ctx_r3.localization.get("acceptLabel"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.localization.get("accept"), " ");
} }
const _c88 = function (a0, a1) { return { mousedown: a0, click: a1 }; };
const _c89 = function (a0, a1) { return { "k-i-calendar": a0, "k-i-clock": a1 }; };
const _c90 = ["defaultTemplate"];
function DateRangePopupComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "kendo-multiviewcalendar", 2);
} }
function DateRangeComponent_kendo_daterange_popup_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "kendo-daterange-popup");
} }
const _c91 = ["kendoCalendarView", ""];
function ViewComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 3);
    ɵngcc0.ɵɵtext(1, "\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ViewComponent_tr_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 4)(1, "th", 5);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("colSpan", ctx_r2.colSpan);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.title);
} }
function ViewComponent_tr_3_ng_template_1_td_0_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const row_r4 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r9.getWeekNumber(ctx_r9.firstDate(row_r4)), " ");
} }
function ViewComponent_tr_3_ng_template_1_td_0_ng_template_2_Template(rf, ctx) { }
const _c92 = function (a0, a1) { return { $implicit: a0, cellContext: a1 }; };
function ViewComponent_tr_3_ng_template_1_td_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 9);
    ɵngcc0.ɵɵtemplate(1, ViewComponent_tr_3_ng_template_1_td_0_ng_template_1_Template, 1, 1, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(2, ViewComponent_tr_3_ng_template_1_td_0_ng_template_2_Template, 0, 0, "ng-template", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r4 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(5, _c2, ctx_r8.handleWeekNumberClick.bind(ctx_r8, row_r4)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r8.weekNumberTemplateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.weekNumberTemplateRef)("ngTemplateOutlet", ctx_r8.weekNumberTemplateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(7, _c92, ctx_r8.firstDate(row_r4), ctx_r8.getWeekNumberContext(row_r4)));
} }
function ViewComponent_tr_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ViewComponent_tr_3_ng_template_1_td_0_Template, 3, 10, "td", 8);
} if (rf & 2) {
    const row_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.firstDate(row_r4))("ngIfElse", _r0);
} }
function ViewComponent_tr_3_ng_container_2_td_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const cell_r14 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵtextInterpolate(cell_r14.formattedValue);
} }
function ViewComponent_tr_3_ng_container_2_td_1_3_ng_template_0_Template(rf, ctx) { }
function ViewComponent_tr_3_ng_container_2_td_1_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ViewComponent_tr_3_ng_container_2_td_1_3_ng_template_0_Template, 0, 0, "ng-template", 15);
} if (rf & 2) {
    const cell_r14 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r18.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c92, cell_r14.value, cell_r14));
} }
function ViewComponent_tr_3_ng_container_2_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 12)(1, "span", 13);
    ɵngcc0.ɵɵtemplate(2, ViewComponent_tr_3_ng_container_2_td_1_ng_template_2_Template, 1, 1, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(3, ViewComponent_tr_3_ng_container_2_td_1_3_Template, 1, 5, null, 14);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext();
    const cell_r14 = ctx_r22.$implicit;
    const cellIndex_r15 = ctx_r22.index;
    const rowIndex_r5 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r16 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r16.getStyles(cell_r14))("title", cell_r14.title);
    ɵngcc0.ɵɵattribute("id", cell_r14.id)("data-cell-index", ctx_r16.tableCellIndex(rowIndex_r5, cellIndex_r15))("aria-selected", cell_r14.isSelected || cell_r14.isRangeStart || cell_r14.isRangeMid || cell_r14.isRangeEnd)("aria-disabled", cell_r14.isDisabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r16.templateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r16.templateRef);
} }
function ViewComponent_tr_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ViewComponent_tr_3_ng_container_2_td_1_Template, 4, 8, "td", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const cell_r14 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.shouldRenderCellContent(cell_r14))("ngIfElse", _r0);
} }
function ViewComponent_tr_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 4);
    ɵngcc0.ɵɵtemplate(1, ViewComponent_tr_3_ng_template_1_Template, 1, 2, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(2, ViewComponent_tr_3_ng_container_2_Template, 2, 2, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.weekNumber);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("kForOf", row_r4);
} }
function TimeListComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3)(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const index_r2 = ctx.index;
    ɵngcc0.ɵɵattribute("data-timelist-item-index", index_r2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r1.text);
} }
const _c93 = ["accept"];
const _c94 = ["cancel"];
const _c95 = ["now"];
const _c96 = ["listWrapper"];
const _c109 = function (a0, a1, a2) { return { click: a0, focus: a1, blur: a2 }; };
function TimeSelectorComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 8, 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction3(6, _c109, ctx_r0.handleNow, ctx_r0.handleFocus, ctx_r0.handleBlur))("scope", ctx_r0)("disabled", ctx_r0.disabled);
    ɵngcc0.ɵɵattribute("title", ctx_r0.localization.get("nowLabel"))("aria-label", ctx_r0.localization.get("nowLabel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.localization.get("now"));
} }
const _c110 = function (a0, a1) { return { focus: a0, blur: a1 }; };
function TimeSelectorComponent_ng_template_7_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12, 13)(2, "span", 2);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "kendo-timelist", 14);
    ɵngcc0.ɵɵlistener("valueChange", function TimeSelectorComponent_ng_template_7_div_0_Template_kendo_timelist_valueChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.current = $event; });
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    const part_r4 = ctx_r11.$implicit;
    const idx_r5 = ctx_r11.index;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.intl.dateFieldName(part_r4));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("min", ctx_r6.min)("max", ctx_r6.max)("part", part_r4)("step", ctx_r6.partStep(part_r4))("disabled", ctx_r6.disabled)("value", ctx_r6.current)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(10, _c110, ctx_r6.handleListFocus, ctx_r6.handleBlur))("scope", ctx_r6);
    ɵngcc0.ɵɵattribute("data-timelist-index", idx_r5);
} }
function TimeSelectorComponent_ng_template_7_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const part_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", part_r4.pattern, " ");
} }
function TimeSelectorComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TimeSelectorComponent_ng_template_7_div_0_Template, 5, 13, "div", 10);
    ɵngcc0.ɵɵtemplate(1, TimeSelectorComponent_ng_template_7_div_1_Template, 2, 1, "div", 11);
} if (rf & 2) {
    const part_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", part_r4.type !== "literal");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", part_r4.type === "literal");
} }
function TimeSelectorComponent_div_8_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 19, 20);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction3(6, _c109, ctx_r13.handleReject, ctx_r13.handleFocus, ctx_r13.handleBlur))("scope", ctx_r13)("disabled", ctx_r13.disabled);
    ɵngcc0.ɵɵattribute("title", ctx_r13.localization.get("cancelLabel"))("aria-label", ctx_r13.localization.get("cancelLabel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r13.localization.get("cancel"));
} }
function TimeSelectorComponent_div_8_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 21, 22);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction3(6, _c109, ctx_r14.handleAccept, ctx_r14.handleFocus, ctx_r14.handleBlur))("scope", ctx_r14)("disabled", ctx_r14.disabled);
    ɵngcc0.ɵɵattribute("title", ctx_r14.localization.get("acceptLabel"))("aria-label", ctx_r14.localization.get("acceptLabel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14.localization.get("accept"));
} }
function TimeSelectorComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, TimeSelectorComponent_div_8_button_1_Template, 3, 10, "button", 17);
    ɵngcc0.ɵɵtemplate(2, TimeSelectorComponent_div_8_button_2_Template, 3, 10, "button", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.cancelButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.setButton);
} }
const packageMetadata = {
    name: '@progress/kendo-angular-dateinputs',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1647358649,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * @hidden
 */
var Action;
(function (Action) {
    Action[Action["Left"] = 0] = "Left";
    Action[Action["Right"] = 1] = "Right";
    Action[Action["Up"] = 2] = "Up";
    Action[Action["Down"] = 3] = "Down";
    Action[Action["PrevView"] = 4] = "PrevView";
    Action[Action["NextView"] = 5] = "NextView";
    Action[Action["FirstInView"] = 6] = "FirstInView";
    Action[Action["LastInView"] = 7] = "LastInView";
    Action[Action["LowerView"] = 8] = "LowerView";
    Action[Action["UpperView"] = 9] = "UpperView";
})(Action || (Action = {}));

/**
 * @hidden
 */
const EMPTY_SELECTIONRANGE = { start: null, end: null };

/**
 * @hidden
 */
const MIDNIGHT_DATE = new Date(1980, 0, 1);
/**
 * @hidden
 */
const MIN_DATE = new Date(1900, 0, 1);
/**
 * @hidden
 */
const MAX_DATE = new Date(2099, 11, 31);
/**
 * @hidden
 */
const MIN_TIME = new Date(1980, 0, 1);
/**
 * @hidden
 */
const MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);

/**
 * @hidden
 */
const requiresZoneOnBlur = (ngControl) => ngControl &&
    (!ngControl.touched || (ngControl.control && ngControl.control.updateOn === 'blur'));
/**
 * @hidden
 */
const preventDefault = (args) => args.preventDefault();
/**
 * @hidden
 */
const currentFocusTarget = (blurArgs) => blurArgs.relatedTarget || document.activeElement;
/**
 * @hidden
 */
const isPresent = (value) => value !== undefined && value !== null;
/**
 * @hidden
 *
 * If the provided parameter is an array with at least one item
 * and all items in the array are numbers, returns `true.
 */
const isNumberArray = (value) => Array.isArray(value) && value.length > 0 && value.every(item => typeof item === 'number');
/**
 * @hidden
 *
 * If the provided parameter is an array with at least one item
 * and all items in the array are dates, returns `true`.
 */
const isDateArray = (value) => Array.isArray(value) && value.length > 0 && value.every(item => item instanceof Date);

/* tslint:disable:no-bitwise max-line-length */
const isSet = (value) => value !== null && value !== undefined;
const setter = (method) => (date, value) => {
    const clone = cloneDate(date);
    clone[method](value);
    return clone;
};
/**
 * @hidden
 */
const setTime = (origin, candidate) => {
    const date = cloneDate(origin);
    date.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());
    return date;
};
const normalizeTimes = (candidate, min, max) => ({
    candidateValue: setTime(MIDNIGHT_DATE, candidate),
    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ||
        (min.getHours() === max.getHours() && min.getMinutes() < max.getMinutes()) ? 0 : 1),
    minValue: setTime(MIDNIGHT_DATE, min)
});
/**
 * @hidden
 */
const setYears = setter('setFullYear');
/**
 * @hidden
 */
const setHours = setter('setHours');
/**
 * @hidden
 */
const setMinutes = setter('setMinutes');
/**
 * @hidden
 */
const setSeconds = setter('setSeconds');
/**
 * @hidden
 */
const setMilliseconds = setter('setMilliseconds');
/**
 * @hidden
 */
const range = (start, end, step = 1) => {
    const result = [];
    for (let i = start; i < end; i = i + step) {
        result.push(i);
    }
    return result;
};
/**
 * @hidden
 */
const isInRange = (candidate, min, max) => (!candidate || !((min && min > candidate) || (max && max < candidate)));
/**
 * @hidden
 */
const isInTimeRange = (candidate, min, max) => {
    if (!candidate || !min || !max) {
        return true;
    }
    const { candidateValue, minValue, maxValue } = normalizeTimes(candidate, min, max);
    return minValue <= candidateValue && candidateValue <= maxValue;
};
/**
 * @hidden
 */
const isValidRange = (min, max) => (!isSet(min) || !isSet(max) || min <= max);
/**
 * @hidden
 */
const dateInRange = (candidate, min, max) => {
    if (!candidate) {
        return candidate;
    }
    if (min && candidate < min) {
        return cloneDate(min);
    }
    if (max && candidate > max) {
        return cloneDate(max);
    }
    return candidate;
};
/**
 * @hidden
 */
const timeInRange = (candidate, min, max) => {
    if (!candidate || !min || !max) {
        return candidate;
    }
    const { candidateValue, minValue, maxValue } = normalizeTimes(candidate, min, max);
    if (candidateValue < minValue) {
        return setTime(candidate, min);
    }
    if (candidateValue > maxValue) {
        return setTime(candidate, max);
    }
    return candidate;
};
/**
 * @hidden
 */
const getNow = () => new Date();
/**
 * @hidden
 */
const getToday = () => getDate(new Date());
/**
 * @hidden
 */
const noop = (_) => { }; // tslint:disable-line:no-empty
/**
 * @hidden
 */
const isWindowAvailable = () => {
    return typeof window !== 'undefined';
};
/**
 * @hidden
 */
const stringifyClassObject = (classes) => {
    const pushToAcc = (acc, cls) => classes[cls] ? acc.concat(cls) : acc;
    return Object.keys(classes).reduce(pushToAcc, []).join(' ');
};
/**
 * @hidden
 */
const shiftWeekNames = (names, offset) => (names.slice(offset).concat(names.slice(0, offset)));
/**
 * @hidden
 */
const approximateStringMatching = (oldTextOrigin, oldFormat, newTextOrigin, caret) => {
    // Remove the right part of the cursor.
    //oldFormat = oldFormat.substring(0, caret + oldText.length - newText.length);
    const oldIndex = caret + oldTextOrigin.length - newTextOrigin.length;
    const oldTextSeparator = oldTextOrigin[oldIndex];
    const oldText = oldTextOrigin.substring(0, caret + oldTextOrigin.length - newTextOrigin.length);
    const newText = newTextOrigin.substring(0, caret);
    const diff = [];
    // Handle typing a single character over the same selection.
    if (oldText === newText && caret > 0) {
        diff.push([oldFormat[caret - 1], newText[caret - 1]]);
        return diff;
    }
    if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
        // Handle Delete/Backspace.
        let deletedSymbol = "";
        //XXX:
        // Whole text is replaced with a same char
        // Nasty patch required to keep the selection in the first segment
        if (newText.length === 1) {
            diff.push([oldFormat[0], newText[0]]);
        }
        for (let i = newText.length; i < oldText.length; i++) {
            if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== "_") {
                deletedSymbol = oldFormat[i];
                diff.push([deletedSymbol, ""]);
            }
        }
        return diff;
    }
    // Handle inserting text (the new text is longer than the previous one).
    // Handle typing over a literal as well.
    if (newText.indexOf(oldText) === 0 || oldFormat[caret - 1] === "_") {
        let symbol = oldFormat[0];
        for (let i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
            if (oldFormat[i] !== "_") {
                symbol = oldFormat[i];
                break;
            }
        }
        return [[symbol, newText[caret - 1]]];
    }
    // Handle entering a space or a separator, for navigation to the next item.
    if (newText[newText.length - 1] === " " || (newText[newText.length - 1] === oldTextSeparator && oldFormat[oldIndex] === '_')) {
        return [[oldFormat[caret - 1], "_"]];
    }
    // Handle typing over a correctly selected part.
    return [[oldFormat[caret - 1], newText[caret - 1]]];
};
/**
 * @hidden
 */
const domContainerFactory = (type) => (children, classes = "", styles = {}) => {
    const container = document.createElement(type);
    container.className = classes;
    Object.keys(styles).map(key => container.style[key] = styles[key]);
    if (typeof children === 'string') {
        container.innerHTML = children || '';
    }
    else {
        (children || []).forEach(child => child && container.appendChild(child));
    }
    return container;
};
/**
 * @hidden
 */
const hasChange = (changes, field) => changes[field] !== undefined;
/**
 * @hidden
 */
const hasExistingValue = (changes, field) => changes[field] && changes[field].currentValue !== undefined && changes[field].currentValue !== null;
/**
 * @hidden
 */
const last = (list = []) => list && list[list.length - 1];
/**
 * @hidden
 */
const isInSelectionRange = (value, selectionRange) => {
    const { start, end } = selectionRange || EMPTY_SELECTIONRANGE;
    if (!start || !end) {
        return false;
    }
    return start < value && value < end;
};
/**
 * @hidden
 */
const either = (value1, value2) => value1 || value2;
/**
 * @hidden
 */
const clampRange = (value) => ({ start: value, end: value });
/**
 * @hidden
 */
const isEqualRange = (initial, updated) => {
    const { start: initialStart, end: initialEnd } = initial || EMPTY_SELECTIONRANGE;
    const { start: updatedStart, end: updatedEnd } = updated || EMPTY_SELECTIONRANGE;
    return isEqual(initialStart, updatedStart) && isEqual(initialEnd, updatedEnd);
};
/**
 * @hidden
 */
const areDatesEqual = (first, second) => {
    first = first || [];
    second = second || [];
    return first.length === second.length && first.every((date, index) => isEqual(date, second[index]));
};
/**
 * @hidden
 */
const sortDates = (dates) => {
    return dates.filter(date => isPresent(date)).sort((a, b) => a.getTime() - b.getTime());
};
/**
 * @hidden
 *
 * Creates a new date based on the date information from the specified date portion
 * and the time information from the time portion.
 * If a parameter is not provided, returns `null`.
 */
const mergeDateAndTime = (date, time) => {
    if (!(date && time)) {
        return null;
    }
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
};
/**
 * @hidden
 */
const lastMillisecondOfDate = (date) => {
    if (!date) {
        return null;
    }
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);
};
/**
 * @hidden
 *
 * Returns an array with dates ranging between and including the specified start and
 * end dates that are evaluated as disabled.
 */
const disabledDatesInRange = (start, end, isDateDisabled) => {
    if (!(start && end && isDateDisabled) || (start > end)) {
        return [];
    }
    const dates = [];
    let current = start;
    while (current <= end) {
        if (isDateDisabled(current)) {
            dates.push(current);
        }
        current = addDays(current, 1);
    }
    return dates;
};
/**
 * @hidden
 *
 * Crops the last two digits from the year of the provided date value.
 */
const cropTwoDigitYear = (date) => {
    if (!isPresent(date) || isNaN(date.getTime())) {
        return 0;
    }
    return Number(date
        .getFullYear()
        .toString()
        .slice(-2));
};
/**
 * @hidden
 *
 * Used when resetting millisecond segment value in the DateInput
 */
const msPaddingFromFormat = (format) => {
    return Array(format.match(/S+(\1)/)[0].length).join("0");
};
/**
 * @hidden
 */
const millisecondDigitsInFormat = (format) => {
    const result = format && format.match(/S+(\1)/);
    return result ? result[0].length : 0;
};
/**
 * @hidden
 */
const millisecondStepFor = (digits) => {
    return Math.pow(10, 3 - digits);
};
/**
 * @hidden
 *
 * Checks if a tab keydown would would move the focus outside of the calendar.
 */
const isTabExitingCalendar = (calendarType, focusedElement, shiftKey) => {
    if (!isPresent(focusedElement)) {
        return false;
    }
    return calendarType === 'infinite' || ( // infinte calendar is always exited on first tab keydown
    calendarType === 'classic' &&
        (shiftKey && focusedElement.classList.contains('k-calendar')) || // exited on main calendar element focused and back-tab
        (!shiftKey && focusedElement.classList.contains('k-next-view')) // exited on next button focused and regular tab
    );
};
/**
 * @hidden
 * Returns the size class based on the component and size input.
 */
const getSizeClass = (component, size) => {
    const SIZE_CLASSES = {
        'small': `k-${component}-sm`,
        'medium': `k-${component}-md`,
        'large': `k-${component}-lg`
    };
    return SIZE_CLASSES[size];
};
/**
 * @hidden
 * Returns the rounded class based on the rounded input.
 */
const getRoundedClass = (rounded) => {
    const ROUNDED_CLASSES = {
        'small': 'k-rounded-sm',
        'medium': 'k-rounded-md',
        'large': 'k-rounded-lg',
        'full': 'k-rounded-full'
    };
    return ROUNDED_CLASSES[rounded];
};
/**
 * @hidden
 * Return the fillMode class based on the component and fillMode input.
 */
const getFillModeClass = (component, fillMode) => {
    const FILLMODE_CLASSES = {
        'solid': `k-${component}-solid`,
        'flat': `k-${component}-flat`,
        'outline': `k-${component}-outline`
    };
    return FILLMODE_CLASSES[fillMode];
};

const EMPTY_DATA = [[]];
const CELLS_LENGTH = 4;
const ROWS_LENGTH = 3;
const ACTIONS = {
    [Action.Left]: (date) => addDecades(date, -1),
    [Action.Up]: (date) => addDecades(date, -5),
    [Action.Right]: (date) => addDecades(date, 1),
    [Action.Down]: (date) => addDecades(date, 5),
    [Action.PrevView]: (date) => addCenturies(date, -1),
    [Action.NextView]: (date) => addCenturies(date, 1),
    [Action.FirstInView]: (date) => firstDecadeOfCentury(date),
    [Action.LastInView]: (date) => lastDecadeOfCentury(date)
};
/**
 * @hidden
 */
let CenturyViewService = class CenturyViewService {
    /**
     * @hidden
     */
    constructor() {
        this.dateRange = (start, end) => {
            if (!isPresent(start) || !isPresent(end)) {
                return [];
            }
            const result = [];
            let current = start;
            while (current <= end) {
                result.push(current);
                current = addDecades(current, 1);
            }
            return result;
        };
    }
    addToDate(min, skip) {
        return addCenturies(min, skip);
    }
    datesList(start, count) {
        return range(0, count).map(i => addCenturies(start, i));
    }
    data(options) {
        const { cellUID, focusedDate, isActiveView, max, min, selectedDates, selectionRange = EMPTY_SELECTIONRANGE, viewDate } = options;
        if (!viewDate) {
            return EMPTY_DATA;
        }
        const cells = range(0, CELLS_LENGTH);
        const firstDate = firstDecadeOfCentury(viewDate);
        const lastDate = lastDecadeOfCentury(viewDate);
        const today = getToday();
        return range(0, ROWS_LENGTH).map(rowOffset => {
            const baseDate = addDecades(firstDate, rowOffset * CELLS_LENGTH);
            return cells.map(cellOffset => {
                const cellDate = this.normalize(addDecades(baseDate, cellOffset), min, max);
                const nextCentury = cellDate.getFullYear() > lastDate.getFullYear();
                if (!this.isInRange(cellDate, min, max) || nextCentury) {
                    return null;
                }
                const isRangeStart = this.isEqual(cellDate, selectionRange.start);
                const isRangeEnd = this.isEqual(cellDate, selectionRange.end);
                const isInMiddle = !isRangeStart && !isRangeEnd;
                const isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
                return {
                    formattedValue: this.value(cellDate),
                    id: `${cellUID}${cellDate.getTime()}`,
                    isFocused: this.isEqual(cellDate, focusedDate),
                    isSelected: isActiveView && selectedDates.some(date => this.isEqual(cellDate, date)),
                    isWeekend: false,
                    isRangeStart: isRangeStart,
                    isRangeMid: isRangeMid,
                    isRangeEnd: isRangeEnd,
                    isRangeSplitEnd: isRangeMid && this.isEqual(cellDate, lastDate),
                    isRangeSplitStart: isRangeMid && this.isEqual(cellDate, firstDate),
                    isToday: this.isEqual(cellDate, today),
                    title: this.cellTitle(cellDate),
                    value: cellDate
                };
            });
        });
    }
    isEqual(candidate, expected) {
        if (!candidate || !expected) {
            return false;
        }
        return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();
    }
    isInArray(date, dates) {
        if (!dates.length) {
            return false;
        }
        const year = date.getFullYear();
        return dates[0].getFullYear() <= year && year <= (dates[dates.length - 1].getFullYear() + 99);
    }
    isInRange(candidate, min, max) {
        const year = firstYearOfDecade(candidate).getFullYear();
        const aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;
        const belowMax = !max || year <= firstYearOfDecade(max).getFullYear();
        return aboveMin && belowMax;
    }
    beginningOfPeriod(date) {
        if (!date) {
            return date;
        }
        const firstYear = firstYearOfDecade(firstDecadeOfCentury(date));
        return createDate(firstYear.getFullYear(), 0, 1);
    }
    lastDayOfPeriod(date) {
        const decade = lastDecadeOfCentury(date);
        const year = lastYearOfDecade(decade);
        const month = lastMonthOfYear(year);
        return lastDayOfMonth(month);
    }
    isRangeStart(value) {
        return value.getFullYear() % 1000 === 0;
    }
    move(value, action) {
        const modifier = ACTIONS[action];
        if (!modifier) {
            return value;
        }
        return modifier(value);
    }
    cellTitle(value) {
        return firstYearOfDecade(value).getFullYear().toString();
    }
    navigationTitle(value) {
        return value ? firstDecadeOfCentury(value).getFullYear().toString() : '';
    }
    title(value) {
        if (!value) {
            return '';
        }
        return `${firstDecadeOfCentury(value).getFullYear()} - ${lastDecadeOfCentury(value).getFullYear()}`;
    }
    rowLength() {
        return CELLS_LENGTH;
    }
    skip(value, min) {
        return durationInCenturies(min, value);
    }
    total(min, max) {
        return durationInCenturies(min, max) + 1;
    }
    value(current) {
        return current ? firstYearOfDecade(current).getFullYear().toString() : '';
    }
    viewDate(date, max, viewsCount = 1) {
        const viewsInRange = this.total(date, max);
        if (viewsInRange < viewsCount) {
            const centuriesToSubtract = viewsCount - viewsInRange;
            return addCenturies(date, -1 * centuriesToSubtract);
        }
        return date;
    }
    normalize(cellDate, min, max) {
        if (cellDate < min && this.isEqual(cellDate, min)) {
            return cloneDate(min);
        }
        if (cellDate > max && this.isEqual(cellDate, max)) {
            return cloneDate(max);
        }
        return cellDate;
    }
};
CenturyViewService.ɵfac = function CenturyViewService_Factory(t) { return new (t || CenturyViewService)(); };
CenturyViewService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CenturyViewService, factory: function (t) { return CenturyViewService.ɵfac(t); } });

const EMPTY_DATA$1 = [[]];
const CELLS_LENGTH$1 = 4;
const ROWS_LENGTH$1 = 3;
const ACTIONS$1 = {
    [Action.Left]: (date) => addYears(date, -1),
    [Action.Up]: (date) => addYears(date, -5),
    [Action.Right]: (date) => addYears(date, 1),
    [Action.Down]: (date) => addYears(date, 5),
    [Action.PrevView]: (date) => addDecades(date, -1),
    [Action.NextView]: (date) => addDecades(date, 1),
    [Action.FirstInView]: (date) => firstYearOfDecade(date),
    [Action.LastInView]: (date) => lastYearOfDecade(date)
};
/**
 * @hidden
 */
let DecadeViewService = class DecadeViewService {
    /**
     * @hidden
     */
    constructor() {
        this.dateRange = (start, end) => {
            if (!isPresent(start) || !isPresent(end)) {
                return [];
            }
            const result = [];
            let current = start;
            while (current <= end) {
                result.push(current);
                current = addYears(current, 1);
            }
            return result;
        };
    }
    addToDate(min, skip) {
        return addDecades(min, skip);
    }
    datesList(start, count) {
        return range(0, count).map(i => addDecades(start, i));
    }
    data(options) {
        const { cellUID, focusedDate, isActiveView, max, min, selectedDates, selectionRange = EMPTY_SELECTIONRANGE, viewDate } = options;
        if (!viewDate) {
            return EMPTY_DATA$1;
        }
        const cells = range(0, CELLS_LENGTH$1);
        const firstDate = firstYearOfDecade(viewDate);
        const lastDate = lastYearOfDecade(viewDate);
        const today = getToday();
        return range(0, ROWS_LENGTH$1).map(rowOffset => {
            const baseDate = addYears(firstDate, rowOffset * CELLS_LENGTH$1);
            return cells.map(cellOffset => {
                const cellDate = this.normalize(addYears(baseDate, cellOffset), min, max);
                const nextDecade = cellDate.getFullYear() > lastDate.getFullYear();
                if (!this.isInRange(cellDate, min, max) || nextDecade) {
                    return null;
                }
                const isRangeStart = this.isEqual(cellDate, selectionRange.start);
                const isRangeEnd = this.isEqual(cellDate, selectionRange.end);
                const isInMiddle = !isRangeStart && !isRangeEnd;
                const isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
                return {
                    formattedValue: this.value(cellDate),
                    id: `${cellUID}${cellDate.getTime()}`,
                    isFocused: this.isEqual(cellDate, focusedDate),
                    isSelected: isActiveView && selectedDates.some(date => this.isEqual(cellDate, date)),
                    isWeekend: false,
                    isRangeStart: isRangeStart,
                    isRangeMid: isRangeMid,
                    isRangeEnd: isRangeEnd,
                    isRangeSplitEnd: isRangeMid && this.isEqual(cellDate, lastDate),
                    isRangeSplitStart: isRangeMid && this.isEqual(cellDate, firstDate),
                    isToday: this.isEqual(cellDate, today),
                    title: this.cellTitle(cellDate),
                    value: cellDate
                };
            });
        });
    }
    isEqual(candidate, expected) {
        if (!candidate || !expected) {
            return false;
        }
        return candidate.getFullYear() === expected.getFullYear();
    }
    isInArray(date, dates) {
        if (!dates.length) {
            return false;
        }
        const year = date.getFullYear();
        return dates[0].getFullYear() <= year && year <= (dates[dates.length - 1].getFullYear() + 9);
    }
    isInRange(candidate, min, max) {
        const year = candidate.getFullYear();
        const aboveMin = !min || min.getFullYear() <= year;
        const belowMax = !max || year <= max.getFullYear();
        return aboveMin && belowMax;
    }
    beginningOfPeriod(date) {
        if (!date) {
            return date;
        }
        const firstYear = firstYearOfDecade(date);
        return createDate(firstYear.getFullYear(), 0, 1);
    }
    lastDayOfPeriod(date) {
        const year = lastYearOfDecade(date);
        const month = lastMonthOfYear(year);
        return lastDayOfMonth(month);
    }
    isRangeStart(value) {
        return value.getFullYear() % 100 === 0;
    }
    move(value, action) {
        const modifier = ACTIONS$1[action];
        if (!modifier) {
            return value;
        }
        return modifier(value);
    }
    cellTitle(value) {
        return value.getFullYear().toString();
    }
    navigationTitle(value) {
        return value ? firstYearOfDecade(value).getFullYear().toString() : '';
    }
    title(value) {
        if (!value) {
            return '';
        }
        return `${firstYearOfDecade(value).getFullYear()} - ${lastYearOfDecade(value).getFullYear()}`;
    }
    rowLength() {
        return CELLS_LENGTH$1;
    }
    skip(value, min) {
        return durationInDecades(min, value);
    }
    total(min, max) {
        return durationInDecades(min, max) + 1;
    }
    value(current) {
        return current ? current.getFullYear().toString() : '';
    }
    viewDate(date, max, viewsCount = 1) {
        const viewsInRange = this.total(date, max);
        if (viewsInRange < viewsCount) {
            const decadesToSubtract = viewsCount - viewsInRange;
            return addDecades(date, -1 * decadesToSubtract);
        }
        return date;
    }
    normalize(cellDate, min, max) {
        if (cellDate < min && this.isEqual(cellDate, min)) {
            return cloneDate(min);
        }
        if (cellDate > max && this.isEqual(cellDate, max)) {
            return cloneDate(max);
        }
        return cellDate;
    }
};
DecadeViewService.ɵfac = function DecadeViewService_Factory(t) { return new (t || DecadeViewService)(); };
DecadeViewService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DecadeViewService, factory: function (t) { return DecadeViewService.ɵfac(t); } });

const EMPTY_DATA$2 = [[]];
const CELLS_LENGTH$2 = 7;
const ROWS_LENGTH$2 = 6;
const ACTIONS$2 = {
    [Action.Left]: (date) => addDays(date, -1),
    [Action.Up]: (date) => addWeeks(date, -1),
    [Action.Right]: (date) => addDays(date, 1),
    [Action.Down]: (date) => addWeeks(date, 1),
    [Action.PrevView]: (date) => addMonths(date, -1),
    [Action.NextView]: (date) => addMonths(date, 1),
    [Action.FirstInView]: (date) => firstDayOfMonth(date),
    [Action.LastInView]: (date) => lastDayOfMonth(date)
};
/**
 * @hidden
 */
let MonthViewService = class MonthViewService {
    constructor(_intlService) {
        this._intlService = _intlService;
        this.dateRange = (start, end) => {
            if (!isPresent(start) || !isPresent(end)) {
                return [];
            }
            const result = [];
            let current = start;
            while (current <= end) {
                result.push(current);
                current = addDays(current, 1);
            }
            return result;
        };
    }
    addToDate(min, skip) {
        return addMonths(min, skip);
    }
    datesList(start, count) {
        return range(0, count).map(i => addMonths(start, i));
    }
    data(options) {
        const { cellUID, focusedDate, isActiveView, max, min, selectedDates, selectionRange = EMPTY_SELECTIONRANGE, viewDate, isDateDisabled = () => false } = options;
        if (!viewDate) {
            return EMPTY_DATA$2;
        }
        const firstMonthDate = firstDayOfMonth(viewDate);
        const firstMonthDay = getDate(firstMonthDate);
        const lastMonthDate = lastDayOfMonth(viewDate);
        const lastMonthDay = getDate(lastMonthDate);
        const backward = -1;
        const date = dayOfWeek(firstMonthDate, this._intlService.firstDay(), backward);
        const cells = range(0, CELLS_LENGTH$2);
        const today = getToday();
        return range(0, ROWS_LENGTH$2).map(rowOffset => {
            const baseDate = addDays(date, rowOffset * CELLS_LENGTH$2);
            return cells.map(cellOffset => {
                const cellDate = this.normalize(addDays(baseDate, cellOffset), min, max);
                const cellDay = getDate(cellDate);
                const otherMonth = cellDay < firstMonthDay || cellDay > lastMonthDay;
                const outOfRange = cellDate < min || cellDate > max;
                if (outOfRange) {
                    return null;
                }
                const isRangeStart = this.isEqual(cellDate, selectionRange.start);
                const isRangeEnd = this.isEqual(cellDate, selectionRange.end);
                const isInMiddle = !isRangeStart && !isRangeEnd;
                const isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
                return {
                    formattedValue: this.value(cellDate),
                    id: `${cellUID}${cellDate.getTime()}`,
                    isFocused: this.isEqual(cellDate, focusedDate),
                    isSelected: isActiveView && selectedDates.some(date => this.isEqual(cellDate, date)),
                    isWeekend: this.isWeekend(cellDate),
                    isRangeStart: isRangeStart,
                    isRangeMid: isRangeMid,
                    isRangeEnd: isRangeEnd,
                    isRangeSplitStart: isRangeMid && this.isEqual(cellDate, firstMonthDate),
                    isRangeSplitEnd: isRangeMid && this.isEqual(cellDate, lastMonthDate),
                    isToday: this.isEqual(cellDate, today),
                    title: this.cellTitle(cellDate),
                    value: cellDate,
                    isDisabled: isDateDisabled(cellDate),
                    isOtherMonth: otherMonth
                };
            });
        });
    }
    isEqual(candidate, expected) {
        if (!candidate || !expected) {
            return false;
        }
        return getDate(candidate).getTime() === getDate(expected).getTime();
    }
    isInArray(date, dates) {
        if (dates.length === 0) {
            return false;
        }
        const lowerBound = this.beginningOfPeriod(dates[0]);
        const upperBound = this.beginningOfPeriod(addMonths(dates[dates.length - 1], 1));
        return lowerBound <= date && date < upperBound;
    }
    isInRange(candidate, min, max) {
        const value = getDate(candidate);
        const aboveMin = !min || getDate(min) <= value;
        const belowMax = !max || value <= getDate(max);
        return aboveMin && belowMax;
    }
    beginningOfPeriod(date) {
        if (!date) {
            return date;
        }
        return createDate(date.getFullYear(), date.getMonth(), 1);
    }
    lastDayOfPeriod(date) {
        return lastDayOfMonth(date);
    }
    isRangeStart(value) {
        return !value.getMonth();
    }
    move(value, action) {
        const modifier = ACTIONS$2[action];
        if (!modifier) {
            return value;
        }
        return modifier(value);
    }
    cellTitle(value) {
        return this._intlService.formatDate(value, 'D');
    }
    navigationTitle(value) {
        if (!value) {
            return '';
        }
        return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];
    }
    title(current) {
        return `${this.wideMonthNames()[current.getMonth()]} ${current.getFullYear()}`;
    }
    rowLength(options = {}) {
        return CELLS_LENGTH$2 + (options.prependCell ? 1 : 0);
    }
    skip(value, min) {
        return durationInMonths(min, value);
    }
    total(min, max) {
        return durationInMonths(min, max) + 1;
    }
    value(current) {
        return current ? current.getDate().toString() : "";
    }
    viewDate(date, max, viewsCount = 1) {
        const viewsInRange = this.total(date, max);
        if (viewsInRange < viewsCount) {
            const monthsToSubtract = viewsCount - viewsInRange;
            return addMonths(date, -1 * monthsToSubtract);
        }
        return date;
    }
    isWeekend(date) {
        const { start, end } = this._intlService.weekendRange();
        const day = date.getDay();
        if (end < start) {
            return day <= end || start <= day;
        }
        return start <= day && day <= end;
    }
    abbrMonthNames() {
        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });
    }
    normalize(cellDate, min, max) {
        if (cellDate < min && this.isEqual(cellDate, min)) {
            return cloneDate(min);
        }
        if (cellDate > max && this.isEqual(cellDate, max)) {
            return cloneDate(max);
        }
        return cellDate;
    }
    wideMonthNames() {
        return this._intlService.dateFormatNames({ nameType: 'wide', type: 'months' });
    }
};
MonthViewService.ɵfac = function MonthViewService_Factory(t) { return new (t || MonthViewService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
MonthViewService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MonthViewService, factory: function (t) { return MonthViewService.ɵfac(t); } });
MonthViewService = __decorate([ __metadata("design:paramtypes", [IntlService])
], MonthViewService);

const EMPTY_DATA$3 = [[]];
const CELLS_LENGTH$3 = 4;
const ROWS_LENGTH$3 = 3;
const upStep = (month) => {
    if (month > 4) {
        return -5;
    }
    if (month < 2) {
        return -2;
    }
    return -7;
};
const downStep = (month) => {
    if (month < 7) {
        return 5;
    }
    if (month < 10) {
        return 7;
    }
    return 2;
};
const ACTIONS$3 = {
    [Action.Left]: (date) => addMonths(date, -1),
    [Action.Up]: (date) => addMonths(date, upStep(date.getMonth())),
    [Action.Right]: (date) => addMonths(date, 1),
    [Action.Down]: (date) => addMonths(date, downStep(date.getMonth())),
    [Action.PrevView]: (date) => addYears(date, -1),
    [Action.NextView]: (date) => addYears(date, 1),
    [Action.FirstInView]: (date) => firstMonthOfYear(date),
    [Action.LastInView]: (date) => lastMonthOfYear(date)
};
/**
 * @hidden
 */
let YearViewService = class YearViewService {
    constructor(_intlService) {
        this._intlService = _intlService;
        this.dateRange = (start, end) => {
            if (!isPresent(start) || !isPresent(end)) {
                return [];
            }
            const result = [];
            let current = start;
            while (current <= end) {
                result.push(current);
                current = addMonths(current, 1);
            }
            return result;
        };
    }
    addToDate(min, skip) {
        return addYears(min, skip);
    }
    datesList(start, count) {
        return range(0, count).map(i => addYears(start, i));
    }
    data(options) {
        const { cellUID, focusedDate, isActiveView, max, min, selectedDates, selectionRange = EMPTY_SELECTIONRANGE, viewDate } = options;
        if (!viewDate) {
            return EMPTY_DATA$3;
        }
        const months = this.abbrMonthNames();
        const firstDate = firstMonthOfYear(viewDate);
        const lastDate = lastMonthOfYear(viewDate);
        const currentYear = firstDate.getFullYear();
        const cells = range(0, CELLS_LENGTH$3);
        const today = getToday();
        return range(0, ROWS_LENGTH$3).map(rowOffset => {
            const baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH$3);
            return cells.map(cellOffset => {
                const cellDate = this.normalize(addMonths(baseDate, cellOffset), min, max);
                const changedYear = currentYear < cellDate.getFullYear();
                if (!this.isInRange(cellDate, min, max) || changedYear) {
                    return null;
                }
                const isRangeStart = this.isEqual(cellDate, selectionRange.start);
                const isRangeEnd = this.isEqual(cellDate, selectionRange.end);
                const isInMiddle = !isRangeStart && !isRangeEnd;
                const isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
                return {
                    formattedValue: months[cellDate.getMonth()],
                    id: `${cellUID}${cellDate.getTime()}`,
                    isFocused: this.isEqual(cellDate, focusedDate),
                    isSelected: isActiveView && selectedDates.some(date => this.isEqual(cellDate, date)),
                    isWeekend: false,
                    isRangeStart: isRangeStart,
                    isRangeMid: isRangeMid,
                    isRangeEnd: isRangeEnd,
                    isRangeSplitEnd: isRangeMid && this.isEqual(cellDate, lastDate),
                    isRangeSplitStart: isRangeMid && this.isEqual(cellDate, firstDate),
                    isToday: this.isEqual(cellDate, today),
                    title: this.cellTitle(cellDate),
                    value: cellDate
                };
            });
        });
    }
    isEqual(candidate, expected) {
        if (!candidate || !expected) {
            return false;
        }
        return candidate.getFullYear() === expected.getFullYear() &&
            candidate.getMonth() === expected.getMonth();
    }
    isInArray(date, dates) {
        if (!dates.length) {
            return false;
        }
        const year = date.getFullYear();
        return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();
    }
    isInRange(candidate, min, max) {
        const candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);
        const aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;
        const belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);
        return aboveMin && belowMax;
    }
    beginningOfPeriod(date) {
        if (!date) {
            return date;
        }
        return createDate(date.getFullYear(), 0, 1);
    }
    lastDayOfPeriod(date) {
        const month = lastMonthOfYear(date);
        return lastDayOfMonth(month);
    }
    isRangeStart(value) {
        return value.getFullYear() % 10 === 0;
    }
    move(value, action) {
        const modifier = ACTIONS$3[action];
        if (!modifier) {
            return value;
        }
        return modifier(value);
    }
    cellTitle(value) {
        return `${value.getFullYear()} ${this.value(value)}`;
    }
    navigationTitle(value) {
        return this.title(value);
    }
    title(current) {
        return current ? current.getFullYear().toString() : '';
    }
    rowLength() {
        return CELLS_LENGTH$3;
    }
    skip(value, min) {
        return durationInYears(min, value);
    }
    total(min, max) {
        return durationInYears(min, max) + 1;
    }
    value(current) {
        return current ? this.abbrMonthNames()[current.getMonth()] : '';
    }
    viewDate(date, max, viewsCount = 1) {
        const viewsInRange = this.total(date, max);
        if (viewsInRange < viewsCount) {
            const yearsToSubtract = viewsCount - viewsInRange;
            return addYears(date, -1 * yearsToSubtract);
        }
        return date;
    }
    abbrMonthNames() {
        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });
    }
    normalize(cellDate, min, max) {
        if (cellDate < min && this.isEqual(cellDate, min)) {
            return cloneDate(min);
        }
        if (cellDate > max && this.isEqual(cellDate, max)) {
            return cloneDate(max);
        }
        return cellDate;
    }
};
YearViewService.ɵfac = function YearViewService_Factory(t) { return new (t || YearViewService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
YearViewService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: YearViewService, factory: function (t) { return YearViewService.ɵfac(t); } });
YearViewService = __decorate([ __metadata("design:paramtypes", [IntlService])
], YearViewService);

/**
 * @hidden
 *
 * The Enum which defines all possible Calendar view types.
 */
var CalendarViewEnum;
(function (CalendarViewEnum) {
    CalendarViewEnum[CalendarViewEnum["month"] = 0] = "month";
    CalendarViewEnum[CalendarViewEnum["year"] = 1] = "year";
    CalendarViewEnum[CalendarViewEnum["decade"] = 2] = "decade";
    CalendarViewEnum[CalendarViewEnum["century"] = 3] = "century";
})(CalendarViewEnum || (CalendarViewEnum = {}));

const services = {
    [CalendarViewEnum.month]: MonthViewService,
    [CalendarViewEnum.year]: YearViewService,
    [CalendarViewEnum.decade]: DecadeViewService,
    [CalendarViewEnum.century]: CenturyViewService
};
const viewOffset = (view, offset) => {
    const candidate = CalendarViewEnum[CalendarViewEnum[view + offset]];
    return candidate !== undefined ? candidate : view;
};
/**
 * @hidden
 */
let BusViewService = class BusViewService {
    constructor(injector) {
        this.injector = injector;
        this.viewChanged = new EventEmitter();
        this.bottom = CalendarViewEnum.month;
        this.top = CalendarViewEnum.century;
    }
    configure(bottom, top) {
        this.bottom = bottom;
        this.top = top;
    }
    service(view) {
        const serviceType = services[view];
        return serviceType ? this.injector.get(serviceType) : null;
    }
    moveDown(view) {
        this.move(view, -1);
    }
    moveUp(view) {
        this.move(view, 1);
    }
    moveToBottom(activeView) {
        if (activeView === this.bottom) {
            return;
        }
        this.viewChanged.emit({ view: this.bottom });
    }
    canMoveDown(view) {
        return this.bottom < view;
    }
    canMoveUp(view) {
        return view < this.top;
    }
    clamp(view) {
        if (view < this.bottom) {
            return this.bottom;
        }
        if (view > this.top) {
            return this.top;
        }
        return view;
    }
    move(view, offset) {
        const candidate = this.clamp(viewOffset(view, offset));
        if (candidate === view) {
            return;
        }
        this.viewChanged.emit({ view: candidate });
    }
};
BusViewService.ɵfac = function BusViewService_Factory(t) { return new (t || BusViewService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
BusViewService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BusViewService, factory: function (t) { return BusViewService.ɵfac(t); } });
BusViewService = __decorate([ __metadata("design:paramtypes", [Injector])
], BusViewService);

/**
 * @hidden
 */
let WeekNamesService = class WeekNamesService {
    constructor(intl) {
        this.intl = intl;
    }
    getWeekNames(includeWeekNumber = false) {
        const weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());
        return includeWeekNumber ? [''].concat(weekNames) : weekNames;
    }
};
WeekNamesService.ɵfac = function WeekNamesService_Factory(t) { return new (t || WeekNamesService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
WeekNamesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: WeekNamesService, factory: function (t) { return WeekNamesService.ɵfac(t); } });
WeekNamesService = __decorate([ __metadata("design:paramtypes", [IntlService])
], WeekNamesService);

const DEFAULT_VIEWS_LENGTH = 2;
/**
 * @hidden
 */
let HorizontalViewListComponent = class HorizontalViewListComponent {
    constructor(bus, intl, weekService, cdr, element, renderer) {
        this.bus = bus;
        this.intl = intl;
        this.weekService = weekService;
        this.cdr = cdr;
        this.element = element;
        this.renderer = renderer;
        this.activeView = CalendarViewEnum.month;
        this.isActive = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.selectedDates = [];
        this.views = DEFAULT_VIEWS_LENGTH;
        this.showViewHeader = false;
        this.animateNavigation = false;
        this.cellClick = new EventEmitter();
        this.weekNumberCellClick = new EventEmitter();
        this.cellEnter = new EventEmitter();
        this.cellLeave = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.getComponentClass = true;
        this.weekNames = [];
        this.dates = [];
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    get weekNumber() {
        return this.showWeekNumbers && this.isMonthView();
    }
    set weekNumber(showWeekNumbers) {
        this.showWeekNumbers = showWeekNumbers;
    }
    get getComponentMonthClass() {
        return this.activeView === CalendarViewEnum.month;
    }
    get getComponentYearClass() {
        return this.activeView === CalendarViewEnum.year;
    }
    get getComponentDecadeClass() {
        return this.activeView === CalendarViewEnum.decade;
    }
    get getComponentCenturyClass() {
        return this.activeView === CalendarViewEnum.century;
    }
    ngOnChanges(changes) {
        this.initService();
        if (this.weekNames.length === 0 || changes.weekNumber) {
            this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        }
        if (!this.service) {
            return;
        }
        this.views = this.views || DEFAULT_VIEWS_LENGTH;
        const focusedDate = this.focusedDate;
        const viewDate = this.clampDate(this.service.viewDate(focusedDate, this.max, this.views));
        this.skip = this.service.skip(viewDate, this.min);
        this.total = this.service.total(this.min, this.max);
        const activeViewChanged = hasChange(changes, 'activeView');
        const viewsHasChanged = this.views > 0 && hasChange(changes, 'views');
        if (activeViewChanged || !this.isInDates(focusedDate) || viewsHasChanged || !this.activeDate) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
            this.activeDate = cloneDate(this.dates[0]);
            this.activeDateChange.emit(this.activeDate);
        }
    }
    ngAfterViewInit() {
        // make the calendar look the same in the different browsers
        // which also smoothens the navigation animation
        if (this.views === 1) {
            this.setTableMinWidth();
        }
    }
    ngOnDestroy() {
        this.intlSubscription.unsubscribe();
    }
    initService() {
        this.service = this.bus.service(this.activeView);
    }
    isMonthView() {
        return this.activeView === CalendarViewEnum.month;
    }
    getCaptionTitle(date) {
        return this.service.title(date);
    }
    getCaptionClass() {
        return this.isMonthView() ? 'k-month-header' : 'k-meta-header';
    }
    animateView(action) {
        const container = this.element.nativeElement;
        const table = container.querySelector('table');
        // the whole width excluding padding/margin
        const initialContainerWidth = parseFloat(getComputedStyle(container).width);
        // table width
        const tableWidth = parseFloat(getComputedStyle(table).width);
        this.renderer.setStyle(container, 'width', `${initialContainerWidth}px`);
        this.renderer.setStyle(container, 'overflow', 'visible');
        // initialize an additional view for the animation
        if (action === Action.NextView) {
            // animating Action.NextView requires adding an additional view before the rendered views
            this.nextAnimationDate = cloneDate(this.dates[0]);
        }
        else {
            // animating Action.PrevView requires adding an additional view after the rendered views
            this.prevAnimationDate = cloneDate(this.dates[this.dates.length - 1]);
        }
        // run cdr to render the additional view
        this.cdr.detectChanges();
        container.querySelectorAll('table').forEach(table => {
            this.renderer.setStyle(table, 'width', `${tableWidth}px`);
            if (this.views === 1) {
                this.renderer.setStyle(table, 'min-width', `${initialContainerWidth}px`);
            }
        });
        // we always slide by the width of 1 table
        // cross-browser compatibility is ensured by measuring the client rectangle and substracting the gap
        const tabRect = table.getBoundingClientRect();
        const containerGap = parseFloat(getComputedStyle(container).columnGap);
        const start = action === Action.NextView ? 'translateX(0)' : `translateX(-${tabRect.width + containerGap}px)`;
        const end = action === Action.NextView ? `translateX(-${tabRect.width + containerGap}px)` : 'translateX(0)';
        if (!this.animation) {
            this.animation = container.animate([
                { transform: start },
                { transform: end }
            ], {
                duration: 500,
                easing: 'ease-out'
            });
            this.animation.oncancel = this.animation.onfinish = () => {
                // clear all inline styles
                this.renderer.removeStyle(container, 'width');
                this.renderer.removeStyle(container, 'overflow');
                container.querySelectorAll('table').forEach(table => {
                    this.renderer.removeStyle(table, 'width');
                });
                // clear the animation and the animation view
                this.animation = null;
                this.nextAnimationDate = null;
                this.prevAnimationDate = null;
                // run cdr to remove additional animation view from the markup
                this.cdr.detectChanges();
            };
        }
        else {
            // if animation is already running, cancel it and show the end navigation result on multiple prev/next button clicks
            this.animation.cancel();
        }
    }
    navigate(action) {
        if (this.animateNavigation && isDocumentAvailable() && isPresent(this.element.nativeElement.animate)) {
            this.animateView(action);
        }
        const candidate = this.move(action);
        const list = this.service.datesList(candidate, this.getTake(this.skip));
        if (this.isListInRange(list)) {
            this.dates = list;
        }
        this.activeDate = cloneDate(this.dates[0]);
        this.focusedDate = cloneDate(candidate);
        this.cdr.markForCheck();
        this.activeDateChange.emit(this.activeDate);
        return cloneDate(candidate);
    }
    canNavigate(action) {
        if (!this.service) {
            return false;
        }
        return this.isListInRange(this.service.datesList(this.move(action), this.getTake(this.skip)));
    }
    setTableMinWidth() {
        const container = this.element.nativeElement;
        const table = container.querySelector('table');
        if (table) {
            const containerWidth = parseFloat(getComputedStyle(container).width);
            this.renderer.setStyle(table, 'min-width', `${containerWidth}px`);
        }
    }
    intlChange() {
        this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        this.cdr.markForCheck();
    }
    clampDate(value) {
        return dateInRange(value, this.min, this.max);
    }
    move(action) {
        return this.service.move(this.dates[0] || this.focusedDate, action);
    }
    isListInRange(list) {
        const lowerBound = this.service.beginningOfPeriod(this.min);
        const upperBound = this.service.beginningOfPeriod(this.service.addToDate(this.max, 1));
        return lowerBound <= list[0] && list[list.length - 1] < upperBound;
    }
    isInDates(value) {
        return this.service.isInArray(value, this.dates);
    }
    getTake(skip) {
        return Math.min(this.total - skip, this.views);
    }
};
HorizontalViewListComponent.ɵfac = function HorizontalViewListComponent_Factory(t) { return new (t || HorizontalViewListComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(WeekNamesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
HorizontalViewListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HorizontalViewListComponent, selectors: [["kendo-calendar-horizontal"]], hostVars: 16, hostBindings: function HorizontalViewListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-calendar-view", ctx.getComponentClass)("k-hstack", ctx.getComponentClass)("k-align-items-start", ctx.getComponentClass)("k-justify-content-center", ctx.getComponentClass)("k-calendar-monthview", ctx.getComponentMonthClass)("k-calendar-yearview", ctx.getComponentYearClass)("k-calendar-decadeview", ctx.getComponentDecadeClass)("k-calendar-centuryview", ctx.getComponentCenturyClass);
    } }, inputs: { activeView: "activeView", isActive: "isActive", min: "min", max: "max", selectedDates: "selectedDates", views: "views", showViewHeader: "showViewHeader", animateNavigation: "animateNavigation", weekNumber: "weekNumber", focusedDate: "focusedDate", cellTemplateRef: "cellTemplateRef", weekNumberTemplateRef: "weekNumberTemplateRef", activeRangeEnd: "activeRangeEnd", cellUID: "cellUID", selectionRange: "selectionRange" }, outputs: { cellClick: "cellClick", weekNumberCellClick: "weekNumberCellClick", cellEnter: "cellEnter", cellLeave: "cellLeave", activeDateChange: "activeDateChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 3, consts: [["tableTemplate", ""], [4, "ngIf"], [4, "kFor", "kForOf"], ["role", "grid", 1, "k-content", "k-calendar-content", "k-calendar-table", 3, "ngClass"], [3, "ngClass", 4, "ngIf"], ["class", "k-calendar-thead", 4, "ngIf"], ["kendoCalendarView", "", "role", "rowgroup", "direction", "horizontal", 1, "k-calendar-tbody", 3, "activeView", "isActive", "min", "max", "cellUID", "focusedDate", "selectedDates", "selectionRange", "activeRangeEnd", "weekNumber", "templateRef", "weekNumberTemplateRef", "viewDate", "cellClick", "weekNumberCellClick", "cellEnter", "cellLeave"], [3, "ngClass"], [1, "k-calendar-thead"], ["role", "row", 1, "k-calendar-tr"], ["class", "k-calendar-th", 4, "ngFor", "ngForOf"], [1, "k-calendar-th"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function HorizontalViewListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, HorizontalViewListComponent_ng_template_0_Template, 4, 16, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, HorizontalViewListComponent_2_Template, 1, 4, null, 1);
        ɵngcc0.ɵɵtemplate(3, HorizontalViewListComponent_3_Template, 1, 4, null, 2);
        ɵngcc0.ɵɵtemplate(4, HorizontalViewListComponent_4_Template, 1, 4, null, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nextAnimationDate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("kForOf", ctx.dates);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.prevAnimationDate);
    } }, directives: function () { return [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgForOf, ViewComponent, ɵngcc2.NgTemplateOutlet, KForOf]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], HorizontalViewListComponent.prototype, "cellTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], HorizontalViewListComponent.prototype, "weekNumberTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], HorizontalViewListComponent.prototype, "activeRangeEnd", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], HorizontalViewListComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], HorizontalViewListComponent.prototype, "cellUID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HorizontalViewListComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HorizontalViewListComponent.prototype, "isActive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HorizontalViewListComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HorizontalViewListComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], HorizontalViewListComponent.prototype, "selectionRange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], HorizontalViewListComponent.prototype, "selectedDates", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], HorizontalViewListComponent.prototype, "views", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HorizontalViewListComponent.prototype, "showViewHeader", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HorizontalViewListComponent.prototype, "animateNavigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], HorizontalViewListComponent.prototype, "weekNumber", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HorizontalViewListComponent.prototype, "cellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HorizontalViewListComponent.prototype, "weekNumberCellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HorizontalViewListComponent.prototype, "cellEnter", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HorizontalViewListComponent.prototype, "cellLeave", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HorizontalViewListComponent.prototype, "activeDateChange", void 0);
__decorate([
    HostBinding("class.k-calendar-view"),
    HostBinding("class.k-hstack"),
    HostBinding("class.k-align-items-start"),
    HostBinding("class.k-justify-content-center"),
    __metadata("design:type", Boolean)
], HorizontalViewListComponent.prototype, "getComponentClass", void 0);
__decorate([
    HostBinding("class.k-calendar-monthview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], HorizontalViewListComponent.prototype, "getComponentMonthClass", null);
__decorate([
    HostBinding("class.k-calendar-yearview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], HorizontalViewListComponent.prototype, "getComponentYearClass", null);
__decorate([
    HostBinding("class.k-calendar-decadeview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], HorizontalViewListComponent.prototype, "getComponentDecadeClass", null);
__decorate([
    HostBinding("class.k-calendar-centuryview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], HorizontalViewListComponent.prototype, "getComponentCenturyClass", null);
HorizontalViewListComponent = __decorate([ __metadata("design:paramtypes", [BusViewService,
        IntlService,
        WeekNamesService,
        ChangeDetectorRef,
        ElementRef,
        Renderer2])
], HorizontalViewListComponent);

const noop$1 = () => false;
const DISABLED_DATES_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/disabled-dates/';
/**
 * @hidden
 */
let DisabledDatesService = class DisabledDatesService {
    /**
     * @hidden
     */
    constructor() {
        /**
         * Emits every time the `isDateDisabled` method changes.
         */
        this.changes = new Subject();
        /**
         * Based on the user-defined `disabledDates` input evaluates if the date is disabled.
         * If not set, returns `false`.
         */
        this.isDateDisabled = noop$1;
    }
    /**
     * Configures the `isDateDisabled` function.
     *
     * * If a function is provided, uses it as-is and passes each date to it for evaluation.
     * The time part is set to `midnight`.
     * * If a `Date[]` is provided, creates a function that checks the targeted date against
     * the listed dates and, if the targeted date is listed, marks it as disabled.
     * * If a `Day[]` is provided, creates a function that evaluates the provided days of the
     * week as disabled.
     */
    initialize(disabledDates) {
        if (typeof disabledDates === 'function') {
            this.isDateDisabled = (date) => disabledDates(getDate(date));
        }
        else if (isNumberArray(disabledDates)) {
            const disabledWeekDays = new Set(disabledDates);
            this.isDateDisabled = (date) => disabledWeekDays.has(date.getDay());
        }
        else if (isDateArray(disabledDates)) {
            const normalizedDisabledDates = new Set(disabledDates.map(date => getDate(date).getTime()));
            this.isDateDisabled = (date) => normalizedDisabledDates.has(getDate(date).getTime());
        }
        else {
            this.isDateDisabled = noop$1;
            this.notifyInvalidInput(disabledDates);
        }
        this.notifyServiceChange();
    }
    notifyInvalidInput(disabledDates) {
        if (isPresent(disabledDates) && isDevMode()) {
            throw new Error(`The 'disabledDates' value should be a function, a Day array or a Date array. Check ${DISABLED_DATES_DOC_LINK} for more information.`);
        }
    }
    notifyServiceChange() {
        this.changes.next();
    }
};
DisabledDatesService.ɵfac = function DisabledDatesService_Factory(t) { return new (t || DisabledDatesService)(); };
DisabledDatesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DisabledDatesService, factory: function (t) { return DisabledDatesService.ɵfac(t); } });

/**
 * @hidden
 */
let HeaderComponent = class HeaderComponent {
    constructor(bus, cdr, localization, intl, disabledDatesService) {
        this.bus = bus;
        this.cdr = cdr;
        this.localization = localization;
        this.intl = intl;
        this.disabledDatesService = disabledDatesService;
        this.navigate = true;
        this.todayAvailable = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.rangeLength = 1;
        this.isPrevDisabled = true;
        this.isNextDisabled = true;
        this.showNavigationButtons = false;
        this.todayButtonClick = new EventEmitter();
        this.prevButtonClick = new EventEmitter();
        this.nextButtonClick = new EventEmitter();
        this.getComponentClass = true;
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));
        this.subscriptions.add(this.localization.changes.subscribe(this.l10nChange.bind(this)));
        this.subscriptions.add(this.disabledDatesService.changes.subscribe(this.setTodayAvailability.bind(this)));
    }
    ngOnChanges(_) {
        const service = this.bus.service(this.activeView);
        if (!service) {
            return;
        }
        this.activeViewValue = CalendarViewEnum[this.activeView];
        this.todayMessage = this.localization.get('today');
        this.setTodayAvailability();
        this.navigate = this.bus.canMoveUp(this.activeView);
        this.title = this.getTitle();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    handleTodayClick() {
        if (!this.todayAvailable) {
            return;
        }
        this.bus.moveToBottom(this.activeView);
        this.todayButtonClick.emit(dateInRange(getToday(), this.min, this.max));
    }
    handleNavigation() {
        if (!this.navigate) {
            return;
        }
        this.bus.moveUp(this.activeView);
    }
    intlChange() {
        if (this.currentDate && this.bus.service(this.activeView)) {
            this.title = this.getTitle();
            this.cdr.markForCheck();
        }
    }
    l10nChange() {
        this.prevButtonTitle = this.localization.get('prevButtonTitle');
        this.nextButtonTitle = this.localization.get('nextButtonTitle');
        this.todayMessage = this.localization.get('today');
        this.cdr.markForCheck();
    }
    getTitle() {
        if (!this.currentDate) {
            return '';
        }
        const service = this.bus.service(this.activeView);
        const take = this.rangeLength - 1;
        const title = service.title(this.currentDate);
        const nextDate = service.addToDate(this.currentDate, take);
        if (take < 1 || !service.isInRange(nextDate, this.min, this.max)) {
            return title;
        }
        return `${title} - ${service.title(nextDate)}`;
    }
    setTodayAvailability() {
        const today = getToday();
        const isTodayInRange = isInRange(today, getDate(this.min), getDate(this.max));
        const isDisabled = this.disabledDatesService.isDateDisabled(today);
        this.todayAvailable = isTodayInRange && !isDisabled;
        this.cdr.markForCheck();
    }
};
HeaderComponent.ɵfac = function HeaderComponent_Factory(t) { return new (t || HeaderComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService)); };
HeaderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HeaderComponent, selectors: [["kendo-calendar-header"]], hostVars: 4, hostBindings: function HeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-calendar-header", ctx.getComponentClass)("k-hstack", ctx.getComponentClass);
    } }, inputs: { min: "min", max: "max", rangeLength: "rangeLength", isPrevDisabled: "isPrevDisabled", isNextDisabled: "isNextDisabled", showNavigationButtons: "showNavigationButtons", activeView: "activeView", currentDate: "currentDate", templateRef: "templateRef" }, outputs: { todayButtonClick: "todayButtonClick", prevButtonClick: "prevButtonClick", nextButtonClick: "nextButtonClick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 23, consts: [[1, "k-button", "k-button-md", "k-rounded-md", "k-button-flat", "k-button-flat-base", "k-calendar-title", 3, "kendoEventsOutsideAngular", "scope"], [3, "ngIf"], [3, "ngIf", "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "k-spacer"], [1, "k-calendar-nav", "k-hstack"], ["class", "k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-prev-view", "type", "button", 3, "disabled", "title", "click", 4, "ngIf"], [1, "k-today", "k-nav-today", 3, "kendoEventsOutsideAngular", "scope"], ["class", "k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-next-view", "type", "button", 3, "disabled", "title", "click", 4, "ngIf"], ["type", "button", 1, "k-button", "k-button-md", "k-rounded-md", "k-button-flat", "k-button-flat-base", "k-icon-button", "k-prev-view", 3, "disabled", "title", "click"], [1, "k-icon", "k-i-arrow-60-left"], ["type", "button", 1, "k-button", "k-button-md", "k-rounded-md", "k-button-flat", "k-button-flat-base", "k-icon-button", "k-next-view", 3, "disabled", "title", "click"], [1, "k-icon", "k-i-arrow-60-right"]], template: function HeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, HeaderComponent_ng_template_1_Template, 1, 1, "ng-template", 1);
        ɵngcc0.ɵɵtemplate(2, HeaderComponent_ng_template_2_Template, 0, 0, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵtemplate(5, HeaderComponent_button_5_Template, 2, 3, "button", 5);
        ɵngcc0.ɵɵelementStart(6, "span", 6);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, HeaderComponent_button_8_Template, 2, 3, "button", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-disabled", !ctx.navigate);
        ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(15, _c2, ctx.handleNavigation))("scope", ctx);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.templateRef);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.templateRef)("ngTemplateOutlet", ctx.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(17, _c3, ctx.title, ctx.activeViewValue, ctx.currentDate));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNavigationButtons);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("k-disabled", !ctx.todayAvailable);
        ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(21, _c2, ctx.handleTodayClick))("scope", ctx);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.todayMessage, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNavigationButtons);
    } }, directives: [ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Number)
], HeaderComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HeaderComponent.prototype, "currentDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HeaderComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], HeaderComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], HeaderComponent.prototype, "rangeLength", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], HeaderComponent.prototype, "templateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HeaderComponent.prototype, "isPrevDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HeaderComponent.prototype, "isNextDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HeaderComponent.prototype, "showNavigationButtons", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HeaderComponent.prototype, "todayButtonClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HeaderComponent.prototype, "prevButtonClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], HeaderComponent.prototype, "nextButtonClick", void 0);
__decorate([
    HostBinding("class.k-calendar-header"),
    HostBinding("class.k-hstack"),
    __metadata("design:type", Boolean)
], HeaderComponent.prototype, "getComponentClass", void 0);
HeaderComponent = __decorate([ __metadata("design:paramtypes", [BusViewService,
        ChangeDetectorRef,
        LocalizationService,
        IntlService,
        DisabledDatesService])
], HeaderComponent);

const KEY_TO_ACTION = {
    '33': Action.PrevView,
    '34': Action.NextView,
    '35': Action.LastInView,
    '36': Action.FirstInView,
    '37': Action.Left,
    '38': Action.Up,
    '39': Action.Right,
    '40': Action.Down,
    'meta+38': Action.UpperView,
    'meta+40': Action.LowerView
};
/**
 * @hidden
 */
let NavigationService = class NavigationService {
    constructor(bus) {
        this.bus = bus;
    }
    action(event) {
        const action = `${event.ctrlKey || event.metaKey ? 'meta+' : ''}${event.keyCode}`;
        return KEY_TO_ACTION[action];
    }
    move(value, action, activeView) {
        const service = this.bus.service(activeView);
        if (!service) {
            return value;
        }
        if (action === Action.UpperView && this.bus.canMoveUp(activeView)) {
            this.bus.moveUp(activeView);
            return value;
        }
        if (action === Action.LowerView && this.bus.canMoveDown(activeView)) {
            this.bus.moveDown(activeView);
            return value;
        }
        return service.move(value, action);
    }
};
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(BusViewService)); };
NavigationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: function (t) { return NavigationService.ɵfac(t); } });
NavigationService = __decorate([ __metadata("design:paramtypes", [BusViewService])
], NavigationService);

/**
 * @hidden
 */
let SelectionService = class SelectionService {
    constructor(bus) {
        this.bus = bus;
    }
    performSelection(args) {
        let { date, modifiers, selectionMode, activeViewEnum, rangePivot } = args;
        let selectedDates = args.selectedDates.slice();
        if (selectionMode === 'multiple') {
            if (modifiers.ctrlKey || modifiers.metaKey) {
                if (this.isDateSelected(selectedDates, date)) {
                    selectedDates = selectedDates.filter(item => !isEqual(item, date));
                }
                else {
                    selectedDates.push(date);
                }
                rangePivot = date;
            }
            else if (modifiers.shiftKey) {
                const [start, end] = sortDates([rangePivot || date, date]);
                selectedDates = this.bus.service(activeViewEnum).dateRange(start, end);
                rangePivot = date > selectedDates[0] ? selectedDates[0] : last(selectedDates);
            }
            else {
                selectedDates = [date];
                rangePivot = date;
            }
        }
        else {
            selectedDates = [date];
            rangePivot = date;
        }
        return { selectedDates, rangePivot };
    }
    isDateSelected(selectedDates, date) {
        return selectedDates.some(item => isEqual(item, date));
    }
};
SelectionService.ɵfac = function SelectionService_Factory(t) { return new (t || SelectionService)(ɵngcc0.ɵɵinject(BusViewService)); };
SelectionService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SelectionService, factory: function (t) { return SelectionService.ɵfac(t); } });
SelectionService = __decorate([ __metadata("design:paramtypes", [BusViewService])
], SelectionService);

/**
 * Used for rendering the cell content of the Calendar. To define the cell template, nest an `<ng-template>` tag
 * with the `kendoCalendarCellTemplate` directive inside the component tag. The template context is set to the
 * current component. To get a reference to the current date, use the `let-date` directive. To provide more details
 * about the current cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * > `kendoCalendarCellTemplate` is equivalent to
 * > [`kendoCalendarMonthCellTemplate`]({% slug api_dateinputs_monthcelltemplatedirective %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar>
 *    <ng-template kendoCalendarCellTemplate let-date>
 *      <span class="custom">{{date.getDate()}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let CellTemplateDirective = class CellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
CellTemplateDirective.ɵfac = function CellTemplateDirective_Factory(t) { return new (t || CellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CellTemplateDirective, selectors: [["", "kendoCalendarCellTemplate", ""]] });
CellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], CellTemplateDirective);

/**
 * Used for rendering the month cell content of the Calendar. To define the month cell template, nest an `<ng-template>` tag
 * with the `kendoCalendarMonthCellTemplate` directive inside the component tag. The template context is set to the current
 * component. To get a reference to the current date, use the `let-date` directive. To provide more details about the current
 * month cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar>
 *    <ng-template kendoCalendarMonthCellTemplate let-context="cellContext">
 *      <span class="custom">{{context.formattedValue}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let MonthCellTemplateDirective = class MonthCellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
MonthCellTemplateDirective.ɵfac = function MonthCellTemplateDirective_Factory(t) { return new (t || MonthCellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MonthCellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MonthCellTemplateDirective, selectors: [["", "kendoCalendarMonthCellTemplate", ""]] });
MonthCellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], MonthCellTemplateDirective);

/**
 * Used for rendering the year cell content of the Calendar. To define the year cell template, nest an
 * `<ng-template>` tag with the `kendoCalendarYearCellTemplate` directive inside the component tag.
 * The template context is set to the current component. To get a reference to the current date, use
 * the `let-date` directive. To provide more details about the current year cell, get a reference to the
 * current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar [activeView]="activeView">
 *    <ng-template kendoCalendarYearCellTemplate let-context="cellContext">
 *      <span class="custom">{{context.formattedValue}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent {
 *  public activeView: CalendarView = 'year';
 * }
 * ```
 */
let YearCellTemplateDirective = class YearCellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
YearCellTemplateDirective.ɵfac = function YearCellTemplateDirective_Factory(t) { return new (t || YearCellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
YearCellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: YearCellTemplateDirective, selectors: [["", "kendoCalendarYearCellTemplate", ""]] });
YearCellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], YearCellTemplateDirective);

/**
 * Used for rendering the decade cell content of the Calendar. To define the decade cell template, nest an `<ng-template>`
 * tag with the `kendoCalendarDecadeCellTemplate` directive inside the component tag. The template context is set to the
 * current component. To get a reference to the current date, use the `let-date` directive. To provide more details about
 * the current decade cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar [activeView]="activeView">
 *    <ng-template kendoCalendarDecadeCellTemplate let-context="cellContext">
 *      <span class="custom">{{context.formattedValue}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent {
 *  public activeView: CalendarView = 'decade';
 * }
 * ```
 */
let DecadeCellTemplateDirective = class DecadeCellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
DecadeCellTemplateDirective.ɵfac = function DecadeCellTemplateDirective_Factory(t) { return new (t || DecadeCellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
DecadeCellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DecadeCellTemplateDirective, selectors: [["", "kendoCalendarDecadeCellTemplate", ""]] });
DecadeCellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], DecadeCellTemplateDirective);

/**
 * Used for rendering the century cell content of the Calendar. To define the century cell template, nest an `<ng-template>`
 * tag with the `kendoCalendarCenturyCellTemplate` directive inside the component tag. The template context is set to the
 * current component. To get a reference to the current date, use the `let-date` directive. To provide more details about
 * the current century cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar [activeView]="activeView">
 *    <ng-template kendoCalendarCenturyCellTemplate let-context="cellContext">
 *      <span class="custom">{{context.formattedValue}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent {
 *  public activeView: CalendarView = 'century';
 * }
 * ```
 */
let CenturyCellTemplateDirective = class CenturyCellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
CenturyCellTemplateDirective.ɵfac = function CenturyCellTemplateDirective_Factory(t) { return new (t || CenturyCellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CenturyCellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CenturyCellTemplateDirective, selectors: [["", "kendoCalendarCenturyCellTemplate", ""]] });
CenturyCellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], CenturyCellTemplateDirective);

/**
 * Used for rendering the week number cell content in the month view of the Calendar. To define the month week number cell template,
 * nest an `<ng-template>` tag with the `kendoCalendarWeekNumberCellTemplate` directive inside the component tag. The template
 * context is set to the current component. To get a reference to the current date, use the `let-date` directive. To provide more
 * details about the current week number cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar [weekNumber]="true">
 *    <ng-template kendoCalendarWeekNumberCellTemplate let-context="cellContext">
 *      <span class="custom">{{context.formattedValue}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let WeekNumberCellTemplateDirective = class WeekNumberCellTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
WeekNumberCellTemplateDirective.ɵfac = function WeekNumberCellTemplateDirective_Factory(t) { return new (t || WeekNumberCellTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
WeekNumberCellTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WeekNumberCellTemplateDirective, selectors: [["", "kendoCalendarWeekNumberCellTemplate", ""]] });
WeekNumberCellTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], WeekNumberCellTemplateDirective);

/**
 * Used for rendering the header title of the Calendar. To define the header title template, nest an `<ng-template>` tag
 * with the `kendoCalendarHeaderTitleTemplate` directive inside the component tag. The template context is set to the
 * current component. To get a reference to the current title, use the `let-title` directive. To provide more details about
 * the current title, get a reference to the current `date` by using the `let-date` directive or get a reference to the
 * current active view  by using the `let-activeView` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar>
 *    <ng-template kendoCalendarHeaderTitleTemplate let-title>
 *      <span class="custom">{{title}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let HeaderTitleTemplateDirective = class HeaderTitleTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
HeaderTitleTemplateDirective.ɵfac = function HeaderTitleTemplateDirective_Factory(t) { return new (t || HeaderTitleTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
HeaderTitleTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderTitleTemplateDirective, selectors: [["", "kendoCalendarHeaderTitleTemplate", ""]] });
HeaderTitleTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], HeaderTitleTemplateDirective);

/**
 * @hidden
 */
const minValidator = (minValue) => {
    return (control) => {
        const err = {
            minError: {
                minValue: minValue,
                value: control.value
            }
        };
        if (!minValue || !control.value) {
            return null;
        }
        return control.value < minValue ? err : null;
    };
};

/**
 * @hidden
 */
const maxValidator = (maxValue) => {
    return (control) => {
        const err = {
            maxError: {
                maxValue: maxValue,
                value: control.value
            }
        };
        if (!maxValue || !control.value) {
            return null;
        }
        return control.value > maxValue ? err : null;
    };
};

const noop$2 = () => null;
/**
 * @hidden
 */
const disabledDatesRangeValidator = (isDateDisabled) => {
    if (!isPresent(isDateDisabled)) {
        return noop$2;
    }
    return (selectedRange) => {
        const isRangeComplete = isPresent(selectedRange) && isPresent(selectedRange.start) && isPresent(selectedRange.end);
        if (!isRangeComplete || selectedRange.start > selectedRange.end) {
            return null;
        }
        const disabledDates = disabledDatesInRange(selectedRange.start, selectedRange.end, isDateDisabled);
        const error = {
            disabledDatesInRange: disabledDates
        };
        return disabledDates.length ? error : null;
    };
};

/**
 * @hidden
 */
class PickerService {
    constructor() {
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.sameDateSelected = new EventEmitter();
        this.dateCompletenessChange = new EventEmitter();
    }
}
PickerService.ɵfac = function PickerService_Factory(t) { return new (t || PickerService)(); };
PickerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PickerService, factory: PickerService.ɵfac });

const BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';
const TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';
const MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';
const MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';
const VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';
/**
 * @hidden
 */
const RANGE_CALENDAR_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MultiViewCalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
const RANGE_CALENDAR_RANGE_VALIDATORS = {
    multi: true,
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => MultiViewCalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * Represents the Kendo UI MultiViewCalendar component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiviewcalendar></kendo-multiviewcalendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let MultiViewCalendarComponent = class MultiViewCalendarComponent {
    constructor(bus, element, navigator, renderer, cdr, zone, disabledDatesService, selectionService, pickerService) {
        this.bus = bus;
        this.element = element;
        this.navigator = navigator;
        this.renderer = renderer;
        this.cdr = cdr;
        this.zone = zone;
        this.disabledDatesService = disabledDatesService;
        this.selectionService = selectionService;
        this.pickerService = pickerService;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = false;
        /**
         * Determines whether the built-in validator for disabled
         * date ranges is enforced when validating a form
         * ([see example]({% slug disabled_dates_multiviewcalendar %}#toc-validation)).
         */
        this.disabledDatesRangeValidation = false;
        /**
         * Sets the Calendar selection mode
         * ([see example]({% slug multiple_selection_multiviewcalendar %})).
         *
         * The available values are:
         * * `single` (default)
         * * `multiple`
         */
        this.selection = 'single';
        /**
         * Sets or gets the `disabled` property of the Calendar and
         * determines whether the component is active
         * ([see example]({% slug disabled_multiviewcalendar %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the `tabindex` property of the Calendar. Based on the
         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,
         * it determines whether the component is focusable.
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.isActive = false;
        /**
         * @hidden
         */
        this.isHeaderActive = false;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug activeview_multiviewcalendar %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the bottommost view, to which the user can navigate
         * ([see example]({% slug dates_multiviewcalendar %}#toc-partial-dates)).
         */
        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the topmost view, to which the user can navigate.
         */
        this.topView = CalendarViewEnum[CalendarViewEnum.century];
        /**
         * Determines whether to display a header for every view (for example the month name).
         */
        this.showViewHeader = false;
        /**
         * Determines whether to enable animation when navigating to previous/next view.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view
         * ([see example]({% slug weeknumcolumn_multiviewcalendar %})).
         */
        this.weekNumber = false;
        /**
         * Sets or gets the `views` property of the Calendar and
         * defines the number of rendered months.
         */
        this.views = 2;
        /**
         * Fires when the active view is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Fires when navigating in the currently active view
         * ([more information and example]({% slug events_multiviewcalendar %})).
         */
        this.navigate = new EventEmitter();
        /**
         * Fires when a view cell is entered
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellEnter = new EventEmitter();
        /**
         * Fires when a view cell is leaved
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellLeave = new EventEmitter();
        /**
         * Fires when the value is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.blurEvent = new EventEmitter();
        this.cellUID = guid();
        this.isHovered = false;
        this.isPrevDisabled = true;
        this.isNextDisabled = true;
        this.prevView = Action.PrevView;
        this.nextView = Action.NextView;
        this.selectedDates = [];
        this._min = new Date(MIN_DATE);
        this._max = new Date(MAX_DATE);
        this._focusedDate = getToday();
        this.resolvedPromise = Promise.resolve();
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.disabledDatesRangeValidateFn = noop;
        this.subscriptions = new Subscription();
        this.setClasses(element.nativeElement);
    }
    /**
     * Sets or gets the `focusedDate` property of the Calendar and
     * defines the focused date of the component
     * ([see example]({% slug dates_multiviewcalendar %}#toc-focused-dates)).
     *
     * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.
     */
    set focusedDate(focusedDate) {
        this._focusedDate = focusedDate || getToday();
    }
    get focusedDate() {
        return this._focusedDate;
    }
    /**
     * Sets or gets the `min` property of the Calendar and
     * defines the minimum allowed date value.
     * By default, the `min` value is `1900-1-1`.
     */
    set min(min) {
        this._min = min || new Date(MIN_DATE);
    }
    get min() {
        return this._min;
    }
    /**
     * Sets or gets the `max` property of the Calendar and
     * defines the maximum allowed date value.
     * By default, the `max` value is `2099-12-31`.
     */
    set max(max) {
        this._max = max || new Date(MAX_DATE);
    }
    get max() {
        return this._max;
    }
    /**
     * Sets or gets the `value` property of the Calendar and defines the selected value of the component.
     *
     * > The `value` has to be a valid
     * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date)
     * instance when in `single` selection mode or an array of valid JavaScript Date instances when in `multiple` selection mode.
     */
    get value() {
        return this._value;
    }
    set value(candidate) {
        this.verifyValue(candidate);
        this._value = Array.isArray(candidate) ?
            candidate.filter(date => isPresent(date)).map(element => cloneDate(element)) :
            cloneDate(candidate);
        const selection = [].concat(candidate).filter(date => isPresent(date)).map(date => cloneDate(date));
        if (!areDatesEqual(selection, this.selectedDates)) {
            const lastSelected = last(selection);
            this.rangePivot = cloneDate(lastSelected);
            this.focusedDate = cloneDate(lastSelected) || this.focusedDate;
            this.selectedDates = selection;
        }
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Sets the dates of the MultiViewCalendar that will be disabled
     * ([see example]({% slug disabled_dates_multiviewcalendar %})).
     */
    set disabledDates(value) {
        this.disabledDatesService.initialize(value);
    }
    /**
     * Sets or gets the `selectionRange` property of the Calendar and
     * defines the selection range of the component
     * ([see example]({% slug dates_multiviewcalendar %}#toc-selection-range)).
     */
    set selectionRange(range$$1) {
        this._selectionRange = range$$1;
        if (this.disabledDatesRangeValidation) {
            this.onValidatorChange();
        }
    }
    get selectionRange() {
        return this._selectionRange;
    }
    /**
     * @hidden
     *
     * Defines the template for each cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set cellTemplateRef(template) {
        this._cellTemplateRef = template;
    }
    get cellTemplateRef() {
        return this._cellTemplateRef || this.cellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each month cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set monthCellTemplateRef(template) {
        this._monthCellTemplateRef = template;
    }
    get monthCellTemplateRef() {
        return this._monthCellTemplateRef || this.monthCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each year cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set yearCellTemplateRef(template) {
        this._yearCellTemplateRef = template;
    }
    get yearCellTemplateRef() {
        return this._yearCellTemplateRef || this.yearCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each decade cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set decadeCellTemplateRef(template) {
        this._decadeCellTemplateRef = template;
    }
    get decadeCellTemplateRef() {
        return this._decadeCellTemplateRef || this.decadeCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each century cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set centuryCellTemplateRef(template) {
        this._centuryCellTemplateRef = template;
    }
    get centuryCellTemplateRef() {
        return this._centuryCellTemplateRef || this.centuryCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for the week cell.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set weekNumberTemplateRef(template) {
        this._weekNumberTemplateRef = template;
    }
    get weekNumberTemplateRef() {
        return this._weekNumberTemplateRef || this.weekNumberTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for the header title.
     * Takes precedence over nested templates in the KendoMultiViewCalendar tag.
     */
    set headerTitleTemplateRef(template) {
        this._headerTitleTemplateRef = template;
    }
    get headerTitleTemplateRef() {
        return this._headerTitleTemplateRef || this.headerTitleTemplate;
    }
    get activeViewEnum() {
        const activeView = CalendarViewEnum[this.activeView];
        return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;
    }
    get bottomViewEnum() {
        return CalendarViewEnum[this.bottomView];
    }
    get topViewEnum() {
        return CalendarViewEnum[this.topView];
    }
    get widgetId() {
        return this.id;
    }
    get calendarTabIndex() {
        return this.disabled ? undefined : this.tabIndex;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get ariaActivedescendant() {
        return this.cellUID + this.focusedDate.getTime();
    }
    /**
     * @hidden
     */
    handleFocusout(event) {
        const relatedTarget = event.relatedTarget;
        if (!this.element.nativeElement.contains(relatedTarget)) {
            this.blurEvent.emit(event);
            this.onControlTouched();
        }
        this.isActive = false;
        this.isHovered = false; //ensure that hovered is also not active
        this.isHeaderActive = this.headerElement.nativeElement.contains(relatedTarget);
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isActive = true;
        this.isHeaderActive = false;
    }
    /**
     * @hidden
     */
    handleMouseEnter() {
        this.isHovered = true;
    }
    /**
     * @hidden
     */
    handleMouseLeave() {
        this.isHovered = false;
    }
    /**
     * @hidden
     */
    handleMousedown(event) {
        event.preventDefault();
    }
    /**
     * @hidden
     */
    handleClick() {
        if (this.isActive) {
            return;
        }
        this.focus();
    }
    /**
     * @hidden
     */
    keydown(event) {
        if (this.isHeaderActive) {
            return;
        }
        if (event.keyCode === Keys.Enter) {
            if (isPresent(this.pickerService)) {
                event.preventDefault(); // Don't submit form from Datepicker popup
            }
            this.performSelection(this.focusedDate, event);
        }
        const candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(event), this.activeViewEnum), this.min, this.max);
        if (isEqual(this.focusedDate, candidate)) {
            return;
        }
        this.focusedDate = candidate;
        event.preventDefault();
        const isSameView = this.bus.service(this.activeViewEnum).isInArray(this.focusedDate, this.viewList.dates);
        if (!isSameView) {
            this.emitNavigate(this.focusedDate);
        }
    }
    ngOnInit() {
        this.subscriptions.add(this.bus.viewChanged.subscribe(({ view }) => {
            this.activeView = CalendarViewEnum[view];
            this.activeViewChange.emit(this.activeView);
            this.cdr.detectChanges();
            this.updateButtonState();
        }));
    }
    ngOnChanges(changes) {
        this.verifyChanges();
        this.bus.configure(this.bottomViewEnum, this.topViewEnum);
        if (hasExistingValue(changes, 'focusedDate')) {
            const focusedDate = changes.focusedDate.currentValue;
            this.focusedDate = dateInRange(focusedDate, this.min, this.max);
        }
        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDates || changes.disabledDatesRangeValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.disabledDatesRangeValidateFn = this.disabledDatesRangeValidation ? disabledDatesRangeValidator(this.disabledDatesService.isDateDisabled) : noop;
            this.onValidatorChange();
        }
        if (changes.min || changes.max || changes.focusedDate || changes.activeView) {
            this.updateButtonState();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    ngAfterViewInit() {
        this.updateButtonState();
    }
    /**
     * Focuses the host element of the Calendar.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="multiviewcalendar.focus()">Focus calendar</button>
     *  <kendo-multiviewcalendar #multiviewcalendar></kendo-multiviewcalendar>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.focus();
    }
    /**
     * Blurs the Calendar component.
     */
    blur() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.blur();
    }
    /**
     * @hidden
     */
    handleHeaderFocus() {
        this.isHeaderActive = true;
    }
    /**
     * @hidden
     */
    handleDateChange(args) {
        const canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);
        const availableDates = args.selectedDates.filter(date => !this.disabledDatesService.isDateDisabled(date));
        this.focusedDate = args.focusedDate || this.focusedDate;
        const sameDates = !canNavigateDown && areDatesEqual(availableDates, this.selectedDates);
        if (this.disabled || sameDates) {
            return;
        }
        if (canNavigateDown) {
            this.bus.moveDown(this.activeViewEnum);
            return;
        }
        if (this.disabledDatesService.isDateDisabled(this.focusedDate)) {
            return;
        }
        this.selectedDates = availableDates.map(date => cloneDate(date));
        this.value = this.parseSelectionToValue(availableDates);
        this.onControlChange(this.parseSelectionToValue(availableDates));
        this.valueChange.emit(this.parseSelectionToValue(availableDates));
    }
    /**
     * @hidden
     */
    handleTodayButtonClick(args) {
        const todayDate = args.focusedDate;
        const isSameView = this.bus.service(this.activeViewEnum).isInArray(todayDate, this.viewList.dates);
        const isBottomView = !this.bus.canMoveDown(this.activeViewEnum);
        if (!isSameView && isBottomView) {
            this.emitNavigate(todayDate);
        }
        this.handleDateChange(args);
    }
    /**
     * @hidden
     */
    setActiveDate(date) {
        this.activeDate = cloneDate(date);
        this.cdr.detectChanges();
    }
    /**
     * @hidden
     */
    writeValue(candidate) {
        this.verifyValue(candidate);
        this.value = candidate;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesRangeValidateFn(this.selectionRange);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @hidden
     */
    activeCellTemplate() {
        switch (this.activeViewEnum) {
            case CalendarViewEnum.month:
                return this.monthCellTemplateRef || this.cellTemplateRef;
            case CalendarViewEnum.year:
                return this.yearCellTemplateRef;
            case CalendarViewEnum.decade:
                return this.decadeCellTemplateRef;
            case CalendarViewEnum.century:
                return this.centuryCellTemplateRef;
            default:
                return null;
        }
    }
    /**
     * @hidden
     */
    navigateView(action) {
        this.focusedDate = this.viewList.navigate(action);
        this.updateButtonState();
        this.emitNavigate(this.focusedDate);
    }
    /**
     * @hidden
     */
    emitNavigate(focusedDate) {
        const activeView = CalendarViewEnum[this.activeViewEnum];
        this.navigate.emit({ activeView, focusedDate });
    }
    /**
     * @hidden
     */
    emitCellEvent(emitter, args) {
        if (hasObservers(emitter)) {
            this.zone.run(() => {
                emitter.emit(args);
            });
        }
    }
    /**
     * @hidden
     */
    handleCellClick({ date, modifiers }) {
        this.performSelection(date, modifiers);
        const isSameView = this.bus.service(this.activeViewEnum).isInArray(this.focusedDate, this.viewList.dates);
        if (!isSameView) {
            this.emitNavigate(this.focusedDate);
        }
    }
    /**
     * @hidden
     */
    handleWeekNumberClick(dates) {
        if (this.selection === 'single') {
            return;
        }
        this.zone.run(() => {
            this.handleDateChange({
                selectedDates: dates,
                focusedDate: last(dates)
            });
        });
    }
    setClasses(element) {
        this.renderer.addClass(element, 'k-widget');
        this.renderer.addClass(element, 'k-calendar');
        this.renderer.addClass(element, 'k-calendar-range');
    }
    verifyChanges() {
        if (!isDevMode()) {
            return;
        }
        if (this.min > this.max) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK} and ${MAX_DOC_LINK}.`);
        }
        if (this.bottomViewEnum > this.topViewEnum) {
            throw new Error(`The topView should be greater than bottomView. See ${BOTTOM_VIEW_DOC_LINK} and ${TOP_VIEW_DOC_LINK}.`);
        }
    }
    verifyValue(candidate) {
        if (!isDevMode()) {
            return;
        }
        if (this.selection === 'single' && candidate && !(candidate instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK} for possible resolution.`);
        }
        else if (this.selection === 'multiple' && candidate && Array.isArray(candidate)) {
            const onlyDates = candidate.every(value => value instanceof Date);
            if (!onlyDates) {
                throw new Error(`The 'value' should be an array of valid JavaScript Date instances. Check ${VALUE_DOC_LINK} for possible resolution.`);
            }
        }
    }
    updateButtonState() {
        this.resolvedPromise.then(() => {
            this.isPrevDisabled = !this.viewList.canNavigate(this.prevView);
            this.isNextDisabled = !this.viewList.canNavigate(this.nextView);
            this.cdr.markForCheck();
        });
    }
    parseSelectionToValue(selection) {
        selection = selection || [];
        return this.selection === 'single' ? cloneDate(last(selection)) : selection.map(date => cloneDate(date));
    }
    performSelection(date, selectionModifiers) {
        const selection = this.selectionService.performSelection({
            date: date,
            modifiers: selectionModifiers,
            selectionMode: this.selection,
            activeViewEnum: this.activeViewEnum,
            rangePivot: this.rangePivot,
            selectedDates: this.selectedDates
        });
        this.rangePivot = selection.rangePivot;
        this.handleDateChange({
            selectedDates: selection.selectedDates,
            focusedDate: date
        });
    }
};
MultiViewCalendarComponent.ɵfac = function MultiViewCalendarComponent_Factory(t) { return new (t || MultiViewCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(PickerService, 8)); };
MultiViewCalendarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MultiViewCalendarComponent, selectors: [["kendo-multiviewcalendar"]], contentQueries: function MultiViewCalendarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MonthCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, YearCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DecadeCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CenturyCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, WeekNumberCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTitleTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.decadeCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.centuryCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.weekNumberTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTitleTemplate = _t.first);
    } }, viewQuery: function MultiViewCalendarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(HeaderComponent, 5, ElementRef);
        ɵngcc0.ɵɵviewQuery(HorizontalViewListComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewList = _t.first);
    } }, hostVars: 6, hostBindings: function MultiViewCalendarComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function MultiViewCalendarComponent_focusout_HostBindingHandler($event) { return ctx.handleFocusout($event); })("focus", function MultiViewCalendarComponent_focus_HostBindingHandler() { return ctx.handleFocus(); })("mouseenter", function MultiViewCalendarComponent_mouseenter_HostBindingHandler() { return ctx.handleMouseEnter(); })("mouseleave", function MultiViewCalendarComponent_mouseleave_HostBindingHandler() { return ctx.handleMouseLeave(); })("mousedown", function MultiViewCalendarComponent_mousedown_HostBindingHandler($event) { return ctx.handleMousedown($event); })("click", function MultiViewCalendarComponent_click_HostBindingHandler() { return ctx.handleClick(); })("keydown", function MultiViewCalendarComponent_keydown_HostBindingHandler($event) { return ctx.keydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.widgetId)("tabindex", ctx.calendarTabIndex)("aria-disabled", ctx.ariaDisabled)("aria-activedescendant", ctx.ariaActivedescendant);
        ɵngcc0.ɵɵclassProp("k-disabled", ctx.ariaDisabled);
    } }, inputs: { id: "id", rangeValidation: "rangeValidation", disabledDatesRangeValidation: "disabledDatesRangeValidation", selection: "selection", disabled: "disabled", tabindex: "tabindex", isActive: "isActive", activeView: "activeView", bottomView: "bottomView", topView: "topView", showViewHeader: "showViewHeader", animateNavigation: "animateNavigation", weekNumber: "weekNumber", views: "views", focusedDate: "focusedDate", min: "min", max: "max", value: "value", tabIndex: "tabIndex", disabledDates: "disabledDates", selectionRange: "selectionRange", cellTemplateRef: ["cellTemplate", "cellTemplateRef"], monthCellTemplateRef: ["monthCellTemplate", "monthCellTemplateRef"], yearCellTemplateRef: ["yearCellTemplate", "yearCellTemplateRef"], decadeCellTemplateRef: ["decadeCellTemplate", "decadeCellTemplateRef"], centuryCellTemplateRef: ["centuryCellTemplate", "centuryCellTemplateRef"], weekNumberTemplateRef: ["weekNumberTemplate", "weekNumberTemplateRef"], headerTitleTemplateRef: ["headerTitleTemplate", "headerTitleTemplateRef"], activeRangeEnd: "activeRangeEnd" }, outputs: { activeViewChange: "activeViewChange", navigate: "navigate", cellEnter: "cellEnter", cellLeave: "cellLeave", valueChange: "valueChange", blurEvent: "blur" }, exportAs: ["kendo-multiviewcalendar"], features: [ɵngcc0.ɵɵProvidersFeature([
            BusViewService,
            RANGE_CALENDAR_VALUE_ACCESSOR,
            RANGE_CALENDAR_RANGE_VALIDATORS,
            LocalizationService,
            DisabledDatesService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.multiviewcalendar'
            },
            NavigationService,
            SelectionService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 28, consts: function () { let i18n_4; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the today button in the calendar header
         * @meaning kendo.multiviewcalendar.today
         */
        const MSG_EXTERNAL_7780927771207785084$$DIST_FESM2015_INDEX_JS_5 = goog.getMsg("Today");
        i18n_4 = MSG_EXTERNAL_7780927771207785084$$DIST_FESM2015_INDEX_JS_5;
    }
    else {
        i18n_4 = $localize `:kendo.multiviewcalendar.today|The label for the today button in the calendar header␟c237cef31a55d762ecfdcac701d283313f30bbfc␟7780927771207785084:Today`;
    } let i18n_6; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the previous button in the Multiview calendar
         * @meaning kendo.multiviewcalendar.prevButtonTitle
         */
        const MSG_EXTERNAL_9101635325676663492$$DIST_FESM2015_INDEX_JS_7 = goog.getMsg("Navigate to previous view");
        i18n_6 = MSG_EXTERNAL_9101635325676663492$$DIST_FESM2015_INDEX_JS_7;
    }
    else {
        i18n_6 = $localize `:kendo.multiviewcalendar.prevButtonTitle|The label for the previous button in the Multiview calendar␟e783e2af4828224b846fa92148ea1cc52b21bb13␟9101635325676663492:Navigate to previous view`;
    } let i18n_8; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the next button in the Multiview calendar
         * @meaning kendo.multiviewcalendar.nextButtonTitle
         */
        const MSG_EXTERNAL_3994336778698343633$$DIST_FESM2015_INDEX_JS_9 = goog.getMsg("Navigate to next view");
        i18n_8 = MSG_EXTERNAL_3994336778698343633$$DIST_FESM2015_INDEX_JS_9;
    }
    else {
        i18n_8 = $localize `:kendo.multiviewcalendar.nextButtonTitle|The label for the next button in the Multiview calendar␟3e3a529a242f39d22f841c3bd8045ec75b696b7a␟3994336778698343633:Navigate to next view`;
    } return [["kendoMultiViewCalendarLocalizedMessages", "", "today", i18n_4, "prevButtonTitle", i18n_6, "nextButtonTitle", i18n_8], [3, "activeView", "currentDate", "min", "max", "rangeLength", "templateRef", "isPrevDisabled", "isNextDisabled", "showNavigationButtons", "kendoEventsOutsideAngular", "scope", "todayButtonClick", "prevButtonClick", "nextButtonClick"], [3, "activeView", "isActive", "cellTemplateRef", "weekNumberTemplateRef", "cellUID", "views", "min", "max", "focusedDate", "animateNavigation", "showViewHeader", "weekNumber", "activeRangeEnd", "selectionRange", "selectedDates", "valueChange", "cellClick", "weekNumberCellClick", "cellEnter", "cellLeave", "activeDateChange"]]; }, template: function MultiViewCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementStart(1, "kendo-calendar-header", 1);
        ɵngcc0.ɵɵlistener("todayButtonClick", function MultiViewCalendarComponent_Template_kendo_calendar_header_todayButtonClick_1_listener($event) { return ctx.handleTodayButtonClick({ selectedDates: [$event], focusedDate: $event }); })("prevButtonClick", function MultiViewCalendarComponent_Template_kendo_calendar_header_prevButtonClick_1_listener() { return ctx.navigateView(ctx.prevView); })("nextButtonClick", function MultiViewCalendarComponent_Template_kendo_calendar_header_nextButtonClick_1_listener() { return ctx.navigateView(ctx.nextView); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "kendo-calendar-horizontal", 2);
        ɵngcc0.ɵɵlistener("valueChange", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_valueChange_2_listener($event) { return ctx.handleDateChange($event); })("cellClick", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_cellClick_2_listener($event) { return ctx.handleCellClick($event); })("weekNumberCellClick", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_weekNumberCellClick_2_listener($event) { return ctx.handleWeekNumberClick($event); })("cellEnter", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_cellEnter_2_listener($event) { return ctx.emitCellEvent(ctx.cellEnter, $event); })("cellLeave", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_cellLeave_2_listener($event) { return ctx.emitCellEvent(ctx.cellLeave, $event); })("activeDateChange", function MultiViewCalendarComponent_Template_kendo_calendar_horizontal_activeDateChange_2_listener($event) { return ctx.setActiveDate($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_13_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("activeView", ctx.activeViewEnum)("currentDate", ctx.activeDate)("min", ctx.min)("max", ctx.max)("rangeLength", ctx.views)("templateRef", ctx.headerTitleTemplateRef == null ? null : ctx.headerTitleTemplateRef.templateRef)("isPrevDisabled", ctx.isPrevDisabled)("isNextDisabled", ctx.isNextDisabled)("showNavigationButtons", true)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(26, _c10, ctx.handleHeaderFocus))("scope", ctx);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("activeView", ctx.activeViewEnum)("isActive", ctx.isActive || ctx.isHovered && !ctx.isHeaderActive)("cellTemplateRef", (tmp_13_0 = ctx.activeCellTemplate()) == null ? null : tmp_13_0.templateRef)("weekNumberTemplateRef", ctx.weekNumberTemplateRef == null ? null : ctx.weekNumberTemplateRef.templateRef)("cellUID", ctx.cellUID)("views", ctx.views)("min", ctx.min)("max", ctx.max)("focusedDate", ctx.focusedDate)("animateNavigation", ctx.animateNavigation)("showViewHeader", ctx.showViewHeader)("weekNumber", ctx.weekNumber)("activeRangeEnd", ctx.activeRangeEnd)("selectionRange", ctx.selectionRange)("selectedDates", ctx.selectedDates);
    } }, directives: function () { return [MultiViewCalendarLocalizedMessagesDirective, HeaderComponent, ɵngcc4.EventsOutsideAngularDirective, HorizontalViewListComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "focusedDate", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "min", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "max", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "disabledDatesRangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "selection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], MultiViewCalendarComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MultiViewCalendarComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "isActive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "disabledDates", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "bottomView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "topView", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "showViewHeader", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "animateNavigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "weekNumber", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "activeRangeEnd", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "selectionRange", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], MultiViewCalendarComponent.prototype, "views", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "activeViewChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "navigate", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "cellEnter", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "cellLeave", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "valueChange", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "blurEvent", void 0);
__decorate([
    ContentChild(CellTemplateDirective, { static: false }),
    __metadata("design:type", CellTemplateDirective)
], MultiViewCalendarComponent.prototype, "cellTemplate", void 0);
__decorate([
    Input('cellTemplate'),
    __metadata("design:type", CellTemplateDirective),
    __metadata("design:paramtypes", [CellTemplateDirective])
], MultiViewCalendarComponent.prototype, "cellTemplateRef", null);
__decorate([
    ContentChild(MonthCellTemplateDirective, { static: false }),
    __metadata("design:type", MonthCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "monthCellTemplate", void 0);
__decorate([
    Input('monthCellTemplate'),
    __metadata("design:type", MonthCellTemplateDirective),
    __metadata("design:paramtypes", [MonthCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "monthCellTemplateRef", null);
__decorate([
    ContentChild(YearCellTemplateDirective, { static: false }),
    __metadata("design:type", YearCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "yearCellTemplate", void 0);
__decorate([
    Input('yearCellTemplate'),
    __metadata("design:type", YearCellTemplateDirective),
    __metadata("design:paramtypes", [YearCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "yearCellTemplateRef", null);
__decorate([
    ContentChild(DecadeCellTemplateDirective, { static: false }),
    __metadata("design:type", DecadeCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "decadeCellTemplate", void 0);
__decorate([
    Input('decadeCellTemplate'),
    __metadata("design:type", DecadeCellTemplateDirective),
    __metadata("design:paramtypes", [DecadeCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "decadeCellTemplateRef", null);
__decorate([
    ContentChild(CenturyCellTemplateDirective, { static: false }),
    __metadata("design:type", CenturyCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "centuryCellTemplate", void 0);
__decorate([
    Input('centuryCellTemplate'),
    __metadata("design:type", CenturyCellTemplateDirective),
    __metadata("design:paramtypes", [CenturyCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "centuryCellTemplateRef", null);
__decorate([
    ContentChild(WeekNumberCellTemplateDirective, { static: false }),
    __metadata("design:type", WeekNumberCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "weekNumberTemplate", void 0);
__decorate([
    Input('weekNumberTemplate'),
    __metadata("design:type", WeekNumberCellTemplateDirective),
    __metadata("design:paramtypes", [WeekNumberCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "weekNumberTemplateRef", null);
__decorate([
    ContentChild(HeaderTitleTemplateDirective, { static: false }),
    __metadata("design:type", HeaderTitleTemplateDirective)
], MultiViewCalendarComponent.prototype, "headerTitleTemplate", void 0);
__decorate([
    Input('headerTitleTemplate'),
    __metadata("design:type", HeaderTitleTemplateDirective),
    __metadata("design:paramtypes", [HeaderTitleTemplateDirective])
], MultiViewCalendarComponent.prototype, "headerTitleTemplateRef", null);
__decorate([
    ViewChild(HeaderComponent, { static: false, read: ElementRef }),
    __metadata("design:type", ElementRef)
], MultiViewCalendarComponent.prototype, "headerElement", void 0);
__decorate([
    ViewChild(HorizontalViewListComponent, { static: false }),
    __metadata("design:type", HorizontalViewListComponent)
], MultiViewCalendarComponent.prototype, "viewList", void 0);
__decorate([
    HostBinding('attr.id'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "widgetId", null);
__decorate([
    HostBinding('attr.tabindex'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "calendarTabIndex", null);
__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "ariaDisabled", null);
__decorate([
    HostBinding('attr.aria-activedescendant'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "ariaActivedescendant", null);
__decorate([
    HostListener('focusout', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleFocusout", null);
__decorate([
    HostListener("focus"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleFocus", null);
__decorate([
    HostListener("mouseenter"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMouseEnter", null);
__decorate([
    HostListener("mouseleave"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMouseLeave", null);
__decorate([
    HostListener("mousedown", ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMousedown", null);
__decorate([
    HostListener("click"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleClick", null);
__decorate([
    HostListener("keydown", ["$event"]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "keydown", null);
MultiViewCalendarComponent = __decorate([ __param(8, Optional()),
    __metadata("design:paramtypes", [BusViewService,
        ElementRef,
        NavigationService,
        Renderer2,
        ChangeDetectorRef,
        NgZone,
        DisabledDatesService,
        SelectionService,
        PickerService])
], MultiViewCalendarComponent);

const div = domContainerFactory('div');
const ul = domContainerFactory('ul');
const li = domContainerFactory('li');
const td = domContainerFactory('td');
const th = domContainerFactory('th');
const tr = domContainerFactory('tr');
const tbody = domContainerFactory('tbody');
const thead = domContainerFactory('thead');
const table = domContainerFactory('table');
const monthHeader = () => (div(`
            <span class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-calendar-title">March 2017</span>
            <span class="k-spacer"></span>
            <span class="k-calendar-nav k-hstack">
                <span class="k-today k-nav-today">TODAY</span>
            </span>
        `, 'k-calendar-header k-hstack'));
const monthWeekHeader = () => (table([
    thead([
        tr([th('MO', 'k-calendar-th')], 'k-calendar-tr')
    ], 'k-calendar-thead')
], 'k-calendar-weekdays k-calendar-table'));
const repeat = (count, mapper) => new Array(count).fill('1').map(mapper);
const content = (rows, cells = 1) => (table([
    tbody([tr([th('1', 'k-calendar-th')], 'k-calendar-tr')].concat(repeat(rows, () => tr(repeat(cells, c => td(`<span class="k-link">${c}</span>`, 'k-calendar-td')), 'k-calendar-tr'))), 'k-calendar-tbody')
], 'k-calendar-table'));
const scrollable = (children) => div(children, 'k-flex k-content k-calendar-content k-scrollable');
const view = (contentElement, className, renderWeekHeader) => (div([
    monthHeader(),
    renderWeekHeader ? monthWeekHeader() : null,
    scrollable([contentElement, contentElement])
], className, { left: '-10000px', position: 'absolute' }));
const ɵ6 = () => {
    let navElement;
    return () => {
        if (!isDocumentAvailable) {
            return null;
        }
        if (!navElement) {
            navElement = div([scrollable([ul([li('<span>FEB</span>')])])], 'k-calendar-navigation', { left: '0px', position: 'absolute' });
        }
        return navElement;
    };
};
const navigationList = (ɵ6)();
const viewFactory = ({ cells, rows }, className, renderWeekHeader) => {
    let viewElement;
    return () => {
        if (!isDocumentAvailable) {
            return null;
        }
        if (!viewElement) {
            viewElement = view(content(rows, cells), className, renderWeekHeader);
        }
        return viewElement;
    };
};
const getScrollable = (element) => element.querySelector('.k-scrollable');
const horizontal = element => {
    const scrollableElement = getScrollable(element);
    scrollableElement.classList.add('k-scrollable-horizontal');
    return element;
};
const monthView = viewFactory({ cells: 7, rows: 6 }, 'k-vstack k-calendar-view k-calendar-monthview', true);
const yearView = viewFactory({ cells: 4, rows: 3 }, 'k-vstack k-calendar-view k-calendar-yearview', false);
const decadeView = viewFactory({ cells: 4, rows: 3 }, 'k-vstack k-calendar-view k-calendar-decadeview', false);
const horzMonthView = () => horizontal(monthView());
const horzYearView = () => horizontal(yearView());
const horzDecadeView = () => horizontal(decadeView());
const height = (element) => (parseFloat(window.getComputedStyle(element).height) || element.offsetHeight);
const width = (element) => {
    const styles = window.getComputedStyle(element);
    const computed = parseFloat(styles.width)
        + parseFloat(styles.paddingLeft)
        + parseFloat(styles.paddingRight);
    return computed || element.offsetWidth;
};
const getBody = (element) => element.querySelector('tbody');
/**
 * @hidden
 */
let CalendarDOMService = class CalendarDOMService {
    ensureHeights() {
        if (this.calendarHeight !== undefined) {
            return;
        }
        this.calculateHeights();
    }
    calculateHeights(container) {
        if (!isDocumentAvailable()) {
            return;
        }
        this.hostContainer = container;
        this.batch(monthView(), (contentElement) => {
            const viewElement = getBody(contentElement);
            this.calendarHeight = height(contentElement);
            this.monthViewHeight = height(viewElement);
            this.headerHeight = height(viewElement.children[0]);
            this.scrollableContentHeight = height(getScrollable(contentElement));
        });
        this.batch(horzMonthView(), (contentElement) => {
            const viewElement = getBody(contentElement);
            this.calendarWidth = width(contentElement);
            this.monthViewWidth = width(viewElement);
            this.scrollableContentWidth = width(getScrollable(contentElement));
        });
        this.batch(yearView(), (contentElement) => {
            this.yearViewHeight = height(getBody(contentElement));
            this.scrollableYearContentHeight = height(getScrollable(contentElement));
        });
        this.batch(horzYearView(), (contentElement) => {
            this.yearViewWidth = width(getBody(contentElement));
        });
        this.batch(decadeView(), (contentElement) => {
            this.decadeViewHeight = height(getBody(contentElement));
            this.centuryViewHeight = this.decadeViewHeight;
        });
        this.batch(horzDecadeView(), (contentElement) => {
            this.decadeViewWidth = width(getBody(contentElement));
            this.centuryViewWidth = this.decadeViewWidth;
        });
        this.batch(navigationList(), (contentElement) => {
            this.navigationItemHeight = height(contentElement.querySelector('li'));
        });
    }
    viewHeight(viewType) {
        return this.viewDimension(viewType, 'height');
    }
    viewWidth(viewType) {
        return this.viewDimension(viewType, 'width');
    }
    viewDimension(viewType, dimension) {
        const viewProp = dimension === 'height' ? 'ViewHeight' : 'ViewWidth';
        switch (viewType) {
            case CalendarViewEnum.month:
                return this[`month${viewProp}`];
            case CalendarViewEnum.year:
                return this[`year${viewProp}`];
            case CalendarViewEnum.decade:
                return this[`decade${viewProp}`];
            case CalendarViewEnum.century:
                return this[`century${viewProp}`];
            default:
                return 1;
        }
    }
    batch(contentElement, action) {
        if (!isPresent(this.hostContainer)) {
            return;
        }
        const hostClone = this.hostContainer.cloneNode();
        document.body.appendChild(hostClone);
        try {
            const appendedContent = hostClone.appendChild(contentElement);
            action(appendedContent);
        }
        catch (error) {
            throw error;
        }
        finally {
            document.body.removeChild(hostClone);
        }
    }
};
CalendarDOMService.ɵfac = function CalendarDOMService_Factory(t) { return new (t || CalendarDOMService)(); };
CalendarDOMService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CalendarDOMService, factory: function (t) { return CalendarDOMService.ɵfac(t); } });

/**
 * @hidden
 */
const update = (arr, idx, value) => ([
    ...arr.slice(0, idx + 1),
    ...(arr.slice(idx + 1).map(x => x + value))
]);
/**
 * @hidden
 */
class RowHeightService {
    constructor(total = 0, rowHeight, detailRowHeight) {
        this.total = total;
        this.rowHeight = rowHeight;
        this.detailRowHeight = detailRowHeight;
        this.offsets = [];
        this.heights = [];
        let agg = 0;
        for (let idx = 0; idx < total; idx++) {
            this.offsets.push(agg);
            agg += rowHeight;
            this.heights.push(rowHeight);
        }
    }
    height(rowIndex) {
        return this.heights[rowIndex];
    }
    expandDetail(rowIndex) {
        if (this.height(rowIndex) === this.rowHeight) {
            this.updateRowHeight(rowIndex, this.detailRowHeight);
        }
    }
    collapseDetail(rowIndex) {
        if (this.height(rowIndex) > this.rowHeight) {
            this.updateRowHeight(rowIndex, this.detailRowHeight * -1);
        }
    }
    index(position) {
        if (position < 0) {
            return undefined;
        }
        const result = this.offsets.reduce((prev, current, idx) => {
            if (prev !== undefined) {
                return prev;
            }
            else if (current === position) {
                return idx;
            }
            else if (current > position) {
                return idx - 1;
            }
            return undefined;
        }, undefined); // tslint:disable-line:align
        return result === undefined ? this.total - 1 : result;
    }
    offset(rowIndex) {
        return this.offsets[rowIndex];
    }
    totalHeight() {
        return this.heights.reduce((prev, curr) => prev + curr, 0);
    }
    updateRowHeight(rowIndex, value) {
        this.heights[rowIndex] += value;
        this.offsets = update(this.offsets, rowIndex, value);
    }
}

const normalize = x => Math.max(x, 0);
/**
 * @hidden
 */
class ScrollAction {
    constructor(offset) {
        this.offset = offset;
    }
}
/**
 * @hidden
 */
class PageAction {
    constructor(skip) {
        this.skip = skip;
    }
}
/**
 * @hidden
 */
class ScrollerService {
    constructor(scrollObservable) {
        this.scrollObservable = scrollObservable;
        this.firstLoaded = 0;
        this.bottomOffset = 0;
        this.topOffset = 0;
    }
    create(rowHeightService, skip, take, total, topOffset = 0, bottomOffset = 0, direction = 'vertical') {
        this.rowHeightService = rowHeightService;
        this.firstLoaded = skip;
        this.lastLoaded = skip + take;
        this.take = take;
        this.total = total;
        this.lastScroll = 0;
        this.topOffset = topOffset;
        this.bottomOffset = bottomOffset;
        this.direction = direction;
        const subject = new ReplaySubject(2);
        const offsetBufferRows = this.rowsForHeight(topOffset);
        const skipWithOffset = normalize(skip - offsetBufferRows);
        subject.next(new ScrollAction(this.rowOffset(skipWithOffset)));
        if (offsetBufferRows) {
            subject.next(new PageAction(skipWithOffset));
        }
        this.subscription = new Observable(observer => {
            this.unsubscribe();
            this.scrollSubscription = this.scrollObservable.subscribe(x => this.onScroll(x, observer));
        }).subscribe((x) => subject.next(x));
        return subject;
    }
    destroy() {
        this.unsubscribe();
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    onScroll({ scrollLeft, scrollTop, offsetHeight, offsetWidth }, observer) {
        const scrollPosition = this.direction === 'vertical' ? scrollTop : scrollLeft;
        const offsetSize = this.direction === 'vertical' ? offsetHeight : offsetWidth;
        if (this.lastScroll === scrollPosition) {
            return;
        }
        const up = this.lastScroll >= scrollPosition;
        this.lastScroll = scrollPosition;
        const firstItemIndex = this.rowHeightService.index(normalize(scrollPosition - this.topOffset));
        const lastItemIndex = this.rowHeightService.index(normalize(scrollPosition + offsetSize - this.bottomOffset));
        if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
            this.firstLoaded = firstItemIndex;
            observer.next(new ScrollAction(this.rowOffset(firstItemIndex)));
            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
            observer.next(new PageAction(this.firstLoaded));
        }
        if (up && firstItemIndex <= this.firstLoaded) {
            const nonVisibleBuffer = Math.floor(this.take * 0.3);
            this.firstLoaded = normalize(firstItemIndex - nonVisibleBuffer);
            observer.next(new ScrollAction(this.rowOffset(this.firstLoaded)));
            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
            observer.next(new PageAction(this.firstLoaded));
        }
    }
    rowOffset(index) {
        return this.rowHeightService.offset(index) + this.topOffset;
    }
    rowsForHeight(height) {
        return Math.ceil(height / this.rowHeightService.height(0));
    }
    unsubscribe() {
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
            this.scrollSubscription = null;
        }
    }
}

/**
 * @hidden
 */
const SCROLLER_FACTORY_TOKEN = new InjectionToken('dateinputs-scroll-service-factory');
/**
 * @hidden
 */
function DEFAULT_SCROLLER_FACTORY(observable) {
    return new ScrollerService(observable);
}
/**
 * @hidden
 */
var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["Backward"] = 0] = "Backward";
    ScrollDirection[ScrollDirection["Forward"] = 1] = "Forward";
})(ScrollDirection || (ScrollDirection = {}));
const FRAME_DURATION = 17;
const scrollModifiers = {
    [ScrollDirection.Forward]: (step) => value => value + step,
    [ScrollDirection.Backward]: (step) => value => value - step
};
const scrollNormalizers = {
    [ScrollDirection.Forward]: (end) => value => Math.min(value, end),
    [ScrollDirection.Backward]: (end) => value => Math.max(value, end)
};
const scrollValidators = {
    [ScrollDirection.Forward]: end => start => start < end,
    [ScrollDirection.Backward]: end => start => start > end
};
const differenceToScroll = (scrollTop, staticOffset, maxScrollDifference) => {
    return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);
};
/**
 * @hidden
 */
let VirtualizationComponent = class VirtualizationComponent {
    constructor(scrollerFactory, container, renderer, zone) {
        this.container = container;
        this.renderer = renderer;
        this.zone = zone;
        this.direction = 'vertical';
        this.itemHeight = 1;
        this.itemWidth = 1;
        this.topOffset = 0;
        this.bottomOffset = 0;
        this.maxScrollDifference = 100;
        this.scrollOffsetSize = 0;
        this.scrollDuration = 150;
        this.activeIndexChange = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.scrollChange = new EventEmitter();
        this.wrapperClasses = true;
        this.resolvedPromise = Promise.resolve(null);
        this.dispatcher = new Subject();
        this.scroller = scrollerFactory(this.dispatcher);
    }
    get horizontalClass() {
        return this.direction === 'horizontal';
    }
    get totalVertexLength() {
        const value = `${this.totalSize}px`;
        return this.direction === 'vertical' ? { height: value } : { width: value };
    }
    get containerOffsetSize() {
        return this.getContainerProperty(this.direction === 'vertical' ? 'offsetHeight' : 'offsetWidth');
    }
    get containerScrollSize() {
        return this.getContainerProperty(this.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth');
    }
    get containerScrollPosition() {
        return this.getContainerProperty(this.direction === 'vertical' ? 'scrollTop' : 'scrollLeft');
    }
    ngOnChanges(changes) {
        if (changes.direction || changes.take || changes.total) {
            this.initServices();
            this.totalSize = this.rowHeightService.totalHeight() + this.bottomOffset;
        }
    }
    ngOnInit() {
        if (!this.rowHeightService) {
            this.rowHeightService = this.createRowHeightService();
        }
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.containerScrollSubscription = this.scroll$()
                .pipe(map((event) => event.target))
                .subscribe(t => {
                this.dispatcher.next(t);
                this.emitActiveIndex();
            });
        });
    }
    ngOnDestroy() {
        if (this.containerScrollSubscription) {
            this.containerScrollSubscription.unsubscribe();
        }
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
        if (this.animationSubscription) {
            this.animationSubscription.unsubscribe();
        }
    }
    getContainerProperty(propertyName) {
        return this.container.nativeElement[propertyName];
    }
    activeIndex() {
        return this.itemIndex(Math.ceil(this.containerScrollPosition)); //handle subpixeling
    }
    itemIndex(offset) {
        return this.rowHeightService.index(offset);
    }
    itemOffset(index) {
        return this.rowHeightService.offset(index);
    }
    isIndexVisible(index) {
        if (!this.rowHeightService) {
            return false;
        }
        const containerTop = this.containerScrollPosition;
        const containerBottom = containerTop + this.containerOffsetSize;
        const top = this.rowHeightService.offset(index);
        const bottom = top + this.rowHeightService.height(index);
        return top >= containerTop && bottom <= containerBottom;
    }
    isListScrolled(index) {
        return this.containerScrollPosition !== this.rowHeightService.offset(index);
    }
    scrollTo(value) {
        const scrollProperty = this.direction === "vertical" ? 'scrollTop' : 'scrollLeft';
        this.renderer.setProperty(this.container.nativeElement, scrollProperty, value);
    }
    scrollToIndex(index) {
        //XXX: scrolling with tick is required to prevent list jump in Chrome.
        //Original issue: focus first day in the month and press LEFT arrow.
        //Notice how the view jumps on every day change.
        //
        this.zone.runOutsideAngular(() => {
            this.resolvedPromise.then(() => {
                this.scrollTo(this.rowHeightService.offset(index));
            });
        });
    }
    scrollToBottom() {
        this.scrollTo(this.totalSize);
    }
    animateToIndex(index) {
        if (this.animationSubscription) {
            this.animationSubscription.unsubscribe();
        }
        const indexOffset = this.rowHeightService.offset(index);
        const direction = this.getContainerScrollDirection(indexOffset);
        const { start, end } = this.scrollRange(indexOffset, direction);
        if (start === end) {
            return;
        }
        const step = this.scrollStep(start, end);
        const modifyScroll = scrollModifiers[direction](step);
        const normalizeScroll = scrollNormalizers[direction](end);
        const isScrollValid = scrollValidators[direction](modifyScroll(end));
        this.zone.runOutsideAngular(() => {
            this.animationSubscription =
                combineLatest(of(start), interval(0, animationFrameScheduler)).pipe(map(stream => stream[0]), scan(modifyScroll), takeWhile(isScrollValid), map(normalizeScroll)).subscribe((x) => this.scrollTo(x));
        });
    }
    scrollRange(indexOffset, direction) {
        const containerScroll = this.containerScrollPosition;
        if (parseInt(indexOffset, 10) === parseInt(containerScroll, 10)) {
            return { start: indexOffset, end: indexOffset };
        }
        const maxScroll = this.containerMaxScroll();
        const sign = direction === ScrollDirection.Backward ? 1 : -1;
        const difference = differenceToScroll(containerScroll, indexOffset, this.maxScrollDifference);
        const end = Math.min(indexOffset, maxScroll);
        const start = Math.min(Math.max(end + (sign * difference), 0), maxScroll);
        return { start, end };
    }
    scrollStep(start, end) {
        return Math.abs(end - start) / (this.scrollDuration / FRAME_DURATION);
    }
    scroll$() {
        return isDocumentAvailable() ? fromEvent(this.container.nativeElement, 'scroll') : EMPTY;
    }
    initServices() {
        this.rowHeightService = this.createRowHeightService();
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
        this.scrollSubscription = this.scroller
            .create(this.rowHeightService, this.skip, this.take, this.total, this.topOffset, this.scrollOffsetSize, this.direction)
            .subscribe((x) => {
            if (x instanceof PageAction) {
                this.pageChange.emit(x);
            }
            else {
                this.scrollChange.emit(x);
            }
        });
    }
    createRowHeightService() {
        const dimension = this.direction === 'vertical' ? this.itemHeight : this.itemWidth;
        return new RowHeightService(this.total, dimension, 0);
    }
    emitActiveIndex() {
        const index = this.rowHeightService.index(this.containerScrollPosition - this.topOffset);
        if (this.lastActiveIndex !== index) {
            this.lastActiveIndex = index;
            this.activeIndexChange.emit(index);
        }
    }
    containerMaxScroll() {
        return this.containerScrollSize - this.containerOffsetSize;
    }
    getContainerScrollDirection(indexOffset) {
        return indexOffset < this.containerScrollPosition ? ScrollDirection.Backward : ScrollDirection.Forward;
    }
};
VirtualizationComponent.ɵfac = function VirtualizationComponent_Factory(t) { return new (t || VirtualizationComponent)(ɵngcc0.ɵɵdirectiveInject(SCROLLER_FACTORY_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
VirtualizationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: VirtualizationComponent, selectors: [["kendo-virtualization"]], hostVars: 10, hostBindings: function VirtualizationComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-flex", ctx.wrapperClasses)("k-content", ctx.wrapperClasses)("k-calendar-content", ctx.wrapperClasses)("k-scrollable", ctx.wrapperClasses)("k-scrollable-horizontal", ctx.horizontalClass);
    } }, inputs: { direction: "direction", itemHeight: "itemHeight", itemWidth: "itemWidth", topOffset: "topOffset", bottomOffset: "bottomOffset", maxScrollDifference: "maxScrollDifference", scrollOffsetSize: "scrollOffsetSize", scrollDuration: "scrollDuration", skip: "skip", take: "take", total: "total" }, outputs: { activeIndexChange: "activeIndexChange", pageChange: "pageChange", scrollChange: "scrollChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: SCROLLER_FACTORY_TOKEN,
                useValue: DEFAULT_SCROLLER_FACTORY
            }]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c11, decls: 2, vars: 3, consts: [[1, "k-scrollable-placeholder", 3, "ngStyle"]], template: function VirtualizationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelement(1, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("k-scrollable-horizontal-placeholder", ctx.direction === "horizontal");
        ɵngcc0.ɵɵproperty("ngStyle", ctx.totalVertexLength);
    } }, directives: [ɵngcc2.NgStyle], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], VirtualizationComponent.prototype, "direction", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "itemHeight", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "itemWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "topOffset", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "bottomOffset", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "maxScrollDifference", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "scrollOffsetSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "scrollDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "skip", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "take", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], VirtualizationComponent.prototype, "total", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], VirtualizationComponent.prototype, "activeIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], VirtualizationComponent.prototype, "pageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], VirtualizationComponent.prototype, "scrollChange", void 0);
__decorate([
    HostBinding('class.k-flex'),
    HostBinding('class.k-content'),
    HostBinding('class.k-calendar-content'),
    HostBinding('class.k-scrollable'),
    __metadata("design:type", Boolean)
], VirtualizationComponent.prototype, "wrapperClasses", void 0);
__decorate([
    HostBinding('class.k-scrollable-horizontal'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], VirtualizationComponent.prototype, "horizontalClass", null);
VirtualizationComponent = __decorate([ __param(0, Inject(SCROLLER_FACTORY_TOKEN)),
    __metadata("design:paramtypes", [Object, ElementRef,
        Renderer2,
        NgZone])
], VirtualizationComponent);

/**
 * @hidden
 */
const closestInScope = (node, predicate, scope) => {
    while (node && node !== scope && !predicate(node)) {
        node = node.parentNode;
    }
    if (node !== scope) {
        return node;
    }
};
/**
 * @hidden
 */
const closest = (node, predicate) => {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};

const ITEMS_COUNT = 30;
/**
 * @hidden
 */
let NavigationComponent = class NavigationComponent {
    constructor(bus, dom, intl, cdr, renderer) {
        this.bus = bus;
        this.dom = dom;
        this.intl = intl;
        this.cdr = cdr;
        this.renderer = renderer;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.focusedDate = new Date();
        this.valueChange = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.dates = [];
        this.take = ITEMS_COUNT;
        this.indexToScroll = -1;
    }
    get getComponentClass() {
        return true;
    }
    ngOnInit() {
        this.dom.ensureHeights();
        const calendarHeight = this.dom.calendarHeight;
        this.itemHeight = this.dom.navigationItemHeight;
        this.maxViewHeight = this.dom.monthViewHeight;
        this.topOffset = (calendarHeight - this.itemHeight) / 2;
        this.bottomOffset = calendarHeight - this.itemHeight;
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    ngOnChanges(changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.activeViewValue = CalendarViewEnum[this.activeView];
        const viewDate = dateInRange(this.focusedDate, this.min, this.max);
        const total = this.service.total(this.min, this.max);
        const totalChanged = this.total && this.total !== total;
        this.skip = this.service.skip(viewDate, this.min);
        this.total = total;
        if (totalChanged || !this.service.isInArray(viewDate, this.dates)) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
        }
        if (!!changes.focusedDate || totalChanged) {
            this.indexToScroll = this.service.skip(this.focusedDate, this.min);
        }
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    }
    ngAfterViewChecked() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    }
    onPageChange({ skip }) {
        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));
        this.pageChange.emit();
    }
    scrollChange({ offset }) {
        const el = this.list.nativeElement;
        const translate = `translateY(${offset}px)`;
        this.renderer.setStyle(el, 'transform', translate);
        this.renderer.setStyle(el, '-ms-transform', translate);
    }
    handleDateChange(args) {
        const item = closestInScope(args.target, node => node.hasAttribute('data-date-index'), this.list.nativeElement);
        if (item) {
            const index = parseInt(item.getAttribute('data-date-index'), 10);
            const candidate = this.dates[index];
            this.valueChange.emit(cloneDate(candidate));
        }
    }
    getTake(skip) {
        return Math.min(this.total - skip, this.take);
    }
    intlChange() {
        if (this.activeView === CalendarViewEnum.month) {
            this.cdr.markForCheck();
        }
    }
};
NavigationComponent.ɵfac = function NavigationComponent_Factory(t) { return new (t || NavigationComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(CalendarDOMService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NavigationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NavigationComponent, selectors: [["kendo-calendar-navigation"]], viewQuery: function NavigationComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(VirtualizationComponent, 5);
        ɵngcc0.ɵɵviewQuery(_c12, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualization = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t.first);
    } }, hostVars: 2, hostBindings: function NavigationComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-calendar-navigation", ctx.getComponentClass);
    } }, inputs: { min: "min", max: "max", focusedDate: "focusedDate", activeView: "activeView", templateRef: "templateRef" }, outputs: { valueChange: "valueChange", pageChange: "pageChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 12, consts: [[1, "k-calendar-navigation-highlight"], [3, "skip", "take", "total", "itemHeight", "topOffset", "bottomOffset", "maxScrollDifference", "pageChange", "scrollChange"], [1, "k-reset", 3, "kendoEventsOutsideAngular", "scope"], ["list", ""], [4, "kFor", "kForOf"], [3, "ngIf"], [3, "ngIf", "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function NavigationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "span", 0);
        ɵngcc0.ɵɵelementStart(1, "kendo-virtualization", 1);
        ɵngcc0.ɵɵlistener("pageChange", function NavigationComponent_Template_kendo_virtualization_pageChange_1_listener($event) { return ctx.onPageChange($event); })("scrollChange", function NavigationComponent_Template_kendo_virtualization_scrollChange_1_listener($event) { return ctx.scrollChange($event); });
        ɵngcc0.ɵɵelementStart(2, "ul", 2, 3);
        ɵngcc0.ɵɵtemplate(4, NavigationComponent_li_4_Template, 4, 11, "li", 4);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("skip", ctx.skip)("take", ctx.take)("total", ctx.total)("itemHeight", ctx.itemHeight)("topOffset", ctx.topOffset)("bottomOffset", ctx.bottomOffset)("maxScrollDifference", ctx.maxViewHeight);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(10, _c2, ctx.handleDateChange))("scope", ctx);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("kForOf", ctx.dates);
    } }, directives: function () { return [VirtualizationComponent, ɵngcc4.EventsOutsideAngularDirective, KForOf, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", Number)
], NavigationComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], NavigationComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], NavigationComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], NavigationComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], NavigationComponent.prototype, "templateRef", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NavigationComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NavigationComponent.prototype, "pageChange", void 0);
__decorate([
    ViewChild(VirtualizationComponent, { static: false }),
    __metadata("design:type", VirtualizationComponent)
], NavigationComponent.prototype, "virtualization", void 0);
__decorate([
    ViewChild('list', { static: true }),
    __metadata("design:type", ElementRef)
], NavigationComponent.prototype, "list", void 0);
__decorate([
    HostBinding("class.k-calendar-navigation"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], NavigationComponent.prototype, "getComponentClass", null);
NavigationComponent = __decorate([ __metadata("design:paramtypes", [BusViewService,
        CalendarDOMService,
        IntlService,
        ChangeDetectorRef,
        Renderer2])
], NavigationComponent);

const VIEWS_COUNT = 5;
const isEqualMonthYear = (date1, date2) => (date1 && date2 &&
    date1.getFullYear() === date2.getFullYear() &&
    date1.getMonth() === date2.getMonth());
/**
 * @hidden
 */
let ViewListComponent = class ViewListComponent {
    constructor(bus, cdr, intl, dom, renderer) {
        this.bus = bus;
        this.cdr = cdr;
        this.intl = intl;
        this.dom = dom;
        this.renderer = renderer;
        this.isActive = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.selectedDates = [];
        this.cellClick = new EventEmitter();
        this.weekNumberCellClick = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.todayButtonClick = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.getComponentClass = true;
        this.dates = [];
        this.cols = [];
        this.weekNames = [];
        this.take = VIEWS_COUNT;
        this.animateToIndex = true;
        this.indexToScroll = -1;
        this.minViewsToRender = 1;
    }
    get weekNumber() {
        return this.showWeekNumbers && this.isMonthView();
    }
    set weekNumber(showWeekNumbers) {
        this.showWeekNumbers = showWeekNumbers;
    }
    get getComponentMonthClass() {
        return this.activeView === CalendarViewEnum.month;
    }
    get getComponentYearClass() {
        return this.activeView === CalendarViewEnum.year;
    }
    get getComponentDecadeClass() {
        return this.activeView === CalendarViewEnum.decade;
    }
    get getComponentCenturyClass() {
        return this.activeView === CalendarViewEnum.century;
    }
    ngOnInit() {
        this.weekNames = this.getWeekNames();
        this.bottomOffset = this.getBottomOffset();
        this.viewOffset = -1 * this.dom.headerHeight;
        this.viewHeight = this.dom.viewHeight(this.activeView);
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    ngOnChanges(changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.cols = new Array(this.service.rowLength({ prependCell: this.weekNumber })).fill('');
        this.colWidth = Math.round(100 / this.cols.length);
        this.weekNames = hasChange(changes, 'weekNumber') && this.weekNumber ? this.getWeekNames() : this.weekNames;
        const activeViewChanged = hasChange(changes, 'activeView');
        const focusedDate = this.focusedDate;
        const viewDate = dateInRange(this.service.viewDate(focusedDate, this.max, this.minViewsToRender), this.min, this.max);
        const total = this.service.total(this.min, this.max);
        const totalChanged = this.total && this.total !== total;
        const generateDates = totalChanged || !this.service.isInArray(focusedDate, this.dates);
        this.skip = this.service.skip(viewDate, this.min);
        this.total = total;
        this.animateToIndex = !activeViewChanged;
        this.bottomOffset = this.getBottomOffset();
        this.viewHeight = this.dom.viewHeight(this.activeView);
        if (generateDates) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
        }
        if (!isEqualMonthYear(this.activeDate, focusedDate)) {
            this.activeDate = cloneDate(focusedDate);
        }
        const updateIndex = hasChange(changes, 'focusedDate') || activeViewChanged;
        if (generateDates || updateIndex || this.virtualization.isIndexVisible(this.skip)) {
            this.indexToScroll = this.service.skip(focusedDate, this.min);
        }
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    }
    ngAfterViewChecked() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization[this.animateToIndex ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);
        this.animateToIndex = true;
        this.indexToScroll = -1;
    }
    onPageChange({ skip }) {
        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));
        this.pageChange.emit();
    }
    scrollChange({ offset }) {
        const el = this.list.nativeElement;
        const translate = `translateY(${offset}px)`;
        this.renderer.setStyle(el, 'transform', translate);
        this.renderer.setStyle(el, '-ms-transform', translate);
    }
    setActiveDate(index) {
        const candidate = this.service.addToDate(this.min, index);
        this.activeDate = candidate;
        this.activeDateChange.emit(candidate);
        this.cdr.detectChanges();
    }
    isMonthView() {
        return this.activeView === CalendarViewEnum.month;
    }
    isScrolled() {
        return this.virtualization.isListScrolled(this.service.skip(this.focusedDate, this.min));
    }
    getBottomOffset() {
        return this.getScrollableHeight() - this.dom.viewHeight(this.activeView);
    }
    getScrollableHeight() {
        return this.activeView === CalendarViewEnum.month ?
            this.dom.scrollableContentHeight :
            this.dom.scrollableYearContentHeight;
    }
    getTake(skip) {
        return Math.min(this.total - skip, this.take);
    }
    getWeekNames() {
        const weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());
        return this.weekNumber ? [''].concat(weekNames) : weekNames;
    }
    intlChange() {
        this.weekNames = this.getWeekNames();
        if (this.isMonthView()) {
            this.cdr.markForCheck();
        }
    }
};
ViewListComponent.ɵfac = function ViewListComponent_Factory(t) { return new (t || ViewListComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(CalendarDOMService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ViewListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ViewListComponent, selectors: [["kendo-calendar-viewlist"]], viewQuery: function ViewListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(VirtualizationComponent, 5);
        ɵngcc0.ɵɵviewQuery(_c12, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualization = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t.first);
    } }, hostVars: 12, hostBindings: function ViewListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-vstack", ctx.getComponentClass)("k-calendar-view", ctx.getComponentClass)("k-calendar-monthview", ctx.getComponentMonthClass)("k-calendar-yearview", ctx.getComponentYearClass)("k-calendar-decadeview", ctx.getComponentDecadeClass)("k-calendar-centuryview", ctx.getComponentCenturyClass);
    } }, inputs: { isActive: "isActive", min: "min", max: "max", selectedDates: "selectedDates", weekNumber: "weekNumber", cellTemplateRef: "cellTemplateRef", weekNumberTemplateRef: "weekNumberTemplateRef", headerTitleTemplateRef: "headerTitleTemplateRef", activeView: "activeView", cellUID: "cellUID", focusedDate: "focusedDate" }, outputs: { cellClick: "cellClick", weekNumberCellClick: "weekNumberCellClick", activeDateChange: "activeDateChange", todayButtonClick: "todayButtonClick", pageChange: "pageChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 17, consts: [[3, "currentDate", "min", "max", "activeView", "templateRef", "todayButtonClick"], ["class", "k-calendar-weekdays k-calendar-table", "style", "table-layout: auto;", 4, "ngIf"], [3, "tabindex", "skip", "take", "total", "itemHeight", "topOffset", "bottomOffset", "scrollOffsetSize", "maxScrollDifference", "pageChange", "scrollChange", "activeIndexChange"], ["role", "grid", 1, "k-calendar-table"], ["list", ""], [4, "ngFor", "ngForOf"], ["class", "k-calendar-tbody", "kendoCalendarView", "", "role", "rowgroup", 3, "activeView", "isActive", "min", "max", "cellUID", "focusedDate", "selectedDates", "weekNumber", "templateRef", "weekNumberTemplateRef", "viewDate", "cellClick", "weekNumberCellClick", 4, "kFor", "kForOf"], [1, "k-calendar-weekdays", "k-calendar-table", 2, "table-layout", "auto"], [1, "k-calendar-thead"], [1, "k-calendar-tr"], ["class", "k-calendar-th", 3, "width", 4, "ngFor", "ngForOf"], [1, "k-calendar-th"], ["kendoCalendarView", "", "role", "rowgroup", 1, "k-calendar-tbody", 3, "activeView", "isActive", "min", "max", "cellUID", "focusedDate", "selectedDates", "weekNumber", "templateRef", "weekNumberTemplateRef", "viewDate", "cellClick", "weekNumberCellClick"]], template: function ViewListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "kendo-calendar-header", 0);
        ɵngcc0.ɵɵlistener("todayButtonClick", function ViewListComponent_Template_kendo_calendar_header_todayButtonClick_0_listener($event) { return ctx.todayButtonClick.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, ViewListComponent_table_1_Template, 4, 1, "table", 1);
        ɵngcc0.ɵɵelementStart(2, "kendo-virtualization", 2);
        ɵngcc0.ɵɵlistener("pageChange", function ViewListComponent_Template_kendo_virtualization_pageChange_2_listener($event) { return ctx.onPageChange($event); })("scrollChange", function ViewListComponent_Template_kendo_virtualization_scrollChange_2_listener($event) { return ctx.scrollChange($event); })("activeIndexChange", function ViewListComponent_Template_kendo_virtualization_activeIndexChange_2_listener($event) { return ctx.setActiveDate($event); });
        ɵngcc0.ɵɵelementStart(3, "table", 3, 4)(5, "colgroup");
        ɵngcc0.ɵɵtemplate(6, ViewListComponent_col_6_Template, 1, 0, "col", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ViewListComponent_tbody_7_Template, 1, 11, "tbody", 6);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("currentDate", ctx.activeDate)("min", ctx.min)("max", ctx.max)("activeView", ctx.activeView)("templateRef", ctx.headerTitleTemplateRef);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isMonthView());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("tabindex", -1)("skip", ctx.skip)("take", ctx.take)("total", ctx.total)("itemHeight", ctx.viewHeight)("topOffset", ctx.viewOffset)("bottomOffset", ctx.bottomOffset)("scrollOffsetSize", ctx.viewOffset)("maxScrollDifference", ctx.viewHeight);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.cols);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("kForOf", ctx.dates);
    } }, directives: function () { return [HeaderComponent, ɵngcc2.NgIf, ɵngcc2.NgForOf, VirtualizationComponent, KForOf, ViewComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "cellTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "weekNumberTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "headerTitleTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ViewListComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ViewListComponent.prototype, "cellUID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewListComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ViewListComponent.prototype, "isActive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewListComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewListComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ViewListComponent.prototype, "selectedDates", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ViewListComponent.prototype, "weekNumber", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "cellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "weekNumberCellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "activeDateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "todayButtonClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "pageChange", void 0);
__decorate([
    ViewChild(VirtualizationComponent, { static: false }),
    __metadata("design:type", VirtualizationComponent)
], ViewListComponent.prototype, "virtualization", void 0);
__decorate([
    ViewChild('list', { static: true }),
    __metadata("design:type", ElementRef)
], ViewListComponent.prototype, "list", void 0);
__decorate([
    HostBinding("class.k-vstack"),
    HostBinding("class.k-calendar-view"),
    __metadata("design:type", Boolean)
], ViewListComponent.prototype, "getComponentClass", void 0);
__decorate([
    HostBinding("class.k-calendar-monthview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentMonthClass", null);
__decorate([
    HostBinding("class.k-calendar-yearview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentYearClass", null);
__decorate([
    HostBinding("class.k-calendar-decadeview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentDecadeClass", null);
__decorate([
    HostBinding("class.k-calendar-centuryview"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentCenturyClass", null);
ViewListComponent = __decorate([ __metadata("design:paramtypes", [BusViewService,
        ChangeDetectorRef,
        IntlService,
        CalendarDOMService,
        Renderer2])
], ViewListComponent);

const divideByMagnitude = (magnitude) => x => Math.floor(x / magnitude);
const powerByMagnitude = (magnitude) => x => x * magnitude;
/**
 * @hidden
 */
let ScrollSyncService = class ScrollSyncService {
    constructor(dom, zone) {
        this.dom = dom;
        this.zone = zone;
    }
    configure(activeView) {
        const magnitude = Math.max(this.dom.viewHeight(activeView) / this.dom.navigationItemHeight, 1);
        this.divideByMagnitude = divideByMagnitude(magnitude);
        this.powerByMagnitude = powerByMagnitude(magnitude);
    }
    sync(navigator, view) {
        this.unsubscribe();
        if (!navigator || !view) {
            return;
        }
        this.navigator = navigator;
        this.view = view;
        this.zone.runOutsideAngular(() => {
            let navScrolled, monthScrolled;
            this.navSubscription = navigator.scroll$()
                .subscribe((e) => {
                if (monthScrolled) {
                    monthScrolled = false;
                    return;
                }
                navScrolled = true;
                this.scrollSiblingOf(e.target);
            });
            this.viewSubscription = view.scroll$()
                .subscribe((e) => {
                if (navScrolled) {
                    navScrolled = false;
                    return;
                }
                monthScrolled = true;
                this.scrollSiblingOf(e.target);
            });
        });
    }
    scrollSiblingOf(scrolledElement) {
        const component = this.siblingComponent(scrolledElement);
        const scrollTop = this.calculateScroll(component, scrolledElement.scrollTop);
        component.scrollTo(scrollTop);
    }
    siblingComponent(scrollableElement) {
        return this.navigator.container.nativeElement === scrollableElement ? this.view : this.navigator;
    }
    calculateScroll(component, scrollTop) {
        const modifier = component === this.navigator ? this.divideByMagnitude : this.powerByMagnitude;
        return modifier(scrollTop);
    }
    destroy() {
        this.unsubscribe();
    }
    unsubscribe() {
        if (this.navSubscription) {
            this.navSubscription.unsubscribe();
        }
        if (this.viewSubscription) {
            this.viewSubscription.unsubscribe();
        }
    }
};
ScrollSyncService.ɵfac = function ScrollSyncService_Factory(t) { return new (t || ScrollSyncService)(ɵngcc0.ɵɵinject(CalendarDOMService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ScrollSyncService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollSyncService, factory: function (t) { return ScrollSyncService.ɵfac(t); } });
ScrollSyncService = __decorate([ __metadata("design:paramtypes", [CalendarDOMService, NgZone])
], ScrollSyncService);

/**
 * Used for rendering the navigation item of the Calendar. To define the navigation item template, nest an `<ng-template>`
 * tag with the `kendoCalendarNavigationItemTemplate` directive inside the component tag. The template context is set to the
 * current component. To get a reference to the current item value, use the `let-title` directive. To provide more details
 * about the current title, get a reference to the current `date` by using the `let-date='date'` directive or get a reference
 * to the current active view by using the `let-activeView='activeView'` directive.
 *
 * For more examples, refer to the article on [templates]({% slug templates_calendar %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * styles: ['.custom { color: red; }'],
 * template: `
 *  <kendo-calendar>
 *    <ng-template kendoCalendarNavigationItemTemplate let-title>
 *      <span class="custom">{{title}}</span>
 *    </ng-template>
 *  </kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let NavigationItemTemplateDirective = class NavigationItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
NavigationItemTemplateDirective.ɵfac = function NavigationItemTemplateDirective_Factory(t) { return new (t || NavigationItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
NavigationItemTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NavigationItemTemplateDirective, selectors: [["", "kendoCalendarNavigationItemTemplate", ""]] });
NavigationItemTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], NavigationItemTemplateDirective);

const BOTTOM_VIEW_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';
const TOP_VIEW_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';
const MIN_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';
const MAX_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';
const VALUE_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';
const virtualizationProp = x => x ? x.virtualization : null;
/**
 * @hidden
 */
const CALENDAR_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => CalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
const CALENDAR_RANGE_VALIDATORS = {
    multi: true,
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => CalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
const KENDO_INPUT_PROVIDER = {
    provide: KendoInput,
    useExisting: forwardRef(() => CalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * Represents the [Kendo UI Calendar component for Angular]({% slug overview_calendar %}#toc-basic-usage).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-calendar></kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let CalendarComponent = class CalendarComponent {
    constructor(bus, dom, element, navigator, renderer, cdr, ngZone, injector, scrollSyncService, disabledDatesService, localization, selectionService, pickerService) {
        this.bus = bus;
        this.dom = dom;
        this.element = element;
        this.navigator = navigator;
        this.renderer = renderer;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.injector = injector;
        this.scrollSyncService = scrollSyncService;
        this.disabledDatesService = disabledDatesService;
        this.localization = localization;
        this.selectionService = selectionService;
        this.pickerService = pickerService;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = false;
        /**
         * Sets the Calendar selection mode
         * ([see example]({% slug multiple_selection_calendar %})).
         *
         * The available values are:
         * * `single` (default)
         * * `multiple`
         */
        this.selection = 'single';
        /**
         * Sets or gets the `disabled` property of the Calendar and
         * determines whether the component is active
         * ([see example]({% slug disabled_calendar %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the `tabindex` property of the Calendar. Based on the
         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,
         * it determines whether the component is focusable.
         */
        this.tabindex = 0;
        /**
         * Sets or gets the `navigation` property of the Calendar
         * and determines whether the navigation side-bar will be displayed
         * ([see example]({% slug sidebar_calendar %})).
         * Applies to the [`infinite`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         */
        this.navigation = true;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug activeview_calendar %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the bottommost view to which the user can navigate
         * ([see example]({% slug dates_calendar %}#toc-partial-dates)).
         */
        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the topmost view to which the user can navigate
         * ([see example]({% slug sidebar_calendar %}#toc-partial-dates)).
         */
        this.topView = CalendarViewEnum[CalendarViewEnum.century];
        /**
         * Determines whether to enable animation when navigating to previous/next view.
         * Applies to the [`classic`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view
         * ([see example]({% slug weeknumcolumn_calendar %})).
         */
        this.weekNumber = false;
        /**
         * Fires when the active view is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Fires when navigating in the currently active view
         * ([more information and example]({% slug events_calendar %})).
         */
        this.navigate = new EventEmitter();
        /**
         * Fires when the active view date is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         * Applies to the [`infinite`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         */
        this.activeViewDateChange = new EventEmitter();
        /**
         * Fires when the value is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        this.isActive = false;
        this.cellUID = guid();
        this.selectedDates = [];
        this._min = new Date(MIN_DATE);
        this._max = new Date(MAX_DATE);
        this._focusedDate = getToday();
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.syncNavigation = true;
        this._type = 'infinite';
        this.domEvents = [];
        this.resolvedPromise = Promise.resolve(null);
        this.destroyed = false;
        validatePackage(packageMetadata);
        this.setClasses(element.nativeElement);
        if (this.pickerService) {
            this.pickerService.calendar = this;
        }
    }
    /**
     * Sets or gets the `focusedDate` property of the Calendar and
     * defines the focused date of the component
     * ([see example]({% slug dates_calendar %}#toc-focused-dates)).
     *
     * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.
     */
    set focusedDate(focusedDate) {
        if (this.activeViewDate && !isEqual(this._focusedDate, focusedDate)) {
            const service = this.bus.service(this.activeViewEnum);
            const lastDayInPeriod = service.lastDayOfPeriod(this.activeViewDate);
            const isFocusedDateInRange = service.isInRange(focusedDate, this.activeViewDate, lastDayInPeriod);
            if (!isFocusedDateInRange) {
                this.emitNavigate(focusedDate);
            }
        }
        this._focusedDate = focusedDate || getToday();
        this.setAriaActivedescendant();
    }
    get focusedDate() {
        return this._focusedDate;
    }
    /**
     * Sets or gets the `min` property of the Calendar and
     * defines the minimum allowed date value
     * ([see example]({% slug dateranges_calendar %})).
     * By default, the `min` value is `1900-1-1`.
     */
    set min(min) {
        this._min = min || new Date(MIN_DATE);
    }
    get min() {
        return this._min;
    }
    /**
     * Sets or gets the `max` property of the Calendar and
     * defines the maximum allowed date value
     * ([see example]({% slug dateranges_calendar %})).
     * By default, the `max` value is `2099-12-31`.
     */
    set max(max) {
        this._max = max || new Date(MAX_DATE);
    }
    get max() {
        return this._max;
    }
    /**
     * Sets or gets the `value` property of the Calendar and defines the selected value of the component.
     *
     * > The `value` has to be a valid
     * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date)
     * instance when in `single` selection mode or an array of valid JavaScript Date instances when in `multiple` selection mode.
     */
    get value() {
        return this._value;
    }
    set value(candidate) {
        this.verifyValue(candidate);
        this._value = Array.isArray(candidate) ?
            candidate.filter(date => isPresent(date)).map(element => cloneDate(element)) :
            cloneDate(candidate);
        const selection = [].concat(candidate).filter(date => isPresent(date)).map(date => cloneDate(date));
        if (!areDatesEqual(selection, this.selectedDates)) {
            const lastSelected = last(selection);
            this.rangePivot = cloneDate(lastSelected);
            this.focusedDate = cloneDate(lastSelected) || this.focusedDate;
            this.selectedDates = selection;
        }
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Sets the dates of the Calendar that will be disabled
     * ([see example]({% slug disabled_dates_calendar %})).
     */
    set disabledDates(value) {
        this.disabledDatesService.initialize(value);
        this._disabledDates = value;
    }
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Specifies the Calendar type.
     *
     * The possible values are:
     * - `infinite` (default)
     * - `classic`
     *
     */
    set type(type) {
        this.renderer.removeClass(this.element.nativeElement, `k-calendar-${this.type}`);
        this.renderer.addClass(this.element.nativeElement, `k-calendar-${type}`);
        this._type = type;
    }
    get type() {
        return this._type;
    }
    /**
     * @hidden
     *
     * Defines the template for each cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set cellTemplateRef(template) {
        this._cellTemplateRef = template;
    }
    get cellTemplateRef() {
        return this._cellTemplateRef || this.cellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each month cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set monthCellTemplateRef(template) {
        this._monthCellTemplateRef = template;
    }
    get monthCellTemplateRef() {
        return this._monthCellTemplateRef || this.monthCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each year cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set yearCellTemplateRef(template) {
        this._yearCellTemplateRef = template;
    }
    get yearCellTemplateRef() {
        return this._yearCellTemplateRef || this.yearCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each decade cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set decadeCellTemplateRef(template) {
        this._decadeCellTemplateRef = template;
    }
    get decadeCellTemplateRef() {
        return this._decadeCellTemplateRef || this.decadeCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for each century cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set centuryCellTemplateRef(template) {
        this._centuryCellTemplateRef = template;
    }
    get centuryCellTemplateRef() {
        return this._centuryCellTemplateRef || this.centuryCellTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for the week cell.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set weekNumberTemplateRef(template) {
        this._weekNumberTemplateRef = template;
    }
    get weekNumberTemplateRef() {
        return this._weekNumberTemplateRef || this.weekNumberTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for the header title.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set headerTitleTemplateRef(template) {
        this._headerTitleTemplateRef = template;
    }
    get headerTitleTemplateRef() {
        return this._headerTitleTemplateRef || this.headerTitleTemplate;
    }
    /**
     * @hidden
     *
     * Defines the template for the navigation item.
     * Takes precedence over nested templates in the KendoCalendar tag.
     */
    set navigationItemTemplateRef(template) {
        this._navigationItemTemplateRef = template;
    }
    get navigationItemTemplateRef() {
        return this._navigationItemTemplateRef || this.navigationItemTemplate;
    }
    get activeViewEnum() {
        const activeView = CalendarViewEnum[this.activeView];
        return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;
    }
    get bottomViewEnum() {
        return CalendarViewEnum[this.bottomView];
    }
    get topViewEnum() {
        return CalendarViewEnum[this.topView];
    }
    get widgetId() {
        return this.id;
    }
    get calendarTabIndex() {
        // in Classic mode, the inner MultiViewCalendar is the focusable element
        return this.disabled || this.type === 'classic' ? undefined : this.tabIndex;
    }
    get ariaDisabled() {
        // in Classic mode, the inner MultiViewCalendar should handle the disabled class and aria attr
        return this.type === 'classic' ? undefined : this.disabled;
    }
    ngOnInit() {
        this.dom.calculateHeights(this.element.nativeElement);
        this.scrollSyncService.configure(this.activeViewEnum);
        this.localizationChangeSubscription = this.localization.changes.subscribe(() => this.cdr.markForCheck());
        this.viewChangeSubscription = this.bus.viewChanged.subscribe(({ view }) => this.handleActiveViewChange(CalendarViewEnum[view]));
        this.control = this.injector.get(NgControl, null);
        if (this.element) {
            this.ngZone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    ngOnChanges(changes) {
        this.verifyChanges();
        this.bus.configure(this.bottomViewEnum, this.topViewEnum);
        this.scrollSyncService.configure(this.activeViewEnum);
        if (hasExistingValue(changes, 'focusedDate')) {
            const focusedDate = changes.focusedDate.currentValue;
            this.focusedDate = dateInRange(focusedDate, this.min, this.max);
        }
        if (changes.navigation) {
            this.syncNavigation = true;
        }
        if (changes.min || changes.max || changes.rangeValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.onValidatorChange();
        }
    }
    ngAfterViewInit() {
        this.setAriaActivedescendant();
    }
    ngAfterViewChecked() {
        if (!this.syncNavigation) {
            return;
        }
        this.syncNavigation = false;
        this.scrollSyncService.sync(virtualizationProp(this.navigationView), virtualizationProp(this.monthView));
    }
    ngOnDestroy() {
        this.scrollSyncService.destroy();
        this.domEvents.forEach(unbindCallback => unbindCallback());
        if (this.pickerService) {
            this.pickerService.calendar = null;
        }
        if (this.viewChangeSubscription) {
            this.viewChangeSubscription.unsubscribe();
        }
        if (this.pageChangeSubscription) {
            this.pageChangeSubscription.unsubscribe();
        }
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
        this.destroyed = true;
    }
    /**
     * @hidden
     */
    onResize() {
        this.focusedDate = new Date(this.focusedDate);
        this.cdr.detectChanges();
    }
    /**
     * Focuses the host element of the Calendar.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="calendar.focus()">Focus calendar</button>
     *  <kendo-calendar #calendar></kendo-calendar>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        const focusTarget = this.type === 'infinite' ?
            this.element && this.element.nativeElement :
            this.multiViewCalendar;
        if (isPresent(focusTarget)) {
            focusTarget.focus();
        }
    }
    /**
     * Blurs the Calendar component.
     */
    blur() {
        const blurTarget = this.type === 'infinite' ?
            this.element && this.element.nativeElement :
            this.multiViewCalendar;
        if (isPresent(blurTarget)) {
            blurTarget.blur();
        }
    }
    /**
     * @hidden
     */
    containsElement(element) {
        return Boolean(closest(element, node => node === this.element.nativeElement));
    }
    /**
     * @hidden
     */
    handleNavigation(candidate) {
        if (this.disabled) {
            return;
        }
        const focusTarget = candidate ? new Date(cloneDate(candidate).setDate(1)) : this.focusedDate;
        this.focusedDate = dateInRange(focusTarget, this.min, this.max);
        this.detectChanges();
    }
    /**
     * @hidden
     */
    onPageChange() {
        if (!NgZone.isInAngularZone()) {
            if (this.pageChangeSubscription) {
                this.pageChangeSubscription.unsubscribe();
            }
            this.pageChangeSubscription = from(this.resolvedPromise)
                .subscribe(() => {
                this.detectChanges(); // requires zone if templates
            });
        }
    }
    /**
     * @hidden
     */
    handleMultiViewCalendarValueChange(date, focusedDate) {
        const selectedDates = Array.isArray(date) ? date : [date];
        this.handleDateChange({ selectedDates, focusedDate });
    }
    /**
     * @hidden
     */
    handleDateChange(args) {
        const selectedDates = Array.isArray(args.selectedDates) ? args.selectedDates : [args.selectedDates];
        const canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);
        const availableDates = selectedDates.filter(date => !this.disabledDatesService.isDateDisabled(date));
        this.focusedDate = args.focusedDate || this.focusedDate;
        if (this.disabled) {
            return;
        }
        if (!canNavigateDown && areDatesEqual(availableDates, this.selectedDates)) {
            this.emitSameDate();
            return;
        }
        if (canNavigateDown) {
            this.bus.moveDown(this.activeViewEnum);
            return;
        }
        if (this.disabledDatesService.isDateDisabled(this.focusedDate)) {
            return;
        }
        this.ngZone.run(() => {
            this.selectedDates = availableDates.map(date => cloneDate(date));
            this.value = this.parseSelectionToValue(availableDates);
            this.onControlChange(this.parseSelectionToValue(availableDates));
            this.valueChange.emit(this.parseSelectionToValue(availableDates));
            this.cdr.markForCheck();
        });
    }
    /**
     * @hidden
     */
    writeValue(candidate) {
        this.verifyValue(candidate);
        this.value = candidate;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidateFn(control) || this.maxValidateFn(control);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @hidden
     */
    activeCellTemplate() {
        switch (this.activeViewEnum) {
            case CalendarViewEnum.month:
                return this.monthCellTemplateRef || this.cellTemplateRef;
            case CalendarViewEnum.year:
                return this.yearCellTemplateRef;
            case CalendarViewEnum.decade:
                return this.decadeCellTemplateRef;
            case CalendarViewEnum.century:
                return this.centuryCellTemplateRef;
            default:
                return null;
        }
    }
    /**
     * @hidden
     */
    handleNavigate(event) {
        this.focusedDate = event.focusedDate;
        this.activeView = event.activeView;
        this.emitNavigate(this.focusedDate);
    }
    /**
     * @hidden
     */
    emitNavigate(focusedDate) {
        const activeView = CalendarViewEnum[this.activeViewEnum];
        this.navigate.emit({ activeView, focusedDate });
    }
    /**
     * @hidden
     */
    emitEvent(emitter, args) {
        if (hasObservers(emitter)) {
            this.ngZone.run(() => {
                emitter.emit(args);
            });
        }
    }
    /**
     * @hidden
     */
    handleActiveDateChange(date) {
        this.activeViewDate = date;
        this.emitEvent(this.activeViewDateChange, date);
    }
    /**
     * @hidden
     */
    handleActiveViewChange(view) {
        this.activeView = view;
        this.emitEvent(this.activeViewChange, view);
        if (this.type === 'infinite') {
            this.scrollSyncService.configure(this.activeViewEnum);
        }
        this.detectChanges(); // requires zone if templates
    }
    handleCellClick({ date, modifiers }) {
        this.performSelection(date, modifiers);
    }
    /**
     * @hidden
     */
    handleWeekNumberClick(dates) {
        if (this.selection === 'single') {
            return;
        }
        this.ngZone.run(() => {
            this.handleDateChange({
                selectedDates: dates,
                focusedDate: last(dates)
            });
        });
    }
    /**
     * @hidden
     */
    handleBlur(args) {
        if (this.element.nativeElement.contains(args.relatedTarget)) {
            return;
        }
        this.isActive = false;
        // the injector can get the NgControl instance of the parent component (for example, the DateTimePicker)
        // and enters the zone for no reason because the parent component is still untouched
        if (!this.pickerService && requiresZoneOnBlur(this.control)) {
            this.ngZone.run(() => {
                this.onControlTouched();
                this.emitBlur(args);
                this.cdr.markForCheck();
            });
        }
        else {
            this.emitBlur(args);
            this.detectChanges();
        }
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isActive = true;
        if (!NgZone.isInAngularZone()) {
            this.detectChanges();
        }
        this.emitFocus();
    }
    setClasses(element) {
        this.renderer.addClass(element, 'k-widget');
        this.renderer.addClass(element, 'k-calendar');
        this.renderer.addClass(element, `k-calendar-${this.type}`);
    }
    verifyChanges() {
        if (!isDevMode()) {
            return;
        }
        if (this.min > this.max) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK$1} and ${MAX_DOC_LINK$1}.`);
        }
        if (this.bottomViewEnum > this.topViewEnum) {
            throw new Error(`The topView should be greater than bottomView. See ${BOTTOM_VIEW_DOC_LINK$1} and ${TOP_VIEW_DOC_LINK$1}.`);
        }
    }
    verifyValue(candidate) {
        if (!isDevMode()) {
            return;
        }
        if (this.selection === 'single' && candidate && !(candidate instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK$1} for possible resolution.`);
        }
        else if (this.selection === 'multiple' && candidate && Array.isArray(candidate)) {
            const onlyDates = candidate.every(value => value instanceof Date);
            if (!onlyDates) {
                throw new Error(`The 'value' should be an array of valid JavaScript Date instances. Check ${VALUE_DOC_LINK$1} for possible resolution.`);
            }
        }
    }
    bindEvents() {
        const element = this.element.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'blur', this.handleBlur.bind(this)), this.renderer.listen(element, 'focus', this.handleFocus.bind(this)), this.renderer.listen(element, 'mousedown', preventDefault), this.renderer.listen(element, 'click', this.handleComponentClick.bind(this)), this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));
    }
    emitBlur(args) {
        if (this.pickerService) {
            this.pickerService.onBlur.emit(args);
        }
    }
    emitFocus() {
        if (this.pickerService) {
            this.pickerService.onFocus.emit();
        }
    }
    handleComponentClick() {
        if (!this.isActive) {
            if (this.type === 'infinite' && this.monthView.isScrolled()) {
                this.focusedDate = cloneDate(this.focusedDate); //XXX: forces change detect
                this.detectChanges();
            }
            this.focus();
        }
    }
    handleKeydown(args) {
        const headerActive = this.type === 'classic' && this.multiViewCalendar.isHeaderActive;
        if (headerActive) {
            return;
        }
        // reserve the alt + arrow key commands for the picker
        const arrowKeyPressed = [Keys.ArrowUp, Keys.ArrowRight, Keys.ArrowDown, Keys.ArrowLeft].indexOf(args.keyCode) !== -1;
        if (isPresent(this.pickerService) && arrowKeyPressed && args.altKey) {
            return;
        }
        const candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(args), this.activeViewEnum), this.min, this.max);
        if (!isEqual(this.focusedDate, candidate)) {
            this.focusedDate = candidate;
            this.detectChanges();
            args.preventDefault();
        }
        if (args.keyCode === Keys.Enter) {
            this.performSelection(this.focusedDate, args);
        }
    }
    detectChanges() {
        if (!this.destroyed) {
            this.cdr.detectChanges();
        }
    }
    emitSameDate() {
        if (this.pickerService) {
            this.pickerService.sameDateSelected.emit();
        }
    }
    setAriaActivedescendant() {
        // in Classic mode, the inner MultiViewCalendar handles the activedescendant
        if (!isPresent(this.element) || (this.type === 'classic' && !this.element.nativeElement.hasAttribute('aria-activedescendant'))) {
            return;
        }
        if (this.type === 'classic') {
            this.renderer.removeAttribute(this.element.nativeElement, 'aria-activedescendant');
            return;
        }
        const focusedCellId = this.cellUID + this.focusedDate.getTime();
        this.renderer.setAttribute(this.element.nativeElement, 'aria-activedescendant', focusedCellId);
    }
    parseSelectionToValue(selection) {
        selection = selection || [];
        return this.selection === 'single' ? cloneDate(last(selection)) : selection.map(date => cloneDate(date));
    }
    performSelection(date, selectionModifiers) {
        const selection = this.selectionService.performSelection({
            date: date,
            modifiers: selectionModifiers,
            selectionMode: this.selection,
            activeViewEnum: this.activeViewEnum,
            rangePivot: this.rangePivot,
            selectedDates: this.selectedDates
        });
        this.rangePivot = selection.rangePivot;
        this.handleDateChange({
            selectedDates: selection.selectedDates,
            focusedDate: date
        });
    }
};
CalendarComponent.ɵfac = function CalendarComponent_Factory(t) { return new (t || CalendarComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(CalendarDOMService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScrollSyncService), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(PickerService, 8)); };
CalendarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CalendarComponent, selectors: [["kendo-calendar"]], contentQueries: function CalendarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MonthCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, YearCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DecadeCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CenturyCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, WeekNumberCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTitleTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NavigationItemTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.decadeCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.centuryCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.weekNumberTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTitleTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.navigationItemTemplate = _t.first);
    } }, viewQuery: function CalendarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(NavigationComponent, 5);
        ɵngcc0.ɵɵviewQuery(ViewListComponent, 5);
        ɵngcc0.ɵɵviewQuery(MultiViewCalendarComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.navigationView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiViewCalendar = _t.first);
    } }, hostVars: 7, hostBindings: function CalendarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.widgetId)("tabindex", ctx.calendarTabIndex)("aria-disabled", ctx.ariaDisabled);
        ɵngcc0.ɵɵclassProp("k-week-number", ctx.weekNumber)("k-disabled", ctx.ariaDisabled);
    } }, inputs: { id: "id", rangeValidation: "rangeValidation", selection: "selection", disabled: "disabled", tabindex: "tabindex", navigation: "navigation", activeView: "activeView", bottomView: "bottomView", topView: "topView", animateNavigation: "animateNavigation", weekNumber: "weekNumber", focusedDate: "focusedDate", min: "min", max: "max", value: "value", tabIndex: "tabIndex", disabledDates: "disabledDates", type: "type", cellTemplateRef: ["cellTemplate", "cellTemplateRef"], monthCellTemplateRef: ["monthCellTemplate", "monthCellTemplateRef"], yearCellTemplateRef: ["yearCellTemplate", "yearCellTemplateRef"], decadeCellTemplateRef: ["decadeCellTemplate", "decadeCellTemplateRef"], centuryCellTemplateRef: ["centuryCellTemplate", "centuryCellTemplateRef"], weekNumberTemplateRef: ["weekNumberTemplate", "weekNumberTemplateRef"], headerTitleTemplateRef: ["headerTitleTemplate", "headerTitleTemplateRef"], navigationItemTemplateRef: ["navigationItemTemplate", "navigationItemTemplateRef"] }, outputs: { activeViewChange: "activeViewChange", navigate: "navigate", activeViewDateChange: "activeViewDateChange", valueChange: "valueChange" }, exportAs: ["kendo-calendar"], features: [ɵngcc0.ɵɵProvidersFeature([
            BusViewService,
            CALENDAR_VALUE_ACCESSOR,
            CALENDAR_RANGE_VALIDATORS,
            KENDO_INPUT_PROVIDER,
            LocalizationService,
            DisabledDatesService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.calendar'
            },
            NavigationService,
            ScrollSyncService,
            SelectionService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: function () { let i18n_13; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the today button in the calendar header
         * @meaning kendo.calendar.today
         */
        const MSG_EXTERNAL_4715594042078324085$$DIST_FESM2015_INDEX_JS_14 = goog.getMsg("Today");
        i18n_13 = MSG_EXTERNAL_4715594042078324085$$DIST_FESM2015_INDEX_JS_14;
    }
    else {
        i18n_13 = $localize `:kendo.calendar.today|The label for the today button in the calendar header␟7a8b7961a5c754397897f39a824bdec621719040␟4715594042078324085:Today`;
    } let i18n_15; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the previous button in the Classic calendar
         * @meaning kendo.calendar.prevButtonTitle
         */
        const MSG_EXTERNAL_9114031309296786030$$DIST_FESM2015_INDEX_JS_16 = goog.getMsg("Navigate to previous view");
        i18n_15 = MSG_EXTERNAL_9114031309296786030$$DIST_FESM2015_INDEX_JS_16;
    }
    else {
        i18n_15 = $localize `:kendo.calendar.prevButtonTitle|The title of the previous button in the Classic calendar␟031715cd6a995d5dd1f62365cfe1b9e6226ca185␟9114031309296786030:Navigate to previous view`;
    } let i18n_17; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the next button in the Classic calendar
         * @meaning kendo.calendar.nextButtonTitle
         */
        const MSG_EXTERNAL_7248948899360601102$$DIST_FESM2015_INDEX_JS_18 = goog.getMsg("Navigate to next view");
        i18n_17 = MSG_EXTERNAL_7248948899360601102$$DIST_FESM2015_INDEX_JS_18;
    }
    else {
        i18n_17 = $localize `:kendo.calendar.nextButtonTitle|The title of the next button in the Classic calendar␟cd8c0952c72306cccf0973c8fd1957ef9da1f569␟7248948899360601102:Navigate to next view`;
    } return [["kendoCalendarLocalizedMessages", "", "today", i18n_13, "prevButtonTitle", i18n_15, "nextButtonTitle", i18n_17], [4, "ngIf"], [3, "activeView", "focusedDate", "min", "max", "templateRef", "valueChange", "pageChange", 4, "ngIf"], [3, "activeView", "isActive", "cellTemplateRef", "headerTitleTemplateRef", "weekNumberTemplateRef", "cellUID", "min", "max", "focusedDate", "weekNumber", "selectedDates", "todayButtonClick", "cellClick", "weekNumberCellClick", "activeDateChange", "pageChange"], [3, "resize"], [3, "activeView", "focusedDate", "min", "max", "templateRef", "valueChange", "pageChange"], [3, "views", "min", "max", "isActive", "activeView", "bottomView", "topView", "weekNumber", "animateNavigation", "cellTemplate", "monthCellTemplate", "yearCellTemplate", "decadeCellTemplate", "centuryCellTemplate", "headerTitleTemplate", "weekNumberTemplate", "focusedDate", "selection", "value", "disabledDates", "activeViewChange", "navigate", "valueChange", "focus", "blur"], ["multiviewcalendar", ""], [3, "today", "prevButtonTitle", "nextButtonTitle"]]; }, template: function CalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵtemplate(1, CalendarComponent_ng_container_1_Template, 4, 12, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, CalendarComponent_ng_container_2_Template, 4, 23, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "infinite");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "classic");
    } }, directives: function () { return [CalendarLocalizedMessagesDirective, ɵngcc2.NgIf, NavigationComponent, ViewListComponent, ɵngcc4.ResizeSensorComponent, MultiViewCalendarComponent, MultiViewCalendarCustomMessagesComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], CalendarComponent.prototype, "focusedDate", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], CalendarComponent.prototype, "min", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], CalendarComponent.prototype, "max", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CalendarComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarComponent.prototype, "selection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CalendarComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], CalendarComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], CalendarComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarComponent.prototype, "disabledDates", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CalendarComponent.prototype, "navigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarComponent.prototype, "bottomView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarComponent.prototype, "topView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], CalendarComponent.prototype, "type", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CalendarComponent.prototype, "animateNavigation", void 0);
__decorate([
    Input(),
    HostBinding('class.k-week-number'),
    __metadata("design:type", Boolean)
], CalendarComponent.prototype, "weekNumber", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CalendarComponent.prototype, "activeViewChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CalendarComponent.prototype, "navigate", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CalendarComponent.prototype, "activeViewDateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CalendarComponent.prototype, "valueChange", void 0);
__decorate([
    ContentChild(CellTemplateDirective, { static: false }),
    __metadata("design:type", CellTemplateDirective)
], CalendarComponent.prototype, "cellTemplate", void 0);
__decorate([
    Input('cellTemplate'),
    __metadata("design:type", CellTemplateDirective),
    __metadata("design:paramtypes", [CellTemplateDirective])
], CalendarComponent.prototype, "cellTemplateRef", null);
__decorate([
    ContentChild(MonthCellTemplateDirective, { static: false }),
    __metadata("design:type", MonthCellTemplateDirective)
], CalendarComponent.prototype, "monthCellTemplate", void 0);
__decorate([
    Input('monthCellTemplate'),
    __metadata("design:type", MonthCellTemplateDirective),
    __metadata("design:paramtypes", [MonthCellTemplateDirective])
], CalendarComponent.prototype, "monthCellTemplateRef", null);
__decorate([
    ContentChild(YearCellTemplateDirective, { static: false }),
    __metadata("design:type", YearCellTemplateDirective)
], CalendarComponent.prototype, "yearCellTemplate", void 0);
__decorate([
    Input('yearCellTemplate'),
    __metadata("design:type", YearCellTemplateDirective),
    __metadata("design:paramtypes", [YearCellTemplateDirective])
], CalendarComponent.prototype, "yearCellTemplateRef", null);
__decorate([
    ContentChild(DecadeCellTemplateDirective, { static: false }),
    __metadata("design:type", DecadeCellTemplateDirective)
], CalendarComponent.prototype, "decadeCellTemplate", void 0);
__decorate([
    Input('decadeCellTemplate'),
    __metadata("design:type", DecadeCellTemplateDirective),
    __metadata("design:paramtypes", [DecadeCellTemplateDirective])
], CalendarComponent.prototype, "decadeCellTemplateRef", null);
__decorate([
    ContentChild(CenturyCellTemplateDirective, { static: false }),
    __metadata("design:type", CenturyCellTemplateDirective)
], CalendarComponent.prototype, "centuryCellTemplate", void 0);
__decorate([
    Input('centuryCellTemplate'),
    __metadata("design:type", CenturyCellTemplateDirective),
    __metadata("design:paramtypes", [CenturyCellTemplateDirective])
], CalendarComponent.prototype, "centuryCellTemplateRef", null);
__decorate([
    ContentChild(WeekNumberCellTemplateDirective, { static: false }),
    __metadata("design:type", WeekNumberCellTemplateDirective)
], CalendarComponent.prototype, "weekNumberTemplate", void 0);
__decorate([
    Input('weekNumberTemplate'),
    __metadata("design:type", WeekNumberCellTemplateDirective),
    __metadata("design:paramtypes", [WeekNumberCellTemplateDirective])
], CalendarComponent.prototype, "weekNumberTemplateRef", null);
__decorate([
    ContentChild(HeaderTitleTemplateDirective, { static: false }),
    __metadata("design:type", HeaderTitleTemplateDirective)
], CalendarComponent.prototype, "headerTitleTemplate", void 0);
__decorate([
    Input('headerTitleTemplate'),
    __metadata("design:type", HeaderTitleTemplateDirective),
    __metadata("design:paramtypes", [HeaderTitleTemplateDirective])
], CalendarComponent.prototype, "headerTitleTemplateRef", null);
__decorate([
    ContentChild(NavigationItemTemplateDirective, { static: false }),
    __metadata("design:type", NavigationItemTemplateDirective)
], CalendarComponent.prototype, "navigationItemTemplate", void 0);
__decorate([
    Input('navigationItemTemplate'),
    __metadata("design:type", NavigationItemTemplateDirective),
    __metadata("design:paramtypes", [NavigationItemTemplateDirective])
], CalendarComponent.prototype, "navigationItemTemplateRef", null);
__decorate([
    ViewChild(NavigationComponent, { static: false }),
    __metadata("design:type", NavigationComponent)
], CalendarComponent.prototype, "navigationView", void 0);
__decorate([
    ViewChild(ViewListComponent, { static: false }),
    __metadata("design:type", ViewListComponent)
], CalendarComponent.prototype, "monthView", void 0);
__decorate([
    ViewChild(MultiViewCalendarComponent, { static: false }),
    __metadata("design:type", MultiViewCalendarComponent)
], CalendarComponent.prototype, "multiViewCalendar", void 0);
__decorate([
    HostBinding('attr.id'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], CalendarComponent.prototype, "widgetId", null);
__decorate([
    HostBinding('attr.tabindex'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], CalendarComponent.prototype, "calendarTabIndex", null);
__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], CalendarComponent.prototype, "ariaDisabled", null);
CalendarComponent = __decorate([ __param(12, Optional()),
    __metadata("design:paramtypes", [BusViewService,
        CalendarDOMService,
        ElementRef,
        NavigationService,
        Renderer2,
        ChangeDetectorRef,
        NgZone,
        Injector,
        ScrollSyncService,
        DisabledDatesService,
        LocalizationService,
        SelectionService,
        PickerService])
], CalendarComponent);

/**
 * @hidden
 */
const incompleteDateValidator = () => {
    return (control, incomplete) => {
        if (!isPresent(control.value) && incomplete) {
            return { incompleteDate: true };
        }
        else {
            return null;
        }
    };
};

/**
 * @hidden
 */
var Arrow;
(function (Arrow) {
    Arrow[Arrow["Up"] = 0] = "Up";
    Arrow[Arrow["Down"] = 1] = "Down";
    Arrow[Arrow["None"] = 2] = "None";
})(Arrow || (Arrow = {}));

var DateInputComponent_1;
const MIN_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DateInputComponent/#toc-min';
const MAX_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DateInputComponent/#toc-max';
const VALUE_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/dateinput/#toc-using-with-json';
const DATE_PART_REGEXP = /year|month|<day>/;
const TIME_PART_REGEXP = /hour|minute|second|millisecond/;
const SHORT_PATTERN_LENGTH_REGEXP = /d|M|H|h|m|s/;
const TWO_DIGIT_YEAR_MAX = 68;
const PREVIOUS_CENTURY_BASE = 1900;
const CURRENT_CENTURY_BASE = 2000;
const DEFAULT_FORMAT = 'd';
const padZero = (length) => new Array(Math.max(length, 0)).fill('0').join('');
const unpadZero = (value) => value.replace(/^0*/, '');
class Mask {
    constructor() {
        this.symbols = "";
    }
}
class KendoDate {
    constructor(intl, formatPlaceholder, format, value, twoDigitYearMax = TWO_DIGIT_YEAR_MAX) {
        this.intl = intl;
        this.formatPlaceholder = formatPlaceholder;
        this.format = format;
        this.twoDigitYearMax = twoDigitYearMax;
        this.year = true;
        this.month = true;
        this.date = true;
        this.hours = true;
        this.minutes = true;
        this.seconds = true;
        this.milliseconds = true;
        this.leadingZero = null;
        this.monthNames = null;
        this.typedMonthPart = "";
        this.value = getDate(new Date());
        this.knownParts = "adHhmMsSEy";
        this.symbols = {
            "E": "E",
            "H": "H",
            "M": "M",
            "a": "a",
            "d": "d",
            "h": "h",
            "m": "m",
            "s": "s",
            "S": "S",
            "y": "y"
        };
        validatePackage(packageMetadata);
        this.monthNames = this.allFormatedMonths();
        this.dayPeriods = this.allDayPeriods();
        if (!value) {
            this.value = getDate(new Date());
            const sampleFormat = this.dateFormatString(this.value, this.format).symbols;
            for (let i = 0; i < sampleFormat.length; i++) {
                this.setExisting(sampleFormat[i], false);
            }
        }
        else {
            this.value = cloneDate(value);
        }
    }
    hasValue() {
        const pred = (a, p) => a || p.type !== 'literal' && p.type !== 'dayperiod' && this.getExisting(p.pattern[0]);
        return this.intl.splitDateFormat(this.format).reduce(pred, false);
    }
    shouldNormalizeCentury() {
        return this.intl.splitDateFormat(this.format).some(part => part.pattern === 'yy');
    }
    getDateObject() {
        for (let i = 0; i < this.knownParts.length; i++) {
            if (!this.getExisting(this.knownParts[i])) {
                return null;
            }
        }
        return cloneDate(this.value);
    }
    getTextAndFormat(format) {
        return this.merge(this.intl.formatDate(this.value, format), this.dateFormatString(this.value, format));
    }
    getExisting(symbol) {
        switch (symbol) {
            case "y": return this.year;
            case "M":
            case "L": return this.month;
            case "d": return this.date;
            case "E": return this.date && this.month && this.year;
            case "h":
            case "H": return this.hours;
            case "m": return this.minutes;
            case "s": return this.seconds;
            case "S": return this.milliseconds;
            default: return true;
        }
    }
    setExisting(symbol, value) {
        switch (symbol) {
            case "y":
                this.year = value;
                if (value === false) {
                    this.value.setFullYear(2000);
                }
                break; //allow 2/29 dates
            case "M":
                this.month = value;
                if (value === false) {
                    this.value.setMonth(0);
                }
                break; //make sure you can type 31 at day part
            case "d":
                this.date = value;
                break;
            case "h":
            case "H":
                this.hours = value;
                break;
            case "m":
                this.minutes = value;
                break;
            case "s":
                this.seconds = value;
                break;
            case "S":
                this.milliseconds = value;
                break;
            default: return;
        }
    }
    modifyPart(symbol, offset) {
        let newValue = cloneDate(this.value);
        switch (symbol) {
            case "y":
                newValue.setFullYear(newValue.getFullYear() + offset);
                break;
            case "M":
                newValue = addMonths(this.value, offset);
                break;
            case "d":
            case "E":
                newValue.setDate(newValue.getDate() + offset);
                break;
            case "h":
            case "H":
                newValue.setHours(newValue.getHours() + offset);
                break;
            case "m":
                newValue.setMinutes(newValue.getMinutes() + offset);
                break;
            case "s":
                newValue.setSeconds(newValue.getSeconds() + offset);
                break;
            case "S":
                newValue.setMilliseconds(newValue.getMilliseconds() + offset);
                break;
            case "a":
                newValue.setHours(newValue.getHours() + (12 * offset));
                break;
            default: break;
        }
        if (this.shouldNormalizeCentury()) {
            newValue = this.normalizeCentury(newValue);
        }
        if (newValue.getFullYear() > 0) {
            this.setExisting(symbol, true);
            this.value = newValue;
        }
    }
    parsePart(symbol, currentChar, resetSegmentValue) {
        if (!currentChar) {
            this.resetLeadingZero();
            this.setExisting(symbol, false);
            return { value: null, switchToNext: false };
        }
        let baseDate = this.intl.formatDate(this.value, this.format);
        let dateParts = this.dateFormatString(this.value, this.format);
        let baseFormat = dateParts.symbols;
        let replaced = false;
        let prefix = "";
        let current = "";
        let suffix = "";
        for (let i = 0; i < baseDate.length; i++) {
            if (baseFormat[i] === symbol) {
                current += this.getExisting(symbol) ? baseDate[i] : "0";
                replaced = true;
            }
            else if (!replaced) {
                prefix += baseDate[i];
            }
            else {
                suffix += baseDate[i];
            }
        }
        let currentMaxLength = current.length - 3;
        let parsedDate = null;
        const month = this.matchMonth(currentChar);
        const dayPeriod = this.matchDayPeriod(currentChar, symbol);
        const isZeroCurrentChar = currentChar === '0';
        const leadingZero = (this.leadingZero || {})[symbol] || 0;
        if (isZeroCurrentChar) {
            let valueNumber = parseInt(resetSegmentValue ? currentChar : current + currentChar, 10);
            if (valueNumber === 0 && !this.isAbbrMonth(dateParts.partMap, symbol)) {
                this.incrementLeadingZero(symbol);
            }
        }
        else {
            this.resetLeadingZero();
        }
        for (let i = Math.max(0, currentMaxLength); i <= current.length; i++) {
            let middle = resetSegmentValue ? currentChar : (current.substring(i) + currentChar);
            if (symbol === "S" && resetSegmentValue) {
                // The "S" parser in intl parses "1" as 100ms in order to handle ISOString dates correctly, so to get 1ms, we need to pass "001"
                const padding = msPaddingFromFormat(baseFormat);
                middle = padding + middle;
            }
            let middleNumber = parseInt(middle, 10);
            parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);
            if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {
                if (symbol === 'M' && !month) {
                    const monthNumber = middleNumber - 1;
                    if (monthNumber > -1 && monthNumber < 12) {
                        parsedDate = cloneDate(this.value);
                        parsedDate.setMonth(monthNumber);
                        if (parsedDate.getMonth() !== monthNumber) {
                            parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
                        }
                    }
                }
                if (symbol === 'y') {
                    parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);
                    if (this.date && parsedDate.getDate() !== this.value.getDate()) {
                        parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
                    }
                }
            }
            if (parsedDate) {
                //move to next segment if the part will overflow with next char
                //when start from empty date (01, then 010), padded zeros should be trimmed
                const patternValue = this.partPattern(dateParts.partMap, symbol).pattern;
                const peekDate = this.intl.parseDate(`${prefix}${this.peek(middle, patternValue)}${suffix}`, this.format);
                const patternLength = this.patternLength(patternValue) || patternValue.length;
                const patternSatisfied = (leadingZero + (unpadZero(middle) || currentChar).length) >= patternLength;
                const switchToNext = peekDate === null || patternSatisfied;
                if (this.shouldNormalizeCentury()) {
                    parsedDate = this.normalizeCentury(parsedDate);
                }
                this.value = parsedDate;
                this.setExisting(symbol, true);
                return { value: this.value, switchToNext: switchToNext };
            }
        }
        if (month) {
            parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);
            if (parsedDate) {
                this.value = parsedDate;
                this.setExisting(symbol, true);
                return { value: this.value, switchToNext: false };
            }
        }
        if (dayPeriod) {
            parsedDate = this.intl.parseDate(prefix + dayPeriod + suffix, this.format);
            if (parsedDate) {
                this.value = parsedDate;
                return { value: this.value, switchToNext: true };
            }
        }
        if (isZeroCurrentChar) {
            this.setExisting(symbol, false);
        }
        return { value: null, switchToNext: false };
    }
    resetLeadingZero() {
        const hasLeadingZero = this.leadingZero !== null;
        this.setLeadingZero(null);
        return hasLeadingZero;
    }
    setLeadingZero(leadingZero) {
        this.leadingZero = leadingZero;
    }
    normalizeCentury(date) {
        if (!isPresent(date)) {
            return date;
        }
        const twoDigitYear = cropTwoDigitYear(date);
        const centuryBase = this.getNormalizedCenturyBase(twoDigitYear);
        const normalizedDate = setYears(date, centuryBase + twoDigitYear);
        return normalizedDate;
    }
    incrementLeadingZero(symbol) {
        const leadingZero = this.leadingZero || {};
        leadingZero[symbol] = (leadingZero[symbol] || 0) + 1;
        this.leadingZero = leadingZero;
    }
    isAbbrMonth(parts, symbol) {
        const pattern = this.partPattern(parts, symbol);
        return pattern.type === 'month' && pattern.names;
    }
    partPattern(parts, symbol) {
        return parts.filter((part) => part.pattern.indexOf(symbol) !== -1)[0];
    }
    peek(value, pattern) {
        const peekValue = unpadZero(value) + '0';
        return padZero(pattern.length - peekValue.length) + peekValue;
    }
    matchMonth(typedChar) {
        this.typedMonthPart += typedChar.toLowerCase();
        if (!this.monthNames) {
            return "";
        }
        while (this.typedMonthPart.length > 0) {
            for (let i = 0; i < this.monthNames.length; i++) {
                if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {
                    return this.monthNames[i];
                }
            }
            const monthAsNum = parseInt(this.typedMonthPart, 10);
            if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart /*ensure they exact match*/) {
                return this.monthNames[monthAsNum - 1];
            }
            this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);
        }
        return "";
    }
    matchDayPeriod(typedChar, symbol) {
        const lowerChart = String(typedChar).toLowerCase();
        if (symbol === 'a' && this.dayPeriods) {
            if (this.dayPeriods.am.toLowerCase().startsWith(lowerChart)) {
                return this.dayPeriods.am;
            }
            else if (this.dayPeriods.pm.toLowerCase().startsWith(lowerChart)) {
                return this.dayPeriods.pm;
            }
        }
        return '';
    }
    allFormatedMonths() {
        const dateFormatParts = this.intl.splitDateFormat(this.format);
        for (let i = 0; i < dateFormatParts.length; i++) {
            if (dateFormatParts[i].type === "month" && dateFormatParts[i].names) {
                return this.intl.dateFormatNames(dateFormatParts[i].names);
            }
        }
        return null;
    }
    allDayPeriods() {
        const dateFormatParts = this.intl.splitDateFormat(this.format);
        for (let i = 0; i < dateFormatParts.length; i++) {
            if (dateFormatParts[i].type === "dayperiod" && dateFormatParts[i].names) {
                return this.intl.dateFormatNames(dateFormatParts[i].names);
            }
        }
        return null;
    }
    patternLength(pattern) {
        if (pattern[0] === 'y') {
            return 4;
        }
        if (SHORT_PATTERN_LENGTH_REGEXP.test(pattern)) {
            return 2;
        }
        return 0;
    }
    //TODO: REMOVE!
    dateFormatString(date, format) {
        const dateFormatParts = this.intl.splitDateFormat(format);
        const parts = [];
        const partMap = [];
        for (let i = 0; i < dateFormatParts.length; i++) {
            let partLength = this.intl.formatDate(date, { pattern: dateFormatParts[i].pattern }).length;
            while (partLength > 0) {
                parts.push(this.symbols[dateFormatParts[i].pattern[0]] || "_");
                partMap.push(dateFormatParts[i]);
                partLength--;
            }
        }
        const returnValue = new Mask();
        returnValue.symbols = parts.join("");
        returnValue.partMap = partMap;
        return returnValue;
    }
    merge(text, mask) {
        // Important: right to left.
        let resultText = "";
        let resultFormat = "";
        let format = mask.symbols;
        for (let r = format.length - 1; r >= 0; r--) {
            if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {
                resultText = text[r] + resultText;
                resultFormat = format[r] + resultFormat;
            }
            else {
                const currentSymbol = format[r];
                while (r >= 0 && currentSymbol === format[r]) {
                    r--;
                }
                r++;
                if (this.leadingZero && this.leadingZero[currentSymbol]) {
                    resultText = '0' + resultText;
                }
                else {
                    resultText = this.dateFieldName(mask.partMap[r]) + resultText;
                }
                while (resultFormat.length < resultText.length) {
                    resultFormat = format[r] + resultFormat;
                }
            }
        }
        return [resultText, resultFormat];
    }
    dateFieldName(part) {
        const formatPlaceholder = this.formatPlaceholder || 'wide';
        if (formatPlaceholder[part.type]) {
            return formatPlaceholder[part.type];
        }
        if (formatPlaceholder === 'formatPattern') {
            return part.pattern;
        }
        return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));
    }
    getNormalizedCenturyBase(twoDigitYear) {
        return twoDigitYear > this.twoDigitYearMax ?
            PREVIOUS_CENTURY_BASE :
            CURRENT_CENTURY_BASE;
    }
}
/**
 * Represents the [Kendo UI DateInput component for Angular]({% slug overview_dateinput %}#toc-basic-usage).
 */
let DateInputComponent = DateInputComponent_1 = class DateInputComponent {
    constructor(cdr, intl, renderer, wrapper, ngZone, injector, localization, pickerService) {
        this.cdr = cdr;
        this.intl = intl;
        this.renderer = renderer;
        this.wrapper = wrapper;
        this.ngZone = ngZone;
        this.injector = injector;
        this.localization = localization;
        this.pickerService = pickerService;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Sets or gets the `disabled` property of the DateInput and
         * determines whether the component is active
         * ([see example]({% slug disabled_dateinput %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the read-only state of the DateInput
         * ([see example]({% slug readonly_dateinput %})).
         */
        this.readonly = false;
        /**
         * Sets the title of the input element of the DateInput.
         */
        this.title = "";
        /**
         * Sets or gets the `tabIndex` property of the DateInput.
         * .
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.role = 'spinbutton';
        /**
         * @hidden
         */
        this.ariaReadOnly = false;
        /**
         * Specifies the date format that is used to display the input value
         * ([see example]({% slug formats_dateinput %})).
         *
         * Format value options:
         * - `string` - Provide a `string` if a single format is going to be used regardless whether the input is focused or blurred.
         * - [`FormatSettings`]({% slug api_dateinputs_formatsettings %}) - To display different formats when the component is focused or blurred, provide a settings object with specified `inputFormat` and `displayFormat` values.
         */
        this.format = DEFAULT_FORMAT;
        /**
         * Specifies the hint the DateInput displays when its value is `null`.
         * For more information, refer to the article on
         * [placeholders]({% slug placeholders_dateinput %}).
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-dateinput placeholder="Enter birth date..."></kendo-dateinput>
         * `
         * })
         * export class AppComponent { }
         * ```
         */
        this.placeholder = null;
        /**
         * Configures the incremental steps of the DateInput.
         * For more information, refer to the article on
         * [incremental steps]({% slug incrementalsteps_dateinput %}).
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-dateinput [steps]="steps"></kendo-dateinput>
         * `
         * })
         * export class AppComponent {
         *   public steps = { year: 10, month: 1, day: 5 };
         * }
         * ```
         */
        this.steps = {};
        /**
         * Determines whether the built-in min or max validators are to be enforced when a form is being validated.
         */
        this.rangeValidation = true;
        /**
         * @hidden
         * Based on the min and max values, specifies whether the value will be auto-corrected while typing.
         */
        this.autoCorrect = false;
        /**
         * Determines whether the built-in validation for incomplete dates is to be enforced when a form is being validated.
         */
        this.incompleteDateValidation = false;
        /**
         * The maximum year to assume to be from the current century when typing two-digit year value
         * ([see example]({% slug formats_dateinput %}#toc-two-digit-year-format)).
         *
         * The default value is 68, indicating that typing any value less than 69
         * will be assumed to be 20xx, while 69 and larger will be assumed to be 19xx.
         */
        this.twoDigitYearMax = TWO_DIGIT_YEAR_MAX;
        /**
         * Specifies whether the **Up** and **Down** spin buttons will be rendered.
         * For more information, refer to the article on
         * [spinner buttons]({% slug spinbuttons_dateinput %}).
         */
        this.spinners = false;
        /**
         * @hidden
         */
        this.isPopupOpen = false;
        /**
         * @hidden
         */
        this.hasPopup = false;
        /**
         * Fires each time the user selects a new value.
         * For more information, refer to the section on
         * [events]({% slug overview_dateinput %}#toc-events).
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         * Fires each time the user selects a new value.
         * For more information, refer to the section on
         * [events]({% slug overview_dateinput %}#toc-events).
         */
        this.valueUpdate = new EventEmitter();
        /**
         * Fires each time the user focuses the input element.
         * For more information, refer to the section on
         * [events]({% slug overview_dateinput %}#toc-events).
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-dateinput (focus)="handleFocus()"></kendo-dateinput>
         * `
         * })
         * export class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         *
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred.
         * For more information, refer to the section on
         * [events]({% slug overview_dateinput %}#toc-events).
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-dateinput (blur)="handleBlur()"></kendo-dateinput>
         * `
         * })
         * export class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         *
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.arrow = Arrow;
        this.arrowDirection = Arrow.None;
        this.formatSections = { date: false, time: false };
        this.hasMousedown = false;
        this.focusedPriorToMousedown = false;
        /**
         * @hidden
         */
        this.isDateIncomplete = false;
        this.currentValue = "";
        this.currentFormat = "";
        this.backspace = false;
        this.resetSegmentValue = true;
        this.minValidator = noop;
        this.maxValidator = noop;
        this.incompleteValidator = noop;
        this._value = null;
        this._active = false;
        this.kendoDate = null;
        this.paste = false;
        this.domEvents = [];
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        this.symbolsMap = this.dateSymbolMap();
        this.updateFormatSections();
        if (this.pickerService) {
            this.pickerService.input = this;
        }
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Specifies the value of the DateInput component.
     *
     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    set value(value) {
        this.verifyValue(value);
        if (this.autoCorrect && !isInRange(value, this.min, this.max)) {
            return;
        }
        this._value = cloneDate(value);
        this.valueUpdate.emit(cloneDate(value));
    }
    get value() {
        return this._value;
    }
    /**
     * Sets the size of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `null`
     *
     */
    set size(size) {
        this.renderer.removeClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
        if (size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * Sets the border radius of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `'full'`
     * * `null`
     *
     */
    set rounded(rounded) {
        this.renderer.removeClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        if (rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(rounded));
        }
        this._rounded = rounded;
    }
    get rounded() {
        return this._rounded;
    }
    /**
     * Sets the fillMode of the component.
     *
     * The possible values are:
     * * `'solid'` (Default)
     * * `'flat'`
     * * `'outline'`
     * * `null`
     *
     */
    set fillMode(fillMode) {
        this.renderer.removeClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
        if (fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', fillMode));
            if (this.spinners && this.spinup && this.spindown) {
                this.setSpinnerFill(this.spinup.nativeElement, fillMode, this.fillMode);
                this.setSpinnerFill(this.spindown.nativeElement, fillMode, this.fillMode);
            }
        }
        this._fillMode = fillMode;
    }
    get fillMode() {
        return this._fillMode;
    }
    get wrapperClass() {
        return true;
    }
    get disabledClass() {
        return this.disabled;
    }
    get inputElement() {
        return this.dateInput ? this.dateInput.nativeElement : null;
    }
    get inputValue() {
        return (this.inputElement || {}).value || '';
    }
    get isActive() {
        return this._active;
    }
    set isActive(value) {
        this._active = value;
        if (!this.wrapper) {
            return;
        }
        if (!isPresent(this.pickerService)) {
            const element = this.wrapper.nativeElement;
            if (value) {
                this.renderer.addClass(element, 'k-focus');
            }
            else {
                this.renderer.removeClass(element, 'k-focus');
            }
        }
    }
    get inputFormat() {
        if (!this.format) {
            return DEFAULT_FORMAT;
        }
        if (typeof this.format === 'string') {
            return this.format;
        }
        else {
            return this.format.inputFormat;
        }
    }
    get displayFormat() {
        if (!this.format) {
            return DEFAULT_FORMAT;
        }
        if (typeof this.format === 'string') {
            return this.format;
        }
        else {
            return this.format.displayFormat;
        }
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty
     */
    isEmpty() {
        return !this.currentValue || !String(this.currentValue).trim();
    }
    /**
     * @hidden
     */
    containsElement(element) {
        return Boolean(closest(element, node => node === this.wrapper.nativeElement));
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        this.verifyRange();
        if (changes.min || changes.max || changes.rangeValidation || changes.incompleteDateValidation) {
            this.minValidator = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidator = this.rangeValidation ? maxValidator(this.max) : noop;
            this.incompleteValidator = this.incompleteDateValidation ? incompleteDateValidator() : noop;
            this.onValidatorChange();
        }
        if (changes.format) {
            this.symbolsMap = this.dateSymbolMap();
            this.updateFormatSections();
        }
        const isEqualToKendoDate = this.kendoDate && isEqual(this.value, this.kendoDate.getDateObject());
        if (changes.format || !isEqualToKendoDate || changes.placeholder) {
            this.kendoDate = this.getKendoDate(this.value);
            this.updateElementValue(this.isActive);
        }
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
        if (this.pickerService) {
            this.pickerService.input = null;
        }
        this.domEvents.forEach(unbindCallback => unbindCallback());
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidator(control) || this.maxValidator(control) || this.incompleteValidator(control, this.isDateIncomplete);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.kendoDate = this.getKendoDate(this.value);
        this.updateElementValue();
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
        this.ngControl = this.injector.get(NgControl, null);
        if (this.wrapper) {
            this.renderer.removeAttribute(this.wrapper.nativeElement, 'tabindex');
            this.ngZone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    ngAfterViewInit() {
        this.setComponentClasses();
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    //ngModel binding
    /**
     * @hidden
     */
    writeValue(value) {
        this.verifyValue(value);
        this.kendoDate = this.getKendoDate(value);
        this.value = cloneDate(value);
        this.updateElementValue(this.isActive);
    }
    /**
     * @hidden
     */
    triggerChange() {
        const value = this.kendoDate.getDateObject();
        if (+value !== +this.value) {
            this.value = cloneDate(value);
            this.notify();
        }
    }
    /**
     * @hidden
     */
    notify() {
        this.ngZone.run(() => {
            this.onControlChange(cloneDate(this.value));
            this.valueChange.emit(cloneDate(this.value));
        });
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * Focuses the DateInput component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="dateinput.focus()">Focus date input</button>
     *  <kendo-dateinput #dateinput></kendo-dateinput>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        const input = this.inputElement;
        if (input) {
            input.focus();
            this.selectDateSegment(this.currentFormat[0]);
        }
    }
    /**
     * Blurs the DateInput component.
     */
    blur() {
        const input = this.inputElement;
        if (input) {
            input.blur();
        }
    }
    /**
     * @hidden
     */
    handleButtonClick(offset) {
        this.arrowDirection = Arrow.None;
        this.modifyDateSegmentValue(offset);
    }
    /**
     * @hidden
     */
    modifyDateSegmentValue(offset) {
        const caret = this.caret();
        const symbol = this.currentFormat[caret[0]];
        let step = (this.steps || {})[this.symbolsMap[symbol]] || 1;
        if (symbol === "S" && !this.steps.millisecond) {
            const msDigits = millisecondDigitsInFormat(this.inputFormat);
            step = millisecondStepFor(msDigits);
        }
        this.kendoDate.modifyPart(symbol, offset * step);
        this.putDateInRange();
        this.updateElementValue(this.isActive);
        this.triggerChange();
        this.selectDateSegment(symbol);
        this.updateIncompleteValidationStatus();
    }
    /**
     * @hidden
     */
    switchDateSegment(offset) {
        const caret = this.caret();
        if (this.kendoDate.resetLeadingZero()) {
            this.updateElementValue(this.isActive);
        }
        if (caret[0] < caret[1] && this.currentFormat[caret[0]] !== this.currentFormat[caret[1] - 1]) {
            this.selectNearestSegment(offset > 0 ? caret[0] : caret[1] - 1);
            this.resetSegmentValue = true;
            return true;
        }
        const previousFormatSymbol = this.currentFormat[caret[0]];
        let a = caret[0] + offset;
        while (a > 0 && a < this.currentFormat.length) {
            if (this.currentFormat[a] !== previousFormatSymbol &&
                this.currentFormat[a] !== "_") {
                break;
            }
            a += offset;
        }
        if (this.currentFormat[a] === "_") {
            //there is not known symbol found
            return false;
        }
        let b = a;
        while (b >= 0 && b < this.currentFormat.length) {
            if (this.currentFormat[b] !== this.currentFormat[a]) {
                break;
            }
            b += offset;
        }
        if (a > b && (b + 1 !== caret[0] || a + 1 !== caret[1])) {
            this.caret(b + 1, a + 1);
            this.resetSegmentValue = true;
            return true;
        }
        else if (a < b && (a !== caret[0] || b !== caret[1])) {
            this.caret(a, b);
            this.resetSegmentValue = true;
            return true;
        }
        return false;
    }
    /**
     * @hidden
     */
    selectDateSegment(symbol) {
        let begin = -1;
        let end = 0;
        for (let i = 0; i < this.currentFormat.length; i++) {
            if (this.currentFormat[i] === symbol) {
                end = i + 1;
                if (begin === -1) {
                    begin = i;
                }
            }
        }
        if (begin < 0) {
            begin = 0;
        }
        this.caret(0, 0);
        this.caret(begin, end);
    }
    /**
     * @hidden
     */
    handleClick() {
        this.hasMousedown = false;
        if (this.isActive) {
            const selectionPresent = this.inputElement.selectionStart !== this.inputElement.selectionEnd;
            const placeholderToggled = isPresent(this.placeholder) && !this.kendoDate.hasValue() && !this.focusedPriorToMousedown;
            // focus first segment if the user hasn't selected something during mousedown and if the placeholder was just toggled
            const selectFirstSegment = !selectionPresent && placeholderToggled;
            const index = selectFirstSegment ? 0 : this.caret()[0];
            this.selectNearestSegment(index);
        }
    }
    /**
     * @hidden
     */
    handleDragAndDrop(args) {
        args.preventDefault();
    }
    /**
     * @hidden
     */
    handleMousedown() {
        this.hasMousedown = true;
        this.focusedPriorToMousedown = this.isActive;
    }
    /**
     * @hidden
     */
    handleFocus(args) {
        this.isActive = true;
        this.updateElementValue();
        if (!this.hasMousedown) {
            this.caret(0, this.inputValue.length);
        }
        this.hasMousedown = false;
        if (hasObservers(this.onFocus)) {
            this.ngZone.run(() => {
                this.emitFocus(args);
            });
        }
        else {
            this.emitFocus(args);
        }
    }
    /**
     * @hidden
     */
    handleBlur(args) {
        this.isActive = false;
        this.resetSegmentValue = true;
        this.kendoDate.resetLeadingZero();
        this.updateElementValue();
        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.ngControl)) {
            this.ngZone.run(() => {
                this.onControlTouched();
                this.emitBlur(args);
                this.cdr.markForCheck();
            });
        }
        else {
            this.emitBlur(args);
        }
    }
    getKendoDate(value) {
        const { leadingZero } = (this.kendoDate || {}) || null;
        const kendoDate = new KendoDate(this.intl, this.formatPlaceholder, this.inputFormat, value, this.twoDigitYearMax);
        kendoDate.setLeadingZero(this.isActive ? leadingZero : null);
        return kendoDate;
    }
    dateSymbolMap() {
        const reducer = (map$$1, part) => {
            map$$1[part.pattern[0]] = part.type;
            return map$$1;
        };
        return this.intl.splitDateFormat(this.inputFormat).reduce(reducer, {});
    }
    updateElementValue(isActive) {
        const start = this.caret()[0]; //XXX: get caret position before input is updated
        const format = this.isActive ? this.inputFormat : this.displayFormat;
        const texts = this.kendoDate.getTextAndFormat(format);
        const showPlaceholder = !this.isActive && isPresent(this.placeholder) && !this.kendoDate.hasValue();
        const input = this.inputElement;
        this.currentFormat = texts[1];
        this.currentValue = !showPlaceholder ? texts[0] : '';
        this.renderer.setProperty(input, "value", this.currentValue);
        if (input.placeholder !== this.placeholder) {
            this.renderer.setProperty(input, "placeholder", this.placeholder);
        }
        if (isActive) {
            this.selectNearestSegment(start);
        }
    }
    caret(start, end = start) {
        const isPosition = start !== undefined;
        let returnValue = [start, start];
        const element = this.inputElement;
        if (isPosition && (this.disabled || this.readonly)) {
            return undefined;
        }
        try {
            if (element.selectionStart !== undefined) {
                if (isPosition) {
                    if (isDocumentAvailable() && document.activeElement !== element) {
                        element.focus();
                    }
                    element.setSelectionRange(start, end);
                }
                returnValue = [element.selectionStart, element.selectionEnd];
            }
        }
        catch (e) {
            returnValue = [];
        }
        return returnValue;
    }
    selectNearestSegment(index) {
        // Finds the nearest (in both directions) known part.
        for (let i = index, j = index - 1; i < this.currentFormat.length || j >= 0; i++, j--) {
            if (i < this.currentFormat.length && this.currentFormat[i] !== "_") {
                this.selectDateSegment(this.currentFormat[i]);
                return;
            }
            if (j >= 0 && this.currentFormat[j] !== "_") {
                this.selectDateSegment(this.currentFormat[j]);
                return;
            }
        }
    }
    verifyRange() {
        if (!isDevMode()) {
            return;
        }
        if (!isValidRange(this.min, this.max)) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK$2} and ${MAX_DOC_LINK$2}.`);
        }
    }
    verifyValue(value) {
        if (!isDevMode()) {
            return;
        }
        if (value && !(value instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK$2} for possible resolution.`);
        }
    }
    putDateInRange() {
        const currentDate = this.kendoDate.getDateObject();
        const candidate = dateInRange(currentDate, this.min, this.max);
        if (this.autoCorrect && !isEqual(currentDate, candidate)) {
            this.kendoDate = this.getKendoDate(candidate);
        }
    }
    updateFormatSections() {
        this.formatSections = this.intl.splitDateFormat(this.inputFormat)
            .reduce(({ date, time }, p) => {
            return {
                date: date || DATE_PART_REGEXP.test(p.type),
                time: time || TIME_PART_REGEXP.test(p.type)
            };
        }, { date: false, time: false });
    }
    intlChange() {
        this.updateFormatSections();
        this.kendoDate = this.getKendoDate(this.value);
        this.updateElementValue(this.isActive);
    }
    updateOnPaste() {
        let value = this.intl.parseDate(this.inputValue, this.inputFormat) || this.value;
        if (isPresent(value) && this.kendoDate.shouldNormalizeCentury()) {
            value = this.kendoDate.normalizeCentury(value);
        }
        const notify = +value !== +this.value;
        this.writeValue(value);
        if (notify) {
            this.notify();
        }
    }
    bindEvents() {
        const element = this.wrapper.nativeElement;
        const mousewheelHandler = this.handleMouseWheel.bind(this);
        this.domEvents.push(this.renderer.listen(element, 'DOMMouseScroll', mousewheelHandler), this.renderer.listen(element, 'mousewheel', mousewheelHandler), this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)), this.renderer.listen(element, 'paste', this.handlePaste.bind(this)), this.renderer.listen(element, 'input', this.handleInput.bind(this)));
    }
    handleMouseWheel(event) {
        if (this.disabled || this.readonly || !this.isActive) {
            return;
        }
        /* tslint:disable-next-line:deprecation */
        event = window.event || event;
        if (event.shiftKey) {
            this.switchDateSegment((event.wheelDelta || -event.detail) > 0 ? -1 : 1);
        }
        else {
            this.modifyDateSegmentValue((event.wheelDelta || -event.detail) > 0 ? 1 : -1);
        }
        event.returnValue = false;
        if (event.preventDefault) {
            event.preventDefault();
        }
        if (event.stopPropagation) {
            event.stopPropagation();
        }
    }
    handlePaste() {
        this.paste = true;
    }
    handleKeydown(event) {
        if (this.disabled || this.readonly || event.altKey || event.ctrlKey || event.metaKey) {
            return;
        }
        if (event.keyCode === Keys.Tab) {
            const moved = this.switchDateSegment(event.shiftKey ? -1 : 1);
            if (moved) {
                event.preventDefault();
            }
            return;
        }
        if (event.keyCode === Keys.Backspace) {
            this.backspace = true;
            return;
        }
        switch (event.keyCode) {
            case Keys.ArrowDown:
                this.modifyDateSegmentValue(-1);
                break;
            case Keys.ArrowUp:
                this.modifyDateSegmentValue(1);
                break;
            case Keys.ArrowRight:
                this.switchDateSegment(1);
                break;
            case Keys.ArrowLeft:
                this.switchDateSegment(-1);
                break;
            case Keys.Home:
                this.selectNearestSegment(0);
                break;
            case Keys.End:
                this.selectNearestSegment(this.inputValue.length);
                break;
            default:
                return; //skip the preventDefault if we didn't handled the keyCode
        }
        event.preventDefault();
    }
    handleInput() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.paste) {
            this.updateOnPaste();
            this.paste = false;
            return;
        }
        const diff = approximateStringMatching(this.currentValue, this.currentFormat, this.inputValue, this.caret()[0]);
        const navigationOnly = (diff.length === 1 && diff[0][1] === "_");
        let switchPart = false;
        if (!navigationOnly) {
            let parsedPart;
            for (let i = 0; i < diff.length; i++) {
                parsedPart = this.kendoDate.parsePart(diff[i][0], diff[i][1], this.resetSegmentValue);
                switchPart = parsedPart.switchToNext;
            }
            const candidate = this.kendoDate.getDateObject();
            if (this.value && candidate && !this.formatSections.date) {
                this.kendoDate = this.getKendoDate(setTime(this.value, candidate));
            }
        }
        this.resetSegmentValue = false;
        this.putDateInRange();
        this.updateElementValue(this.isActive);
        this.triggerChange();
        this.updateIncompleteValidationStatus();
        if (diff.length && diff[0][0] !== "_") {
            this.selectDateSegment(diff[0][0]);
        }
        if (switchPart || navigationOnly) {
            this.switchDateSegment(1);
        }
        if (this.backspace) {
            this.switchDateSegment(-1);
        }
        this.backspace = false;
    }
    emitFocus(args) {
        this.onFocus.emit();
        if (this.pickerService) {
            this.pickerService.onFocus.emit(args);
        }
    }
    emitBlur(args) {
        this.onBlur.emit();
        if (this.pickerService) {
            this.pickerService.onBlur.emit(args);
        }
    }
    updateIncompleteValidationStatus() {
        const previousValue = this.isDateIncomplete;
        this.isDateIncomplete = this.kendoDate.hasValue() && this.value === null;
        if (previousValue === this.isDateIncomplete || !this.incompleteDateValidation) {
            return;
        }
        if (isPresent(this.ngControl) && !isPresent(this.pickerService)) {
            this.cdr.markForCheck();
            this.ngZone.run(() => this.onValidatorChange());
        }
        else if (isPresent(this.pickerService)) {
            this.pickerService.dateCompletenessChange.emit();
        }
    }
    setSpinnerFill(spinner, fill, oldFill) {
        if (oldFill) {
            this.renderer.removeClass(spinner, `k-button-${oldFill}`);
            this.renderer.removeClass(spinner, `k-button-${oldFill}-base`);
        }
        this.renderer.addClass(spinner, `k-button-${fill}`);
        this.renderer.addClass(spinner, `k-button-${fill}-base`);
    }
    setComponentClasses() {
        if (this.size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
        }
        if (this.rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        }
        if (this.fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
        }
        if (this.spinners) {
            this.setSpinnerFill(this.spinup.nativeElement, this.fillMode);
            this.setSpinnerFill(this.spindown.nativeElement, this.fillMode);
        }
    }
};
DateInputComponent.ɵfac = function DateInputComponent_Factory(t) { return new (t || DateInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(PickerService, 8)); };
DateInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateInputComponent, selectors: [["kendo-dateinput"]], viewQuery: function DateInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c19, 7);
        ɵngcc0.ɵɵviewQuery(_c20, 5);
        ɵngcc0.ɵɵviewQuery(_c21, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.spinup = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.spindown = _t.first);
    } }, hostVars: 6, hostBindings: function DateInputComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-input", ctx.wrapperClass)("k-dateinput", ctx.wrapperClass)("k-disabled", ctx.disabledClass);
    } }, inputs: { focusableId: "focusableId", disabled: "disabled", readonly: "readonly", title: "title", tabindex: "tabindex", role: "role", ariaReadOnly: "ariaReadOnly", format: "format", placeholder: "placeholder", steps: "steps", rangeValidation: "rangeValidation", autoCorrect: "autoCorrect", incompleteDateValidation: "incompleteDateValidation", twoDigitYearMax: "twoDigitYearMax", spinners: "spinners", isPopupOpen: "isPopupOpen", hasPopup: "hasPopup", tabIndex: "tabIndex", value: "value", size: "size", rounded: "rounded", fillMode: "fillMode", formatPlaceholder: "formatPlaceholder", max: "max", min: "min" }, outputs: { valueChange: "valueChange", valueUpdate: "valueUpdate", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendo-dateinput"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateInputComponent_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateInputComponent_1), multi: true },
            { provide: L10N_PREFIX, useValue: 'kendo.dateinput' },
            { provide: KendoInput, useExisting: forwardRef(() => DateInputComponent_1) },
            LocalizationService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 21, consts: function () { let i18n_22; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the **Increment** button in the DateInput
         * @meaning kendo.dateinput.increment
         */
        const MSG_EXTERNAL_589112377451589685$$DIST_FESM2015_INDEX_JS_23 = goog.getMsg("Increase value");
        i18n_22 = MSG_EXTERNAL_589112377451589685$$DIST_FESM2015_INDEX_JS_23;
    }
    else {
        i18n_22 = $localize `:kendo.dateinput.increment|The label for the **Increment** button in the DateInput␟a55944f9de69e7cc86b91200fe96f980a947d704␟589112377451589685:Increase value`;
    } let i18n_24; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the **Decrement** button in the DateInput
         * @meaning kendo.dateinput.decrement
         */
        const MSG_EXTERNAL_6980524091606682769$$DIST_FESM2015_INDEX_JS_25 = goog.getMsg("Decrease value");
        i18n_24 = MSG_EXTERNAL_6980524091606682769$$DIST_FESM2015_INDEX_JS_25;
    }
    else {
        i18n_24 = $localize `:kendo.dateinput.decrement|The label for the **Decrement** button in the DateInput␟0eded761107e6dad120997006a7f915bade9b15c␟6980524091606682769:Decrease value`;
    } return [["kendoDateInputLocalizedMessages", "", "increment", i18n_22, "decrement", i18n_24], ["autocomplete", "off", "autocorrect", "off", "autocapitalize", "off", "spellcheck", "false", 1, "k-input-inner", 3, "id", "title", "tabindex", "disabled", "readonly", "placeholder", "kendoEventsOutsideAngular", "scope"], ["dateInput", ""], ["class", "k-input-spinner k-spin-button", 3, "mousedown", 4, "ngIf"], [1, "k-input-spinner", "k-spin-button", 3, "mousedown"], ["tabindex", "-1", 1, "k-spinner-increase", "k-button", "k-icon-button", 3, "title", "mousedown", "mouseleave", "click"], ["spinup", ""], [1, "k-button-icon", "k-icon", "k-i-arrow-n"], ["tabindex", "-1", 1, "k-spinner-decrease", "k-button", "k-icon-button", 3, "title", "click", "mousedown", "mouseleave"], ["spindown", ""], [1, "k-button-icon", "k-icon", "k-i-arrow-s"]]; }, template: function DateInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelement(1, "input", 1, 2);
        ɵngcc0.ɵɵtemplate(3, DateInputComponent_span_3_Template, 7, 8, "span", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("title", ctx.title)("tabindex", ctx.tabindex)("disabled", ctx.disabled)("readonly", ctx.readonly)("placeholder", ctx.placeholder)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction7(13, _c26, ctx.handleClick, ctx.handleFocus, ctx.handleMousedown, ctx.handleMousedown, ctx.handleDragAndDrop, ctx.handleDragAndDrop, ctx.handleBlur))("scope", ctx);
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-readonly", ctx.ariaReadOnly)("aria-expanded", ctx.isPopupOpen)("aria-haspopup", ctx.hasPopup);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.spinners);
    } }, directives: function () { return [DateInputLocalizedMessagesDirective, ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgIf]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputComponent.prototype, "focusableId", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "readonly", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DateInputComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputComponent.prototype, "role", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "ariaReadOnly", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DateInputComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateInputComponent.prototype, "format", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateInputComponent.prototype, "formatPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateInputComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DateInputComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DateInputComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "autoCorrect", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "incompleteDateValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DateInputComponent.prototype, "twoDigitYearMax", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DateInputComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "spinners", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "isPopupOpen", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateInputComponent.prototype, "hasPopup", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateInputComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateInputComponent.prototype, "rounded", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateInputComponent.prototype, "fillMode", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateInputComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateInputComponent.prototype, "valueUpdate", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], DateInputComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], DateInputComponent.prototype, "onBlur", void 0);
__decorate([
    ViewChild('dateInput', { static: true }),
    __metadata("design:type", ElementRef)
], DateInputComponent.prototype, "dateInput", void 0);
__decorate([
    HostBinding('class.k-input'),
    HostBinding('class.k-dateinput'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DateInputComponent.prototype, "wrapperClass", null);
__decorate([
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DateInputComponent.prototype, "disabledClass", null);
__decorate([
    ViewChild('spinup', { static: false }),
    __metadata("design:type", ElementRef)
], DateInputComponent.prototype, "spinup", void 0);
__decorate([
    ViewChild('spindown', { static: false }),
    __metadata("design:type", ElementRef)
], DateInputComponent.prototype, "spindown", void 0);
DateInputComponent = DateInputComponent_1 = __decorate([ __param(7, Optional()),
    __metadata("design:paramtypes", [ChangeDetectorRef,
        IntlService,
        Renderer2,
        ElementRef,
        NgZone,
        Injector,
        LocalizationService,
        PickerService])
], DateInputComponent);

/**
 * A preventable event instance which is triggered by the `open` and `close` events.
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * @hidden
 */
const TOUCH_ENABLED = new InjectionToken('dateinputs-touch-enabled');

/**
 * @hidden
 */
const disabledDatesValidator = (isDateDisabled) => {
    return (control) => {
        if (!isDateDisabled || !control.value) {
            return null;
        }
        const error = {
            disabledDate: true
        };
        return isDateDisabled(control.value) ? error : null;
    };
};

/* tslint:disable:max-line-length */
var DatePickerComponent_1;
const MIN_DOC_LINK$3 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-min';
const MAX_DOC_LINK$3 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-max';
const VALUE_DOC_LINK$3 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/datepicker/#toc-using-with-json';
const DEFAULT_FORMAT$1 = 'd';
const TWO_DIGIT_YEAR_MAX$1 = 68;
/**
 * Represents the [Kendo UI DatePicker component for Angular]({% slug overview_datepicker %}#toc-basic-usage).
 */
let DatePickerComponent = DatePickerComponent_1 = class DatePickerComponent {
    constructor(zone, localization, cdr, popupService, wrapper, renderer, injector, pickerService, disabledDatesService, touchEnabled$$1) {
        this.zone = zone;
        this.localization = localization;
        this.cdr = cdr;
        this.popupService = popupService;
        this.wrapper = wrapper;
        this.renderer = renderer;
        this.injector = injector;
        this.pickerService = pickerService;
        this.disabledDatesService = disabledDatesService;
        this.touchEnabled = touchEnabled$$1;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug calendar_type_datepicker %}#toc-active-view)).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the bottommost Calendar view to which the user can navigate
         * ([see example]({% slug calendar_type_datepicker %}#toc-focused-dates)).
         */
        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the topmost Calendar view to which the user can navigate
         * ([see example]({% slug calendar_type_datepicker %}#toc-focused-dates)).
         */
        this.topView = CalendarViewEnum[CalendarViewEnum.century];
        /**
         * Specifies the Calendar type.
         *
         * The possible values are:
         * - `infinite` (default)
         * - `classic`
         *
         */
        this.calendarType = 'infinite';
        /**
         * Determines whether to enable animation when navigating to previous/next Calendar view.
         * Applies to the [`classic`]({% slug api_dateinputs_datepickercomponent %}#toc-calendartype) Calendar only.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateCalendarNavigation = false;
        /**
         * Sets or gets the `disabled` property of the DatePicker and determines whether the component is active
         * ([see example]({% slug disabled_datepicker %})).
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the DatePicker
         * ([see example]({% slug readonly_datepicker %}#toc-read-only-datepicker)).
         */
        this.readonly = false;
        /**
         * Sets the read-only state of the DatePicker input field
         * ([see example]({% slug readonly_datepicker %}#toc-read-only-input)).
         *
         * > Note that if you set the [`readonly`]({% slug api_dateinputs_datepickercomponent %}#toc-readonly) property value to `true`,
         * the input will be rendered in a read-only state regardless of the `readOnlyInput` value.
         */
        this.readOnlyInput = false;
        /**
         * Sets or gets the `navigation` property of the Calendar
         * and determines whether the navigation side-bar is displayed.
         * ([see example]({% slug sidebar_datepicker %})).
         */
        this.navigation = true;
        /**
         * Specifies the smallest valid date
         * ([see example]({% slug dateranges_datepicker %})).
         * By default, the `min` value is `1900-1-1`.
         */
        this.min = cloneDate(MIN_DATE);
        /**
         * Specifies the biggest valid date
         * ([see example]({% slug dateranges_datepicker %})).
         * By default, the `max` value is `2099-12-31`.
         */
        this.max = cloneDate(MAX_DATE);
        /**
         * Determines whether the built-in validation for incomplete dates is to be enforced when a form is being validated.
         */
        this.incompleteDateValidation = false;
        /**
         * Specifies the focused date of the Calendar component
         * ([see example]({% slug calendar_type_datepicker %}#toc-focused-dates)).
         */
        this.focusedDate = null;
        /**
         * Specifies the date format that is used to display the input value
         * ([see example]({% slug formats_datepicker %})).
         *
         * Format value options:
         * - `string` - Provide a `string` if a single format is going to be used regardless whether the input is focused or blurred.
         * - [`FormatSettings`]({% slug api_dateinputs_formatsettings %}) - To display different formats when the component is focused or blurred, provide a settings object with specified `inputFormat` and `displayFormat` values.
         */
        this.format = DEFAULT_FORMAT$1;
        /**
         * The maximum year to assume to be from the current century when typing two-digit year value
         * ([see example]({% slug formats_datepicker %}#toc-two-digit-year-format)).
         *
         * The default value is 68, indicating that typing any value less than 69
         * will be assumed to be 20xx, while 69 and larger will be assumed to be 19xx.
         */
        this.twoDigitYearMax = TWO_DIGIT_YEAR_MAX$1;
        /**
         * Specifies the hint the DatePicker displays when its value is `null`.
         * ([more information and exaples]({% slug placeholders_datepicker %})).
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker placeholder="Enter birth date..."></kendo-datepicker>
         * `
         * })
         * export class AppComponent { }
         * ```
         */
        this.placeholder = null;
        /**
         * Sets or gets the `tabindex` property of the DatePicker.
         */
        this.tabindex = 0;
        /**
         * Sets the title of the input element of the DatePicker.
         */
        this.title = "";
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = true;
        /**
         * Determines whether the built-in validator for disabled
         * date ranges is enforced when validating a form
         * ([see example]({% slug disabled_dates_datepicker %}#toc-validation)).
         */
        this.disabledDatesValidation = true;
        /**
         * Determines whether to display a week number column in the `month` view of the Calendar
         * ([see example]({% slug calendar_type_datepicker %}#toc-week-number-column)).
         */
        this.weekNumber = false;
        /**
         * Fires each time the user selects a new value
         * ([more information and example]({% slug overview_datepicker %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the input element
         * ([more information and example]({% slug overview_datepicker %}#toc-events)).
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker (focus)="handleFocus()"></kendo-datepicker>
         * `
         * })
         * export class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred
         * ([more information and example]({% slug overview_datepicker %}#toc-events)).
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker (blur)="handleBlur()"></kendo-datepicker>
         * `
         * })
         * export class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed
         * ([more information and example]({% slug overview_datepicker %}#toc-events)).
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open
         * ([more information and example]({% slug overview_datepicker %}#toc-events)).
         */
        this.close = new EventEmitter();
        /**
         * @hidden
         */
        this.wrapperClasses = true;
        this.popupUID = guid();
        this._popupSettings = { animate: true };
        this._show = false;
        this._value = null;
        this._active = false;
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.disabledDatesValidateFn = noop;
        this.incompleteValidator = noop;
        this.resolvedPromise = Promise.resolve(null);
        this.domEvents = [];
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        validatePackage(packageMetadata);
        this.pickerSubscriptions = this.pickerService.onFocus.subscribe(this.handleFocus.bind(this));
        this.pickerSubscriptions.add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)));
        this.pickerSubscriptions.add(this.pickerService.sameDateSelected.subscribe(this.handleSameSelection.bind(this)));
        this.pickerSubscriptions.add(this.pickerService.dateCompletenessChange.subscribe(this.handleDateCompletenessChange.bind(this)));
    }
    /**
     * @hidden
     */
    set cellTemplateRef(template) {
        this.cellTemplate = template;
    }
    /**
     * @hidden
     */
    set monthCellTemplateRef(template) {
        this.monthCellTemplate = template;
    }
    /**
     * @hidden
     */
    set yearCellTemplateRef(template) {
        this.yearCellTemplate = template;
    }
    /**
     * @hidden
     */
    set decadeCellTemplateRef(template) {
        this.decadeCellTemplate = template;
    }
    /**
     * @hidden
     */
    set centuryCellTemplateRef(template) {
        this.centuryCellTemplate = template;
    }
    /**
     * @hidden
     */
    set weekNumberTemplateRef(template) {
        this.weekNumberTemplate = template;
    }
    /**
     * @hidden
     */
    set headerTitleTemplateRef(template) {
        this.headerTitleTemplate = template;
    }
    /**
     * @hidden
     */
    set navigationItemTemplateRef(template) {
        this.navigationItemTemplate = template;
    }
    /**
     * Configures the popup options of the DatePicker.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, { animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Specifies the value of the DatePicker component.
     *
     * > The `value` has to be a valid
     * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    set value(value) {
        this.verifyValue(value);
        this._value = cloneDate(value);
    }
    get value() {
        return this._value;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Sets the dates of the DatePicker that will be disabled
     * ([see example]({% slug disabled_dates_datepicker %})).
     */
    set disabledDates(value) {
        this._disabledDates = value;
        this.disabledDatesService.initialize(value);
    }
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Sets the size of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `null`
     *
     */
    set size(size) {
        this.renderer.removeClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
        this.renderer.removeClass(this.toggleButton.nativeElement, getSizeClass('input', this.size));
        if (size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('input', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * Sets the border radius of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `'full'`
     * * `null`
     *
     */
    set rounded(rounded) {
        this.renderer.removeClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        if (rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(rounded));
        }
        this._rounded = rounded;
    }
    get rounded() {
        return this._rounded;
    }
    /**
     * Sets the fillMode of the component.
     *
     * The possible values are:
     * * `'solid'` (Default)
     * * `'flat'`
     * * `'outline'`
     * * `null`
     *
     */
    set fillMode(fillMode) {
        this.renderer.removeClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        if (fillMode) {
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${fillMode}-base`);
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', fillMode));
        }
        this._fillMode = fillMode;
    }
    get fillMode() {
        return this._fillMode;
    }
    /**
     * @hidden
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @hidden
     */
    get inputRole() {
        return this.readOnlyInput ? 'listbox' : 'spinbutton';
    }
    get isActive() {
        return this._active;
    }
    set isActive(value) {
        this._active = value;
        if (!this.wrapper) {
            return;
        }
        const element = this.wrapper.nativeElement;
        if (value) {
            this.renderer.addClass(element, 'k-focus');
        }
        else {
            this.renderer.removeClass(element, 'k-focus');
        }
    }
    get show() {
        return this._show;
    }
    set show(show) {
        if (show && (this.disabled || this.readonly)) {
            return;
        }
        const skipZone = !show && (!this._show || !hasObservers(this.close));
        if (!skipZone) {
            this.zone.run(() => {
                this.togglePopup(show);
            });
        }
        else {
            this.togglePopup(show);
        }
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        return !this.value && this.input.isEmpty();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.localizationChangeSubscription = this.localization
            .changes
            .subscribe(() => this.cdr.markForCheck());
        this.control = this.injector.get(NgControl, null);
        if (this.wrapper) {
            this.renderer.removeAttribute(this.wrapper.nativeElement, 'tabindex');
            this.zone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    ngAfterViewInit() {
        this.setComponentClasses();
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        this.verifySettings();
        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDatesValidation || changes.disabledDates || changes.incompleteDateValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.disabledDatesValidateFn = this.disabledDatesValidation ? disabledDatesValidator(this.disabledDatesService.isDateDisabled) : noop;
            this.incompleteValidator = this.incompleteDateValidation ? incompleteDateValidator() : noop;
            this.onValidatorChange();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.isActive = false;
        this.show = false;
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
        if (this.windowBlurSubscription) {
            this.windowBlurSubscription.unsubscribe();
        }
        this.domEvents.forEach(unbindCallback => unbindCallback());
        this.pickerSubscriptions.unsubscribe();
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.show;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.verifyValue(value);
        this.value = cloneDate(value);
        this.cdr.markForCheck();
        if (!value && this.input) {
            this.input.placeholder = this.placeholder;
            this.input.writeValue(value);
        }
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesValidateFn(control) || this.incompleteValidator(control, this.input && this.input.isDateIncomplete);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * Focuses the DatePicker component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="datepicker.focus()">Focus date picker</button>
     *  <kendo-datepicker #datepicker></kendo-datepicker>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        this.input.focus();
    }
    /**
     * Blurs the DatePicker component.
     */
    blur() {
        (this.calendar || this.input)['blur'](); //tslint:disable-line:no-string-literal
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show - The state of the popup.
     */
    toggle(show) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.resolvedPromise.then(() => {
            this._toggle((show === undefined) ? !this.show : show);
        });
    }
    /**
     * @hidden
     */
    handleIconClick(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        event.preventDefault();
        this.focusInput();
        //XXX: explicitly call the handleFocus handler here
        //due to async IE focus event
        this.handleFocus();
        this.show = !this.show;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    handleMousedown(args) {
        args.preventDefault();
    }
    /**
     * @hidden
     */
    handleChange(value) {
        this.cdr.markForCheck();
        this.focusInput();
        this.value = value;
        this.show = false;
        this.onControlChange(cloneDate(value));
        this.valueChange.emit(cloneDate(value));
    }
    /**
     * @hidden
     */
    handleInputChange(value) {
        this.handleChange(this.input.formatSections.time ? value : this.mergeTime(value));
    }
    /**
     * @hidden
     */
    get popupClasses() {
        return [
            'k-calendar-container',
            'k-group',
            'k-reset'
        ].concat(this.popupSettings.popupClass || []);
    }
    /**
     * @hidden
     */
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    get input() {
        return this.pickerService.input;
    }
    get calendar() {
        return this.pickerService.calendar;
    }
    /**
     * @hidden
     */
    mergeTime(value) {
        return this.value && value ? setTime(value, this.value) : value;
    }
    /**
     * @hidden
     */
    handleKeydown(e) {
        const { altKey, shiftKey, keyCode, target } = e;
        if (keyCode === Keys.Escape) {
            this.show = false;
        }
        if (altKey) {
            if (keyCode === Keys.ArrowDown && !this.show) {
                this.show = true;
            }
            if (keyCode === Keys.ArrowUp) {
                this.show = false;
            }
        }
        if (keyCode === Keys.Enter && target.classList.contains('k-calendar')) {
            e.preventDefault(); // Don't submit form on date selection in popup
        }
        if (keyCode === Keys.Tab && this.show && this.calendar.isActive && isTabExitingCalendar(this.calendarType, target, shiftKey)) {
            this.input.focus();
            this.show = false;
        }
    }
    togglePopup(show) {
        const event = new PreventableEvent();
        if (!this._show && show) {
            this.open.emit(event);
        }
        else if (this._show && !show) {
            this.close.emit(event);
        }
        if (event.isDefaultPrevented()) {
            return;
        }
        this._toggle(show);
        this.toggleFocus();
    }
    _toggle(show) {
        if (show === this._show) {
            return;
        }
        this._show = show;
        if (show) {
            const direction = this.localization.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: { vertical: 'top', horizontal: direction },
                popupClass: this.popupClasses,
                positionMode: 'absolute'
            });
            this.popupRef.popupElement.setAttribute('id', this.popupUID);
            this.subscription = this.popupRef.popupAnchorViewportLeave.subscribe(() => this.show = false);
        }
        else {
            this.popupRef.close();
            this.popupRef = null;
            this.subscription.unsubscribe();
        }
    }
    focusInput() {
        if (this.touchEnabled) {
            return;
        }
        this.input.focus();
    }
    toggleFocus() {
        if (!this.isActive) {
            return;
        }
        if (this.show) {
            if (!this.calendar) {
                this.cdr.detectChanges();
            }
            if (this.calendar) {
                this.calendar.focus();
            }
        }
        else if (!this.touchEnabled) {
            this.input.focus();
        }
        else if (!this.input.isActive) {
            this.handleBlur();
        }
    }
    verifySettings() {
        if (!isDevMode()) {
            return;
        }
        if (!isValidRange(this.min, this.max)) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK$3} and ${MAX_DOC_LINK$3}.`);
        }
    }
    verifyValue(value) {
        if (!isDevMode()) {
            return;
        }
        if (value && !(value instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK$3} for possible resolution.`);
        }
    }
    bindEvents() {
        const element = this.wrapper.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));
        if (isWindowAvailable()) {
            this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(this.handleWindowBlur.bind(this));
        }
    }
    handleFocus() {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        if (hasObservers(this.onFocus)) {
            this.zone.run(() => {
                this.onFocus.emit();
            });
        }
    }
    handleWindowBlur() {
        if (!this.isOpen) {
            return;
        }
        this.show = false;
    }
    handleBlur(args) {
        const currentTarget = args && currentFocusTarget(args);
        if (currentTarget && (this.input.containsElement(currentTarget) ||
            (this.calendar && this.calendar.containsElement(currentTarget)))) {
            return;
        }
        if (hasObservers(this.onBlur) || (this.show && hasObservers(this.close)) || requiresZoneOnBlur(this.control)) {
            this.zone.run(() => {
                this.blurComponent();
                this.cdr.markForCheck();
            });
        }
        else {
            this.blurComponent();
        }
    }
    blurComponent() {
        this.isActive = false; // order is important ¯\_(ツ)_/¯
        this.show = false;
        this.cdr.detectChanges();
        this.onControlTouched();
        this.onBlur.emit();
    }
    handleSameSelection() {
        if (this.show) {
            this.focusInput();
            this.show = false;
        }
    }
    handleDateCompletenessChange() {
        this.cdr.markForCheck();
        this.zone.run(() => this.onValidatorChange());
    }
    setComponentClasses() {
        if (this.size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('button', this.size));
        }
        if (this.rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        }
        if (this.fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        }
    }
};
DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) { return new (t || DatePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(PickerService), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED, 8)); };
DatePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DatePickerComponent, selectors: [["kendo-datepicker"]], contentQueries: function DatePickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MonthCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, YearCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DecadeCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CenturyCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, WeekNumberCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTitleTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NavigationItemTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.decadeCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.centuryCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.weekNumberTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTitleTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.navigationItemTemplate = _t.first);
    } }, viewQuery: function DatePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c27, 7, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c28, 7);
        ɵngcc0.ɵɵviewQuery(_c29, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleButton = _t.first);
    } }, hostVars: 6, hostBindings: function DatePickerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-datepicker", ctx.wrapperClasses)("k-input", ctx.wrapperClasses)("k-disabled", ctx.disabledClass);
    } }, inputs: { focusableId: "focusableId", activeView: "activeView", bottomView: "bottomView", topView: "topView", calendarType: "calendarType", animateCalendarNavigation: "animateCalendarNavigation", disabled: "disabled", readonly: "readonly", readOnlyInput: "readOnlyInput", navigation: "navigation", min: "min", max: "max", incompleteDateValidation: "incompleteDateValidation", focusedDate: "focusedDate", format: "format", twoDigitYearMax: "twoDigitYearMax", placeholder: "placeholder", tabindex: "tabindex", title: "title", rangeValidation: "rangeValidation", disabledDatesValidation: "disabledDatesValidation", weekNumber: "weekNumber", cellTemplateRef: ["cellTemplate", "cellTemplateRef"], monthCellTemplateRef: ["monthCellTemplate", "monthCellTemplateRef"], yearCellTemplateRef: ["yearCellTemplate", "yearCellTemplateRef"], decadeCellTemplateRef: ["decadeCellTemplate", "decadeCellTemplateRef"], centuryCellTemplateRef: ["centuryCellTemplate", "centuryCellTemplateRef"], weekNumberTemplateRef: ["weekNumberTemplate", "weekNumberTemplateRef"], headerTitleTemplateRef: ["headerTitleTemplate", "headerTitleTemplateRef"], navigationItemTemplateRef: ["navigationItemTemplate", "navigationItemTemplateRef"], popupSettings: "popupSettings", value: "value", tabIndex: "tabIndex", disabledDates: "disabledDates", size: "size", rounded: "rounded", fillMode: "fillMode", formatPlaceholder: "formatPlaceholder" }, outputs: { valueChange: "valueChange", onFocus: "focus", onBlur: "blur", open: "open", close: "close" }, exportAs: ["kendo-datepicker"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatePickerComponent_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => DatePickerComponent_1), multi: true },
            { provide: KendoInput, useExisting: forwardRef(() => DatePickerComponent_1) },
            LocalizationService,
            PickerService,
            DisabledDatesService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.datepicker'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 28, consts: function () { let i18n_30; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the today button in the calendar header
         * @meaning kendo.datepicker.today
         */
        const MSG_EXTERNAL_5799873230514803381$$DIST_FESM2015_INDEX_JS_31 = goog.getMsg("Today");
        i18n_30 = MSG_EXTERNAL_5799873230514803381$$DIST_FESM2015_INDEX_JS_31;
    }
    else {
        i18n_30 = $localize `:kendo.datepicker.today|The label for the today button in the calendar header␟c8af34428eb25c8f689f0c19a9300394b07b5be3␟5799873230514803381:Today`;
    } let i18n_32; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the toggle button in the datepicker component
         * @meaning kendo.datepicker.toggle
         */
        const MSG_EXTERNAL_4817467473728423164$$DIST_FESM2015_INDEX_JS_33 = goog.getMsg("Toggle calendar");
        i18n_32 = MSG_EXTERNAL_4817467473728423164$$DIST_FESM2015_INDEX_JS_33;
    }
    else {
        i18n_32 = $localize `:kendo.datepicker.toggle|The title of the toggle button in the datepicker component␟f6c28c2d80dbe993c4b33f4dc4010364f41cc2ae␟4817467473728423164:Toggle calendar`;
    } let i18n_34; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the previous button in the Classic calendar
         * @meaning kendo.datepicker.prevButtonTitle
         */
        const MSG_EXTERNAL_1741914107549506055$$DIST_FESM2015_INDEX_JS_35 = goog.getMsg("Navigate to previous view");
        i18n_34 = MSG_EXTERNAL_1741914107549506055$$DIST_FESM2015_INDEX_JS_35;
    }
    else {
        i18n_34 = $localize `:kendo.datepicker.prevButtonTitle|The title of the previous button in the Classic calendar␟b24bedd31916ff8439cd7e3c46cbdabea3409dd1␟1741914107549506055:Navigate to previous view`;
    } let i18n_36; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the next button in the Classic calendar
         * @meaning kendo.datepicker.nextButtonTitle
         */
        const MSG_EXTERNAL_3363484587807059211$$DIST_FESM2015_INDEX_JS_37 = goog.getMsg("Navigate to next view");
        i18n_36 = MSG_EXTERNAL_3363484587807059211$$DIST_FESM2015_INDEX_JS_37;
    }
    else {
        i18n_36 = $localize `:kendo.datepicker.nextButtonTitle|The title of the next button in the Classic calendar␟2f0e2a91beb7149035e42bd0d6663e8903dc3852␟3363484587807059211:Navigate to next view`;
    } return [["kendoDatePickerLocalizedMessages", "", "today", i18n_30, "toggle", i18n_32, "prevButtonTitle", i18n_34, "nextButtonTitle", i18n_36], [3, "role", "focusableId", "hasPopup", "isPopupOpen", "disabled", "readonly", "ariaReadOnly", "tabindex", "title", "format", "twoDigitYearMax", "formatPlaceholder", "placeholder", "min", "max", "incompleteDateValidation", "fillMode", "rounded", "size", "value", "valueChange"], ["input", ""], ["type", "button", 1, "k-input-button", "k-button", "k-icon-button", 3, "tabindex", "kendoEventsOutsideAngular", "scope"], ["toggleButton", ""], [1, "k-button-icon", "k-icon", "k-i-calendar"], ["container", ""], ["popupTemplate", ""], [3, "type", "min", "max", "navigation", "animateNavigation", "activeView", "bottomView", "topView", "weekNumber", "cellTemplate", "monthCellTemplate", "yearCellTemplate", "decadeCellTemplate", "centuryCellTemplate", "weekNumberTemplate", "headerTitleTemplate", "navigationItemTemplate", "focusedDate", "value", "kendoEventsOutsideAngular", "scope", "disabledDates", "valueChange"], ["calendar", ""], [3, "today", "prevButtonTitle", "nextButtonTitle"]]; }, template: function DatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementStart(1, "kendo-dateinput", 1, 2);
        ɵngcc0.ɵɵlistener("valueChange", function DatePickerComponent_Template_kendo_dateinput_valueChange_1_listener($event) { return ctx.handleInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "button", 3, 4);
        ɵngcc0.ɵɵelement(5, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainer(6, null, 6);
        ɵngcc0.ɵɵtemplate(8, DatePickerComponent_ng_template_8_Template, 4, 27, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("role", ctx.inputRole)("focusableId", ctx.focusableId)("hasPopup", true)("isPopupOpen", ctx.show)("disabled", ctx.disabled)("readonly", ctx.readonly || ctx.readOnlyInput)("ariaReadOnly", ctx.readonly)("tabindex", ctx.tabindex)("title", ctx.title)("format", ctx.format)("twoDigitYearMax", ctx.twoDigitYearMax)("formatPlaceholder", ctx.formatPlaceholder)("placeholder", ctx.placeholder)("min", ctx.min)("max", ctx.max)("incompleteDateValidation", ctx.incompleteDateValidation)("fillMode", null)("rounded", null)("size", null)("value", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("tabindex", -1)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(25, _c39, ctx.handleIconClick, ctx.handleMousedown))("scope", ctx);
        ɵngcc0.ɵɵattribute("title", ctx.localization.get("toggle"))("aria-label", ctx.localization.get("toggle"));
    } }, directives: function () { return [DatePickerLocalizedMessagesDirective, DateInputComponent, ɵngcc4.EventsOutsideAngularDirective, CalendarComponent, CalendarCustomMessagesComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], DatePickerComponent.prototype, "container", void 0);
__decorate([
    ViewChild('popupTemplate', { static: true }),
    __metadata("design:type", TemplateRef)
], DatePickerComponent.prototype, "popupTemplate", void 0);
__decorate([
    ViewChild('toggleButton', { static: true }),
    __metadata("design:type", ElementRef)
], DatePickerComponent.prototype, "toggleButton", void 0);
__decorate([
    ContentChild(CellTemplateDirective, { static: false }),
    __metadata("design:type", CellTemplateDirective)
], DatePickerComponent.prototype, "cellTemplate", void 0);
__decorate([
    Input('cellTemplate'),
    __metadata("design:type", CellTemplateDirective),
    __metadata("design:paramtypes", [CellTemplateDirective])
], DatePickerComponent.prototype, "cellTemplateRef", null);
__decorate([
    ContentChild(MonthCellTemplateDirective, { static: false }),
    __metadata("design:type", MonthCellTemplateDirective)
], DatePickerComponent.prototype, "monthCellTemplate", void 0);
__decorate([
    Input('monthCellTemplate'),
    __metadata("design:type", MonthCellTemplateDirective),
    __metadata("design:paramtypes", [MonthCellTemplateDirective])
], DatePickerComponent.prototype, "monthCellTemplateRef", null);
__decorate([
    ContentChild(YearCellTemplateDirective, { static: false }),
    __metadata("design:type", YearCellTemplateDirective)
], DatePickerComponent.prototype, "yearCellTemplate", void 0);
__decorate([
    Input('yearCellTemplate'),
    __metadata("design:type", YearCellTemplateDirective),
    __metadata("design:paramtypes", [YearCellTemplateDirective])
], DatePickerComponent.prototype, "yearCellTemplateRef", null);
__decorate([
    ContentChild(DecadeCellTemplateDirective, { static: false }),
    __metadata("design:type", DecadeCellTemplateDirective)
], DatePickerComponent.prototype, "decadeCellTemplate", void 0);
__decorate([
    Input('decadeCellTemplate'),
    __metadata("design:type", DecadeCellTemplateDirective),
    __metadata("design:paramtypes", [DecadeCellTemplateDirective])
], DatePickerComponent.prototype, "decadeCellTemplateRef", null);
__decorate([
    ContentChild(CenturyCellTemplateDirective, { static: false }),
    __metadata("design:type", CenturyCellTemplateDirective)
], DatePickerComponent.prototype, "centuryCellTemplate", void 0);
__decorate([
    Input('centuryCellTemplate'),
    __metadata("design:type", CenturyCellTemplateDirective),
    __metadata("design:paramtypes", [CenturyCellTemplateDirective])
], DatePickerComponent.prototype, "centuryCellTemplateRef", null);
__decorate([
    ContentChild(WeekNumberCellTemplateDirective, { static: false }),
    __metadata("design:type", WeekNumberCellTemplateDirective)
], DatePickerComponent.prototype, "weekNumberTemplate", void 0);
__decorate([
    Input('weekNumberTemplate'),
    __metadata("design:type", WeekNumberCellTemplateDirective),
    __metadata("design:paramtypes", [WeekNumberCellTemplateDirective])
], DatePickerComponent.prototype, "weekNumberTemplateRef", null);
__decorate([
    ContentChild(HeaderTitleTemplateDirective, { static: false }),
    __metadata("design:type", HeaderTitleTemplateDirective)
], DatePickerComponent.prototype, "headerTitleTemplate", void 0);
__decorate([
    Input('headerTitleTemplate'),
    __metadata("design:type", HeaderTitleTemplateDirective),
    __metadata("design:paramtypes", [HeaderTitleTemplateDirective])
], DatePickerComponent.prototype, "headerTitleTemplateRef", null);
__decorate([
    ContentChild(NavigationItemTemplateDirective, { static: false }),
    __metadata("design:type", NavigationItemTemplateDirective)
], DatePickerComponent.prototype, "navigationItemTemplate", void 0);
__decorate([
    Input('navigationItemTemplate'),
    __metadata("design:type", NavigationItemTemplateDirective),
    __metadata("design:paramtypes", [NavigationItemTemplateDirective])
], DatePickerComponent.prototype, "navigationItemTemplateRef", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "focusableId", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "bottomView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "topView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "calendarType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "animateCalendarNavigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "readonly", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "readOnlyInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DatePickerComponent.prototype, "popupSettings", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "navigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DatePickerComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DatePickerComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "incompleteDateValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DatePickerComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DatePickerComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DatePickerComponent.prototype, "format", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DatePickerComponent.prototype, "twoDigitYearMax", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DatePickerComponent.prototype, "formatPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DatePickerComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DatePickerComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DatePickerComponent.prototype, "disabledDates", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "disabledDatesValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "weekNumber", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DatePickerComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DatePickerComponent.prototype, "rounded", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DatePickerComponent.prototype, "fillMode", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DatePickerComponent.prototype, "valueChange", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], DatePickerComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], DatePickerComponent.prototype, "onBlur", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DatePickerComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DatePickerComponent.prototype, "close", void 0);
__decorate([
    HostBinding('class.k-datepicker'),
    HostBinding('class.k-input'),
    __metadata("design:type", Boolean)
], DatePickerComponent.prototype, "wrapperClasses", void 0);
__decorate([
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DatePickerComponent.prototype, "disabledClass", null);
DatePickerComponent = DatePickerComponent_1 = __decorate([ __param(9, Optional()), __param(9, Inject(TOUCH_ENABLED)),
    __metadata("design:paramtypes", [NgZone,
        LocalizationService,
        ChangeDetectorRef,
        PopupService,
        ElementRef,
        Renderer2,
        Injector,
        PickerService,
        DisabledDatesService, Boolean])
], DatePickerComponent);

/**
 * @hidden
 */
const TIME_PART = {
    dayperiod: 'dayperiod',
    hour: 'hour',
    millisecond: 'millisecond',
    minute: 'minute',
    second: 'second'
};

/**
 * @hidden
 */
const timeRangeValidator = (min, max) => {
    return (control) => {
        if (!min || !max || !control.value) {
            return null;
        }
        const err = {
            timeRangeError: {
                maxValue: max,
                minValue: min,
                value: control.value
            }
        };
        return isInTimeRange(control.value, min, max) ? null : err;
    };
};

var TimePickerComponent_1;
const VALUE_DOC_LINK$4 = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/timepicker/#toc-integration-with-json';
const INTL_DATE_FORMAT = 'https://github.com/telerik/kendo-intl/blob/master/docs/date-formatting/index.md';
const formatRegExp = new RegExp(`${TIME_PART.hour}|${TIME_PART.minute}|${TIME_PART.second}|${TIME_PART.millisecond}|${TIME_PART.dayperiod}|literal`);
/**
 * Represents the [Kendo UI TimePicker component for Angular]({% slug overview_timepicker %}#toc-basic-usage).
 */
let TimePickerComponent = TimePickerComponent_1 = class TimePickerComponent {
    constructor(zone, localization, cdr, popupService, wrapper, renderer, injector, pickerService, intl, touchEnabled$$1) {
        this.zone = zone;
        this.localization = localization;
        this.cdr = cdr;
        this.popupService = popupService;
        this.wrapper = wrapper;
        this.renderer = renderer;
        this.injector = injector;
        this.pickerService = pickerService;
        this.intl = intl;
        this.touchEnabled = touchEnabled$$1;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Sets or gets the `disabled` property of the TimePicker and
         * determines whether the component is active
         * ([see example]({% slug disabled_timepicker %})).
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the TimePicker
         * ([see example]({% slug readonly_timepicker %}#toc-read-only-timepicker)).
         */
        this.readonly = false;
        /**
         * Sets the read-only state of the TimePicker input field
         * ([see example]({% slug readonly_timepicker %}#toc-read-only-input)).
         *
         * > Note that if you set the [`readonly`]({% slug api_dateinputs_timepickercomponent %}#toc-readonly) property value to `true`,
         * the input will be rendered in a read-only state regardless of the `readOnlyInput` value.
         */
        this.readOnlyInput = false;
        /**
         * Specifies the time format that is used to display the input value
         * ([see example]({% slug formats_timepicker %})).
         */
        this.format = 't';
        /**
         * Specifies the hint the TimePicker displays when its value is `null`.
         * For more information, refer to the article on
         * [placeholders]({% slug placeholders_timepicker %}).
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker placeholder="Enter start..."></kendo-timepicker>
         * `
         * })
         * export class AppComponent { }
         * ```
         */
        this.placeholder = null;
        /**
         * Determines whether the built-in validation for incomplete dates is to be enforced when a form is being validated.
         */
        this.incompleteDateValidation = false;
        /**
         * Determines whether to display the **Cancel** button in the popup.
         */
        this.cancelButton = true;
        /**
         * Determines whether to display the **Now** button in the popup.
         *
         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
         */
        this.nowButton = true;
        /**
         * Sets or gets the `tabindex` property of the TimePicker.
         */
        this.tabindex = 0;
        /**
         * Sets the title of the input element of the TimePicker.
         */
        this.title = "";
        /**
         * Determines whether the built-in min or max validators are enforced when a form is being validated.
         */
        this.rangeValidation = true;
        /**
         * Fires each time the user selects a new value.
         * For more information, refer to the section on
         * [events]({% slug overview_timepicker %}#toc-events).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the input element.
         * For more information, refer to the section on
         * [events]({% slug overview_timepicker %}#toc-events).
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker (focus)="handleFocus()"></kendo-timepicker>
         * `
         * })
         * export class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred.
         * For more information, refer to the section on
         * [events]({% slug overview_timepicker %}#toc-events).
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker (blur)="handleBlur()"></kendo-timepicker>
         * `
         * })
         * export class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         * For more information, refer to the section on
         * [events]({% slug overview_timepicker %}#toc-events).
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         * For more information, refer to the section on
         * [events]({% slug overview_timepicker %}#toc-events).
         */
        this.close = new EventEmitter();
        /**
         * @hidden
         */
        this.wrapperClasses = true;
        this.popupUID = guid();
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.resolvedPromise = Promise.resolve(null);
        this.timeRangeValidateFn = noop;
        this.incompleteValidator = noop;
        this._min = cloneDate(MIN_TIME);
        this._max = cloneDate(MAX_TIME);
        this._popupSettings = { animate: true };
        this._show = false;
        this._steps = {};
        this._value = null;
        this._active = false;
        this.domEvents = [];
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        validatePackage(packageMetadata);
        this.pickerSubscriptions = this.pickerService.onFocus.subscribe(this.handleFocus.bind(this));
        this.pickerSubscriptions.add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)));
        this.pickerSubscriptions.add(this.pickerService.dateCompletenessChange.subscribe(this.handleDateCompletenessChange.bind(this)));
    }
    /**
     * Specifies the smallest valid time value
     * ([see example]({% slug timeranges_timepicker %})).
     */
    set min(min) {
        this._min = cloneDate(min || MIN_TIME);
    }
    get min() {
        return this._min;
    }
    /**
     * Specifies the biggest valid time value
     * ([see example]({% slug timeranges_timepicker %})).
     */
    set max(max) {
        this._max = cloneDate(max || MAX_TIME);
    }
    get max() {
        return this._max;
    }
    /**
     * Configures the incremental steps of the TimePicker.
     * For more information, refer to the article on
     * [incremental steps]({% slug incrementalsteps_timepicker %}).
     *
     * > If the incremental step is greater than `1`, the **Now** button will be hidden.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timepicker format="HH:mm:ss" [steps]="steps"></kendo-timepicker>
     * `
     * })
     * class AppComponent {
     *   public steps = { hour: 2, minute: 15, second: 15, millisecond: 10 };
     * }
     * ```
     *
     */
    set steps(steps) {
        this._steps = steps || {};
    }
    get steps() {
        return this._steps;
    }
    /**
     * Configures the popup of the TimePicker.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, { animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Specifies the value of the TimePicker component.
     */
    set value(value) {
        this.verifyValue(value);
        this._value = cloneDate(value);
    }
    get value() {
        return this._value;
    }
    /**
     * Sets the size of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `null`
     *
     */
    set size(size) {
        this.renderer.removeClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
        this.renderer.removeClass(this.toggleButton.nativeElement, getSizeClass('input', this.size));
        if (size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('input', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * Sets the border radius of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `'full'`
     * * `null`
     *
     */
    set rounded(rounded) {
        this.renderer.removeClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        if (rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(rounded));
        }
        this._rounded = rounded;
    }
    get rounded() {
        return this._rounded;
    }
    /**
     * Sets the fillMode of the component.
     *
     * The possible values are:
     * * `'solid'` (Default)
     * * `'flat'`
     * * `'outline'`
     * * `null`
     *
     */
    set fillMode(fillMode) {
        this.renderer.removeClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        if (fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${fillMode}-base`);
        }
        this._fillMode = fillMode;
    }
    get fillMode() {
        return this._fillMode;
    }
    /**
     * @hidden
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @hidden
     */
    get inputRole() {
        return this.readOnlyInput ? 'listbox' : 'spinbutton';
    }
    get isActive() {
        return this._active;
    }
    set isActive(value) {
        this._active = value;
        if (!this.wrapper) {
            return;
        }
        const element = this.wrapper.nativeElement;
        if (value) {
            this.renderer.addClass(element, 'k-focus');
        }
        else {
            this.renderer.removeClass(element, 'k-focus');
        }
    }
    get show() {
        return this._show;
    }
    set show(show) {
        if (show && (this.disabled || this.readonly)) {
            return;
        }
        const skipZone = !show && (!this._show || !hasObservers(this.close));
        if (!skipZone) {
            this.zone.run(() => {
                this.togglePopup(show);
            });
        }
        else {
            this.togglePopup(show);
        }
    }
    get input() {
        return this.pickerService.input;
    }
    get timeSelector() {
        return this.pickerService.timeSelector;
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty
     */
    isEmpty() {
        return !this.value && this.input.isEmpty();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.localizationChangeSubscription = this.localization
            .changes.subscribe(() => this.cdr.markForCheck());
        this.control = this.injector.get(NgControl, null);
        if (this.wrapper) {
            this.renderer.removeAttribute(this.wrapper.nativeElement, 'tabindex');
            this.zone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.setComponentClasses();
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.min || changes.max || changes.rangeValidation || changes.incompleteDateValidation) {
            this.timeRangeValidateFn = this.rangeValidation ? timeRangeValidator(this.min, this.max) : noop;
            this.incompleteValidator = this.incompleteDateValidation ? incompleteDateValidator() : noop;
            this.onValidatorChange();
        }
        if (changes.format) {
            this.verifyFormat();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.isActive = false;
        this.show = false;
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
        if (this.windowBlurSubscription) {
            this.windowBlurSubscription.unsubscribe();
        }
        this.domEvents.forEach(unbindCallback => unbindCallback());
        this.pickerSubscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    handleKeydown(event) {
        const { altKey, keyCode } = event;
        if (keyCode === Keys.Escape) {
            this.show = false;
            return;
        }
        if (altKey) {
            if (keyCode === Keys.ArrowUp) {
                this.show = false;
            }
            if (keyCode === Keys.ArrowDown && !this.show) {
                this.show = true;
            }
        }
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.verifyValue(value);
        this.value = cloneDate(value);
        this.cdr.markForCheck();
        if (!value && this.input) {
            this.input.placeholder = this.placeholder;
            this.input.writeValue(value);
        }
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.timeRangeValidateFn(control) || this.incompleteValidator(control, this.input && this.input.isDateIncomplete);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * Focuses the TimePicker component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timepicker.focus()">Focus time picker</button>
     *  <kendo-timepicker #timepicker></kendo-timepicker>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        this.input.focus();
    }
    /**
     * Blurs the TimePicker component.
     */
    blur() {
        (this.timeSelector || this.input)['blur'](); //tslint:disable-line:no-string-literal
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show - The state of the popup.
     */
    toggle(show) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.resolvedPromise.then(() => {
            this._toggle((show === undefined) ? !this.show : show);
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.show;
    }
    /**
     * @hidden
     */
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * @hidden
     */
    handleChange(value) {
        if (isEqual(this.value, value)) {
            this.focusInput();
            this.show = false;
            return;
        }
        this.value = cloneDate(value);
        this.zone.run(() => {
            this.focusInput();
            this.show = false;
            this.onControlChange(cloneDate(value));
            this.valueChange.emit(cloneDate(value));
        });
    }
    /**
     * @hidden
     */
    handleReject() {
        this.show = false;
    }
    /**
     * @hidden
     */
    handleInputChange(value) {
        const val = this.input.formatSections.date ? value : this.mergeTime(value);
        this.handleChange(val);
    }
    /**
     * @hidden
     */
    handleMousedown(args) {
        args.preventDefault();
    }
    /**
     * @hidden
     */
    handleIconClick(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        event.preventDefault();
        this.focusInput();
        //XXX: explicit call handleFocus handler here
        //due to async IE focus event
        this.handleFocus();
        this.show = !this.show;
    }
    /**
     * @hidden
     */
    get popupClasses() {
        return [
            'k-group',
            'k-reset'
        ].concat(this.popupSettings.popupClass || []);
    }
    /**
     * @hidden
     */
    normalizeTime(date) {
        return setTime(MIDNIGHT_DATE, date);
    }
    /**
     * @hidden
     */
    mergeTime(value) {
        return this.value && value ? setTime(this.value, value) : value;
    }
    togglePopup(show) {
        const event = new PreventableEvent();
        if (!this._show && show) {
            this.open.emit(event);
        }
        else if (this._show && !show) {
            this.close.emit(event);
        }
        if (event.isDefaultPrevented()) {
            return;
        }
        this._toggle(show);
        this.toggleFocus();
    }
    _toggle(show) {
        if (show === this.isOpen) {
            return;
        }
        this._show = show;
        this.cdr.markForCheck();
        if (show) {
            const direction = this.localization.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: { vertical: 'top', horizontal: direction },
                popupClass: this.popupClasses,
                positionMode: 'absolute'
            });
            this.popupRef.popupElement.setAttribute('id', this.popupUID);
            this.popupRef.popupAnchorViewportLeave.subscribe(() => this.show = false);
        }
        else {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    focusInput() {
        if (this.touchEnabled) {
            return;
        }
        this.input.focus();
    }
    toggleFocus() {
        if (!this.isActive) {
            return;
        }
        if (this.show) {
            if (!this.timeSelector) {
                this.cdr.detectChanges();
            }
            if (this.isActive) {
                this.timeSelector.focus();
            }
        }
        else if (!this.touchEnabled) {
            this.input.focus();
        }
        else if (!this.input.isActive) {
            this.handleBlur();
        }
    }
    verifyValue(value) {
        if (!isDevMode()) {
            return;
        }
        if (value && !(value instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK$4} for possible resolution.`);
        }
    }
    verifyFormat() {
        if (!isDevMode()) {
            return;
        }
        const formatContainsDateParts = this.intl.splitDateFormat(this.format).some(part => !formatRegExp.test(part.type));
        if (formatContainsDateParts) {
            throw new Error(`Provided format is not supported. Supported specifiers are T|t|H|h|m|s|S|a. See ${INTL_DATE_FORMAT}`);
        }
    }
    bindEvents() {
        const element = this.wrapper.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));
        if (isWindowAvailable()) {
            this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(this.handleWindowBlur.bind(this));
        }
    }
    handleWindowBlur() {
        if (!this.isOpen) {
            return;
        }
        this.show = false;
    }
    handleFocus() {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        if (hasObservers(this.onFocus)) {
            this.zone.run(() => {
                this.onFocus.emit();
            });
        }
    }
    handleBlur(args) {
        const currentTarget = args && currentFocusTarget(args);
        if (currentTarget && (this.input.containsElement(currentTarget) ||
            (this.timeSelector && this.timeSelector.containsElement(currentTarget)))) {
            return;
        }
        if (hasObservers(this.onBlur) || (this.show && hasObservers(this.close)) || requiresZoneOnBlur(this.control)) {
            this.zone.run(() => {
                this.blurComponent();
                this.cdr.markForCheck();
            });
        }
        else {
            this.blurComponent();
        }
    }
    blurComponent() {
        this.isActive = false; // order is important ¯\_(ツ)_/¯
        this.show = false;
        this.onControlTouched();
        this.onBlur.emit();
    }
    handleDateCompletenessChange() {
        this.cdr.markForCheck();
        this.zone.run(() => this.onValidatorChange());
    }
    setComponentClasses() {
        if (this.size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('button', this.size));
        }
        if (this.rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        }
        if (this.fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        }
    }
};
TimePickerComponent.ɵfac = function TimePickerComponent_Factory(t) { return new (t || TimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(PickerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED, 8)); };
TimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimePickerComponent, selectors: [["kendo-timepicker"]], viewQuery: function TimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c27, 5, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c28, 5);
        ɵngcc0.ɵɵviewQuery(_c29, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleButton = _t.first);
    } }, hostVars: 6, hostBindings: function TimePickerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-timepicker", ctx.wrapperClasses)("k-input", ctx.wrapperClasses)("k-disabled", ctx.disabledClass);
    } }, inputs: { focusableId: "focusableId", disabled: "disabled", readonly: "readonly", readOnlyInput: "readOnlyInput", format: "format", placeholder: "placeholder", incompleteDateValidation: "incompleteDateValidation", cancelButton: "cancelButton", nowButton: "nowButton", tabindex: "tabindex", title: "title", rangeValidation: "rangeValidation", min: "min", max: "max", steps: "steps", popupSettings: "popupSettings", tabIndex: "tabIndex", value: "value", size: "size", rounded: "rounded", fillMode: "fillMode", formatPlaceholder: "formatPlaceholder" }, outputs: { valueChange: "valueChange", onFocus: "focus", onBlur: "blur", open: "open", close: "close" }, exportAs: ["kendo-timepicker"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TimePickerComponent_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => TimePickerComponent_1), multi: true },
            { provide: KendoInput, useExisting: forwardRef(() => TimePickerComponent_1) },
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.timepicker'
            },
            PickerService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 27, consts: function () { let i18n_40; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Accept button text in the timepicker component
         * @meaning kendo.timepicker.accept
         */
        const MSG_EXTERNAL_7519663530416240229$$DIST_FESM2015_INDEX_JS_41 = goog.getMsg("Set");
        i18n_40 = MSG_EXTERNAL_7519663530416240229$$DIST_FESM2015_INDEX_JS_41;
    }
    else {
        i18n_40 = $localize `:kendo.timepicker.accept|The Accept button text in the timepicker component␟4c3bf42192220c7611c09ece1c5de14855139dd0␟7519663530416240229:Set`;
    } let i18n_42; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Accept button in the timepicker component
         * @meaning kendo.timepicker.acceptLabel
         */
        const MSG_EXTERNAL_4355879331538595758$$DIST_FESM2015_INDEX_JS_43 = goog.getMsg("Set time");
        i18n_42 = MSG_EXTERNAL_4355879331538595758$$DIST_FESM2015_INDEX_JS_43;
    }
    else {
        i18n_42 = $localize `:kendo.timepicker.acceptLabel|The label for the Accept button in the timepicker component␟93c2a9c3aa49f56e452c0aecbaabe3bb33fa4222␟4355879331538595758:Set time`;
    } let i18n_44; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Cancel button text in the timepicker component
         * @meaning kendo.timepicker.cancel
         */
        const MSG_EXTERNAL_1086687567255473060$$DIST_FESM2015_INDEX_JS_45 = goog.getMsg("Cancel");
        i18n_44 = MSG_EXTERNAL_1086687567255473060$$DIST_FESM2015_INDEX_JS_45;
    }
    else {
        i18n_44 = $localize `:kendo.timepicker.cancel|The Cancel button text in the timepicker component␟132eefca16bd41d489b4647724b91e93793603aa␟1086687567255473060:Cancel`;
    } let i18n_46; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Cancel button in the timepicker component
         * @meaning kendo.timepicker.cancelLabel
         */
        const MSG_EXTERNAL_83621966901491941$$DIST_FESM2015_INDEX_JS_47 = goog.getMsg("Cancel changes");
        i18n_46 = MSG_EXTERNAL_83621966901491941$$DIST_FESM2015_INDEX_JS_47;
    }
    else {
        i18n_46 = $localize `:kendo.timepicker.cancelLabel|The label for the Cancel button in the timepicker component␟2cf6f4ca4470810944b4016c9b6f87943d3390ab␟83621966901491941:Cancel changes`;
    } let i18n_48; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Now button text in the timepicker component
         * @meaning kendo.timepicker.now
         */
        const MSG_EXTERNAL_5912507758515138116$$DIST_FESM2015_INDEX_JS_49 = goog.getMsg("Now");
        i18n_48 = MSG_EXTERNAL_5912507758515138116$$DIST_FESM2015_INDEX_JS_49;
    }
    else {
        i18n_48 = $localize `:kendo.timepicker.now|The Now button text in the timepicker component␟bbc99bb74ae75a503bd813aad0c7253d3553e923␟5912507758515138116:Now`;
    } let i18n_50; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Now button in the timepicker component
         * @meaning kendo.timepicker.nowLabel
         */
        const MSG_EXTERNAL_371982627910576599$$DIST_FESM2015_INDEX_JS_51 = goog.getMsg("Select now");
        i18n_50 = MSG_EXTERNAL_371982627910576599$$DIST_FESM2015_INDEX_JS_51;
    }
    else {
        i18n_50 = $localize `:kendo.timepicker.nowLabel|The label for the Now button in the timepicker component␟df1a696f318275aa934e27850920889d494c2740␟371982627910576599:Select now`;
    } let i18n_52; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the toggle button in the timepicker component
         * @meaning kendo.timepicker.toggle
         */
        const MSG_EXTERNAL_6938407659294495526$$DIST_FESM2015_INDEX_JS_53 = goog.getMsg("Toggle time list");
        i18n_52 = MSG_EXTERNAL_6938407659294495526$$DIST_FESM2015_INDEX_JS_53;
    }
    else {
        i18n_52 = $localize `:kendo.timepicker.toggle|The label for the toggle button in the timepicker component␟f2c196786ed2d3ecb2369750c36aac9a4053fb30␟6938407659294495526:Toggle time list`;
    } return [["kendoTimePickerLocalizedMessages", "", "accept", i18n_40, "acceptLabel", i18n_42, "cancel", i18n_44, "cancelLabel", i18n_46, "now", i18n_48, "nowLabel", i18n_50, "toggle", i18n_52], [3, "focusableId", "hasPopup", "isPopupOpen", "disabled", "readonly", "role", "ariaReadOnly", "format", "formatPlaceholder", "placeholder", "min", "max", "incompleteDateValidation", "fillMode", "rounded", "size", "steps", "tabindex", "title", "value", "valueChange"], ["input", ""], ["type", "button", 1, "k-input-button", "k-button", "k-icon-button", 3, "kendoEventsOutsideAngular", "scope"], ["toggleButton", ""], [1, "k-button-icon", "k-icon", "k-i-clock"], ["popupTemplate", ""], ["container", ""], [3, "cancelButton", "nowButton", "format", "min", "max", "steps", "value", "kendoEventsOutsideAngular", "scope", "valueChange", "valueReject"], ["timeSelector", ""], [3, "acceptLabel", "accept", "cancelLabel", "cancel", "nowLabel", "now"]]; }, template: function TimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementStart(1, "kendo-dateinput", 1, 2);
        ɵngcc0.ɵɵlistener("valueChange", function TimePickerComponent_Template_kendo_dateinput_valueChange_1_listener($event) { return ctx.handleInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "button", 3, 4);
        ɵngcc0.ɵɵelement(5, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, TimePickerComponent_ng_template_6_Template, 3, 18, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(8, null, 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("focusableId", ctx.focusableId)("hasPopup", true)("isPopupOpen", ctx.show)("disabled", ctx.disabled)("readonly", ctx.readonly || ctx.readOnlyInput)("role", ctx.inputRole)("ariaReadOnly", ctx.readonly)("format", ctx.format)("formatPlaceholder", ctx.formatPlaceholder)("placeholder", ctx.placeholder)("min", ctx.normalizeTime(ctx.min))("max", ctx.normalizeTime(ctx.max))("incompleteDateValidation", ctx.incompleteDateValidation)("fillMode", ctx.fillMode)("rounded", ctx.rounded)("size", ctx.size)("steps", ctx.steps)("tabindex", !ctx.show ? ctx.tabindex : -1)("title", ctx.title)("value", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(24, _c39, ctx.handleIconClick, ctx.handleMousedown))("scope", ctx);
        ɵngcc0.ɵɵattribute("title", ctx.localization.get("toggle"))("aria-label", ctx.localization.get("toggle"));
    } }, directives: function () { return [TimePickerLocalizedMessagesDirective, DateInputComponent, ɵngcc4.EventsOutsideAngularDirective, TimeSelectorComponent, TimeSelectorCustomMessagesComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: false }),
    __metadata("design:type", ViewContainerRef)
], TimePickerComponent.prototype, "container", void 0);
__decorate([
    ViewChild('popupTemplate', { static: false }),
    __metadata("design:type", TemplateRef)
], TimePickerComponent.prototype, "popupTemplate", void 0);
__decorate([
    ViewChild('toggleButton', { static: true }),
    __metadata("design:type", ElementRef)
], TimePickerComponent.prototype, "toggleButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "focusableId", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "readonly", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "readOnlyInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "format", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TimePickerComponent.prototype, "formatPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], TimePickerComponent.prototype, "min", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], TimePickerComponent.prototype, "max", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "incompleteDateValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "cancelButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "nowButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TimePickerComponent.prototype, "steps", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TimePickerComponent.prototype, "popupSettings", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimePickerComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TimePickerComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], TimePickerComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TimePickerComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TimePickerComponent.prototype, "rounded", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TimePickerComponent.prototype, "fillMode", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePickerComponent.prototype, "valueChange", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], TimePickerComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], TimePickerComponent.prototype, "onBlur", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePickerComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePickerComponent.prototype, "close", void 0);
__decorate([
    HostBinding('class.k-timepicker'),
    HostBinding('class.k-input'),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "wrapperClasses", void 0);
__decorate([
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], TimePickerComponent.prototype, "disabledClass", null);
TimePickerComponent = TimePickerComponent_1 = __decorate([ __param(9, Optional()), __param(9, Inject(TOUCH_ENABLED)),
    __metadata("design:paramtypes", [NgZone,
        LocalizationService,
        ChangeDetectorRef,
        PopupService,
        ElementRef,
        Renderer2,
        Injector,
        PickerService,
        IntlService, Boolean])
], TimePickerComponent);

var DateTimePickerComponent_1;
const timeFormatRegExp = new RegExp(`${TIME_PART.hour}|${TIME_PART.minute}|${TIME_PART.second}|${TIME_PART.dayperiod}|literal`);
const VALUE_DOC_LINK$5 = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/datetimepicker/integration-with-json/';
const MIN_MAX_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/datetimepicker/date-time-limits/';
const DEFAULT_ACTIVE_TAB = 'date';
const DEFAULT_DATEINPUT_FORMAT = 'g';
const DEFAULT_TIMESELECTOR_FORMAT = 't';
const TWO_DIGIT_YEAR_MAX$2 = 68;
/**
 * Represents the [Kendo UI DateTimePicker component for Angular]({% slug overview_datetimepicker %}).
 */
let DateTimePickerComponent = DateTimePickerComponent_1 = class DateTimePickerComponent {
    constructor(popupService, intl, cdr, pickerService, ngZone, wrapper, touchEnabled$$1, localization, disabledDatesService, renderer) {
        this.popupService = popupService;
        this.intl = intl;
        this.cdr = cdr;
        this.pickerService = pickerService;
        this.ngZone = ngZone;
        this.wrapper = wrapper;
        this.touchEnabled = touchEnabled$$1;
        this.localization = localization;
        this.disabledDatesService = disabledDatesService;
        this.renderer = renderer;
        /**
         * @hidden
         */
        this.hostClasses = true;
        /**
         * The maximum year to assume to be from the current century when typing two-digit year value
         * ([see example]({% slug formats_datetimepicker %}#toc-two-digit-year-format)).
         *
         * The default value is 68, indicating that typing any value less than 69
         * will be assumed to be 20xx, while 69 and larger will be assumed to be 19xx.
         */
        this.twoDigitYearMax = TWO_DIGIT_YEAR_MAX$2;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Sets the title of the input element of the DateTimePicker.
         */
        this.title = '';
        /**
         * Sets or gets the `disabled` property of the DateTimePicker and determines whether the component is active
         * ([see example]({% slug disabled_datetimepicker %})).
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the DateTimePicker
         * ([see example]({% slug readonly_datetimepicker %}#toc-read-only-datetimepicker)).
         */
        this.readonly = false;
        /**
         * Sets the read-only state of the DateTimePicker input field
         * ([see example]({% slug readonly_datetimepicker %}#toc-read-only-input)).
         *
         * > Note that if you set the [`readonly`]({% slug api_dateinputs_datetimepickercomponent %}#toc-readonly) property value to `true`,
         * the input will be rendered in a read-only state regardless of the `readOnlyInput` value.
         */
        this.readOnlyInput = false;
        /**
         * Determines whether to display the **Cancel** button in the popup
         * ([see example]({% slug datetimepicker_popup_options %}#toc-toggling-the-cancel-button)).
         */
        this.cancelButton = true;
        /**
         * Configures the incremental steps of the DateInput and the popup component of the TimePicker
         * ([see example]({% slug incrementalsteps_datetimepicker %})).
         */
        this.steps = {};
        /**
         * Specifies the Calendar type.
         *
         * The possible values are:
         * - `infinite` (default)
         * - `classic`
         *
         */
        this.calendarType = 'infinite';
        /**
         * Determines whether to enable animation when navigating to previous/next Calendar view.
         * Applies to the [`classic`]({% slug api_dateinputs_datetimepickercomponent %}#toc-calendartype) Calendar only.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateCalendarNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view of the popup Calendar
         * ([see example]({% slug datetimepicker_calendar_options %}#toc-week-number-column)).
         */
        this.weekNumber = false;
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form
         * ([see example]({% slug dateranges_datetimepicker %}#toc-prevent-invalid-input)).
         */
        this.rangeValidation = true;
        /**
         * Determines whether the built-in validator for disabled
         * date ranges is enforced when validating a form
         * ([see example]({% slug disabled_dates_datetimepicker %}#toc-validation)).
         */
        this.disabledDatesValidation = true;
        /**
         * Determines whether the built-in validation for incomplete dates is to be enforced when a form is being validated.
         */
        this.incompleteDateValidation = false;
        /**
         * Fires each time the user selects a new value.
         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain closed.
         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain open.
         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the component.
         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the user blurs the component.
         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         *
         * Controls whether the Calendar or the TimeSelector will be displayed.
         */
        this.activeTab = DEFAULT_ACTIVE_TAB;
        /**
         * @hidden
         *
         * Specifies the stripped time-related format that is used in the TimeSelector.
         * Updates each time the `format` property value changes.
         */
        this.timeSelectorFormat = DEFAULT_TIMESELECTOR_FORMAT;
        /**
         * @hidden
         */
        this.timeSelectorMin = cloneDate(MIN_TIME);
        /**
         * @hidden
         */
        this.timeSelectorMax = cloneDate(MAX_TIME);
        /**
         * @hidden
         */
        this.calendarValue = null;
        /**
         * @hidden
         */
        this.calendarMin = cloneDate(MIN_DATE);
        /**
         * @hidden
         */
        this.calendarMax = lastMillisecondOfDate(MAX_DATE);
        this._popupSettings = { animate: true };
        this._value = null;
        this._format = DEFAULT_DATEINPUT_FORMAT;
        this._tabindex = 0;
        this._defaultTab = DEFAULT_ACTIVE_TAB;
        this._min = mergeDateAndTime(MIN_DATE, MIN_TIME);
        this._max = mergeDateAndTime(MAX_DATE, MAX_TIME);
        this._isActive = false;
        this.onControlTouched = noop;
        this.onControlChange = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.disabledDatesValidateFn = noop;
        this.incompleteValidator = noop;
        this.subscriptions = new Subscription();
        this._size = 'medium';
        this._rounded = 'medium';
        this._fillMode = 'solid';
        validatePackage(packageMetadata);
    }
    /**
     * @hidden
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @hidden
     */
    get input() {
        return this.pickerService.input;
    }
    /**
     * @hidden
     */
    get calendar() {
        return this.pickerService.calendar;
    }
    /**
     * @hidden
     */
    get timeSelector() {
        return this.pickerService.timeSelector;
    }
    /**
     * Specifies the value of the DateTimePicker component.
     *
     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    set value(value) {
        this.verifyValue(value);
        this._value = cloneDate(value);
        this.setCalendarValue(value);
        this.cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /**
     * Specifies the date format for displaying the input value
     * ([see example]({% slug formats_datetimepicker %}))
     *
     * Format value options:
     * - `string` - Provide a `string` if a single format is going to be used regardless whether the input is focused or blurred.
     * - [`FormatSettings`]({% slug api_dateinputs_formatsettings %}) - To display different formats when the component is focused or blurred, provide a settings object with specified `inputFormat` and `displayFormat` values.
     *
     * > If a [`FormatSettings`]({% slug api_dateinputs_formatsettings %}) object is provided, the `displayFormat` value will be used for the popup TimePicker.
     */
    set format(format) {
        this._format = format;
        const displayFormat = this.getDisplayFormat(format);
        this.timeSelectorFormat = this.getTimeSelectorFormat(displayFormat);
    }
    get format() {
        return this._format;
    }
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the DateTimePicker.
     */
    set tabindex(value) {
        const tabindex = Number(value);
        const defaultValue = 0;
        this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
    }
    get tabindex() {
        return this.disabled ? -1 : this._tabindex;
    }
    /**
     * Sets the dates of the DateTimePicker that will be disabled
     * ([see example]({% slug disabled_dates_datetimepicker %})).
     */
    set disabledDates(value) {
        this._disabledDates = value;
        this.disabledDatesService.initialize(value);
    }
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Configures the popup settings of the DateTimePicker
     * ([see example]({% slug datetimepicker_popup_options %}#toc-customizing-the-popup)).
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, { animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Specifies the smallest valid date.
     * The Calendar will not display dates before this value.
     * If the `min` value of the Calendar is selected, the TimePicker will not display
     * time entries before the specified time portion of this value
     * ([see example]({% slug dateranges_datetimepicker %})).
     */
    set min(value) {
        if (!isPresent(value)) {
            return;
        }
        this._min = cloneDate(value);
        this.calendarMin = getDate(value);
    }
    get min() {
        return this._min;
    }
    /**
     * Specifies the biggest valid date.
     * The Calendar will not display dates after this value.
     * If the `max` value of the Calendar is selected, the TimePicker will not display
     * time entries after the specified time portion of this value
     * ([see example]({% slug dateranges_datetimepicker %})).
     */
    set max(value) {
        if (!isPresent(value)) {
            return;
        }
        this._max = cloneDate(value);
        this.calendarMax = lastMillisecondOfDate(value);
    }
    get max() {
        return this._max;
    }
    /**
     * Indicates whether the component is currently open.
     */
    get isOpen() {
        return isPresent(this.popupRef);
    }
    /**
     * Indicates whether the component or its popup content is focused.
     */
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        if (value) {
            this.renderer.addClass(this.wrapper.nativeElement, 'k-focus');
        }
        else {
            this.renderer.removeClass(this.wrapper.nativeElement, 'k-focus');
        }
        this._isActive = value;
    }
    /**
     * Sets the active tab on opening the popup
     * ([see example]({% slug datetimepicker_popup_options %}#toc-setting-the-default-tab)).
     */
    set defaultTab(tab) {
        this._defaultTab = tab || DEFAULT_ACTIVE_TAB;
        this.activeTab = this.defaultTab;
    }
    get defaultTab() {
        return this._defaultTab;
    }
    /**
     * Sets the size of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `null`
     *
     */
    set size(size) {
        this.renderer.removeClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
        this.renderer.removeClass(this.toggleButton.nativeElement, getSizeClass('input', this.size));
        if (size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('input', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * Sets the border radius of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (Default)
     * * `'large'`
     * * `'full'`
     * * `null`
     *
     */
    set rounded(rounded) {
        this.renderer.removeClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        if (rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(rounded));
        }
        this._rounded = rounded;
    }
    get rounded() {
        return this._rounded;
    }
    /**
     * Sets the fillMode of the component.
     *
     * The possible values are:
     * * `'solid'` (Default)
     * * `'flat'`
     * * `'outline'`
     * * `null`
     *
     */
    set fillMode(fillMode) {
        this.renderer.removeClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
        this.renderer.removeClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        if (fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${fillMode}-base`);
        }
        this._fillMode = fillMode;
    }
    get fillMode() {
        return this._fillMode;
    }
    /**
     * @hidden
     */
    get tabSwitchTransition() {
        /*
         When the popup is opening, disables the set transition in the themes. When `defaultTab` is set to `time`,
         the popup opens with an active **Time** tab and the animation of the initial transition is undesired.
         Setting the inline transition style to `none` overrides the set animation in the themes.
         Setting the inline transition style to `null` does not apply any inline styles or override the themes CSS.
        */
        return this.isOpen ? null : 'none';
    }
    /**
     * @hidden
     *
     * Indicates whether the Calendar will be disabled.
     * The inactive tab component gets disabled and becomes inaccessible on tab click.
     */
    get disableCalendar() {
        return this.activeTab !== 'date' && !this.calendar.isActive;
    }
    /**
     * @hidden
     */
    get inputRole() {
        return this.readOnlyInput ? 'listbox' : 'spinbutton';
    }
    /**
     * @hidden
     *
     * Indicates whether the TimeSelector will be disabled.
     * The inactive tab component gets disabled and becomes inaccessible on tab click.
     */
    get disableTimeSelector() {
        return this.activeTab !== 'time' && !this.timeSelector.isActive;
    }
    get activeTabComponent() {
        if (!this.isOpen) {
            return;
        }
        if (!(isPresent(this.calendar) || isPresent(this.timeSelector))) {
            this.cdr.detectChanges();
        }
        return this.activeTab === 'date' ? this.calendar : this.timeSelector;
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!isPresent(appendTo) || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    ngOnInit() {
        this.subscriptions.add(this.pickerService.onFocus
            // detect popup changes to disable the inactive view mark-up when the popup is open
            .pipe(tap(this.detectPopupChanges.bind(this)))
            .subscribe(this.handleFocus.bind(this)));
        this.subscriptions.add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)));
        this.subscriptions.add(this.pickerService.sameDateSelected.subscribe(this.handleCalendarValueChange.bind(this)));
        this.subscriptions.add(this.localization.changes.subscribe(() => this.cdr.markForCheck()));
        this.subscriptions.add(this.pickerService.dateCompletenessChange.subscribe(this.handleDateCompletenessChange.bind(this)));
        if (isWindowAvailable()) {
            this.subscriptions.add(this.ngZone.runOutsideAngular(() => fromEvent(window, 'blur').subscribe(this.handleCancel.bind(this))));
        }
    }
    ngAfterViewInit() {
        this.setComponentClasses();
    }
    ngOnChanges(changes) {
        if (isPresent(changes.min) || isPresent(changes.max)) {
            this.verifyMinMaxRange();
        }
        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDatesValidation || changes.disabledDates || changes.incompleteDateValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.disabledDatesValidateFn = this.disabledDatesValidation ? disabledDatesValidator(this.disabledDatesService.isDateDisabled) : noop;
            this.incompleteValidator = this.incompleteDateValidation ? incompleteDateValidator() : noop;
            this.onValidatorChange();
        }
    }
    ngOnDestroy() {
        if (this.isOpen) {
            this.closePopup();
        }
        this.subscriptions.unsubscribe();
    }
    /**
     * * If the popup is closed, focuses the DateTimePicker input.
     * * If the popup is open, the focus is moved to its content.
     */
    focus() {
        if (this.disabled) {
            return;
        }
        if (this.isOpen) {
            this.activeTabComponent.focus();
        }
        else {
            this.input.focus();
        }
    }
    /**
     * Blurs the DateTimePicker.
     */
    blur() {
        if (this.isOpen && this.activeTabComponent.isActive) {
            this.activeTabComponent.blur();
        }
        else {
            this.input.blur();
        }
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     *
     * @param show - The state of the popup.
     */
    toggle(show) {
        if (this.disabled || this.readonly || show === this.isOpen) {
            return;
        }
        const shouldOpen = isPresent(show) ? show : !this.isOpen;
        if (shouldOpen) {
            this.openPopup();
        }
        else {
            this.closePopup();
            // Changes the tab and the calendar or clock icon to the designated default.
            if (this.activeTab !== this.defaultTab) {
                this.activeTab = this.defaultTab;
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesValidateFn(control) || this.incompleteValidator(control, this.input && this.input.isDateIncomplete);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @hidden
     *
     * Used by the TextBoxContainer to determine if the floating label will render in the input.
     */
    isEmpty() {
        return !isPresent(this.value) && this.input.isEmpty();
    }
    /**
     * @hidden
     */
    handleIconClick(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        // prevents the event default to evade focusing the DateInput input when placed inside a label (FF/IE/Edge)
        event.preventDefault();
        const runInZone = !this.isOpen || hasObservers(this.close);
        this.run(runInZone, () => {
            const shouldOpen = !this.isOpen;
            // handle focus first to maintain correct event order `focus` => `open`
            this.handleFocus();
            this.togglePopup(shouldOpen);
            this.switchFocus();
        });
    }
    /**
     * @hidden
     */
    handleFocus() {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        if (hasObservers(this.onFocus)) {
            this.ngZone.run(() => this.onFocus.emit());
        }
    }
    /**
     * @hidden
     */
    handleBlur(event) {
        if (!this.isActive || this.focusTargetInComponent(event)) {
            return;
        }
        this.isActive = false;
        const isNgControlUntouched = this.wrapper.nativeElement.classList.contains('ng-untouched');
        const runInZone = isNgControlUntouched || hasObservers(this.onBlur) || (this.isOpen && hasObservers(this.close));
        this.run(runInZone, () => {
            this.onBlur.emit();
            this.onControlTouched();
            this.togglePopup(false);
            this.cdr.markForCheck();
        });
    }
    /**
     * @hidden
     */
    changeActiveTab(tab) {
        if (!this.isOpen || this.activeTab === tab) {
            return;
        }
        // persists the Tcurrent value of the TimeSelector when switching between tabs
        if (!isEqual(this.timeSelector.value, this.timeSelector.current)) {
            this.timeSelector.handleAccept();
        }
        this.activeTab = tab;
        this.cdr.detectChanges();
        this.detectPopupChanges();
    }
    /**
     * @hidden
     */
    handleTabChangeTransitionEnd(dateTimeSelector, event) {
        // handle only the .k-datetime-selector element transition, ignore any child element transitions
        if (event.target !== dateTimeSelector) {
            return;
        }
        this.activeTabComponent.focus();
    }
    /**
     * @hidden
     */
    handleAccept() {
        if (!this.isOpen) {
            return;
        }
        const candidate = mergeDateAndTime(this.calendar.value, this.timeSelector.current);
        const valueChangePresent = !isEqual(this.value, candidate);
        const runInZone = valueChangePresent || hasObservers(this.close);
        this.run(runInZone, () => {
            this.handleValueChange(candidate);
            this.togglePopup(false);
        });
    }
    /**
     * @hidden
     */
    handleCancel() {
        if (!this.isOpen) {
            return;
        }
        const runInZone = hasObservers(this.close);
        this.run(runInZone, () => this.togglePopup(false));
    }
    /**
     * @hidden
     */
    handleInputValueChange(value) {
        this.handleValueChange(value);
        if (this.isOpen) {
            this.togglePopup(false);
        }
    }
    /**
     * @hidden
     */
    handleCalendarValueChange() {
        this.setTimeSelectorMinMax(this.calendar.value);
        this.changeActiveTab('time');
    }
    /**
     * @hidden
     */
    handleKeyDown(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        const { keyCode, altKey } = event;
        switch (keyCode) {
            case altKey && Keys.ArrowUp:
            case Keys.Escape:
                this.handleCancel();
                break;
            case !this.isOpen && altKey && Keys.ArrowDown:
                this.ngZone.run(() => this.togglePopup(true));
                break;
            case altKey && Keys.ArrowRight:
                this.changeActiveTab('time');
                break;
            case altKey && Keys.ArrowLeft:
                this.changeActiveTab('date');
                break;
            case this.isOpen && this.timeSelector.isActive && isPresent(this.calendarValue) && Keys.Enter:
                this.handleAccept();
                break;
            default: return;
        }
        event.preventDefault();
    }
    /**
     * @hidden
     */
    handleTabOut(event) {
        const { keyCode, shiftKey, target } = event;
        // if no focusable next sibling elements exist in the controls sections, the user is tabbing out of the popup
        const focusableSiblingAvailable = isPresent(target.nextElementSibling) && !target.nextElementSibling.disabled;
        if (keyCode === Keys.Tab && !shiftKey && !focusableSiblingAvailable) {
            this.input.focus();
            this.handleCancel();
        }
    }
    /**
     * @hidden
     */
    handleBackTabOut(event) {
        const { keyCode, shiftKey } = event;
        if (keyCode === Keys.Tab && shiftKey) {
            this.input.focus();
        }
    }
    /**
     * @hidden
     */
    popupButtonsClasses(type) {
        const buttonType = type ? type : 'base';
        return `${this.size ? getSizeClass('button', this.size) : ''} ${this.rounded ? getRoundedClass(this.rounded) : ''} ${this.fillMode ? 'k-button-' + this.fillMode + ' ' + 'k-button-' + this.fillMode + '-' + buttonType : ''}`;
    }
    /**
     * @hidden
     *
     * Prevents the diversion of the focus from the currently active element in the component.
     */
    preventMouseDown(event) {
        event.preventDefault();
    }
    verifyValue(value) {
        if (!isDevMode()) {
            return;
        }
        if (isPresent(value) && !(value instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK$5} for possible resolution.`);
        }
    }
    verifyMinMaxRange() {
        if (!isDevMode()) {
            return;
        }
        if (!isValidRange(this.min, this.max)) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_MAX_DOC_LINK}.`);
        }
    }
    /**
     * Extracts the time slots and the literals that are not preceded by date parts
     * and concatenates the resulting parts into a string.
     * If the provided format value does not contain any time parts,
     * returns the designated format of the default popup component of the TimePicker.
     */
    getTimeSelectorFormat(format) {
        const timeSelectorFormat = this.intl
            .splitDateFormat(format)
            .filter(this.timeFormatPartFilter)
            .reduce((format, part) => format += part.pattern, '');
        return timeSelectorFormat || DEFAULT_TIMESELECTOR_FORMAT;
    }
    /**
     * Extracts the `displayFormat` from the provided `string | FormatSettings` value.
     * Fallbacks to the default input value, if a falsy value param is passed.
     */
    getDisplayFormat(format) {
        if (!format) {
            return DEFAULT_DATEINPUT_FORMAT;
        }
        if (typeof format === 'string') {
            return format;
        }
        else {
            return format.displayFormat;
        }
    }
    /**
     * The filter expression that filters out all format parts
     * except for `hour`, `minute`, `second`, `dayperiod`, and specific literals.
     * Literals will be left only if they are not preceded by date parts.
     */
    timeFormatPartFilter(part, index, parts) {
        const previousPart = index >= 1 && parts[index - 1];
        if (previousPart && part.type === 'literal') {
            return timeFormatRegExp.test(previousPart.type);
        }
        return timeFormatRegExp.test(part.type);
    }
    togglePopup(open) {
        if (open === this.isOpen) {
            return;
        }
        const event = new PreventableEvent();
        open ? this.open.emit(event) : this.close.emit(event);
        if (event.isDefaultPrevented()) {
            return;
        }
        this.toggle(open);
        this.switchFocus();
    }
    switchFocus() {
        if (!this.isActive) {
            return;
        }
        if (this.isOpen) {
            this.activeTabComponent.focus();
        }
        else if (!this.touchEnabled) {
            this.input.focus();
        }
        else if (!this.input.isActive) {
            this.handleBlur();
        }
    }
    openPopup() {
        this.setCalendarValue(this.value);
        this.setTimeSelectorMinMax(this.value);
        const direction = this.localization.rtl ? 'right' : 'left';
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            content: this.popupTemplate,
            positionMode: 'absolute',
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            popupClass: `k-datetime-container ${this.popupSettings.popupClass || ''}`,
            anchorAlign: { vertical: 'bottom', horizontal: direction },
            popupAlign: { vertical: 'top', horizontal: direction }
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.handleCancel());
    }
    closePopup() {
        if (!this.isOpen) {
            return;
        }
        this.popupRef.close();
        this.popupRef = null;
    }
    handleValueChange(value) {
        if (isEqual(this.value, value)) {
            return;
        }
        this.value = cloneDate(value);
        this.onControlChange(cloneDate(value));
        this.valueChange.emit(cloneDate(value));
    }
    /**
     * Indicates whether the focus target is part of this component,
     * that is, whether the focus target is inside the component or in the popup.
     */
    focusTargetInComponent(event) {
        if (!isPresent(event)) {
            return false;
        }
        const relatedTarget = event.relatedTarget || document.activeElement;
        const focusInPopup = isPresent(this.popupRef) && this.popupRef.popupElement.contains(relatedTarget);
        const focusInWrapper = this.wrapper.nativeElement.contains(relatedTarget);
        return focusInPopup || focusInWrapper;
    }
    setTimeSelectorMinMax(selectedDate) {
        const minDateSelected = isPresent(selectedDate) && isEqual(getDate(selectedDate), getDate(this.min));
        this.timeSelectorMin = cloneDate(minDateSelected ? this.min : MIN_TIME);
        const maxDateSelected = isPresent(selectedDate) && isEqual(getDate(selectedDate), getDate(this.max));
        this.timeSelectorMax = cloneDate(maxDateSelected ? this.max : MAX_TIME);
    }
    setCalendarValue(value) {
        const isInCalendarRange = isPresent(value) && isInRange(value, this.calendarMin, this.calendarMax);
        this.calendarValue = isInCalendarRange ? getDate(value) : null;
    }
    /**
     * If the popup is available, runs a popup change detection.
     */
    detectPopupChanges() {
        if (!this.isOpen) {
            return;
        }
        this.popupRef.popup.changeDetectorRef.detectChanges();
    }
    /**
     * Depending on the predicate `runInZone` value that is passed,
     * runs the provided function either in the Angular or in the current zone.
     */
    run(runInZone, fn) {
        if (runInZone) {
            this.ngZone.run(() => fn());
        }
        else {
            fn();
        }
    }
    handleDateCompletenessChange() {
        this.cdr.markForCheck();
        this.ngZone.run(() => this.onValidatorChange());
    }
    setComponentClasses() {
        if (this.size) {
            this.renderer.addClass(this.wrapper.nativeElement, getSizeClass('input', this.size));
            this.renderer.addClass(this.toggleButton.nativeElement, getSizeClass('button', this.size));
        }
        if (this.rounded) {
            this.renderer.addClass(this.wrapper.nativeElement, getRoundedClass(this.rounded));
        }
        if (this.fillMode) {
            this.renderer.addClass(this.wrapper.nativeElement, getFillModeClass('input', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, getFillModeClass('button', this.fillMode));
            this.renderer.addClass(this.toggleButton.nativeElement, `k-button-${this.fillMode}-base`);
        }
    }
};
DateTimePickerComponent.ɵfac = function DateTimePickerComponent_Factory(t) { return new (t || DateTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(PickerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
DateTimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateTimePickerComponent, selectors: [["kendo-datetimepicker"]], contentQueries: function DateTimePickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MonthCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, YearCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DecadeCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CenturyCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, WeekNumberCellTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTitleTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.decadeCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.centuryCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.weekNumberTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTitleTemplate = _t.first);
    } }, viewQuery: function DateTimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c29, 7);
        ɵngcc0.ɵɵviewQuery(_c27, 7, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c28, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
    } }, hostVars: 6, hostBindings: function DateTimePickerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-datetimepicker", ctx.hostClasses)("k-input", ctx.hostClasses)("k-disabled", ctx.disabledClass);
    } }, inputs: { twoDigitYearMax: "twoDigitYearMax", focusableId: "focusableId", title: "title", disabled: "disabled", readonly: "readonly", readOnlyInput: "readOnlyInput", cancelButton: "cancelButton", steps: "steps", calendarType: "calendarType", animateCalendarNavigation: "animateCalendarNavigation", weekNumber: "weekNumber", rangeValidation: "rangeValidation", disabledDatesValidation: "disabledDatesValidation", incompleteDateValidation: "incompleteDateValidation", value: "value", format: "format", tabindex: "tabindex", disabledDates: "disabledDates", popupSettings: "popupSettings", min: "min", max: "max", defaultTab: "defaultTab", size: "size", rounded: "rounded", fillMode: "fillMode", formatPlaceholder: "formatPlaceholder", placeholder: "placeholder", focusedDate: "focusedDate" }, outputs: { valueChange: "valueChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendo-datetimepicker"], features: [ɵngcc0.ɵɵProvidersFeature([
            PickerService,
            LocalizationService,
            DisabledDatesService,
            { provide: L10N_PREFIX, useValue: 'kendo.datetimepicker' },
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateTimePickerComponent_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateTimePickerComponent_1), multi: true },
            { provide: KendoInput, useExisting: forwardRef(() => DateTimePickerComponent_1) }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 37, consts: function () { let i18n_55; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Date tab text in the datetimepicker popup header
         * @meaning kendo.datetimepicker.dateTab
         */
        const MSG_EXTERNAL_3360129034450596425$$DIST_FESM2015_INDEX_JS_56 = goog.getMsg("Date");
        i18n_55 = MSG_EXTERNAL_3360129034450596425$$DIST_FESM2015_INDEX_JS_56;
    }
    else {
        i18n_55 = $localize `:kendo.datetimepicker.dateTab|The Date tab text in the datetimepicker popup header␟5bb17f81ae8dbc109499ce3792afffa6b7cef855␟3360129034450596425:Date`;
    } let i18n_57; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Date tab in the datetimepicker popup header
         * @meaning kendo.datetimepicker.dateTabLabel
         */
        const MSG_EXTERNAL_1810540079817643910$$DIST_FESM2015_INDEX_JS_58 = goog.getMsg("Date tab");
        i18n_57 = MSG_EXTERNAL_1810540079817643910$$DIST_FESM2015_INDEX_JS_58;
    }
    else {
        i18n_57 = $localize `:kendo.datetimepicker.dateTabLabel|The label for the Date tab in the datetimepicker popup header␟2a400c9e364a4c6d83ac39b5513c962805db54b2␟1810540079817643910:Date tab`;
    } let i18n_59; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Time tab text in the datetimepicker popup header
         * @meaning kendo.datetimepicker.timeTab
         */
        const MSG_EXTERNAL_3807284594201983607$$DIST_FESM2015_INDEX_JS_60 = goog.getMsg("Time");
        i18n_59 = MSG_EXTERNAL_3807284594201983607$$DIST_FESM2015_INDEX_JS_60;
    }
    else {
        i18n_59 = $localize `:kendo.datetimepicker.timeTab|The Time tab text in the datetimepicker popup header␟e9b2b760a6916040e7520a9a2926d65de175944d␟3807284594201983607:Time`;
    } let i18n_61; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Time tab in the datetimepicker popup header
         * @meaning kendo.datetimepicker.timeTabLabel
         */
        const MSG_EXTERNAL_2577682127494513393$$DIST_FESM2015_INDEX_JS_62 = goog.getMsg("Time tab");
        i18n_61 = MSG_EXTERNAL_2577682127494513393$$DIST_FESM2015_INDEX_JS_62;
    }
    else {
        i18n_61 = $localize `:kendo.datetimepicker.timeTabLabel|The label for the Time tab in the datetimepicker popup header␟13bf7e3a1036140119732c6d5952f7a20c22999e␟2577682127494513393:Time tab`;
    } let i18n_63; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the toggle button in the datetimepicker component
         * @meaning kendo.datetimepicker.toggle
         */
        const MSG_EXTERNAL_3159207801887264026$$DIST_FESM2015_INDEX_JS_64 = goog.getMsg("Toggle popup");
        i18n_63 = MSG_EXTERNAL_3159207801887264026$$DIST_FESM2015_INDEX_JS_64;
    }
    else {
        i18n_63 = $localize `:kendo.datetimepicker.toggle|The title of the toggle button in the datetimepicker component␟60296a83f0d3e3d07aaba87c4f8e91b0aca3c22a␟3159207801887264026:Toggle popup`;
    } let i18n_65; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Accept button text in the datetimepicker component
         * @meaning kendo.datetimepicker.accept
         */
        const MSG_EXTERNAL_3915774704336012538$$DIST_FESM2015_INDEX_JS_66 = goog.getMsg("Set");
        i18n_65 = MSG_EXTERNAL_3915774704336012538$$DIST_FESM2015_INDEX_JS_66;
    }
    else {
        i18n_65 = $localize `:kendo.datetimepicker.accept|The Accept button text in the datetimepicker component␟4359b59db7ded88e106ada877e744c71b188f8f9␟3915774704336012538:Set`;
    } let i18n_67; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Accept button in the datetimepicker component
         * @meaning kendo.datetimepicker.acceptLabel
         */
        const MSG_EXTERNAL_4770689705864890748$$DIST_FESM2015_INDEX_JS_68 = goog.getMsg("Set");
        i18n_67 = MSG_EXTERNAL_4770689705864890748$$DIST_FESM2015_INDEX_JS_68;
    }
    else {
        i18n_67 = $localize `:kendo.datetimepicker.acceptLabel|The label for the Accept button in the datetimepicker component␟cbea4571cca81ad9767a6b29f0287d1f3f6372dc␟4770689705864890748:Set`;
    } let i18n_69; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Cancel button text in the datetimepicker component
         * @meaning kendo.datetimepicker.cancel
         */
        const MSG_EXTERNAL_5100781969600382158$$DIST_FESM2015_INDEX_JS_70 = goog.getMsg("Cancel");
        i18n_69 = MSG_EXTERNAL_5100781969600382158$$DIST_FESM2015_INDEX_JS_70;
    }
    else {
        i18n_69 = $localize `:kendo.datetimepicker.cancel|The Cancel button text in the datetimepicker component␟17ab795d6f7527dd962a309759ca58cb4edd7e52␟5100781969600382158:Cancel`;
    } let i18n_71; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Cancel button in the datetimepicker component
         * @meaning kendo.datetimepicker.cancelLabel
         */
        const MSG_EXTERNAL_3535986227615756275$$DIST_FESM2015_INDEX_JS_72 = goog.getMsg("Cancel");
        i18n_71 = MSG_EXTERNAL_3535986227615756275$$DIST_FESM2015_INDEX_JS_72;
    }
    else {
        i18n_71 = $localize `:kendo.datetimepicker.cancelLabel|The label for the Cancel button in the datetimepicker component␟ba26795ab9f4c21d66b17549ba854a96fcdac1f9␟3535986227615756275:Cancel`;
    } let i18n_73; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Now button text in the timepicker component
         * @meaning kendo.datetimepicker.now
         */
        const MSG_EXTERNAL_5497093725885127701$$DIST_FESM2015_INDEX_JS_74 = goog.getMsg("NOW");
        i18n_73 = MSG_EXTERNAL_5497093725885127701$$DIST_FESM2015_INDEX_JS_74;
    }
    else {
        i18n_73 = $localize `:kendo.datetimepicker.now|The Now button text in the timepicker component␟7172e7e9a1741f6b63439ec89e498c995cb23b0d␟5497093725885127701:NOW`;
    } let i18n_75; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Now button in the timepicker component
         * @meaning kendo.datetimepicker.nowLabel
         */
        const MSG_EXTERNAL_5046379108717037514$$DIST_FESM2015_INDEX_JS_76 = goog.getMsg("Select now");
        i18n_75 = MSG_EXTERNAL_5046379108717037514$$DIST_FESM2015_INDEX_JS_76;
    }
    else {
        i18n_75 = $localize `:kendo.datetimepicker.nowLabel|The label for the Now button in the timepicker component␟52d90641b26b1ce4c011cadf0437ce36c1dac1d5␟5046379108717037514:Select now`;
    } let i18n_77; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the today button in the calendar header
         * @meaning kendo.datetimepicker.today
         */
        const MSG_EXTERNAL_2570147067439993260$$DIST_FESM2015_INDEX_JS_78 = goog.getMsg("Today");
        i18n_77 = MSG_EXTERNAL_2570147067439993260$$DIST_FESM2015_INDEX_JS_78;
    }
    else {
        i18n_77 = $localize `:kendo.datetimepicker.today|The label for the today button in the calendar header␟9ef9db9ac4951523d519b989d223f507878c612d␟2570147067439993260:Today`;
    } let i18n_79; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the previous button in the Classic calendar
         * @meaning kendo.datetimepicker.prevButtonTitle
         */
        const MSG_EXTERNAL_6176055232586065404$$DIST_FESM2015_INDEX_JS_80 = goog.getMsg("Navigate to previous view");
        i18n_79 = MSG_EXTERNAL_6176055232586065404$$DIST_FESM2015_INDEX_JS_80;
    }
    else {
        i18n_79 = $localize `:kendo.datetimepicker.prevButtonTitle|The title of the previous button in the Classic calendar␟447d09c4ecfc2ab2b84d708f4c07fa0fcda85167␟6176055232586065404:Navigate to previous view`;
    } let i18n_81; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the next button in the Classic calendar
         * @meaning kendo.datetimepicker.nextButtonTitle
         */
        const MSG_EXTERNAL_6424339255333594510$$DIST_FESM2015_INDEX_JS_82 = goog.getMsg("Navigate to next view");
        i18n_81 = MSG_EXTERNAL_6424339255333594510$$DIST_FESM2015_INDEX_JS_82;
    }
    else {
        i18n_81 = $localize `:kendo.datetimepicker.nextButtonTitle|The title of the next button in the Classic calendar␟80fd3325bfe94a180fd27391f2245c024472ec58␟6424339255333594510:Navigate to next view`;
    } return [["kendoDateTimePickerLocalizedMessages", "", "dateTab", i18n_55, "dateTabLabel", i18n_57, "timeTab", i18n_59, "timeTabLabel", i18n_61, "toggle", i18n_63, "accept", i18n_65, "acceptLabel", i18n_67, "cancel", i18n_69, "cancelLabel", i18n_71, "now", i18n_73, "nowLabel", i18n_75, "today", i18n_77, "prevButtonTitle", i18n_79, "nextButtonTitle", i18n_81], [3, "value", "format", "twoDigitYearMax", "min", "max", "incompleteDateValidation", "formatPlaceholder", "placeholder", "disabled", "readonly", "role", "ariaReadOnly", "steps", "tabindex", "title", "focusableId", "hasPopup", "isPopupOpen", "kendoEventsOutsideAngular", "scope", "fillMode", "rounded", "size", "valueChange"], ["type", "button", 1, "k-input-button", "k-button", "k-icon-button", 3, "tabindex", "kendoEventsOutsideAngular", "scope"], ["toggleButton", ""], [1, "k-button-icon", "k-icon", 3, "ngClass"], ["container", ""], ["popupTemplate", ""], [3, "kendoEventsOutsideAngular", "scope"], [1, "k-datetime-buttongroup", 3, "kendoEventsOutsideAngular", "scope"], [1, "k-button-group", "k-button-group-stretched"], ["type", "button", 1, "k-button", "k-group-start", "k-date-tab", 3, "ngClass", "kendoEventsOutsideAngular", "scope"], ["type", "button", 1, "k-button", "k-group-end", "k-time-tab", 3, "ngClass", "kendoEventsOutsideAngular"], [1, "k-datetime-selector", 3, "kendoEventsOutsideAngular"], ["dateTimeSelector", ""], [1, "k-datetime-calendar-wrap"], [3, "value", "type", "min", "max", "focusedDate", "weekNumber", "navigation", "animateNavigation", "cellTemplate", "monthCellTemplate", "yearCellTemplate", "decadeCellTemplate", "centuryCellTemplate", "weekNumberTemplate", "headerTitleTemplate", "disabled", "disabledDates", "valueChange"], [3, "today", "prevButtonTitle", "nextButtonTitle"], [1, "k-datetime-time-wrap"], [3, "value", "format", "min", "max", "setButton", "cancelButton", "steps", "disabled"], [3, "now", "nowLabel"], [1, "k-datetime-footer", "k-action-buttons", "k-actions", "k-hstack", "k-justify-content-stretch", 3, "kendoEventsOutsideAngular", "scope"], ["type", "button", "class", "k-button k-time-cancel", 3, "ngClass", "kendoEventsOutsideAngular", "scope", 4, "ngIf"], ["type", "button", 1, "k-button", "k-time-accept", 3, "ngClass", "disabled", "kendoEventsOutsideAngular", "scope"], ["type", "button", 1, "k-button", "k-time-cancel", 3, "ngClass", "kendoEventsOutsideAngular", "scope"]]; }, template: function DateTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementStart(1, "kendo-dateinput", 1);
        ɵngcc0.ɵɵlistener("valueChange", function DateTimePickerComponent_Template_kendo_dateinput_valueChange_1_listener($event) { return ctx.handleInputValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "button", 2, 3);
        ɵngcc0.ɵɵelement(4, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainer(5, null, 5);
        ɵngcc0.ɵɵtemplate(7, DateTimePickerComponent_ng_template_7_Template, 19, 84, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.value)("format", ctx.format)("twoDigitYearMax", ctx.twoDigitYearMax)("min", ctx.min)("max", ctx.max)("incompleteDateValidation", ctx.incompleteDateValidation)("formatPlaceholder", ctx.formatPlaceholder)("placeholder", ctx.placeholder)("disabled", ctx.disabled)("readonly", ctx.readonly || ctx.readOnlyInput)("role", ctx.inputRole)("ariaReadOnly", ctx.readonly)("steps", ctx.steps)("tabindex", ctx.tabindex)("title", ctx.title)("focusableId", ctx.focusableId)("hasPopup", true)("isPopupOpen", ctx.isOpen)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(29, _c38, ctx.handleKeyDown))("scope", ctx)("fillMode", ctx.fillMode)("rounded", ctx.rounded)("size", ctx.size);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("tabindex", -1)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(31, _c88, ctx.preventMouseDown, ctx.handleIconClick))("scope", ctx);
        ɵngcc0.ɵɵattribute("title", ctx.localization.get("toggle"))("aria-label", ctx.localization.get("toggle"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(34, _c89, ctx.activeTab === "date", ctx.activeTab === "time"));
    } }, directives: function () { return [LocalizedMessagesDirective, DateInputComponent, ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgClass, CalendarComponent, CalendarCustomMessagesComponent, TimeSelectorComponent, TimeSelectorCustomMessagesComponent, ɵngcc2.NgIf]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    HostBinding('class.k-datetimepicker'),
    HostBinding('class.k-input'),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "hostClasses", void 0);
__decorate([
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DateTimePickerComponent.prototype, "disabledClass", null);
__decorate([
    ViewChild('toggleButton', { static: true }),
    __metadata("design:type", ElementRef)
], DateTimePickerComponent.prototype, "toggleButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DateTimePickerComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimePickerComponent.prototype, "format", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DateTimePickerComponent.prototype, "twoDigitYearMax", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DateTimePickerComponent.prototype, "tabindex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimePickerComponent.prototype, "disabledDates", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimePickerComponent.prototype, "popupSettings", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimePickerComponent.prototype, "focusableId", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimePickerComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "readonly", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "readOnlyInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "cancelButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateTimePickerComponent.prototype, "formatPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimePickerComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateTimePickerComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], DateTimePickerComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimePickerComponent.prototype, "calendarType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "animateCalendarNavigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "weekNumber", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DateTimePickerComponent.prototype, "min", null);
__decorate([
    Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DateTimePickerComponent.prototype, "max", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "rangeValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "disabledDatesValidation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateTimePickerComponent.prototype, "incompleteDateValidation", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateTimePickerComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateTimePickerComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateTimePickerComponent.prototype, "close", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], DateTimePickerComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], DateTimePickerComponent.prototype, "onBlur", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimePickerComponent.prototype, "defaultTab", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimePickerComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimePickerComponent.prototype, "rounded", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimePickerComponent.prototype, "fillMode", null);
__decorate([
    ContentChild(CellTemplateDirective, { static: false }),
    __metadata("design:type", CellTemplateDirective)
], DateTimePickerComponent.prototype, "cellTemplate", void 0);
__decorate([
    ContentChild(MonthCellTemplateDirective, { static: false }),
    __metadata("design:type", MonthCellTemplateDirective)
], DateTimePickerComponent.prototype, "monthCellTemplate", void 0);
__decorate([
    ContentChild(YearCellTemplateDirective, { static: false }),
    __metadata("design:type", YearCellTemplateDirective)
], DateTimePickerComponent.prototype, "yearCellTemplate", void 0);
__decorate([
    ContentChild(DecadeCellTemplateDirective, { static: false }),
    __metadata("design:type", DecadeCellTemplateDirective)
], DateTimePickerComponent.prototype, "decadeCellTemplate", void 0);
__decorate([
    ContentChild(CenturyCellTemplateDirective, { static: false }),
    __metadata("design:type", CenturyCellTemplateDirective)
], DateTimePickerComponent.prototype, "centuryCellTemplate", void 0);
__decorate([
    ContentChild(WeekNumberCellTemplateDirective, { static: false }),
    __metadata("design:type", WeekNumberCellTemplateDirective)
], DateTimePickerComponent.prototype, "weekNumberTemplate", void 0);
__decorate([
    ContentChild(HeaderTitleTemplateDirective, { static: false }),
    __metadata("design:type", HeaderTitleTemplateDirective)
], DateTimePickerComponent.prototype, "headerTitleTemplate", void 0);
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], DateTimePickerComponent.prototype, "container", void 0);
__decorate([
    ViewChild('popupTemplate', { read: TemplateRef, static: true }),
    __metadata("design:type", TemplateRef)
], DateTimePickerComponent.prototype, "popupTemplate", void 0);
DateTimePickerComponent = DateTimePickerComponent_1 = __decorate([ __param(6, Inject(TOUCH_ENABLED)),
    __metadata("design:paramtypes", [PopupService,
        IntlService,
        ChangeDetectorRef,
        PickerService,
        NgZone,
        ElementRef, Boolean, LocalizationService,
        DisabledDatesService,
        Renderer2])
], DateTimePickerComponent);

/**
 * A directive which renders the content of the DateRange Popup. To define the cell template, nest an
 * `<ng-template>` tag with the `kendoRangePopupTemplate` directive inside the component tag.
 */
let DateRangePopupTemplateDirective = class DateRangePopupTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
DateRangePopupTemplateDirective.ɵfac = function DateRangePopupTemplateDirective_Factory(t) { return new (t || DateRangePopupTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
DateRangePopupTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateRangePopupTemplateDirective, selectors: [["", "kendoDateRangePopupTemplate", ""]] });
DateRangePopupTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], DateRangePopupTemplateDirective);

const isActive = (cmp) => (cmp && cmp.isActive) || false;
const hasActiveContent = (popup) => popup && popup.hasActiveContent();
/**
 * A service that handles the communication between the components that are placed inside the DateRangeComponent.
 * For example, the start and end `DateInput` and `DateRangePopup` components.
 */
let DateRangeService = class DateRangeService {
    /**
     * A service that handles the communication between the components that are placed inside the DateRangeComponent.
     * For example, the start and end `DateInput` and `DateRangePopup` components.
     */
    constructor() {
        /**
         * An Observable instance that notifies when the `activeRangeEnd` state is changed.
         */
        this.activeRangeEnd$ = new BehaviorSubject(null);
        /**
         * An Observable instance that notifies when the `focusedDate` is changed.
         */
        this.focusedDate$ = new BehaviorSubject(null);
        /**
         * An Observable instance that notifies when the end `DateInput` component is changed.
         * For example, when a new end `DateInput` is attached or when the old one is detached.
         */
        this.endInput$ = new BehaviorSubject(null);
        /**
         * An Observable instance that notifies when the start `DateInput` component is changed.
         * For example, when a new start `DateInput` is attached or the old one is detached.
         */
        this.startInput$ = new BehaviorSubject(null);
        /**
         * An Observable instance that notifies when the `DateRangePopup` component is changed.
         */
        this.dateRangePopup$ = new BehaviorSubject(null);
        /**
         * An Observable instance that notifies when the state of the selection range is changed.
         */
        this.range$ = new BehaviorSubject(EMPTY_SELECTIONRANGE);
    }
    /**
     * Gets the current `activeRangeEnd` value.
     */
    get activeRangeEnd() {
        return this.activeRangeEnd$.value;
    }
    /**
     * Gets the current `focusedDate` value.
     */
    get focusedDate() {
        return this.focusedDate$.value;
    }
    /**
     * Gets the `min` range value.
     * The `min` value is extracted from the `start` DateInput value or the `min` value of the Calendar.
     */
    get min() {
        return (this.startInput$.value || {}).min || null;
    }
    /**
     * Gets the `max` range value.
     * The `max` value is extracted from the `end` DateInput value or the `max` value of the Calendar.
     */
    get max() {
        return (this.endInput$.value || {}).max || null;
    }
    /**
     * Gets the current `selectionRange` value.
     */
    get selectionRange() {
        return this.range$.value;
    }
    /**
     * Activates the registered `DateRangePopup` component.
     * The method opens the popup and focuses the calendar.
     */
    activatePopup() {
        const dateRangePopup = this.dateRangePopup$.value;
        if (!dateRangePopup) {
            return;
        }
        dateRangePopup.activate();
    }
    /**
     * Deactivates the registered `DateRangePopup` component.
     * The method closes the popup.
     */
    deactivatePopup() {
        const dateRangePopup = this.dateRangePopup$.value;
        if (!(dateRangePopup && dateRangePopup.show)) {
            return;
        }
        dateRangePopup.show = false;
    }
    /**
     * @hidden
     *
     * Deactivates the registered `DateRangePopup` component and fires the `cancel` event.
     * The method closes the popup.
     */
    cancelPopup() {
        const dateRangePopup = this.dateRangePopup$.value;
        if (!(dateRangePopup && dateRangePopup.show)) {
            return;
        }
        dateRangePopup.cancelPopup();
    }
    /**
     * Completes all observables to mitigate possible memory leaks.
     * Calls the method when a component that uses it is destroyed.
     */
    destroy() {
        this.activeRangeEnd$.complete();
        this.dateRangePopup$.complete();
        this.focusedDate$.complete();
        this.endInput$.complete();
        this.startInput$.complete();
        this.range$.complete();
    }
    /**
     * Returns `true` when an active component that is placed inside the `DateRangeComponent` is detected.
     * For example, the opened popup or the focused DateInput.
     *
     * @returns `true` if an active component is present.
     */
    hasActiveComponent() {
        const popup = this.dateRangePopup$.value;
        const isPopup = isActive(popup);
        const isStart = isActive(this.startInput$.value);
        const isEnd = isActive(this.endInput$.value);
        return isPopup || isStart || isEnd || hasActiveContent(popup) || false;
    }
    /**
     * Registers a new start `DateInput` component. Notifies all `startInput$` listeners.
     */
    registerStartInput(startInput) {
        this.startInput$.next(startInput);
    }
    /**
     * Registers a new end `DateInput` component. Notifies all `endInput$` listeners.
     */
    registerEndInput(endInput) {
        this.endInput$.next(endInput);
    }
    /**
     * Registers a new `DateRangePopup` component. Notifies all `dateRangePopup$` listeners.
     */
    registerPopup(dateRangePopup) {
        this.dateRangePopup$.next(dateRangePopup);
    }
    /**
     * Updates the `activeRangeEnd` value. Notifies all `activeRangeEnd$` listeners.
     */
    setActiveRangeEnd(activeRange) {
        if (!activeRange || this.activeRangeEnd === activeRange) {
            return;
        }
        this.activeRangeEnd$.next(activeRange);
    }
    /**
     * Updates the focused date. Notifies all `focusedDate$` listeners.
     */
    setFocusedDate(value) {
        if (isEqual(this.focusedDate$.value, value)) {
            return;
        }
        this.focusedDate$.next(value);
    }
    /**
     * Updates the selection range. Notifies all `range$` listeners.
     */
    setRange(range = EMPTY_SELECTIONRANGE) {
        this.range$.next(range);
    }
};
DateRangeService.ɵfac = function DateRangeService_Factory(t) { return new (t || DateRangeService)(); };
DateRangeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DateRangeService, factory: function (t) { return DateRangeService.ɵfac(t); } });

/**
 * Represents the Kendo UI DateRangePopup component for Angular.
 *
 * @example
 * ```ts
 * import { DateInputsModule, DateRangeService } from '@progress/kendo-angular-dateinputs';
 *
 * _@Component({
 * providers: [DateRangeService],
 * selector: 'my-app',
 * template: `
 *  <button #anchor (click)="popup.toggle()">Toggle</button>
 *  <kendo-daterange-popup [anchor]="anchor" #popup></kendo-daterange-popup>
 * `
 * })
 * export class AppComponent {
 * }
 * ```
 */
let DateRangePopupComponent = class DateRangePopupComponent {
    constructor(popupService, dateRangeService, ref, zone, rtl) {
        this.popupService = popupService;
        this.dateRangeService = dateRangeService;
        this.ref = ref;
        this.zone = zone;
        this.rtl = rtl;
        /**
         * Controls the popup animation.
         * By default, the opening and closing animations are enabled.
         * For more information about controlling the popup animations,
         * refer to the article on [animations]({% slug animations_popup %}).
         */
        this.animate = true;
        /**
         * Configures the collision behavior of the popup.
         * For more information, refer to the article on
         * [viewport boundary detection]({% slug viewportboundarydetection_popup %}).
         */
        this.collision = { horizontal: 'fit', vertical: 'flip' };
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the calendar element is blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the calendar element is focused.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is closed either on `ESC` keypress or on leaving the viewport.
         */
        this.cancel = new EventEmitter();
        /**
         * @hidden
         */
        this.popupUID = guid();
        this.calendarSubscriptions = new Subscription();
        this.popupSubscriptions = new Subscription();
        this.resolvedPromise = Promise.resolve();
    }
    /**
     * The active calendar that is visible in the popup.
     *
     * > When the popup is closed, the property returns `null`.
     */
    get calendar() {
        return this._calendar;
    }
    set calendar(calendar) {
        this._calendar = calendar;
        this.subscribeFocusBlur(calendar);
    }
    /**
     * Gets the active state of the component.
     * When the opened calendar is active, returns `true`.
     */
    get isActive() {
        return this.calendar && this.calendar.isActive;
    }
    /**
     * Gets or sets the visibility state of the component.
     */
    set show(show) {
        if (this._show === show) {
            return;
        }
        const event = new PreventableEvent();
        if (show) {
            this.open.emit(event);
        }
        else {
            this.close.emit(event);
        }
        if (event.isDefaultPrevented()) {
            return;
        }
        this._toggle(show);
    }
    get show() {
        return this._show;
    }
    ngOnInit() {
        this.dateRangeService.registerPopup(this);
    }
    ngAfterViewInit() {
        this.calendarSubscriptions.add(this.contentCalendar.changes.subscribe((changes) => this.calendar = changes.first));
        this.calendarSubscriptions.add(this.viewCalendar.changes.subscribe((changes) => this.calendar = changes.first));
        if (isWindowAvailable()) {
            this.zone.runOutsideAngular(() => this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(this.handleWindowBlur.bind(this)));
        }
    }
    ngOnDestroy() {
        this.destroyPopup();
        this.calendarSubscriptions.unsubscribe();
        if (this.activateSubscription) {
            this.activateSubscription.unsubscribe();
        }
        if (this.blurSubscription) {
            this.blurSubscription.unsubscribe();
            this.focusSubscription.unsubscribe();
        }
        if (this.windowBlurSubscription) {
            this.windowBlurSubscription.unsubscribe();
        }
    }
    /**
     *  Opens the popup component and focuses the calendar.
     */
    activate() {
        if (this.show === true) {
            return;
        }
        if (this.activateSubscription) {
            this.activateSubscription.unsubscribe();
        }
        this.show = true;
        this.ref.markForCheck();
        this.zone.runOutsideAngular(() => {
            this.activateSubscription = merge(this.contentCalendar.changes, this.viewCalendar.changes)
                .pipe(filter(changes => changes && changes.first), map(changes => changes.first))
                .subscribe((calendar) => setTimeout(() => calendar.focus()));
        });
    }
    /**
     *  Focuses the calendar (if available).
     */
    focus() {
        if (this.calendar) {
            this.calendar.focus();
        }
    }
    /**
     * Checks if a focused element ids placed inside the popup.
     *
     * @return boolean;
     */
    hasActiveContent() {
        if (!isDocumentAvailable() || !this.popupRef) {
            return false;
        }
        return this.popupRef.popupElement.contains(document.activeElement);
    }
    /**
     * Toggles the visibility of the popup.
     * If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show The state of the popup.
     */
    toggle(show) {
        this.resolvedPromise.then(() => {
            this._toggle((show === undefined) ? !this.show : show);
        });
    }
    /**
     * @hidden
     *
     * Closes the popup and triggers the `cancel` event.
     */
    cancelPopup() {
        this.show = false;
        this.cancel.emit();
    }
    handleWindowBlur() {
        if (!this.show) {
            return;
        }
        if (hasObservers(this.close)) {
            this.zone.run(() => this.show = false);
        }
        else {
            this.show = false;
        }
    }
    handleMouseLeave() {
        this.dateRangeService.setRange(this.dateRangeService.selectionRange);
    }
    handleKeydown(event) {
        const { altKey, keyCode } = event;
        if (keyCode === Keys.Escape || (altKey && keyCode === Keys.ArrowUp)) {
            this.zone.run(() => this.cancelPopup());
        }
    }
    subscribeFocusBlur(calendar) {
        if (this.blurSubscription) {
            this.blurSubscription.unsubscribe();
            this.focusSubscription.unsubscribe();
        }
        if (!calendar) {
            return;
        }
        const nativeElement = calendar.element.nativeElement;
        this.blurSubscription = fromEvent(nativeElement, 'blur').subscribe(() => this.onBlur.emit());
        this.focusSubscription = fromEvent(nativeElement, 'focus').subscribe(() => this.onFocus.emit());
    }
    addPopupSubscriptions(...subscriptions) {
        if (!isPresent(this.popupSubscriptions)) {
            this.popupSubscriptions = new Subscription();
        }
        subscriptions.map(s => this.popupSubscriptions.add(s));
    }
    get _appendTo() {
        const appendTo = this.appendTo;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    _toggle(show) {
        this._show = show;
        if (this.popupRef) {
            this.destroyPopup();
        }
        if (this._show) {
            const direction = this.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchor: this.anchor,
                anchorAlign: this.anchorAlign || { vertical: 'bottom', horizontal: direction },
                animate: this.animate,
                appendTo: this._appendTo,
                collision: this.collision,
                content: (this.contentTemplate || {}).templateRef || this.defaultTemplate,
                margin: this.margin,
                popupAlign: this.popupAlign || { vertical: 'top', horizontal: direction },
                positionMode: 'absolute'
            });
            const { popupElement, popupAnchorViewportLeave } = this.popupRef;
            popupElement.setAttribute('id', this.popupUID);
            this.addPopupSubscriptions(this.zone.runOutsideAngular(() => fromEvent(popupElement, 'keydown').subscribe(this.handleKeydown.bind(this))), fromEvent(popupElement, 'mouseleave').subscribe(this.handleMouseLeave.bind(this)), popupAnchorViewportLeave.subscribe(() => this.cancelPopup()));
        }
    }
    destroyPopup() {
        if (isPresent(this.popupRef)) {
            this.popupRef.close();
            this.popupRef = null;
        }
        if (isPresent(this.popupSubscriptions)) {
            this.popupSubscriptions.unsubscribe();
        }
    }
};
DateRangePopupComponent.ɵfac = function DateRangePopupComponent_Factory(t) { return new (t || DateRangePopupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.PopupService), ɵngcc0.ɵɵdirectiveInject(DateRangeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(RTL, 8)); };
DateRangePopupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateRangePopupComponent, selectors: [["kendo-daterange-popup"]], contentQueries: function DateRangePopupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DateRangePopupTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MultiViewCalendarComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentCalendar = _t);
    } }, viewQuery: function DateRangePopupComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c27, 5, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c90, 5);
        ɵngcc0.ɵɵviewQuery(MultiViewCalendarComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewCalendar = _t);
    } }, inputs: { animate: "animate", collision: "collision", anchor: "anchor", anchorAlign: "anchorAlign", appendTo: "appendTo", popupAlign: "popupAlign", margin: "margin" }, outputs: { open: "open", close: "close", onBlur: "blur", onFocus: "focus", cancel: "cancel" }, exportAs: ["kendo-daterange-popup"], decls: 4, vars: 0, consts: [["container", ""], ["defaultTemplate", ""], ["kendoDateRangeSelection", ""]], template: function DateRangePopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, null, 0);
        ɵngcc0.ɵɵtemplate(2, DateRangePopupComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: function () { return [MultiViewCalendarComponent, DateRangeSelectionDirective]; }, encapsulation: 2 });
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: false }),
    __metadata("design:type", ViewContainerRef)
], DateRangePopupComponent.prototype, "container", void 0);
__decorate([
    ViewChild('defaultTemplate', { static: false }),
    __metadata("design:type", TemplateRef)
], DateRangePopupComponent.prototype, "defaultTemplate", void 0);
__decorate([
    ContentChild(DateRangePopupTemplateDirective, { static: false }),
    __metadata("design:type", DateRangePopupTemplateDirective)
], DateRangePopupComponent.prototype, "contentTemplate", void 0);
__decorate([
    ViewChildren(MultiViewCalendarComponent),
    __metadata("design:type", QueryList)
], DateRangePopupComponent.prototype, "viewCalendar", void 0);
__decorate([
    ContentChildren(MultiViewCalendarComponent),
    __metadata("design:type", QueryList)
], DateRangePopupComponent.prototype, "contentCalendar", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "animate", void 0);
__decorate([
    Input(),
    __metadata("design:type", ElementRef)
], DateRangePopupComponent.prototype, "anchor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "anchorAlign", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "appendTo", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "collision", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "popupAlign", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateRangePopupComponent.prototype, "margin", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateRangePopupComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateRangePopupComponent.prototype, "close", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], DateRangePopupComponent.prototype, "onBlur", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], DateRangePopupComponent.prototype, "onFocus", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateRangePopupComponent.prototype, "cancel", void 0);
DateRangePopupComponent = __decorate([ __param(4, Optional()), __param(4, Inject(RTL)),
    __metadata("design:paramtypes", [PopupService,
        DateRangeService,
        ChangeDetectorRef,
        NgZone, Boolean])
], DateRangePopupComponent);

/**
 * Represents the Kendo UI DateRange component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-daterange>
 *      <kendo-dateinput kendoDateRangeStartInput [(value)]="dateRange.start"></kendo-dateinput>
 *      <kendo-dateinput kendoDateRangeEndInput [(value)]="dateRange.end"></kendo-dateinput>
 *  </kendo-daterange>
 * `
 * })
 * export class AppComponent {
 *   public dateRange: any = { start: null, end: null };
 * }
 * ```
 */
let DateRangeComponent = class DateRangeComponent {
    constructor() {
        /**
         * @hidden
         */
        this.showDefault = false;
        validatePackage(packageMetadata);
    }
    get hasContentPopup() {
        return this.contentPopup.length > 0;
    }
    ngAfterContentInit() {
        this.showDefault = !this.hasContentPopup;
        this.subscription = this.contentPopup.changes.subscribe(() => {
            this.showDefault = !this.hasContentPopup;
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
};
DateRangeComponent.ɵfac = function DateRangeComponent_Factory(t) { return new (t || DateRangeComponent)(); };
DateRangeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateRangeComponent, selectors: [["kendo-daterange"]], contentQueries: function DateRangeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DateRangePopupComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentPopup = _t);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([DateRangeService])], ngContentSelectors: _c11, decls: 2, vars: 1, consts: [[4, "ngIf"]], template: function DateRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, DateRangeComponent_kendo_daterange_popup_1_Template, 1, 0, "kendo-daterange-popup", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showDefault);
    } }, directives: [ɵngcc2.NgIf, DateRangePopupComponent], encapsulation: 2 });
__decorate([
    ContentChildren(DateRangePopupComponent),
    __metadata("design:type", QueryList)
], DateRangeComponent.prototype, "contentPopup", void 0);
DateRangeComponent = __decorate([ __metadata("design:paramtypes", [])
], DateRangeComponent);

/**
 * @hidden
 */
class DateRangeInput {
    constructor(activeRangeEnd, dateRangeService, input, element, renderer, zone) {
        this.activeRangeEnd = activeRangeEnd;
        this.dateRangeService = dateRangeService;
        this.input = input;
        this.element = element;
        this.renderer = renderer;
        this.zone = zone;
        this.navigateCalendarOnFocus = false;
        this.popupSubscriptions = new Subscription();
        this.subscriptions = new Subscription();
    }
    get isActiveEnd() {
        return this.dateRangeService.activeRangeEnd === this.activeRangeEnd;
    }
    get popupCalendarActivated() {
        const popup = this.dateRangeService.dateRangePopup$.value;
        return isPresent(popup) && isPresent(popup.calendar);
    }
    init() {
        if (this.input.value) {
            this.dateRangeService.setRange(this.getRange(this.input.value));
        }
        [
            this.input.onBlur.subscribe(() => this.deactivate()),
            this.input.onFocus.pipe(filter(() => !this.popupCalendarActivated)).subscribe(() => this.activate()),
            this.input.valueUpdate.subscribe(value => this.updateRange(value, 'change')),
            this.dateRangeService.activeRangeEnd$.subscribe(() => {
                if (this.navigateCalendarOnFocus) {
                    this.focusActiveDate();
                }
                this.toggleActiveClass(this.isActiveEnd);
            }),
            this.dateRangeService.dateRangePopup$.subscribe(popup => this.initPopup(popup)),
            this.dateRangeService.range$.subscribe(range => this.updateInputValue(range)),
            fromEvent(this.element.nativeElement, 'click').subscribe(() => this.activate()),
            fromEvent(this.element.nativeElement, 'keydown').subscribe((event) => this.togglePopup(event || {}))
        ].map(s => this.subscriptions.add(s));
    }
    destroy() {
        this.subscriptions.unsubscribe();
        this.unsubscribePopup();
    }
    initPopup(popup) {
        if (!popup) {
            this.unsubscribePopup();
            return;
        }
        if (!popup.anchor) {
            popup.anchor = this.element.nativeElement;
        }
        [
            popup.cancel.subscribe(() => this.isActiveEnd && this.input.focus()),
            popup.onFocus.subscribe(() => this.toggleActiveClass(this.isActiveEnd)),
            popup.onBlur.subscribe(() => this.deactivate())
        ].map(s => this.popupSubscriptions.add(s));
    }
    unsubscribePopup() {
        this.popupSubscriptions.unsubscribe();
        this.popupSubscriptions = new Subscription();
    }
    activate() {
        this.dateRangeService.setActiveRangeEnd(this.activeRangeEnd);
        this.dateRangeService.activatePopup();
    }
    deactivate() {
        this.zone.runOutsideAngular(() => {
            setTimeout(() => {
                this.updateRange(this.input.value, 'blur');
                if (this.dateRangeService.hasActiveComponent()) {
                    return;
                }
                this.toggleActiveClass(false);
                this.zone.run(() => this.dateRangeService.deactivatePopup());
            });
        });
    }
    updateRange(value, correctOn) {
        const range = this.getRange(value, correctOn);
        if (range) {
            this.focusActiveDate();
            this.dateRangeService.setRange(range);
        }
    }
    togglePopup({ altKey, keyCode }) {
        if (keyCode === Keys.Escape) {
            this.dateRangeService.cancelPopup();
        }
        else if (altKey && keyCode === Keys.ArrowDown) {
            this.dateRangeService.activatePopup();
        }
    }
    focusActiveDate() {
        if (this.input.value && this.isActiveEnd) {
            this.dateRangeService.setFocusedDate(cloneDate(this.input.value));
        }
    }
    toggleActiveClass(show) {
        const action = show ? 'addClass' : 'removeClass';
        const nativeElement = this.element.nativeElement;
        if (nativeElement && nativeElement.querySelector) {
            this.renderer[action](nativeElement, 'k-focus');
        }
    }
}

/**
 * A directive which manages the end range selection.
 *
 * > You can use the DateRangeEndInputDirective only with a DateInput component.
 */
let DateRangeEndInputDirective = class DateRangeEndInputDirective extends DateRangeInput {
    constructor(rangeService, dateInput, element, renderer, zone) {
        super('end', rangeService, dateInput, element, renderer, zone);
        this.rangeService = rangeService;
        this.dateInput = dateInput;
        /**
         * Specifies the navigation behavior of the calendar when the active end is changed on input focus. When enabled,
         * the calendar navigates to the value of the focused input. Otherwise, the calendar displays the last picked date.
         *
         * By default, the automatic navigation behavior on input focus is disabled.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <h5>Toggle input focus to see the calendar navigating between range ends.</h5>
         *  <kendo-daterange>
         *      <kendo-dateinput kendoDateRangeStartInput [navigateCalendarOnFocus]="true" [(value)]="start"></kendo-dateinput>
         *      <kendo-dateinput kendoDateRangeEndInput [navigateCalendarOnFocus]="true" [(value)]="end"></kendo-dateinput>
         *  </kendo-daterange>
         * `
         * })
         * export class AppComponent {
         *   public start: Date = new Date(2018, 3, 10);
         *   public end: Date = new Date(2018, 10, 20);
         * }
         * ```
         */
        this.navigateCalendarOnFocus = false;
    }
    ngOnInit() {
        this.rangeService.registerEndInput(this.dateInput);
        super.init();
    }
    ngOnDestroy() {
        super.destroy();
    }
    getRange(value, correctOn) {
        const { min, max } = this.dateInput;
        if (!isInRange(value, min, max)) {
            return null;
        }
        const { start } = this.rangeService.selectionRange || EMPTY_SELECTIONRANGE;
        const shouldClamp = this.autoCorrectOn === correctOn && isPresent(value) && value < start;
        return shouldClamp ? clampRange(value) : { start, end: cloneDate(value) };
    }
    updateInputValue(range$$1) {
        const { end } = range$$1 || EMPTY_SELECTIONRANGE;
        const { min, max } = this.dateInput;
        if (isEqual(this.dateInput.value, end) || !isInRange(end, min, max)) {
            return;
        }
        this.dateInput.writeValue(cloneDate(end));
        this.dateInput.notify();
    }
};
DateRangeEndInputDirective.ɵfac = function DateRangeEndInputDirective_Factory(t) { return new (t || DateRangeEndInputDirective)(ɵngcc0.ɵɵdirectiveInject(DateRangeService), ɵngcc0.ɵɵdirectiveInject(DateInputComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DateRangeEndInputDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateRangeEndInputDirective, selectors: [["", "kendoDateRangeEndInput", ""]], inputs: { navigateCalendarOnFocus: "navigateCalendarOnFocus", autoCorrectOn: "autoCorrectOn" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], DateRangeEndInputDirective.prototype, "autoCorrectOn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateRangeEndInputDirective.prototype, "navigateCalendarOnFocus", void 0);
DateRangeEndInputDirective = __decorate([ __metadata("design:paramtypes", [DateRangeService,
        DateInputComponent,
        ElementRef,
        Renderer2,
        NgZone])
], DateRangeEndInputDirective);

/**
 * A directive which manages the start selection range.
 *
 * > You can use the DateRangeStartInputDirective only with a DateInput component.
 */
let DateRangeStartInputDirective = class DateRangeStartInputDirective extends DateRangeInput {
    constructor(rangeService, dateInput, element, renderer, zone) {
        super('start', rangeService, dateInput, element, renderer, zone);
        this.rangeService = rangeService;
        this.dateInput = dateInput;
        /**
         * Specifies the navigation behavior of the calendar when the active end is changed on input focus.
         * When enabled, the calendar navigates to the value of the focused input. Otherwise, the calendar
         * displays the last picked date.
         *
         * By default, the automatic navigation behavior on input focus is disabled.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <h5>Toggle input focus to see the calendar navigating between range ends.</h5>
         *  <kendo-daterange>
         *      <kendo-dateinput kendoDateRangeStartInput [navigateCalendarOnFocus]="true" [(value)]="start"></kendo-dateinput>
         *      <kendo-dateinput kendoDateRangeEndInput [navigateCalendarOnFocus]="true" [(value)]="end"></kendo-dateinput>
         *  </kendo-daterange>
         * `
         * })
         * export class AppComponent {
         *   public start: Date = new Date(2018, 3, 10);
         *   public end: Date = new Date(2018, 10, 20);
         * }
         * ```
         */
        this.navigateCalendarOnFocus = false;
    }
    ngOnInit() {
        this.rangeService.registerStartInput(this.dateInput);
        super.init();
    }
    ngOnDestroy() {
        super.destroy();
    }
    getRange(value, correctOn) {
        const { min, max } = this.dateInput;
        if (!isInRange(value, min, max)) {
            return null;
        }
        const { end } = this.rangeService.selectionRange || EMPTY_SELECTIONRANGE;
        const shouldClamp = this.autoCorrectOn === correctOn && end && value > end;
        return shouldClamp ? clampRange(value) : { start: cloneDate(value), end };
    }
    updateInputValue(range$$1) {
        const { start } = range$$1 || EMPTY_SELECTIONRANGE;
        const { min, max } = this.dateInput;
        if (isEqual(this.dateInput.value, start) || !isInRange(start, min, max)) {
            return;
        }
        this.dateInput.writeValue(cloneDate(start));
        this.dateInput.notify();
    }
};
DateRangeStartInputDirective.ɵfac = function DateRangeStartInputDirective_Factory(t) { return new (t || DateRangeStartInputDirective)(ɵngcc0.ɵɵdirectiveInject(DateRangeService), ɵngcc0.ɵɵdirectiveInject(DateInputComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DateRangeStartInputDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateRangeStartInputDirective, selectors: [["", "kendoDateRangeStartInput", ""]], inputs: { navigateCalendarOnFocus: "navigateCalendarOnFocus", autoCorrectOn: "autoCorrectOn" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], DateRangeStartInputDirective.prototype, "autoCorrectOn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DateRangeStartInputDirective.prototype, "navigateCalendarOnFocus", void 0);
DateRangeStartInputDirective = __decorate([ __metadata("design:paramtypes", [DateRangeService,
        DateInputComponent,
        ElementRef,
        Renderer2,
        NgZone])
], DateRangeStartInputDirective);

/**
 * A directive which manages the MultiViewCalendar range selection.
 */
let DateRangeSelectionDirective = class DateRangeSelectionDirective {
    constructor(calendar, cdr, element, renderer, dateRangeService) {
        this.calendar = calendar;
        this.cdr = cdr;
        this.element = element;
        this.dateRangeService = dateRangeService;
        /**
         * Specifies the auto-correction behavior. If the start date is greater than the end date,
         * the directive fixes the date range to a single date either on input change or on blur
         * ([see example]({% slug autocorrect_daterange %}#toc-configuring-the-calendar-selection-directive)).
         *
         * By default, the auto-correction is triggered on change.
         * To disable this behavior, set the `autoCorrectOn` property to `none`.
         */
        this.autoCorrectOn = 'change';
        /**
         * Fires when the active range end is changed. For more information, refer to
         * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).
         */
        this.activeRangeEndChange = new EventEmitter();
        /**
         * Fires when the selection range is changed. For more information, refer to
         * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).
         */
        this.selectionRangeChange = new EventEmitter();
        this.calendarSubscriptions = new Subscription();
        this.dateRangeService = this.dateRangeService || new DateRangeService();
        renderer.setAttribute(element.nativeElement, 'aria-multiselectable', 'true');
    }
    /**
     * Gets or sets the selection range of the calendar. When a new range is set,
     * the connected DateRangeService notifies all related parties.
     */
    get selectionRange() {
        return this.calendar ? this.calendar.selectionRange : null;
    }
    set selectionRange(range$$1) {
        if (!this.isEqualCalendarRange(range$$1)) {
            this.setSelectionRange(range$$1);
        }
        if (!isEqualRange(this.dateRangeService.selectionRange, range$$1)) {
            this.dateRangeService.setRange(range$$1);
        }
        this.updateFocusedDate(range$$1);
    }
    /**
     * Gets or sets the active end of the selection range. This option determines which range end will be updated on
     * user interaction. When a new active end is set, the connected DateRangeService notifies all related parties.
     */
    /**
     * Specifies which end of the selection range will be marked as active. The active end gets modified upon user
     * interaction. When a new active end is set, the wired DateRangeService notifies all related components. For
     * example, the start and end DateInput components.
     *
     * > If the selection range is undefined, the value is ignored.
     */
    get activeRangeEnd() {
        return this.calendar.activeRangeEnd;
    }
    set activeRangeEnd(activeRange) {
        if (this.dateRangeService.activeRangeEnd === activeRange) {
            return;
        }
        this.calendar.activeRangeEnd = activeRange;
        this.dateRangeService.setActiveRangeEnd(activeRange);
    }
    get calendarRange() {
        return this.selectionRange || EMPTY_SELECTIONRANGE;
    }
    ngOnInit() {
        const calendar = this.calendar;
        const dateRangeService = this.dateRangeService;
        calendar.min = either(dateRangeService.min, calendar.min);
        calendar.max = either(dateRangeService.max, calendar.max);
        this.addSubscriptions(calendar.cellEnter.subscribe((value) => this.handleHover(value)), calendar.valueChange.subscribe((value) => this.handleChange(value)), dateRangeService.focusedDate$.subscribe(focusedDate => {
            if (!isEqual(calendar.focusedDate, focusedDate)) {
                calendar.focusedDate = focusedDate;
            }
        }), dateRangeService.activeRangeEnd$.subscribe(rangeEnd => {
            if (calendar.activeRangeEnd === rangeEnd) {
                return;
            }
            calendar.activeRangeEnd = rangeEnd;
            this.activeRangeEndChange.emit(rangeEnd);
            this.cdr.markForCheck();
        }), dateRangeService.range$.subscribe(range$$1 => {
            if (!this.isEqualCalendarRange(range$$1)) {
                this.acceptAndEmit(range$$1);
            }
            this.updateFocusedDate(range$$1);
        }), fromEvent(this.element.nativeElement, 'blur').subscribe(() => this.handleBlur()));
    }
    ngOnDestroy() {
        this.calendarSubscriptions.unsubscribe();
    }
    addSubscriptions(...subscriptions) {
        subscriptions.map(s => this.calendarSubscriptions.add(s));
    }
    isEqualCalendarRange(range$$1) {
        return isEqualRange(this.calendar.selectionRange, range$$1);
    }
    handleBlur() {
        const { start, end } = this.calendarRange;
        const autoCorrect = this.autoCorrectOn === 'blur' && start !== null && end !== null && end < start;
        if (autoCorrect) {
            this.dateRangeService.setRange(clampRange(start));
        }
    }
    handleChange(value) {
        const service = this.dateRangeService;
        const autoCorrect = this.autoCorrectOn === 'change' && this.shouldAutoCorrect(value);
        const activeEnd = this.calendar.activeRangeEnd !== 'end' ? 'end' : (autoCorrect ? 'end' : 'start');
        const range$$1 = autoCorrect ? clampRange(value) : this.updateRange(value);
        if (!isEqualRange(service.selectionRange, range$$1)) {
            this.acceptAndEmit(range$$1);
            service.setActiveRangeEnd(activeEnd);
            service.setRange(range$$1);
        }
    }
    handleHover(value) {
        if (this.hasCompleteRange()) {
            return;
        }
        const { start, end } = this.calendarRange;
        const activeRangeEnd = this.calendar.activeRangeEnd;
        const updateRange = (start && activeRangeEnd === 'end') || (end && activeRangeEnd === 'start');
        if (updateRange) {
            this.setSelectionRange(this.updateRange(value));
        }
    }
    hasCompleteRange() {
        const { start, end } = this.dateRangeService.selectionRange || EMPTY_SELECTIONRANGE;
        return Boolean(start) && Boolean(end);
    }
    shouldAutoCorrect(value) {
        const { end, start } = this.calendarRange;
        if (this.calendar.activeRangeEnd !== 'end') {
            return end !== null && value > end;
        }
        else {
            return start !== null && value < start;
        }
    }
    updateFocusedDate(range$$1) {
        if (!range$$1 || this.dateRangeService.focusedDate) {
            return;
        }
        this.dateRangeService.setFocusedDate(range$$1.start || range$$1.end);
    }
    updateRange(value) {
        const { end, start } = this.calendarRange;
        return this.calendar.activeRangeEnd !== 'end' ? ({ start: value, end }) : ({ start, end: value });
    }
    setSelectionRange(range$$1) {
        this.calendar.selectionRange = range$$1;
        this.calendar.writeValue(null);
    }
    acceptAndEmit(range$$1) {
        this.setSelectionRange(range$$1);
        this.selectionRangeChange.emit(range$$1);
    }
};
DateRangeSelectionDirective.ɵfac = function DateRangeSelectionDirective_Factory(t) { return new (t || DateRangeSelectionDirective)(ɵngcc0.ɵɵdirectiveInject(MultiViewCalendarComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DateRangeService, 8)); };
DateRangeSelectionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateRangeSelectionDirective, selectors: [["", "kendoDateRangeSelection", ""]], inputs: { autoCorrectOn: "autoCorrectOn", selectionRange: "selectionRange", activeRangeEnd: "activeRangeEnd" }, outputs: { activeRangeEndChange: "activeRangeEndChange", selectionRangeChange: "selectionRangeChange" } });
__decorate([
    Input(),
    __metadata("design:type", String)
], DateRangeSelectionDirective.prototype, "autoCorrectOn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateRangeSelectionDirective.prototype, "selectionRange", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateRangeSelectionDirective.prototype, "activeRangeEnd", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateRangeSelectionDirective.prototype, "activeRangeEndChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DateRangeSelectionDirective.prototype, "selectionRangeChange", void 0);
DateRangeSelectionDirective = __decorate([ __param(4, Optional()),
    __metadata("design:paramtypes", [MultiViewCalendarComponent,
        ChangeDetectorRef,
        ElementRef,
        Renderer2,
        DateRangeService])
], DateRangeSelectionDirective);

/* tslint:disable:directive-class-suffix directive-selector */
/**
 * @hidden
 */
class KForOfContext {
    constructor($implicit, kForOf, index, count) {
        this.$implicit = $implicit;
        this.kForOf = kForOf;
        this.index = index;
        this.count = count;
    }
    get first() { return this.index === 0; }
    get last() { return this.index === this.count - 1; }
    get even() { return this.index % 2 === 0; }
    get odd() { return !this.even; }
}
/**
 * @hidden
 */
let KForOf = class KForOf {
    constructor(_viewContainer, _template, _differs) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._differ = null;
    }
    set kForTemplate(value) {
        if (value) {
            this._template = value;
        }
    }
    ngOnChanges(changes) {
        if ('kForOf' in changes) {
            const value = changes.kForOf.currentValue;
            if (this._differ || !value) {
                return;
            }
            try {
                this._differ = this._differs.find(value).create(this.kForTrackBy);
            }
            catch (e) {
                throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'.`);
            }
        }
    }
    ngDoCheck() {
        if (this._differ) {
            const changes = this._differ.diff(this.kForOf);
            if (changes) {
                this._applyChanges(changes);
            }
        }
    }
    _applyChanges(changes) {
        if (!isDocumentAvailable()) {
            return;
        }
        const viewContainerLength = this._viewContainer.length;
        const dataLength = this.kForOf.length;
        const tuples = {};
        changes.forEachOperation((record, _, currentIndex) => {
            if (currentIndex !== null) {
                tuples[currentIndex] = record.item;
            }
        });
        for (let i = viewContainerLength; i < dataLength; i++) {
            this._viewContainer.createEmbeddedView(this._template, new KForOfContext(null, this.kForOf, -1, -1), i);
        }
        for (let i = this._viewContainer.length; i > dataLength; i--) {
            this._viewContainer.remove(i - 1);
        }
        for (let i = 0; i < this._viewContainer.length; i++) {
            const view = this._viewContainer.get(i);
            view.context.index = i;
            view.context.count = length;
            view.context.$implicit = tuples[i] || null;
        }
    }
};
KForOf.ɵfac = function KForOf_Factory(t) { return new (t || KForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
KForOf.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: KForOf, selectors: [["", "kFor", "", "kForOf", ""]], inputs: { kForTemplate: "kForTemplate", kForOf: "kForOf", kForTrackBy: "kForTrackBy" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], KForOf.prototype, "kForOf", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], KForOf.prototype, "kForTrackBy", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef),
    __metadata("design:paramtypes", [TemplateRef])
], KForOf.prototype, "kForTemplate", null);
KForOf = __decorate([ __metadata("design:paramtypes", [ViewContainerRef,
        TemplateRef,
        IterableDiffers])
], KForOf);
/**
 * @hidden
 */
function getTypeNameForDebugging(type) {
    return type.name || typeof type;
}

/**
 * @hidden
 */
let ViewComponent = class ViewComponent {
    constructor(bus, intl, cdr, element, zone, renderer, disabledDatesService) {
        this.bus = bus;
        this.intl = intl;
        this.cdr = cdr;
        this.element = element;
        this.zone = zone;
        this.renderer = renderer;
        this.disabledDatesService = disabledDatesService;
        this.direction = 'vertical';
        this.isActive = true;
        this.selectedDates = [];
        this.cellClick = new EventEmitter();
        this.weekNumberCellClick = new EventEmitter();
        this.cellEnter = new EventEmitter();
        this.cellLeave = new EventEmitter();
        this.colSpan = 0;
        this.subscriptions = new Subscription();
        this.domEvents = [];
        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));
        this.subscriptions.add(this.disabledDatesService.changes.subscribe(this.disabledDatesChange.bind(this)));
    }
    get weekNumber() {
        return this.showWeekNumbers && this.activeView === CalendarViewEnum.month;
    }
    set weekNumber(showWeekNumbers) {
        this.showWeekNumbers = showWeekNumbers;
    }
    ngOnInit() {
        if (this.element) {
            this.zone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    ngOnChanges(changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.colSpan = this.service.rowLength({ prependCell: this.weekNumber });
        this.title = this.service.title(this.viewDate);
        this.updateData();
        if (changes.activeView) {
            this.currentCellIndex = null;
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.domEvents.forEach(unsubscribeCallback => unsubscribeCallback());
    }
    isHorizontal() {
        return this.direction === 'horizontal';
    }
    isMonthView() {
        return this.activeView === CalendarViewEnum.month;
    }
    shouldRenderCellContent(cellCtx) {
        return isPresent(cellCtx) && !(!this.isHorizontal() && cellCtx.isOtherMonth);
    }
    firstDate(rowCtx) {
        const ctx = this.firstWeekDateContext(rowCtx);
        return ctx ? ctx.value : null;
    }
    getWeekNumber(date) {
        if (!this.weekNumber) {
            return null;
        }
        return weekInYear(date, this.intl.firstDay());
    }
    getWeekNumberContext(rowCtx) {
        const ctx = this.firstWeekDateContext(rowCtx);
        if (!this.weekNumber || !ctx) {
            return null;
        }
        const weekNumber = weekInYear(ctx.value, this.intl.firstDay()).toString();
        return {
            formattedValue: weekNumber,
            id: null,
            isFocused: false,
            isSelected: false,
            isWeekend: false,
            title: weekNumber,
            value: cloneDate(ctx.value)
        };
    }
    getStyles(context) {
        const { isRangeEnd, isRangeStart } = context;
        const isEndActive = this.activeRangeEnd === 'end' && isRangeEnd;
        const isStartActive = this.activeRangeEnd === 'start' && isRangeStart;
        return stringifyClassObject({
            'k-range-end': !context.isOtherMonth && isRangeEnd,
            'k-range-mid': !context.isOtherMonth && context.isRangeMid,
            'k-range-split-end': !context.isOtherMonth && context.isRangeSplitEnd,
            'k-range-split-start': !context.isOtherMonth && context.isRangeSplitStart,
            'k-range-start': !context.isOtherMonth && isRangeStart,
            'k-state-active': isStartActive || isEndActive,
            'k-state-focused': !context.isOtherMonth && this.isActive && context.isFocused,
            'k-state-selected': !context.isOtherMonth && (context.isSelected || isRangeStart || isRangeEnd),
            'k-today': !context.isOtherMonth && context.isToday,
            'k-weekend': context.isWeekend,
            'k-disabled': context.isDisabled,
            'k-other-month': context.isOtherMonth
        });
    }
    tableCellIndex(rowIndex, cellIndex) {
        return `${rowIndex}:${cellIndex}`;
    }
    handleWeekNumberClick(week) {
        const availableDates = week.map(item => item.value).filter(date => !this.disabledDatesService.isDateDisabled(date));
        this.weekNumberCellClick.emit(availableDates);
    }
    firstWeekDateContext(rowCtx) {
        if (!this.weekNumber) {
            return null;
        }
        let idx = 0;
        let ctx = this.shouldRenderCellContent(rowCtx[idx]) ? rowCtx[idx] : null;
        while (!ctx && idx < rowCtx.length) {
            const cellCtx = rowCtx[++idx];
            ctx = this.shouldRenderCellContent(cellCtx) ? cellCtx : null;
        }
        return ctx;
    }
    updateData() {
        const time = last(this.selectedDates) || getToday();
        const viewDate = setTime(this.viewDate, time);
        this.data = this.service.data({
            cellUID: this.cellUID,
            focusedDate: this.focusedDate,
            isActiveView: !this.bus.canMoveDown(this.activeView),
            max: this.max,
            min: this.min,
            selectedDates: this.selectedDates,
            selectionRange: this.selectionRange,
            viewDate: viewDate,
            isDateDisabled: this.disabledDatesService.isDateDisabled,
            direction: this.direction
        });
    }
    intlChange() {
        this.updateData();
        this.cdr.markForCheck();
    }
    disabledDatesChange() {
        this.updateData();
        this.cdr.markForCheck();
    }
    bindEvents() {
        const element = this.element.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'mouseover', this.cellMouseoverHandler.bind(this)), this.renderer.listen(element, 'mouseleave', this.mouseLeaveHandler.bind(this)), this.renderer.listen(element, 'click', this.clickHandler.bind(this)));
    }
    clickHandler(args) {
        const cell = this.closestCell(args);
        if (!cell) {
            return;
        }
        const index = cell.getAttribute('data-cell-index');
        const cellContext = this.cellByIndex(index);
        if (!cellContext.isDisabled) {
            const { ctrlKey, metaKey, shiftKey } = args;
            this.cellClick.emit({
                date: cellContext.value,
                modifiers: { ctrlKey, metaKey, shiftKey }
            });
        }
    }
    mouseLeaveHandler() {
        if (this.currentCellIndex) {
            this.emitCellLeave();
        }
    }
    cellMouseoverHandler(args) {
        const cell = this.closestCell(args);
        if (cell) {
            const index = cell.getAttribute('data-cell-index');
            if (this.currentCellIndex && this.currentCellIndex !== index) {
                this.emitCellLeave();
            }
            const value = this.cellByIndex(index).value;
            this.cellEnter.emit(value);
            this.currentCellIndex = index;
        }
        else if (this.currentCellIndex) {
            this.emitCellLeave();
        }
    }
    closestCell(eventArgs) {
        return closestInScope(eventArgs.target, node => node.hasAttribute('data-cell-index'), this.element.nativeElement);
    }
    emitCellLeave() {
        const item = this.cellByIndex(this.currentCellIndex);
        if (item) {
            this.cellLeave.emit(item.value);
        }
        this.currentCellIndex = null;
    }
    cellByIndex(index) {
        const [rowIndex, cellIndex] = index.split(':');
        return this.data[rowIndex][cellIndex];
    }
};
ViewComponent.ɵfac = function ViewComponent_Factory(t) { return new (t || ViewComponent)(ɵngcc0.ɵɵdirectiveInject(BusViewService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DisabledDatesService)); };
ViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ViewComponent, selectors: [["", "kendoCalendarView", ""]], inputs: { direction: "direction", isActive: "isActive", selectedDates: "selectedDates", weekNumber: "weekNumber", activeView: "activeView", cellUID: "cellUID", focusedDate: "focusedDate", viewDate: "viewDate", activeRangeEnd: "activeRangeEnd", selectionRange: "selectionRange", min: "min", max: "max", viewIndex: "viewIndex", templateRef: "templateRef", weekNumberTemplateRef: "weekNumberTemplateRef" }, outputs: { cellClick: "cellClick", weekNumberCellClick: "weekNumberCellClick", cellEnter: "cellEnter", cellLeave: "cellLeave" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c91, decls: 4, vars: 2, consts: [["emptyCell", ""], ["class", "k-calendar-tr", "role", "row", 4, "ngIf"], ["class", "k-calendar-tr", "role", "row", 4, "kFor", "kForOf"], [1, "k-empty", "k-calendar-td"], ["role", "row", 1, "k-calendar-tr"], ["scope", "col", 1, "k-calendar-caption", 3, "colSpan"], [3, "ngIf"], [4, "kFor", "kForOf"], ["class", "k-alt k-calendar-td", 3, "kendoEventsOutsideAngular", 4, "ngIf", "ngIfElse"], [1, "k-alt", "k-calendar-td", 3, "kendoEventsOutsideAngular"], [3, "ngIf", "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "k-calendar-td", "role", "gridcell", 3, "ngClass", "title", 4, "ngIf", "ngIfElse"], ["role", "gridcell", 1, "k-calendar-td", 3, "ngClass", "title"], [1, "k-link"], [4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ViewComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, ViewComponent_tr_2_Template, 3, 2, "tr", 1);
        ɵngcc0.ɵɵtemplate(3, ViewComponent_tr_3_Template, 3, 2, "tr", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isHorizontal());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("kForOf", ctx.data);
    } }, directives: [ɵngcc2.NgIf, KForOf, ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgClass], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], ViewComponent.prototype, "direction", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ViewComponent.prototype, "isActive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ViewComponent.prototype, "activeView", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ViewComponent.prototype, "cellUID", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewComponent.prototype, "focusedDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewComponent.prototype, "viewDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ViewComponent.prototype, "activeRangeEnd", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ViewComponent.prototype, "selectionRange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], ViewComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ViewComponent.prototype, "selectedDates", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ViewComponent.prototype, "weekNumber", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ViewComponent.prototype, "viewIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], ViewComponent.prototype, "templateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], ViewComponent.prototype, "weekNumberTemplateRef", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewComponent.prototype, "cellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewComponent.prototype, "weekNumberCellClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewComponent.prototype, "cellEnter", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ViewComponent.prototype, "cellLeave", void 0);
ViewComponent = __decorate([ __metadata("design:paramtypes", [BusViewService,
        IntlService,
        ChangeDetectorRef,
        ElementRef,
        NgZone,
        Renderer2,
        DisabledDatesService])
], ViewComponent);

/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `HeaderComponent`&mdash;The component that renders the UI for vertical navigation.
 * - `ViewComponent`&mdash;The component that renders the active Calendar view.
 */
let CalendarCommonModule = class CalendarCommonModule {
};
CalendarCommonModule.ɵfac = function CalendarCommonModule_Factory(t) { return new (t || CalendarCommonModule)(); };
CalendarCommonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CalendarCommonModule });
CalendarCommonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, EventsModule]] });

/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `CellTemplateDirective`&mdash;The month cell template directive.
 * - `MonthCellTemplateDirective`&mdash;The month cell template directive.
 * - `YearCellTemplateDirective`&mdash;The year cell template directive.
 * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.
 * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.
 * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.
 * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.
 * - `NavigationItemTemplateDirective`&mdash;The navigation item template directive.
 */
let TemplatesModule = class TemplatesModule {
};
TemplatesModule.ɵfac = function TemplatesModule_Factory(t) { return new (t || TemplatesModule)(); };
TemplatesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TemplatesModule });
TemplatesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});

/**
 * @hidden
 */
class Messages extends ComponentMessages {
}
Messages.ɵfac = /*@__PURE__*/ function () { let ɵMessages_BaseFactory; return function Messages_Factory(t) { return (ɵMessages_BaseFactory || (ɵMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Messages)))(t || Messages); }; }();
Messages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: Messages, inputs: { today: "today", prevButtonTitle: "prevButtonTitle", nextButtonTitle: "nextButtonTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "today", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "prevButtonTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "nextButtonTitle", void 0);

var MultiViewCalendarLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let MultiViewCalendarLocalizedMessagesDirective = MultiViewCalendarLocalizedMessagesDirective_1 = class MultiViewCalendarLocalizedMessagesDirective extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
};
MultiViewCalendarLocalizedMessagesDirective.ɵfac = function MultiViewCalendarLocalizedMessagesDirective_Factory(t) { return new (t || MultiViewCalendarLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
MultiViewCalendarLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MultiViewCalendarLocalizedMessagesDirective, selectors: [["", "kendoMultiViewCalendarLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => MultiViewCalendarLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
MultiViewCalendarLocalizedMessagesDirective = MultiViewCalendarLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], MultiViewCalendarLocalizedMessagesDirective);

var MultiViewCalendarCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let MultiViewCalendarCustomMessagesComponent = MultiViewCalendarCustomMessagesComponent_1 = class MultiViewCalendarCustomMessagesComponent extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
MultiViewCalendarCustomMessagesComponent.ɵfac = function MultiViewCalendarCustomMessagesComponent_Factory(t) { return new (t || MultiViewCalendarCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
MultiViewCalendarCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MultiViewCalendarCustomMessagesComponent, selectors: [["kendo-multiviewcalendar-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => MultiViewCalendarCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function MultiViewCalendarCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
MultiViewCalendarCustomMessagesComponent = MultiViewCalendarCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], MultiViewCalendarCustomMessagesComponent);

/**
 * The package exports:
 * - `CellTemplateDirective`&mdash;The month cell template directive.
 * - `MonthCellTemplateDirective`&mdash;The month cell template directive.
 * - `YearCellTemplateDirective`&mdash;The year cell template directive.
 * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.
 * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.
 * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.
 * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the MultiViewCalendar module
 * import { MultiViewCalendarModule } from '@progress/kendo-angular-dateinputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, MultiViewCalendarModule], // import MultiViewCalendar module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 */
let MultiViewCalendarModule = class MultiViewCalendarModule {
};
MultiViewCalendarModule.ɵfac = function MultiViewCalendarModule_Factory(t) { return new (t || MultiViewCalendarModule)(); };
MultiViewCalendarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MultiViewCalendarModule });
MultiViewCalendarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        NavigationService,
        CenturyViewService,
        DecadeViewService,
        MonthViewService,
        YearViewService,
        WeekNamesService
    ], imports: [[
            CommonModule,
            CalendarCommonModule,
            IntlModule,
            TemplatesModule,
            PopupModule,
            EventsModule
        ], CalendarCommonModule, TemplatesModule] });

/**
 * @hidden
 */
class CalendarMessages extends ComponentMessages {
}
CalendarMessages.ɵfac = /*@__PURE__*/ function () { let ɵCalendarMessages_BaseFactory; return function CalendarMessages_Factory(t) { return (ɵCalendarMessages_BaseFactory || (ɵCalendarMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CalendarMessages)))(t || CalendarMessages); }; }();
CalendarMessages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CalendarMessages, inputs: { today: "today", prevButtonTitle: "prevButtonTitle", nextButtonTitle: "nextButtonTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarMessages.prototype, "today", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarMessages.prototype, "prevButtonTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CalendarMessages.prototype, "nextButtonTitle", void 0);

var CalendarLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let CalendarLocalizedMessagesDirective = CalendarLocalizedMessagesDirective_1 = class CalendarLocalizedMessagesDirective extends CalendarMessages {
    constructor(service) {
        super();
        this.service = service;
    }
};
CalendarLocalizedMessagesDirective.ɵfac = function CalendarLocalizedMessagesDirective_Factory(t) { return new (t || CalendarLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
CalendarLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CalendarLocalizedMessagesDirective, selectors: [["", "kendoCalendarLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: CalendarMessages,
                useExisting: forwardRef(() => CalendarLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
CalendarLocalizedMessagesDirective = CalendarLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], CalendarLocalizedMessagesDirective);

var CalendarCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let CalendarCustomMessagesComponent = CalendarCustomMessagesComponent_1 = class CalendarCustomMessagesComponent extends CalendarMessages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
CalendarCustomMessagesComponent.ɵfac = function CalendarCustomMessagesComponent_Factory(t) { return new (t || CalendarCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
CalendarCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CalendarCustomMessagesComponent, selectors: [["kendo-calendar-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: CalendarMessages,
                useExisting: forwardRef(() => CalendarCustomMessagesComponent_1)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function CalendarCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
CalendarCustomMessagesComponent = CalendarCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], CalendarCustomMessagesComponent);

const COMPONENT_DIRECTIVES = [
    VirtualizationComponent
];
/**
 * @hidden
 *
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Virtualization component.
 */
let VirtualizationModule = class VirtualizationModule {
};
VirtualizationModule.ɵfac = function VirtualizationModule_Factory(t) { return new (t || VirtualizationModule)(); };
VirtualizationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: VirtualizationModule });
VirtualizationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });

/**
 * The exported package module.
 *
 * The package exports:
 * - `CellTemplateDirective`&mdash;The month cell template directive.
 * - `MonthCellTemplateDirective`&mdash;The month cell template directive.
 * - `YearCellTemplateDirective`&mdash;The year cell template directive.
 * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.
 * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.
 * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.
 * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.
 * - `NavigationItemTemplateDirective`&mdash;The navigation item template directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Calendar module
 * import { CalendarModule } from '@progress/kendo-angular-dateinputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, CalendarModule], // import Calendar module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let CalendarModule = class CalendarModule {
};
CalendarModule.ɵfac = function CalendarModule_Factory(t) { return new (t || CalendarModule)(); };
CalendarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CalendarModule });
CalendarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        CalendarDOMService,
        CenturyViewService,
        DecadeViewService,
        MonthViewService,
        YearViewService,
        WeekNamesService
    ], imports: [[
            CommonModule,
            CalendarCommonModule,
            MultiViewCalendarModule,
            IntlModule,
            TemplatesModule,
            VirtualizationModule,
            EventsModule,
            ResizeSensorModule
        ], CalendarCommonModule, TemplatesModule] });

/**
 * The exported package module.
 *
 * The package exports:
 * - `CalendarModule`&mdash;The calendar module.
 * - `MultiViewCalendarModule`&mdash;The multi-view calendar module.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Calendars module
 * import { CalendarsModule } from '@progress/kendo-angular-dateinputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, CalendarsModule], // import the Calendars module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let CalendarsModule = class CalendarsModule {
};
CalendarsModule.ɵfac = function CalendarsModule_Factory(t) { return new (t || CalendarsModule)(); };
CalendarsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CalendarsModule });
CalendarsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CalendarModule,
            MultiViewCalendarModule
        ], CalendarModule, MultiViewCalendarModule] });

/**
 * @hidden
 */
class DateInputMessages extends ComponentMessages {
}
DateInputMessages.ɵfac = /*@__PURE__*/ function () { let ɵDateInputMessages_BaseFactory; return function DateInputMessages_Factory(t) { return (ɵDateInputMessages_BaseFactory || (ɵDateInputMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DateInputMessages)))(t || DateInputMessages); }; }();
DateInputMessages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateInputMessages, inputs: { decrement: "decrement", increment: "increment" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputMessages.prototype, "decrement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateInputMessages.prototype, "increment", void 0);

var DateInputLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let DateInputLocalizedMessagesDirective = DateInputLocalizedMessagesDirective_1 = class DateInputLocalizedMessagesDirective extends DateInputMessages {
    constructor(service) {
        super();
        this.service = service;
    }
};
DateInputLocalizedMessagesDirective.ɵfac = function DateInputLocalizedMessagesDirective_Factory(t) { return new (t || DateInputLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
DateInputLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateInputLocalizedMessagesDirective, selectors: [["", "kendoDateInputLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: DateInputMessages,
                useExisting: forwardRef(() => DateInputLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
DateInputLocalizedMessagesDirective = DateInputLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], DateInputLocalizedMessagesDirective);

var DateInputCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let DateInputCustomMessagesComponent = DateInputCustomMessagesComponent_1 = class DateInputCustomMessagesComponent extends DateInputMessages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
DateInputCustomMessagesComponent.ɵfac = function DateInputCustomMessagesComponent_Factory(t) { return new (t || DateInputCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
DateInputCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateInputCustomMessagesComponent, selectors: [["kendo-dateinput-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: DateInputMessages,
                useExisting: forwardRef(() => DateInputCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DateInputCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
DateInputCustomMessagesComponent = DateInputCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], DateInputCustomMessagesComponent);

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the DateInput component.
 */
let DateInputModule = class DateInputModule {
};
DateInputModule.ɵfac = function DateInputModule_Factory(t) { return new (t || DateInputModule)(); };
DateInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateInputModule });
DateInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, IntlModule, EventsModule]] });

/**
 * @hidden
 */
class DatePickerMessages extends ComponentMessages {
}
DatePickerMessages.ɵfac = /*@__PURE__*/ function () { let ɵDatePickerMessages_BaseFactory; return function DatePickerMessages_Factory(t) { return (ɵDatePickerMessages_BaseFactory || (ɵDatePickerMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DatePickerMessages)))(t || DatePickerMessages); }; }();
DatePickerMessages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatePickerMessages, inputs: { today: "today", toggle: "toggle", prevButtonTitle: "prevButtonTitle", nextButtonTitle: "nextButtonTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerMessages.prototype, "today", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerMessages.prototype, "toggle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerMessages.prototype, "prevButtonTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DatePickerMessages.prototype, "nextButtonTitle", void 0);

var DatePickerLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let DatePickerLocalizedMessagesDirective = DatePickerLocalizedMessagesDirective_1 = class DatePickerLocalizedMessagesDirective extends DatePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
};
DatePickerLocalizedMessagesDirective.ɵfac = function DatePickerLocalizedMessagesDirective_Factory(t) { return new (t || DatePickerLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
DatePickerLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatePickerLocalizedMessagesDirective, selectors: [["", "kendoDatePickerLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: DatePickerMessages,
                useExisting: forwardRef(() => DatePickerLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
DatePickerLocalizedMessagesDirective = DatePickerLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], DatePickerLocalizedMessagesDirective);

var DatePickerCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let DatePickerCustomMessagesComponent = DatePickerCustomMessagesComponent_1 = class DatePickerCustomMessagesComponent extends DatePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
DatePickerCustomMessagesComponent.ɵfac = function DatePickerCustomMessagesComponent_Factory(t) { return new (t || DatePickerCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
DatePickerCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DatePickerCustomMessagesComponent, selectors: [["kendo-datepicker-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: DatePickerMessages,
                useExisting: forwardRef(() => DatePickerCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DatePickerCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
DatePickerCustomMessagesComponent = DatePickerCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], DatePickerCustomMessagesComponent);

const ɵ0$e = touchEnabled;
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the DatePicker component.
 */
let DatePickerModule = class DatePickerModule {
};
DatePickerModule.ɵfac = function DatePickerModule_Factory(t) { return new (t || DatePickerModule)(); };
DatePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DatePickerModule });
DatePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0$e }], imports: [[
            CommonModule,
            DateInputModule,
            CalendarModule,
            IntlModule,
            PopupModule,
            TemplatesModule,
            EventsModule
        ], TemplatesModule] });

const COMPONENT_DIRECTIVES$1 = [
    DateRangeComponent,
    DateRangePopupComponent,
    DateRangePopupTemplateDirective,
    DateRangeSelectionDirective,
    DateRangeStartInputDirective,
    DateRangeEndInputDirective
];
const COMPONENT_MODULES = [
    MultiViewCalendarModule,
    DateInputModule,
    PopupModule,
    EventsModule
];
/**
 * The exported package module.
 *
 * The package exports:
 * - `DateRangeComponent`&mdash;The DateRange component class.
 * - `DateRangePopupComponent`&mdash;The DateRangePopup component class.
 * - `DateRangeSelectionDirective`&mdash;The MultiviewCalendar date range selection directive.
 * - `DateRangeEndInputDirective`&mdash;The end DateInput date range selection directive.
 * - `DateRangeStartInputDirective`&mdash;The start DateInput date range selection directive.
 * - `DateRangePopupTemplateDirective`&mdash;The DateRangePopup content template directive.
 * - `MultiViewCalendarModule`&mdash;The MultiViewCalendar module.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the DateRange module
 * import { DateRangeModule } from '@progress/kendo-angular-dateinputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, DateRangeModule], // import DateRange module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let DateRangeModule = class DateRangeModule {
};
DateRangeModule.ɵfac = function DateRangeModule_Factory(t) { return new (t || DateRangeModule)(); };
DateRangeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateRangeModule });
DateRangeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, COMPONENT_MODULES]] });

const div$1 = domContainerFactory('div');
const ul$1 = domContainerFactory('ul');
const li$1 = domContainerFactory('li');
const span = domContainerFactory('span');
const listTitle = () => span('hour', 'k-title k-timeselector-title');
const listItem = () => li$1('<span>02</span>', 'k-item');
const list = () => ul$1([listItem()], 'k-reset');
const scrollable$1 = () => (div$1([list()], 'k-time-container k-flex k-content k-calendar-content k-scrollable'));
const timeListWrapper = () => {
    if (!isDocumentAvailable()) {
        return null;
    }
    return div$1([listTitle(), div$1([scrollable$1()], 'k-time-list')], 'k-time-list-wrapper', { left: '-10000px', position: 'absolute' });
};
const TIMELIST_WRAPPER = timeListWrapper();
/**
 * @hidden
 */
let TimePickerDOMService = class TimePickerDOMService {
    ensureHeights() {
        if (this.timeListHeight !== undefined) {
            return;
        }
        this.calculateHeights();
    }
    calculateHeights(container) {
        if (!isDocumentAvailable()) {
            return;
        }
        const listContainer = container && container.querySelector('.k-time-list-container');
        const hostContainer = listContainer || document.body;
        const wrapper = hostContainer.appendChild(TIMELIST_WRAPPER);
        this.timeListHeight = wrapper.querySelector('.k-scrollable').getBoundingClientRect().height;
        this.itemHeight = wrapper.querySelector('li').getBoundingClientRect().height;
        hostContainer.removeChild(wrapper);
    }
    isActive(element) {
        if (!isDocumentAvailable() || !element) {
            return false;
        }
        return (element.nativeElement || element) === document.activeElement;
    }
};
TimePickerDOMService.ɵfac = function TimePickerDOMService_Factory(t) { return new (t || TimePickerDOMService)(); };
TimePickerDOMService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TimePickerDOMService, factory: function (t) { return TimePickerDOMService.ɵfac(t); } });

const HOURS_IN_DAY = 24;
const clampToRange = (rangeValue) => (value) => value % rangeValue;
const clamp = clampToRange(HOURS_IN_DAY);
const stepper = (start, step) => (idx) => clamp(start + (idx * step));
const distanceFromMin = (value, min) => clamp(HOURS_IN_DAY + value - min);
const limit = (borderValue) => (barrier, value) => {
    const useBarrier = !value || getDate(barrier).getTime() === getDate(value).getTime();
    return useBarrier ? barrier : setHours(barrier, borderValue);
};
const limitDown = limit(0);
const limitUp = limit(HOURS_IN_DAY - 1);
/**
 * @hidden
 */
let HoursService = class HoursService {
    constructor(intl) {
        this.intl = intl;
        this.boundRange = false;
        this.insertUndividedMax = false;
    }
    apply(value, candidate) {
        return setHours(value, candidate.getHours());
    }
    configure(settings) {
        const { boundRange = this.boundRange, insertUndividedMax = this.insertUndividedMax, min = this.min, max = this.max, part, step = this.step } = settings;
        this.boundRange = boundRange;
        this.insertUndividedMax = insertUndividedMax;
        this.toListItem = (hour) => {
            const date = setHours(MIDNIGHT_DATE, hour);
            return {
                text: this.intl.formatDate(date, part.pattern),
                value: date
            };
        };
        this.min = min;
        this.max = max;
        this.step = step;
    }
    data(selectedValue) {
        const [min] = this.range(selectedValue);
        const getHour = stepper(min, this.step);
        const convertToItem = (idx) => (this.toListItem(getHour(idx)));
        const data = range(0, this.countFromMin(selectedValue)).map(convertToItem);
        this.addLast(data);
        this.addMissing(data, selectedValue);
        return data;
    }
    isRangeChanged(min, max) {
        return !isEqual(this.min, min) || !isEqual(this.max, max);
    }
    limitRange(min, max, value) {
        return this.boundRange ? [limitDown(min, value), limitUp(max, value)] : [min, max];
    }
    total(value) {
        const last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
        const missing = this.isMissing(value) ? 1 : 0;
        return this.countFromMin(value) + missing + last$$1;
    }
    selectedIndex(value) {
        return Math.ceil(this.divideByStep(value));
    }
    valueInList(value) {
        if (!value) {
            return true;
        }
        const matchMax = this.insertUndividedMax && this.lastHour(value) === value.getHours();
        return matchMax || !this.isMissing(value);
    }
    addLast(data, value) {
        if (this.insertUndividedMax && this.isLastMissing(value)) {
            data.push(this.toListItem(this.lastHour(value)));
        }
        return data;
    }
    addMissing(data, value) {
        if (this.valueInList(value)) {
            return data;
        }
        const missingItem = this.toListItem(value.getHours());
        data.splice(this.selectedIndex(value), 0, missingItem);
        return data;
    }
    countFromMin(value) {
        const [min, max] = this.range(value);
        return Math.floor(distanceFromMin(max, min) / this.step) + 1; /* include min */
    }
    isMissing(value) {
        if (!value) {
            return false;
        }
        return this.selectedIndex(value) !== this.divideByStep(value);
    }
    isLastMissing(value) {
        return this.isMissing(setHours(this.max, this.lastHour(value)));
    }
    divideByStep(value) {
        return distanceFromMin(value.getHours(), this.min.getHours()) / this.step;
    }
    lastHour(value) {
        return this.range(value)[1];
    }
    range(value) {
        const [min, max] = this.limitRange(this.min, this.max, value);
        return [min.getHours(), max.getHours()];
    }
};
HoursService.ɵfac = function HoursService_Factory(t) { return new (t || HoursService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
HoursService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HoursService, factory: function (t) { return HoursService.ɵfac(t); } });
HoursService = __decorate([ __metadata("design:paramtypes", [IntlService])
], HoursService);

const MINUTES_IN_HOUR = 60;
const clampToRange$1 = (rangeValue) => (value) => value % rangeValue;
const clamp$1 = clampToRange$1(MINUTES_IN_HOUR);
const stepper$1 = (start, step) => (idx) => clamp$1(start + (idx * step));
const distanceFromMin$1 = (value, min) => clamp$1(MINUTES_IN_HOUR + value - min);
const limit$1 = (borderValue) => (barrier, value) => {
    const useBarrier = !value || barrier.getHours() === value.getHours();
    return useBarrier ? barrier : setMinutes(barrier, borderValue);
};
const limitDown$1 = limit$1(0);
const limitUp$1 = limit$1(MINUTES_IN_HOUR - 1);
/**
 * @hidden
 */
let MinutesService = class MinutesService {
    constructor(intl) {
        this.intl = intl;
        this.insertUndividedMax = false;
    }
    apply(value, candidate) {
        return setMinutes(value, candidate.getMinutes());
    }
    configure(settings) {
        const { insertUndividedMax = this.insertUndividedMax, min = this.min, max = this.max, part, step = this.step } = settings;
        this.insertUndividedMax = insertUndividedMax;
        this.toListItem = (minute) => {
            const date = setMinutes(MIDNIGHT_DATE, minute);
            return {
                text: this.intl.formatDate(date, part.pattern),
                value: date
            };
        };
        this.min = min;
        this.max = max;
        this.step = step;
    }
    data(selectedValue) {
        const [min] = this.range(selectedValue);
        const getMinute = stepper$1(min, this.step);
        const convertToItem = (idx) => (this.toListItem(getMinute(idx)));
        const data = range(0, this.countFromMin(selectedValue)).map(convertToItem);
        this.addLast(data);
        this.addMissing(data, selectedValue);
        return data;
    }
    isRangeChanged(min, max) {
        return !isEqual(this.min, min) || !isEqual(this.max, max);
    }
    limitRange(min, max, value) {
        return [limitDown$1(min, value), limitUp$1(max, value)];
    }
    total(value) {
        const last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
        const missing = this.isMissing(value) ? 1 : 0;
        return this.countFromMin(value) + missing + last$$1;
    }
    selectedIndex(value) {
        return Math.ceil(this.divideByStep(value));
    }
    valueInList(value) {
        if (!value) {
            return true;
        }
        const matchMax = this.insertUndividedMax && this.lastMinute(value) === value.getMinutes();
        return matchMax || !this.isMissing(value);
    }
    addLast(data, value) {
        if (this.insertUndividedMax && this.isLastMissing(value)) {
            data.push(this.toListItem(this.lastMinute(value)));
        }
        return data;
    }
    addMissing(data, value) {
        if (this.valueInList(value)) {
            return data;
        }
        const missingItem = this.toListItem(value.getMinutes());
        data.splice(this.selectedIndex(value), 0, missingItem);
        return data;
    }
    countFromMin(value) {
        const [min, max] = this.range(value);
        return Math.floor(distanceFromMin$1(max, min) / this.step) + 1; /* include min */
    }
    isMissing(value) {
        if (!value) {
            return false;
        }
        return this.selectedIndex(value) !== this.divideByStep(value);
    }
    isLastMissing(value) {
        return this.isMissing(setMinutes(this.max, this.lastMinute(value)));
    }
    divideByStep(value) {
        return distanceFromMin$1(value.getMinutes(), this.min.getMinutes()) / this.step;
    }
    lastMinute(value) {
        return this.range(value)[1];
    }
    range(value) {
        const [min, max] = this.limitRange(this.min, this.max, value);
        return [min.getMinutes(), max.getMinutes()];
    }
};
MinutesService.ɵfac = function MinutesService_Factory(t) { return new (t || MinutesService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
MinutesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MinutesService, factory: function (t) { return MinutesService.ɵfac(t); } });
MinutesService = __decorate([ __metadata("design:paramtypes", [IntlService])
], MinutesService);

const SECONDS_IN_HOUR = 60;
const clampToRange$2 = (rangeValue) => (value) => value % rangeValue;
const clamp$2 = clampToRange$2(SECONDS_IN_HOUR);
const stepper$2 = (start, step) => (idx) => clamp$2(start + (idx * step));
const distanceFromMin$2 = (value, min) => clamp$2(SECONDS_IN_HOUR + value - min);
const limit$2 = (borderValue) => (barrier, value) => {
    const useBarrier = !value || barrier.getHours() === value.getHours() && barrier.getMinutes() === value.getMinutes();
    return useBarrier ? barrier : setSeconds(barrier, borderValue);
};
const limitDown$2 = limit$2(0);
const limitUp$2 = limit$2(SECONDS_IN_HOUR - 1);
/**
 * @hidden
 */
let SecondsService = class SecondsService {
    constructor(intl) {
        this.intl = intl;
        this.insertUndividedMax = false;
    }
    apply(value, candidate) {
        return setSeconds(value, candidate.getSeconds());
    }
    configure(settings) {
        const { insertUndividedMax = this.insertUndividedMax, min = this.min, max = this.max, part, step = this.step } = settings;
        this.insertUndividedMax = insertUndividedMax;
        this.toListItem = (second) => {
            const date = setSeconds(MIDNIGHT_DATE, second);
            return {
                text: this.intl.formatDate(date, part.pattern),
                value: date
            };
        };
        this.min = min;
        this.max = max;
        this.step = step;
    }
    data(selectedValue) {
        const [min] = this.range(selectedValue);
        const getSecond = stepper$2(min, this.step);
        const convertToItem = (idx) => (this.toListItem(getSecond(idx)));
        const data = range(0, this.countFromMin(selectedValue)).map(convertToItem);
        this.addLast(data);
        this.addMissing(data, selectedValue);
        return data;
    }
    isRangeChanged(min, max) {
        return !isEqual(this.min, min) || !isEqual(this.max, max);
    }
    limitRange(min, max, value) {
        return [limitDown$2(min, value), limitUp$2(max, value)];
    }
    total(value) {
        const last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
        const missing = this.isMissing(value) ? 1 : 0;
        return this.countFromMin(value) + missing + last$$1;
    }
    selectedIndex(value) {
        return Math.ceil(this.divideByStep(value));
    }
    valueInList(value) {
        if (!value) {
            return true;
        }
        const matchMax = this.insertUndividedMax && this.lastSecond(value) === value.getSeconds();
        return matchMax || !this.isMissing(value);
    }
    divideByStep(value) {
        return distanceFromMin$2(value.getSeconds(), this.min.getSeconds()) / this.step;
    }
    addLast(data, value) {
        if (this.insertUndividedMax && this.isLastMissing(value)) {
            data.push(this.toListItem(this.lastSecond(value)));
        }
        return data;
    }
    addMissing(data, value) {
        if (this.valueInList(value)) {
            return data;
        }
        const missingItem = this.toListItem(value.getSeconds());
        data.splice(this.selectedIndex(value), 0, missingItem);
        return data;
    }
    countFromMin(value) {
        const [min, max] = this.range(value);
        return Math.floor(distanceFromMin$2(max, min) / this.step) + 1; /* include min */
    }
    isMissing(value) {
        if (!value) {
            return false;
        }
        return this.selectedIndex(value) !== this.divideByStep(value);
    }
    isLastMissing(value) {
        return this.isMissing(setSeconds(this.max, this.lastSecond(value)));
    }
    lastSecond(value) {
        return this.range(value)[1];
    }
    range(value) {
        const [min, max] = this.limitRange(this.min, this.max, value);
        return [min.getSeconds(), max.getSeconds()];
    }
};
SecondsService.ɵfac = function SecondsService_Factory(t) { return new (t || SecondsService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
SecondsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SecondsService, factory: function (t) { return SecondsService.ɵfac(t); } });
SecondsService = __decorate([ __metadata("design:paramtypes", [IntlService])
], SecondsService);

const MILLISECONDS_IN_SECOND = 1000;
const clampToRange$3 = (rangeValue) => (value) => value % rangeValue;
const clamp$3 = clampToRange$3(MILLISECONDS_IN_SECOND);
const stepper$3 = (start, step) => (idx) => clamp$3(start + (idx * step));
const distanceFromMin$3 = (value, min) => clamp$3(MILLISECONDS_IN_SECOND + value - min);
const limit$3 = (borderValue) => (barrier, value) => {
    const useBarrier = !value ||
        (barrier.getHours() === value.getHours() &&
            barrier.getMinutes() === value.getMinutes() &&
            barrier.getSeconds() === value.getSeconds());
    return useBarrier ? barrier : setMilliseconds(barrier, borderValue);
};
const limitDown$3 = limit$3(0);
const limitUp$3 = limit$3(MILLISECONDS_IN_SECOND - 1);
/**
 * @hidden
 */
let MillisecondsService = class MillisecondsService {
    constructor(intl) {
        this.intl = intl;
        this.insertUndividedMax = false;
    }
    apply(value, candidate) {
        return setMilliseconds(value, candidate.getMilliseconds());
    }
    configure(settings) {
        const { insertUndividedMax = this.insertUndividedMax, min = this.min, max = this.max, step = this.step } = settings;
        this.insertUndividedMax = insertUndividedMax;
        this.toListItem = (millisecond) => {
            const date = setMilliseconds(MIDNIGHT_DATE, millisecond);
            return {
                text: this.intl.formatDate(date, "SSS"),
                value: date
            };
        };
        this.min = min;
        this.max = max;
        this.step = step;
    }
    data(selectedValue) {
        const [min] = this.range(selectedValue);
        const getMillisecond = stepper$3(min, this.step);
        const convertToItem = (idx) => (this.toListItem(getMillisecond(idx)));
        const data = range(0, this.countFromMin(selectedValue)).map(convertToItem);
        this.addLast(data);
        this.addMissing(data, selectedValue);
        return data;
    }
    isRangeChanged(min, max) {
        return !isEqual(this.min, min) || !isEqual(this.max, max);
    }
    limitRange(min, max, value) {
        return [limitDown$3(min, value), limitUp$3(max, value)];
    }
    total(value) {
        const last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
        const missing = this.isMissing(value) ? 1 : 0;
        return this.countFromMin(value) + missing + last$$1;
    }
    selectedIndex(value) {
        return Math.ceil(this.divideByStep(value));
    }
    valueInList(value) {
        if (!value) {
            return true;
        }
        const matchMax = this.insertUndividedMax && this.lastMillisecond(value) === value.getMilliseconds();
        return matchMax || !this.isMissing(value);
    }
    divideByStep(value) {
        return distanceFromMin$3(value.getMilliseconds(), this.min.getMilliseconds()) / this.step;
    }
    addLast(data, value) {
        if (this.insertUndividedMax && this.isLastMissing(value)) {
            data.push(this.toListItem(this.lastMillisecond(value)));
        }
        return data;
    }
    addMissing(data, value) {
        if (this.valueInList(value)) {
            return data;
        }
        const missingItem = this.toListItem(value.getMilliseconds());
        data.splice(this.selectedIndex(value), 0, missingItem);
        return data;
    }
    countFromMin(value) {
        const [min, max] = this.range(value);
        return Math.floor(distanceFromMin$3(max, min) / this.step) + 1; /* include min */
    }
    isMissing(value) {
        if (!value) {
            return false;
        }
        return this.selectedIndex(value) !== this.divideByStep(value);
    }
    isLastMissing(value) {
        return this.isMissing(setMilliseconds(this.max, this.lastMillisecond(value)));
    }
    lastMillisecond(value) {
        return this.range(value)[1];
    }
    range(value) {
        const [min, max] = this.limitRange(this.min, this.max, value);
        return [min.getMilliseconds(), max.getMilliseconds()];
    }
};
MillisecondsService.ɵfac = function MillisecondsService_Factory(t) { return new (t || MillisecondsService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
MillisecondsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MillisecondsService, factory: function (t) { return MillisecondsService.ɵfac(t); } });
MillisecondsService = __decorate([ __metadata("design:paramtypes", [IntlService])
], MillisecondsService);

const setHours$1 = (date, hours) => {
    const clone = cloneDate(date);
    clone.setHours(hours);
    return clone;
};
const isAM = (value) => value !== null && value < 12;
const isPM = (value) => value !== null && (!value || value > 11);
const inRange = (value, min, max) => ((!min && !max) || (value >= min && value <= max));
const inReverseRange = (value, min, max) => ((!min && !max) || value >= min || value <= max);
/**
 * @hidden
 */
let DayPeriodService = class DayPeriodService {
    constructor(intl) {
        this.intl = intl;
    }
    /**
     * @hidden
     */
    apply(value, candidate) {
        const hour = value.getHours();
        const hourAM = isAM(hour);
        const candidateAM = isAM(candidate.getHours());
        if ((hourAM && candidateAM) || (!hourAM && !candidateAM)) {
            return value;
        }
        const [min, max = 24] = this.normalizedRange();
        const result = hour + (candidateAM ? -12 : 12);
        return setHours$1(value, Math.min(Math.max(min, result), (max || 24)));
    }
    /**
     * @hidden
     */
    configure(settings) {
        const { min = this.min, max = this.max, part = this.part } = settings;
        this.min = min;
        this.max = max;
        this.part = part;
    }
    /**
     * @hidden
     */
    data(_) {
        const names = this.part.names;
        if (!names) {
            return [];
        }
        const data = [];
        const [min, max] = this.normalizedRange();
        const dayPeriod = this.intl.dateFormatNames(names);
        if (isAM(min)) {
            data.push({ text: dayPeriod.am, value: setHours$1(this.min, min) });
        }
        if (isPM(max)) {
            data.push({ text: dayPeriod.pm, value: setHours$1(this.min, Math.max(12, max)) });
        }
        return this.min.getHours() !== min ? data.reverse() : data;
    }
    /**
     * @hidden
     */
    isRangeChanged(_, __) {
        return false;
    }
    /**
     * @hidden
     */
    limitRange(min, max, _) {
        return [min, max];
    }
    /**
     * @hidden
     */
    total() {
        const [min, max] = this.normalizedRange();
        if (!min && !max) {
            return 2;
        }
        if (min > 11 || max < 12) {
            return 1;
        }
        return 2;
    }
    /**
     * @hidden
     */
    selectedIndex(value) {
        if (!this.valueInList(value)) {
            return -1;
        }
        const index = Math.floor(value.getHours() / 12);
        return this.min.getHours() === this.normalizedRange()[0] ? index : (index === 0 ? 1 : 0);
    }
    /**
     * @hidden
     */
    valueInList(value) {
        const reverse = this.min.getHours() !== this.normalizedRange()[0];
        const isInRange = reverse ? inReverseRange : inRange;
        return isInRange(value.getHours(), this.min.getHours(), this.max.getHours());
    }
    normalizedRange() {
        const minHour = this.min.getHours();
        const maxHour = this.max.getHours();
        return [
            Math.min(minHour, maxHour),
            Math.max(minHour, maxHour)
        ];
    }
};
DayPeriodService.ɵfac = function DayPeriodService_Factory(t) { return new (t || DayPeriodService)(ɵngcc0.ɵɵinject(ɵngcc1.IntlService)); };
DayPeriodService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DayPeriodService, factory: function (t) { return DayPeriodService.ɵfac(t); } });
DayPeriodService = __decorate([ __metadata("design:paramtypes", [IntlService])
], DayPeriodService);

const SNAP_THRESHOLD = 0.05; //% of the item height
const SCROLL_THRESHOLD = 2; //< 2px threshold
const nil = () => (null);
const getters = {
    35: (data, _) => data[data.length - 1],
    36: (data, _) => data[0],
    38: (data, index) => data[index - 1],
    40: (data, index) => data[index + 1]
};
const services$1 = {
    [TIME_PART.dayperiod]: DayPeriodService,
    [TIME_PART.hour]: HoursService,
    [TIME_PART.minute]: MinutesService,
    [TIME_PART.second]: SecondsService,
    [TIME_PART.millisecond]: MillisecondsService
};
/**
 * @hidden
 */
let TimeListComponent = class TimeListComponent {
    constructor(element, injector, dom, renderer, zone) {
        this.element = element;
        this.injector = injector;
        this.dom = dom;
        this.renderer = renderer;
        this.zone = zone;
        this.min = cloneDate(MIDNIGHT_DATE);
        this.max = cloneDate(MAX_TIME);
        this.step = 1;
        this.disabled = false;
        this.valueChange = new EventEmitter();
        this.componentClass = true;
        this.animateToIndex = true;
        this.isActive = false;
        this.skip = 0;
        this.total = 60;
        this.data = [];
        this.indexToScroll = -1;
        this.domEvents = [];
    }
    get tabIndex() {
        return this.disabled ? undefined : 0;
    }
    ngOnChanges(changes) {
        if (changes.part) {
            this.service = this.injector.get(services$1[this.part.type]);
            this.service.configure(this.serviceSettings());
        }
        const value = this.value;
        const valueChanges = changes.value || {};
        const [min, max] = this.service.limitRange(this.min, this.max, value);
        if (this.service.isRangeChanged(min, max) || changes.min || changes.max || changes.step) {
            this.data = [];
            this.service.configure(this.serviceSettings({ min, max }));
        }
        // Skip the rendering of the list whenever possible
        if (!this.data.length || this.hasMissingValue(valueChanges)) {
            this.animateToIndex = false;
            this.data = this.service.data(value);
        }
        this.animateToIndex = this.animateToIndex && this.textHasChanged(valueChanges);
        this.total = this.service.total(value);
        this.indexToScroll = this.selectedIndex(value);
    }
    ngOnInit() {
        this.animateToIndex = true;
        this.dom.ensureHeights();
        this.itemHeight = this.dom.itemHeight;
        this.listHeight = this.dom.timeListHeight;
        this.topOffset = (this.listHeight - this.itemHeight) / 2;
        this.bottomOffset = this.listHeight - this.itemHeight;
        this.topThreshold = this.itemHeight * SNAP_THRESHOLD;
        this.bottomThreshold = this.itemHeight * (1 - SNAP_THRESHOLD);
        const translate = `translateY(${this.topOffset}px)`;
        this.style = { transform: translate, '-ms-transform': translate };
        if (this.element) {
            this.zone.runOutsideAngular(() => {
                this.bindEvents();
            });
        }
    }
    ngOnDestroy() {
        this.scrollSubscription.unsubscribe();
        this.domEvents.forEach(unbindCallback => unbindCallback());
    }
    ngAfterViewInit() {
        this.scrollOnce((index) => this.virtualization.scrollToIndex(index));
    }
    ngAfterViewChecked() {
        this.scrollOnce((index) => {
            const action = this.animateToIndex ? 'animateToIndex' : 'scrollToIndex';
            this.virtualization[action](index);
            this.animateToIndex = true;
        });
    }
    handleChange(dataItem) {
        const candidate = this.service.apply(this.value, dataItem.value);
        if (this.value.getTime() === candidate.getTime()) {
            return;
        }
        this.indexToScroll = this.data.indexOf(dataItem);
        this.value = candidate;
        this.valueChange.emit(candidate);
    }
    handleItemClick(args) {
        const item = closestInScope(args.target, node => node.hasAttribute('data-timelist-item-index'), this.element.nativeElement);
        if (item) {
            const index = item.getAttribute('data-timelist-item-index');
            this.handleChange(this.data[index]);
        }
    }
    /**
     * Focuses the host element of the TimeList.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timelist.focus()">Focus TimeList</button>
     *  <kendo-timelist #timelist></kendo-timelist>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.focus();
    }
    /**
     * Blurs the TimeList component.
     */
    blur() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.blur();
    }
    itemOffset(scrollTop) {
        const valueIndex = this.selectedIndex(this.value);
        const activeIndex = this.virtualization.activeIndex();
        const offset = this.virtualization.itemOffset(activeIndex);
        const distance = Math.abs(Math.ceil(scrollTop) - offset);
        if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {
            return offset;
        }
        const scrollUp = valueIndex > activeIndex;
        const moveToNext = scrollUp && distance >= this.bottomThreshold || !scrollUp && distance > this.topThreshold;
        return moveToNext ? this.virtualization.itemOffset(activeIndex + 1) : offset;
    }
    hasMissingValue({ previousValue, currentValue }) {
        const isPreviousMissing = previousValue && !this.service.valueInList(previousValue);
        const isCurrentMissing = currentValue && !this.service.valueInList(currentValue);
        return isPreviousMissing || isCurrentMissing;
    }
    scrollOnce(action) {
        if (this.indexToScroll !== -1) {
            action(this.indexToScroll);
            this.indexToScroll = -1;
        }
    }
    serviceSettings(settings) {
        const defaults = {
            boundRange: false,
            insertUndividedMax: false,
            max: this.max,
            min: this.min,
            part: this.part,
            step: this.step
        };
        const result = Object.assign({}, defaults, settings);
        result.boundRange = result.part.type !== 'hour';
        return result;
    }
    selectedIndex(value) {
        if (!value) {
            return -1;
        }
        return this.service.selectedIndex(value);
    }
    textHasChanged({ previousValue, currentValue }) {
        if (!previousValue || !currentValue) {
            return false;
        }
        const oldData = this.data[this.selectedIndex(previousValue)];
        const newData = this.data[this.selectedIndex(currentValue)];
        return oldData && newData && oldData.text !== newData.text;
    }
    handleKeyDown(e) {
        const getter = getters[e.keyCode] || nil;
        const dataItem = getter(this.data, this.service.selectedIndex(this.value));
        if (dataItem) {
            this.handleChange(dataItem);
            e.preventDefault();
        }
    }
    bindEvents() {
        this.scrollSubscription = this.virtualization
            .scroll$()
            .pipe(debounceTime(100), map((e) => e.target.scrollTop), map((top) => this.itemOffset(top)), map((itemOffset) => this.virtualization.itemIndex(itemOffset)))
            .subscribe(index => {
            this.virtualization.scrollToIndex(index);
            this.handleChange(this.data[index]);
        });
        const element = this.element.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'mouseover', () => !this.isActive && this.focus()), this.renderer.listen(element, 'click', () => this.focus()), this.renderer.listen(element, 'blur', () => this.isActive = false), this.renderer.listen(element, 'focus', () => this.isActive = true), this.renderer.listen(element, 'keydown', this.handleKeyDown.bind(this)));
    }
};
TimeListComponent.ɵfac = function TimeListComponent_Factory(t) { return new (t || TimeListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(TimePickerDOMService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TimeListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimeListComponent, selectors: [["kendo-timelist"]], viewQuery: function TimeListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(VirtualizationComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualization = _t.first);
    } }, hostVars: 3, hostBindings: function TimeListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵclassProp("k-time-list", ctx.componentClass);
    } }, inputs: { min: "min", max: "max", step: "step", disabled: "disabled", value: "value", part: "part" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 13, consts: [["role", "presentation", "tabindex", "-1", 1, "k-time-container", 3, "skip", "take", "total", "itemHeight", "maxScrollDifference", "topOffset", "bottomOffset"], [1, "k-reset", 3, "ngStyle", "kendoEventsOutsideAngular", "scope"], ["class", "k-item", 4, "ngFor", "ngForOf"], [1, "k-item"]], template: function TimeListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "kendo-virtualization", 0)(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, TimeListComponent_li_2_Template, 3, 2, "li", 2);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("skip", ctx.skip)("take", ctx.total)("total", ctx.total)("itemHeight", ctx.itemHeight)("maxScrollDifference", ctx.listHeight)("topOffset", ctx.topOffset)("bottomOffset", ctx.bottomOffset);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ctx.style)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(11, _c2, ctx.handleItemClick))("scope", ctx);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data);
    } }, directives: [VirtualizationComponent, ɵngcc2.NgStyle, ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgForOf], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeListComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeListComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TimeListComponent.prototype, "part", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimeListComponent.prototype, "step", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimeListComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeListComponent.prototype, "value", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimeListComponent.prototype, "valueChange", void 0);
__decorate([
    ViewChild(VirtualizationComponent, { static: true }),
    __metadata("design:type", VirtualizationComponent)
], TimeListComponent.prototype, "virtualization", void 0);
__decorate([
    HostBinding("attr.tabindex"),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], TimeListComponent.prototype, "tabIndex", null);
__decorate([
    HostBinding("class.k-time-list"),
    __metadata("design:type", Boolean)
], TimeListComponent.prototype, "componentClass", void 0);
TimeListComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Injector,
        TimePickerDOMService,
        Renderer2,
        NgZone])
], TimeListComponent);

const isEqualTillMinute = (value, min) => value.getHours() === min.getHours() && value.getMinutes() === min.getMinutes();
const isEqualTillSecond = (value, min) => isEqualTillMinute(value, min) && value.getSeconds() === min.getSeconds();
const isEqualTillMillisecond = (value, min) => isEqualTillSecond(value, min) && value.getMilliseconds() === min.getMilliseconds();
const ɵ3$7 = (value) => value.getHours(), ɵ4$3 = (_, min) => min.getHours(), ɵ5$1 = (value) => value.getMinutes(), ɵ6$1 = (value, min) => isEqualTillMinute(value, min) ? min.getMinutes() : 0, ɵ7$1 = (value) => value.getSeconds(), ɵ8$1 = (value, min) => isEqualTillSecond(value, min) ? min.getSeconds() : 0, ɵ9$1 = (value) => value.getMilliseconds(), ɵ10$1 = (value, min) => isEqualTillMillisecond(value, min) ? min.getMilliseconds() : 0;
const defaultGetters = [
    {
        type: TIME_PART.hour,
        getter: ɵ3$7,
        minGetter: ɵ4$3
    }, {
        type: TIME_PART.minute,
        getter: ɵ5$1,
        minGetter: ɵ6$1
    }, {
        type: TIME_PART.second,
        getter: ɵ7$1,
        minGetter: ɵ8$1
    }, {
        type: TIME_PART.millisecond,
        getter: ɵ9$1,
        minGetter: ɵ10$1
    }
];
const left = getter => (origin, _) => getter(origin);
const right = getter => (_, candidate) => getter(candidate);
const convertToObject = (parts) => parts.reduce((obj, p) => { obj[p.type] = p.type; return obj; }, {});
const getterByPart = parts => g => parts[g.type] ? right(g.getter) : left(g.getter);
const gettersFactory = getters => parts => (getters.map(getterByPart(convertToObject(parts))));
const snapValue = (getter, minGetter, step) => (date, min) => {
    const value = getter(date);
    const minValue = minGetter(date, min);
    const rest = value - minValue;
    if (rest < 0) {
        return minValue;
    }
    const mod = rest % step;
    return value - mod + (mod > step / 2 ? step : 0);
};
const snappersFactory = (getters) => steps => (getters.map(g => {
    const step = steps[g.type];
    return step ? snapValue(g.getter, g.minGetter, step) : g.getter;
}));
/**
 * @hidden
 */
const generateGetters = gettersFactory(defaultGetters);
/**
 * @hidden
 */
const generateSnappers = snappersFactory(defaultGetters);
/**
 * @hidden
 */
const valueMerger = getters => (origin, candidate) => {
    origin.setHours(...getters.map(g => g(origin, candidate)));
    return origin;
};
/**
 * @hidden
 */
const snapTime = snappers => (candidate, min) => {
    const date = cloneDate(candidate);
    date.setHours(...snappers.map(s => s(date, min)));
    return date;
};

const listReducer = (state, list, idx, all) => {
    if (state.length || !list.isActive) {
        return state;
    }
    return [{
            next: all[idx + 1] || list,
            prev: all[idx - 1] || list
        }];
};
var Direction;
(function (Direction) {
    Direction[Direction["Left"] = 0] = "Left";
    Direction[Direction["Right"] = 1] = "Right";
})(Direction || (Direction = {}));
/**
 * @hidden
 *
 * Represents the Kendo UI TimeSelector component for Angular.
 */
let TimeSelectorComponent = class TimeSelectorComponent {
    constructor(localization, cdr, element, intl, dom, zone, renderer, pickerService) {
        this.localization = localization;
        this.cdr = cdr;
        this.element = element;
        this.intl = intl;
        this.dom = dom;
        this.zone = zone;
        this.renderer = renderer;
        this.pickerService = pickerService;
        /**
         * Specifies the time format used to display the time list columns.
         */
        this.format = 't';
        /**
         * Specifies the smallest valid time value.
         */
        this.min = cloneDate(MIN_TIME);
        /**
         * Specifies the biggest valid time value.
         */
        this.max = cloneDate(MAX_TIME);
        /**
         * Determines whether to display the **Cancel** button in the popup.
         */
        this.cancelButton = true;
        /**
         * Determines whether to display the **Set** button in the popup.
         */
        this.setButton = true;
        /**
         * Determines whether to display the **Now** button in the popup.
         *
         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
         */
        this.nowButton = true;
        /**
         * Sets or gets the `disabled` property of the TimeSelector and determines whether the component is active.
         */
        this.disabled = false;
        /**
         * Specifies the value of the TimeSelector component.
         */
        this.value = null;
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user cancels the selected value.
         */
        this.valueReject = new EventEmitter();
        this.isActive = false;
        this.showNowButton = true;
        this._activeListIndex = -1;
        this._steps = {};
        this.domEvents = [];
        if (this.pickerService) {
            this.pickerService.timeSelector = this;
        }
    }
    /**
     * @hidden
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * Configures the incremental steps of the TimeSelector.
     *
     * The available options are:
     * - `hour: Number`&mdash;Controls the incremental step of the hour value.
     * - `minute: Number`&mdash;Controls the incremental step of the minute value.
     * - `second: Number`&mdash;Controls the incremental step of the second value.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timeselector format="HH:mm:ss" [steps]="steps"></kendo-timeselector>
     * `
     * })
     * export class AppComponent {
     *   public steps = { hour: 2, minute: 15, second: 15 };
     * }
     * ```
     *
     * > If the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    set steps(steps) {
        this._steps = steps || {};
    }
    get steps() {
        return this._steps;
    }
    set current(value) {
        this._current = timeInRange(this.snapTime(cloneDate(value || MIDNIGHT_DATE), this.min), this.min, this.max);
        if (!NgZone.isInAngularZone()) {
            this.cdr.detectChanges();
        }
    }
    get current() {
        return this._current;
    }
    get activeListIndex() {
        return this._activeListIndex;
    }
    set activeListIndex(value) {
        this._activeListIndex = value;
        if (!this.timeListWrappers || !this.timeListWrappers.length) {
            return;
        }
        this.timeListWrappers.forEach(listWrapper => {
            this.renderer.removeClass(listWrapper.nativeElement, 'k-state-focused');
        });
        if (value >= 0) {
            const listIndex = this.listIndex(value);
            const focusedWrapper = this.timeListWrappers.toArray()[listIndex];
            if (focusedWrapper) {
                this.renderer.addClass(focusedWrapper.nativeElement, 'k-state-focused');
            }
        }
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.subscriptions = this.intl.changes.subscribe(this.intlChange.bind(this));
        if (this.localization) {
            this.subscriptions.add(this.localization
                .changes
                .subscribe(() => this.cdr.markForCheck()));
        }
        this.renderer.addClass(this.element.nativeElement, 'k-timeselector');
        this.dom.calculateHeights(this.element.nativeElement);
        this.init();
        this.bindEvents();
    }
    /**
     * @hidden
     */
    ngOnChanges(_) {
        this.init();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        if (this.pickerService) {
            this.pickerService.timeSelector = null;
        }
        this.domEvents.forEach(unbindCallback => unbindCallback());
    }
    /**
     * Focuses the TimeSelector component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timeselector.focus()">Focus time picker</button>
     *  <kendo-timeselector #timeselector></kendo-timeselector>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        const list = this.timeLists.first;
        if (!list) {
            return;
        }
        list.focus();
    }
    /**
     * Blurs the TimeSelector component.
     */
    blur() {
        const list = this.timeLists.first;
        if (!list) {
            return;
        }
        list.blur();
    }
    /**
     * @hidden
     */
    handleAccept() {
        this.handleChange(this.mergeValue(cloneDate(this.value || getDate(getNow())), this.current));
    }
    /**
     * @hidden
     */
    handleNow() {
        this.current = getNow();
        this.handleChange(this.current);
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    handleReject() {
        this.current = this.value;
        this.valueReject.emit();
    }
    /**
     * @hidden
     */
    handleFocus(args) {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        this.emitFocus(args);
    }
    /**
     * @hidden
     */
    handleListFocus(args) {
        const index = parseInt(args.target.getAttribute('data-timelist-index'), 10);
        this.activeListIndex = index;
        this.handleFocus(args);
    }
    /**
     * @hidden
     */
    handleBlur(args) {
        const currentTarget = currentFocusTarget(args);
        if (currentTarget && this.containsElement(currentTarget)) {
            return;
        }
        this.activeListIndex = -1;
        this.isActive = false;
        this.emitBlur(args);
    }
    /**
     * @hidden
     */
    containsElement(element) {
        return Boolean(closest(element, node => node === this.element.nativeElement));
    }
    partStep(part) {
        return this.steps[part.type] || 1;
    }
    init(changes) {
        if (!changes || hasChange(changes, 'format')) {
            this.dateFormatParts = this.intl.splitDateFormat(this.format);
            this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));
        }
        if (!changes || hasChange(changes, 'steps')) {
            this.snapTime = snapTime(generateSnappers(this.steps));
        }
        if (!changes || hasChange(changes, 'value')) {
            this.current = this.value;
        }
        this.showNowButton = !this.hasSteps() && this.nowButton && isInTimeRange(getNow(), this.min, this.max);
    }
    focusList(dir) {
        if (!this.timeLists.length) {
            return;
        }
        this.timeLists.reduce(listReducer, [])
            .map(state => dir === Direction.Right ? state.next : state.prev)
            .map(list => list && list.focus());
    }
    handleChange(value) {
        this.value = value;
        this.valueChange.emit(cloneDate(value));
    }
    hasActiveButton() {
        if (!this.accept) {
            return false;
        }
        return [this.accept, this.cancel, this.now].reduce((isActive, el) => isActive || this.dom.isActive(el), false);
    }
    hasSteps() {
        const keys = Object.keys(this.steps);
        return keys.length !== keys.reduce((acc, k) => acc + this.steps[k], 0);
    }
    intlChange() {
        this.dateFormatParts = this.intl.splitDateFormat(this.format);
        this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));
        this.cdr.markForCheck();
    }
    bindEvents() {
        if (this.element) {
            this.zone.runOutsideAngular(() => {
                this.domEvents.push(this.renderer.listen(this.element.nativeElement, 'keydown', this.handleKeydown.bind(this)));
            });
        }
    }
    handleKeydown(args) {
        const { keyCode, altKey } = args;
        // reserve the alt + arrow key commands for the picker
        const arrowKeyPressed = [Keys.ArrowLeft, Keys.ArrowRight].indexOf(keyCode) !== -1;
        if (isPresent(this.pickerService) && arrowKeyPressed && altKey) {
            return;
        }
        if (keyCode === Keys.Enter && !this.hasActiveButton()) {
            this.handleAccept();
        }
        else if (keyCode === Keys.ArrowLeft || keyCode === Keys.ArrowRight) {
            this.focusList(keyCode === Keys.ArrowLeft ? Direction.Left : Direction.Right);
        }
    }
    emitBlur(args) {
        if (this.pickerService) {
            this.pickerService.onBlur.emit(args);
        }
    }
    emitFocus(args) {
        if (this.pickerService) {
            this.pickerService.onFocus.emit(args);
        }
    }
    listIndex(partIndex) {
        let listIdx = 0;
        let partIdx = 0;
        while (partIdx < partIndex) {
            if (this.dateFormatParts[partIdx].type !== 'literal') {
                listIdx++;
            }
            partIdx++;
        }
        return listIdx;
    }
};
TimeSelectorComponent.ɵfac = function TimeSelectorComponent_Factory(t) { return new (t || TimeSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IntlService), ɵngcc0.ɵɵdirectiveInject(TimePickerDOMService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(PickerService, 8)); };
TimeSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimeSelectorComponent, selectors: [["kendo-timeselector"]], viewQuery: function TimeSelectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c93, 5);
        ɵngcc0.ɵɵviewQuery(_c94, 5);
        ɵngcc0.ɵɵviewQuery(_c95, 5);
        ɵngcc0.ɵɵviewQuery(TimeListComponent, 5);
        ɵngcc0.ɵɵviewQuery(_c96, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.accept = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cancel = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.now = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timeLists = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timeListWrappers = _t);
    } }, hostVars: 2, hostBindings: function TimeSelectorComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-disabled", ctx.disabledClass);
    } }, inputs: { format: "format", min: "min", max: "max", cancelButton: "cancelButton", setButton: "setButton", nowButton: "nowButton", disabled: "disabled", value: "value", steps: "steps" }, outputs: { valueChange: "valueChange", valueReject: "valueReject" }, exportAs: ["kendo-timeselector"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.timeselector'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 4, consts: function () { let i18n_97; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Accept button text in the timeselector component
         * @meaning kendo.timeselector.accept
         */
        const MSG_EXTERNAL_5362895271044573681$$DIST_FESM2015_INDEX_JS_98 = goog.getMsg("Set");
        i18n_97 = MSG_EXTERNAL_5362895271044573681$$DIST_FESM2015_INDEX_JS_98;
    }
    else {
        i18n_97 = $localize `:kendo.timeselector.accept|The Accept button text in the timeselector component␟801811aa1609e3f173c86baa82cee037f75a215f␟5362895271044573681:Set`;
    } let i18n_99; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Accept button in the timeselector component
         * @meaning kendo.timeselector.acceptLabel
         */
        const MSG_EXTERNAL_3417396278000787211$$DIST_FESM2015_INDEX_JS_100 = goog.getMsg("Set time");
        i18n_99 = MSG_EXTERNAL_3417396278000787211$$DIST_FESM2015_INDEX_JS_100;
    }
    else {
        i18n_99 = $localize `:kendo.timeselector.acceptLabel|The label for the Accept button in the timeselector component␟b4b1e5ac55f0330f6c4e32b866ae4339ad969978␟3417396278000787211:Set time`;
    } let i18n_101; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Cancel button text in the timeselector component
         * @meaning kendo.timeselector.cancel
         */
        const MSG_EXTERNAL_1890188482755567622$$DIST_FESM2015_INDEX_JS_102 = goog.getMsg("Cancel");
        i18n_101 = MSG_EXTERNAL_1890188482755567622$$DIST_FESM2015_INDEX_JS_102;
    }
    else {
        i18n_101 = $localize `:kendo.timeselector.cancel|The Cancel button text in the timeselector component␟3004d7704ffa6202a3b3925fcea490e486203a3e␟1890188482755567622:Cancel`;
    } let i18n_103; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Cancel button in the timeselector component
         * @meaning kendo.timeselector.cancelLabel
         */
        const MSG_EXTERNAL_5738120209397145846$$DIST_FESM2015_INDEX_JS_104 = goog.getMsg("Cancel changes");
        i18n_103 = MSG_EXTERNAL_5738120209397145846$$DIST_FESM2015_INDEX_JS_104;
    }
    else {
        i18n_103 = $localize `:kendo.timeselector.cancelLabel|The label for the Cancel button in the timeselector component␟08dfbdfffd662371a6ff4c0b6ed82b9faa48143b␟5738120209397145846:Cancel changes`;
    } let i18n_105; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The Now button text in the timeselector component
         * @meaning kendo.timeselector.now
         */
        const MSG_EXTERNAL_1926162752852226109$$DIST_FESM2015_INDEX_JS_106 = goog.getMsg("Now");
        i18n_105 = MSG_EXTERNAL_1926162752852226109$$DIST_FESM2015_INDEX_JS_106;
    }
    else {
        i18n_105 = $localize `:kendo.timeselector.now|The Now button text in the timeselector component␟98cba1ae36a7bbe15e1bac1837e07922ec109e7d␟1926162752852226109:Now`;
    } let i18n_107; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The label for the Now button in the timeselector component
         * @meaning kendo.timeselector.nowLabel
         */
        const MSG_EXTERNAL_7789175884909488647$$DIST_FESM2015_INDEX_JS_108 = goog.getMsg("Select now");
        i18n_107 = MSG_EXTERNAL_7789175884909488647$$DIST_FESM2015_INDEX_JS_108;
    }
    else {
        i18n_107 = $localize `:kendo.timeselector.nowLabel|The label for the Now button in the timeselector component␟08e6a8a51d970609e138950fdd89c5cf201869f3␟7789175884909488647:Select now`;
    } return [["kendoTimeSelectorLocalizedMessages", "", "accept", i18n_97, "acceptLabel", i18n_99, "cancel", i18n_101, "cancelLabel", i18n_103, "now", i18n_105, "nowLabel", i18n_107], [1, "k-time-header"], [1, "k-title", "k-timeselector-title"], ["type", "button", "class", "k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-time-now", 3, "kendoEventsOutsideAngular", "scope", "disabled", 4, "ngIf"], [1, "k-time-list-container"], [1, "k-time-highlight"], ["ngFor", "", 3, "ngForOf"], ["class", "k-time-footer k-action-buttons k-actions k-hstack k-justify-content-stretch", 4, "ngIf"], ["type", "button", 1, "k-button", "k-button-md", "k-rounded-md", "k-button-flat", "k-button-flat-base", "k-time-now", 3, "kendoEventsOutsideAngular", "scope", "disabled"], ["now", ""], ["class", "k-time-list-wrapper", "role", "presentation", "tabindex", "-1", 4, "ngIf"], ["class", "k-time-separator", 4, "ngIf"], ["role", "presentation", "tabindex", "-1", 1, "k-time-list-wrapper"], ["listWrapper", ""], [3, "min", "max", "part", "step", "disabled", "value", "kendoEventsOutsideAngular", "scope", "valueChange"], [1, "k-time-separator"], [1, "k-time-footer", "k-action-buttons", "k-actions", "k-hstack", "k-justify-content-stretch"], ["class", "k-button k-time-cancel k-button-md k-rounded-md k-button-solid k-button-solid-base", "type", "button", 3, "kendoEventsOutsideAngular", "scope", "disabled", 4, "ngIf"], ["type", "button", "class", "k-button k-time-accept k-button-md k-rounded-md k-button-solid k-button-solid-primary", 3, "kendoEventsOutsideAngular", "scope", "disabled", 4, "ngIf"], ["type", "button", 1, "k-button", "k-time-cancel", "k-button-md", "k-rounded-md", "k-button-solid", "k-button-solid-base", 3, "kendoEventsOutsideAngular", "scope", "disabled"], ["cancel", ""], ["type", "button", 1, "k-button", "k-time-accept", "k-button-md", "k-rounded-md", "k-button-solid", "k-button-solid-primary", 3, "kendoEventsOutsideAngular", "scope", "disabled"], ["accept", ""]]; }, template: function TimeSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1)(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, TimeSelectorComponent_button_4_Template, 3, 10, "button", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelement(6, "span", 5);
        ɵngcc0.ɵɵtemplate(7, TimeSelectorComponent_ng_template_7_Template, 2, 2, "ng-template", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, TimeSelectorComponent_div_8_Template, 3, 2, "div", 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.intl.formatDate(ctx.current, ctx.format), " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNowButton);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.dateFormatParts);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.setButton || ctx.cancelButton);
    } }, directives: function () { return [TimeSelectorLocalizedMessagesDirective, ɵngcc2.NgIf, ɵngcc4.EventsOutsideAngularDirective, ɵngcc2.NgForOf, TimeListComponent]; }, encapsulation: 2, changeDetection: 0 });
__decorate([
    ViewChild('accept', { static: false }),
    __metadata("design:type", ElementRef)
], TimeSelectorComponent.prototype, "accept", void 0);
__decorate([
    ViewChild('cancel', { static: false }),
    __metadata("design:type", ElementRef)
], TimeSelectorComponent.prototype, "cancel", void 0);
__decorate([
    ViewChild('now', { static: false }),
    __metadata("design:type", ElementRef)
], TimeSelectorComponent.prototype, "now", void 0);
__decorate([
    ViewChildren(TimeListComponent),
    __metadata("design:type", QueryList)
], TimeSelectorComponent.prototype, "timeLists", void 0);
__decorate([
    ViewChildren('listWrapper'),
    __metadata("design:type", QueryList)
], TimeSelectorComponent.prototype, "timeListWrappers", void 0);
__decorate([
    HostBinding('class.k-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], TimeSelectorComponent.prototype, "disabledClass", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimeSelectorComponent.prototype, "format", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeSelectorComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeSelectorComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimeSelectorComponent.prototype, "cancelButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimeSelectorComponent.prototype, "setButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimeSelectorComponent.prototype, "nowButton", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TimeSelectorComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TimeSelectorComponent.prototype, "steps", null);
__decorate([
    Input(),
    __metadata("design:type", Date)
], TimeSelectorComponent.prototype, "value", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimeSelectorComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimeSelectorComponent.prototype, "valueReject", void 0);
TimeSelectorComponent = __decorate([ __param(7, Optional()),
    __metadata("design:paramtypes", [LocalizationService,
        ChangeDetectorRef,
        ElementRef,
        IntlService,
        TimePickerDOMService,
        NgZone,
        Renderer2,
        PickerService])
], TimeSelectorComponent);

/**
 * @hidden
 */
class TimePickerMessages extends ComponentMessages {
}
TimePickerMessages.ɵfac = /*@__PURE__*/ function () { let ɵTimePickerMessages_BaseFactory; return function TimePickerMessages_Factory(t) { return (ɵTimePickerMessages_BaseFactory || (ɵTimePickerMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TimePickerMessages)))(t || TimePickerMessages); }; }();
TimePickerMessages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TimePickerMessages, inputs: { accept: "accept", acceptLabel: "acceptLabel", cancel: "cancel", cancelLabel: "cancelLabel", now: "now", nowLabel: "nowLabel", toggle: "toggle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "accept", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "acceptLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "cancel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "cancelLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "now", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "nowLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TimePickerMessages.prototype, "toggle", void 0);

var TimePickerLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let TimePickerLocalizedMessagesDirective = TimePickerLocalizedMessagesDirective_1 = class TimePickerLocalizedMessagesDirective extends TimePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
};
TimePickerLocalizedMessagesDirective.ɵfac = function TimePickerLocalizedMessagesDirective_Factory(t) { return new (t || TimePickerLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
TimePickerLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TimePickerLocalizedMessagesDirective, selectors: [["", "kendoTimePickerLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: TimePickerMessages,
                useExisting: forwardRef(() => TimePickerLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
TimePickerLocalizedMessagesDirective = TimePickerLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], TimePickerLocalizedMessagesDirective);

var TimePickerCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let TimePickerCustomMessagesComponent = TimePickerCustomMessagesComponent_1 = class TimePickerCustomMessagesComponent extends TimePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
TimePickerCustomMessagesComponent.ɵfac = function TimePickerCustomMessagesComponent_Factory(t) { return new (t || TimePickerCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
TimePickerCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimePickerCustomMessagesComponent, selectors: [["kendo-timepicker-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: TimePickerMessages,
                useExisting: forwardRef(() => TimePickerCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function TimePickerCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
TimePickerCustomMessagesComponent = TimePickerCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], TimePickerCustomMessagesComponent);

var TimeSelectorLocalizedMessagesDirective_1;
/**
 * @hidden
 */
let TimeSelectorLocalizedMessagesDirective = TimeSelectorLocalizedMessagesDirective_1 = class TimeSelectorLocalizedMessagesDirective extends TimePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
};
TimeSelectorLocalizedMessagesDirective.ɵfac = function TimeSelectorLocalizedMessagesDirective_Factory(t) { return new (t || TimeSelectorLocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
TimeSelectorLocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TimeSelectorLocalizedMessagesDirective, selectors: [["", "kendoTimeSelectorLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: TimePickerMessages,
                useExisting: forwardRef(() => TimeSelectorLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
TimeSelectorLocalizedMessagesDirective = TimeSelectorLocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], TimeSelectorLocalizedMessagesDirective);

var TimeSelectorCustomMessagesComponent_1;
/**
 * @hidden
 *
 * Custom component messages override default component messages.
 */
let TimeSelectorCustomMessagesComponent = TimeSelectorCustomMessagesComponent_1 = class TimeSelectorCustomMessagesComponent extends TimePickerMessages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
TimeSelectorCustomMessagesComponent.ɵfac = function TimeSelectorCustomMessagesComponent_Factory(t) { return new (t || TimeSelectorCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
TimeSelectorCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TimeSelectorCustomMessagesComponent, selectors: [["kendo-timeselector-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: TimePickerMessages,
                useExisting: forwardRef(() => TimeSelectorCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function TimeSelectorCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
TimeSelectorCustomMessagesComponent = TimeSelectorCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], TimeSelectorCustomMessagesComponent);

const COMPONENT_DIRECTIVES$2 = [
    TimePickerLocalizedMessagesDirective,
    TimeListComponent,
    TimePickerCustomMessagesComponent,
    TimePickerComponent,
    TimeSelectorLocalizedMessagesDirective,
    TimeSelectorCustomMessagesComponent,
    TimeSelectorComponent
];
const COMPONENT_MODULES$1 = [
    DateInputModule,
    IntlModule,
    PopupModule,
    VirtualizationModule,
    EventsModule
];
const ɵ0$o = touchEnabled;
const providers = [
    TimePickerDOMService,
    HoursService,
    MinutesService,
    SecondsService,
    MillisecondsService,
    DayPeriodService,
    {
        provide: TOUCH_ENABLED,
        useValue: ɵ0$o
    }
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the TimePicker component.
 */
let TimePickerModule = class TimePickerModule {
};
TimePickerModule.ɵfac = function TimePickerModule_Factory(t) { return new (t || TimePickerModule)(); };
TimePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TimePickerModule });
TimePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: providers, imports: [[CommonModule, ...COMPONENT_MODULES$1]] });

/**
 * @hidden
 */
class Messages$1 extends ComponentMessages {
}
Messages$1.ɵfac = /*@__PURE__*/ function () { let ɵMessages$1_BaseFactory; return function Messages$1_Factory(t) { return (ɵMessages$1_BaseFactory || (ɵMessages$1_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Messages$1)))(t || Messages$1); }; }();
Messages$1.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: Messages$1, inputs: { toggle: "toggle", dateTab: "dateTab", dateTabLabel: "dateTabLabel", timeTab: "timeTab", timeTabLabel: "timeTabLabel", accept: "accept", acceptLabel: "acceptLabel", cancel: "cancel", cancelLabel: "cancelLabel", today: "today", now: "now", nowLabel: "nowLabel", prevButtonTitle: "prevButtonTitle", nextButtonTitle: "nextButtonTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "toggle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "dateTab", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "dateTabLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "timeTab", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "timeTabLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "accept", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "acceptLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "cancel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "cancelLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "today", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "now", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "nowLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "prevButtonTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages$1.prototype, "nextButtonTitle", void 0);

var DateTimePickerCustomMessagesComponent_1;
/**
 * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).
 */
let DateTimePickerCustomMessagesComponent = DateTimePickerCustomMessagesComponent_1 = class DateTimePickerCustomMessagesComponent extends Messages$1 {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
DateTimePickerCustomMessagesComponent.ɵfac = function DateTimePickerCustomMessagesComponent_Factory(t) { return new (t || DateTimePickerCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
DateTimePickerCustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateTimePickerCustomMessagesComponent, selectors: [["kendo-datetimepicker-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$1,
                useExisting: forwardRef(() => DateTimePickerCustomMessagesComponent_1)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DateTimePickerCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
DateTimePickerCustomMessagesComponent = DateTimePickerCustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], DateTimePickerCustomMessagesComponent);

var LocalizedMessagesDirective_1;
/**
 * @hidden
 */
let LocalizedMessagesDirective = LocalizedMessagesDirective_1 = class LocalizedMessagesDirective extends Messages$1 {
    constructor(service) {
        super();
        this.service = service;
    }
};
LocalizedMessagesDirective.ɵfac = function LocalizedMessagesDirective_Factory(t) { return new (t || LocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LocalizationService)); };
LocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective, selectors: [["", "kendoDateTimePickerLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$1,
                useExisting: forwardRef(() => LocalizedMessagesDirective_1)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
LocalizedMessagesDirective = LocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], LocalizedMessagesDirective);

const COMPONENT_DIRECTIVES$3 = [
    DateTimePickerComponent,
    DateTimePickerCustomMessagesComponent,
    LocalizedMessagesDirective
];
const ɵ0$p = touchEnabled;
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the DateTimePicker component.
 */
let DateTimePickerModule = class DateTimePickerModule {
};
DateTimePickerModule.ɵfac = function DateTimePickerModule_Factory(t) { return new (t || DateTimePickerModule)(); };
DateTimePickerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateTimePickerModule });
DateTimePickerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        { provide: TOUCH_ENABLED, useValue: ɵ0$p }
    ], imports: [[
            CommonModule,
            IntlModule,
            DateInputModule,
            CalendarModule,
            TimePickerModule,
            PopupModule,
            EventsModule,
            TemplatesModule
        ], TemplatesModule] });

const COMPONENT_MODULES$2 = [
    CalendarsModule,
    DateInputModule,
    DatePickerModule,
    TimePickerModule,
    DateRangeModule,
    DateTimePickerModule
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Date Inputs components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Date Inputs module
 * import { DateInputsModule } from '@progress/kendo-angular-dateinputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, DateInputsModule], // import the Date Inputs module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let DateInputsModule = class DateInputsModule {
};
DateInputsModule.ɵfac = function DateInputsModule_Factory(t) { return new (t || DateInputsModule)(); };
DateInputsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateInputsModule });
DateInputsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [COMPONENT_MODULES$2, CalendarsModule, DateInputModule, DatePickerModule, TimePickerModule, DateRangeModule, DateTimePickerModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CenturyViewService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DecadeViewService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MonthViewService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YearViewService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BusViewService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WeekNamesService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HorizontalViewListComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-horizontal',
                template: `
        <ng-template #tableTemplate let-date="date" let-class="className">
            <table
                role="grid"
                class="k-content k-calendar-content k-calendar-table"
                [ngClass]="class"
            >
                <caption *ngIf="showViewHeader" [ngClass]="getCaptionClass()">{{ getCaptionTitle(date) }}</caption>
                <thead *ngIf="isMonthView()" class="k-calendar-thead">
                    <tr class="k-calendar-tr" role="row">
                        <th *ngFor="let name of weekNames" class="k-calendar-th">{{name}}</th>
                    </tr>
                </thead>
                <tbody
                    class="k-calendar-tbody"
                    kendoCalendarView
                    role="rowgroup"
                    direction="horizontal"
                    [activeView]="activeView"
                    [isActive]="isActive"
                    [min]="min"
                    [max]="max"
                    [cellUID]="cellUID"
                    [focusedDate]="focusedDate"
                    [selectedDates]="selectedDates"
                    [selectionRange]="selectionRange"
                    [activeRangeEnd]="activeRangeEnd"
                    [weekNumber]="weekNumber"
                    [templateRef]="cellTemplateRef"
                    [weekNumberTemplateRef]="weekNumberTemplateRef"
                    [viewDate]="date"
                    (cellClick)="cellClick.emit($event)"
                    (weekNumberCellClick)="weekNumberCellClick.emit($event)"
                    (cellEnter)="cellEnter.emit($event)"
                    (cellLeave)="cellLeave.emit($event)"
                >
                </tbody>
            </table>
        </ng-template>

        <!-- When Next is clicked a placeholder table is rendered before the Main Table -->
        <ng-template
            *ngIf="nextAnimationDate"
            [ngTemplateOutlet]="tableTemplate"
            [ngTemplateOutletContext]="{
                date: nextAnimationDate,
                className: 'k-pointer-events-none'
            }"
        >
        </ng-template>

        <ng-template
            *kFor="let date of dates"
            [ngTemplateOutlet]="tableTemplate"
            [ngTemplateOutletContext]="{
                date: date
            }"
        >
        </ng-template>

        <!-- When Prev is clicked a placeholder table is rendered after the Main Table -->
        <ng-template
            *ngIf="prevAnimationDate"
            [ngTemplateOutlet]="tableTemplate"
            [ngTemplateOutletContext]="{
                date: prevAnimationDate,
                className: 'k-pointer-events-none'
            }"
        >
        </ng-template>
    `
            }]
    }], function () { return [{ type: BusViewService }, { type: ɵngcc1.IntlService }, { type: WeekNamesService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { activeView: [{
            type: Input
        }], isActive: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], selectedDates: [{
            type: Input
        }], views: [{
            type: Input
        }], showViewHeader: [{
            type: Input
        }], animateNavigation: [{
            type: Input
        }], cellClick: [{
            type: Output
        }], weekNumberCellClick: [{
            type: Output
        }], cellEnter: [{
            type: Output
        }], cellLeave: [{
            type: Output
        }], activeDateChange: [{
            type: Output
        }], getComponentClass: [{
            type: HostBinding,
            args: ["class.k-calendar-view"]
        }, {
            type: HostBinding,
            args: ["class.k-hstack"]
        }, {
            type: HostBinding,
            args: ["class.k-align-items-start"]
        }, {
            type: HostBinding,
            args: ["class.k-justify-content-center"]
        }], weekNumber: [{
            type: Input
        }], getComponentMonthClass: [{
            type: HostBinding,
            args: ["class.k-calendar-monthview"]
        }], getComponentYearClass: [{
            type: HostBinding,
            args: ["class.k-calendar-yearview"]
        }], getComponentDecadeClass: [{
            type: HostBinding,
            args: ["class.k-calendar-decadeview"]
        }], getComponentCenturyClass: [{
            type: HostBinding,
            args: ["class.k-calendar-centuryview"]
        }], focusedDate: [{
            type: Input
        }], cellTemplateRef: [{
            type: Input
        }], weekNumberTemplateRef: [{
            type: Input
        }], activeRangeEnd: [{
            type: Input
        }], cellUID: [{
            type: Input
        }], selectionRange: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DisabledDatesService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-calendar-header',
                template: `
    <span class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-calendar-title" [class.k-disabled]="!navigate"
        [kendoEventsOutsideAngular]="{
            click: handleNavigation
        }"
        [scope]="this">
        <ng-template [ngIf]="!templateRef">{{title}}</ng-template>
        <ng-template
            [ngIf]="templateRef"
            [ngTemplateOutlet]="templateRef"
            [ngTemplateOutletContext]="{ $implicit: title, activeView: activeViewValue, date: currentDate }"
        ></ng-template>
    </span>
    <span class="k-spacer"></span>
    <span class="k-calendar-nav k-hstack">
        <button
            *ngIf="showNavigationButtons"
            class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-prev-view"
            type="button"
            [attr.aria-disabled]="isPrevDisabled"
            [disabled]="isPrevDisabled"
            [title]="prevButtonTitle"
            (click)="prevButtonClick.emit()"
        >
            <span class="k-icon k-i-arrow-60-left"></span>
        </button>
        <span
            class="k-today k-nav-today"
            [class.k-disabled]="!todayAvailable"
            [kendoEventsOutsideAngular]="{
                click: handleTodayClick
            }"
            [scope]="this"
        >
            {{ todayMessage }}
        </span>
        <button
            *ngIf="showNavigationButtons"
            class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-next-view"
            type="button"
            [attr.aria-disabled]="isNextDisabled"
            [disabled]="isNextDisabled"
            [title]="nextButtonTitle"
            (click)="nextButtonClick.emit()"
        >
            <span class="k-icon k-i-arrow-60-right"></span>
        </button>
    </span>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.LocalizationService }, { type: ɵngcc1.IntlService }, { type: DisabledDatesService }]; }, { min: [{
            type: Input
        }], max: [{
            type: Input
        }], rangeLength: [{
            type: Input
        }], isPrevDisabled: [{
            type: Input
        }], isNextDisabled: [{
            type: Input
        }], showNavigationButtons: [{
            type: Input
        }], todayButtonClick: [{
            type: Output
        }], prevButtonClick: [{
            type: Output
        }], nextButtonClick: [{
            type: Output
        }], getComponentClass: [{
            type: HostBinding,
            args: ["class.k-calendar-header"]
        }, {
            type: HostBinding,
            args: ["class.k-hstack"]
        }], activeView: [{
            type: Input
        }], currentDate: [{
            type: Input
        }], templateRef: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return [{ type: BusViewService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectionService, [{
        type: Injectable
    }], function () { return [{ type: BusViewService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MonthCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarMonthCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YearCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarYearCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DecadeCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarDecadeCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CenturyCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarCenturyCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WeekNumberCellTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarWeekNumberCellTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderTitleTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarHeaderTitleTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiViewCalendarComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-multiviewcalendar',
                providers: [
                    BusViewService,
                    RANGE_CALENDAR_VALUE_ACCESSOR,
                    RANGE_CALENDAR_RANGE_VALIDATORS,
                    LocalizationService,
                    DisabledDatesService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.multiviewcalendar'
                    },
                    NavigationService,
                    SelectionService
                ],
                selector: 'kendo-multiviewcalendar',
                template: `
    <ng-container kendoMultiViewCalendarLocalizedMessages
        i18n-today="kendo.multiviewcalendar.today|The label for the today button in the calendar header"
        today="Today"

        i18n-prevButtonTitle="kendo.multiviewcalendar.prevButtonTitle|The label for the previous button in the Multiview calendar"
        prevButtonTitle="Navigate to previous view"

        i18n-nextButtonTitle="kendo.multiviewcalendar.nextButtonTitle|The label for the next button in the Multiview calendar"
        nextButtonTitle="Navigate to next view"
    >
    </ng-container>
    <kendo-calendar-header
        [activeView]="activeViewEnum"
        [currentDate]="activeDate"
        [min]="min"
        [max]="max"
        [rangeLength]="views"
        [templateRef]="headerTitleTemplateRef?.templateRef"
        [isPrevDisabled]="isPrevDisabled"
        [isNextDisabled]="isNextDisabled"
        [showNavigationButtons]="true"
        (todayButtonClick)="handleTodayButtonClick({ selectedDates: [$event], focusedDate: $event })"
        (prevButtonClick)="navigateView(prevView)"
        (nextButtonClick)="navigateView(nextView)"
        [kendoEventsOutsideAngular]="{
            focusin: handleHeaderFocus
        }"
        [scope]="this"
    >
    </kendo-calendar-header>
    <kendo-calendar-horizontal
        [activeView]="activeViewEnum"
        [isActive]="isActive || (isHovered && !isHeaderActive)"
        [cellTemplateRef]="activeCellTemplate()?.templateRef"
        [weekNumberTemplateRef]="weekNumberTemplateRef?.templateRef"
        [cellUID]="cellUID"
        [views]="views"
        [min]="min"
        [max]="max"
        [focusedDate]="focusedDate"
        [animateNavigation]="animateNavigation"
        [showViewHeader]="showViewHeader"
        [weekNumber]="weekNumber"
        [activeRangeEnd]="activeRangeEnd"
        [selectionRange]="selectionRange"
        [selectedDates]="selectedDates"
        (valueChange)="handleDateChange($event)"
        (cellClick)="handleCellClick($event)"
        (weekNumberCellClick)="handleWeekNumberClick($event)"
        (cellEnter)="emitCellEvent(cellEnter, $event)"
        (cellLeave)="emitCellEvent(cellLeave, $event)"
        (activeDateChange)="setActiveDate($event)"
    >
    </kendo-calendar-horizontal>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: ɵngcc0.ElementRef }, { type: NavigationService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: DisabledDatesService }, { type: SelectionService }, { type: PickerService, decorators: [{
                type: Optional
            }] }]; }, { id: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], disabledDatesRangeValidation: [{
            type: Input
        }], selection: [{
            type: Input
        }], disabled: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], isActive: [{
            type: Input
        }], activeView: [{
            type: Input
        }], bottomView: [{
            type: Input
        }], topView: [{
            type: Input
        }], showViewHeader: [{
            type: Input
        }], animateNavigation: [{
            type: Input
        }], weekNumber: [{
            type: Input
        }], views: [{
            type: Input
        }], activeViewChange: [{
            type: Output
        }], navigate: [{
            type: Output
        }], cellEnter: [{
            type: Output
        }], cellLeave: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], blurEvent: [{
            type: Output,
            args: ['blur']
        }], focusedDate: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], value: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], disabledDates: [{
            type: Input
        }], selectionRange: [{
            type: Input
        }], cellTemplateRef: [{
            type: Input,
            args: ['cellTemplate']
        }], monthCellTemplateRef: [{
            type: Input,
            args: ['monthCellTemplate']
        }], yearCellTemplateRef: [{
            type: Input,
            args: ['yearCellTemplate']
        }], decadeCellTemplateRef: [{
            type: Input,
            args: ['decadeCellTemplate']
        }], centuryCellTemplateRef: [{
            type: Input,
            args: ['centuryCellTemplate']
        }], weekNumberTemplateRef: [{
            type: Input,
            args: ['weekNumberTemplate']
        }], headerTitleTemplateRef: [{
            type: Input,
            args: ['headerTitleTemplate']
        }], widgetId: [{
            type: HostBinding,
            args: ['attr.id']
        }], calendarTabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }, {
            type: HostBinding,
            args: ['class.k-disabled']
        }], ariaActivedescendant: [{
            type: HostBinding,
            args: ['attr.aria-activedescendant']
        }], 
    /**
     * @hidden
     */
    handleFocusout: [{
            type: HostListener,
            args: ['focusout', ['$event']]
        }], 
    /**
     * @hidden
     */
    handleFocus: [{
            type: HostListener,
            args: ["focus"]
        }], 
    /**
     * @hidden
     */
    handleMouseEnter: [{
            type: HostListener,
            args: ["mouseenter"]
        }], 
    /**
     * @hidden
     */
    handleMouseLeave: [{
            type: HostListener,
            args: ["mouseleave"]
        }], 
    /**
     * @hidden
     */
    handleMousedown: [{
            type: HostListener,
            args: ["mousedown", ['$event']]
        }], 
    /**
     * @hidden
     */
    handleClick: [{
            type: HostListener,
            args: ["click"]
        }], 
    /**
     * @hidden
     */
    keydown: [{
            type: HostListener,
            args: ["keydown", ["$event"]]
        }], activeRangeEnd: [{
            type: Input
        }], cellTemplate: [{
            type: ContentChild,
            args: [CellTemplateDirective, { static: false }]
        }], monthCellTemplate: [{
            type: ContentChild,
            args: [MonthCellTemplateDirective, { static: false }]
        }], yearCellTemplate: [{
            type: ContentChild,
            args: [YearCellTemplateDirective, { static: false }]
        }], decadeCellTemplate: [{
            type: ContentChild,
            args: [DecadeCellTemplateDirective, { static: false }]
        }], centuryCellTemplate: [{
            type: ContentChild,
            args: [CenturyCellTemplateDirective, { static: false }]
        }], weekNumberTemplate: [{
            type: ContentChild,
            args: [WeekNumberCellTemplateDirective, { static: false }]
        }], headerTitleTemplate: [{
            type: ContentChild,
            args: [HeaderTitleTemplateDirective, { static: false }]
        }], headerElement: [{
            type: ViewChild,
            args: [HeaderComponent, { static: false, read: ElementRef }]
        }], viewList: [{
            type: ViewChild,
            args: [HorizontalViewListComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarDOMService, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VirtualizationComponent, [{
        type: Component,
        args: [{
                providers: [{
                        provide: SCROLLER_FACTORY_TOKEN,
                        useValue: DEFAULT_SCROLLER_FACTORY
                    }],
                selector: 'kendo-virtualization',
                template: `
    <ng-content></ng-content>
    <div
        class="k-scrollable-placeholder"
        [class.k-scrollable-horizontal-placeholder]="direction === 'horizontal'"
        [ngStyle]="totalVertexLength"
    ></div>
  `
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [SCROLLER_FACTORY_TOKEN]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { direction: [{
            type: Input
        }], itemHeight: [{
            type: Input
        }], itemWidth: [{
            type: Input
        }], topOffset: [{
            type: Input
        }], bottomOffset: [{
            type: Input
        }], maxScrollDifference: [{
            type: Input
        }], scrollOffsetSize: [{
            type: Input
        }], scrollDuration: [{
            type: Input
        }], activeIndexChange: [{
            type: Output
        }], pageChange: [{
            type: Output
        }], scrollChange: [{
            type: Output
        }], wrapperClasses: [{
            type: HostBinding,
            args: ['class.k-flex']
        }, {
            type: HostBinding,
            args: ['class.k-content']
        }, {
            type: HostBinding,
            args: ['class.k-calendar-content']
        }, {
            type: HostBinding,
            args: ['class.k-scrollable']
        }], horizontalClass: [{
            type: HostBinding,
            args: ['class.k-scrollable-horizontal']
        }], skip: [{
            type: Input
        }], take: [{
            type: Input
        }], total: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-navigation',
                template: `
    <span class="k-calendar-navigation-highlight"></span>
    <kendo-virtualization
        [skip]="skip"
        [take]="take"
        [total]="total"
        [itemHeight]="itemHeight"
        [topOffset]="topOffset"
        [bottomOffset]="bottomOffset"
        [maxScrollDifference]="maxViewHeight"
        (pageChange)="onPageChange($event)"
        (scrollChange)="scrollChange($event)"
    >
        <ul #list class="k-reset" [kendoEventsOutsideAngular]="{ click: handleDateChange }" [scope]="this">
            <li *kFor="let date of dates; let index=index" [attr.data-date-index]="index">
                <span [class.k-calendar-navigation-marker]="service.isRangeStart(date)">
                    <ng-template [ngIf]="!templateRef">{{service.navigationTitle(date)}}</ng-template>
                    <ng-template
                        [ngIf]="templateRef"
                        [ngTemplateOutlet]="templateRef"
                        [ngTemplateOutletContext]="{ $implicit: service.navigationTitle(date), activeView: activeViewValue, date: date }"
                    ></ng-template>
                </span>
            </li>
        </ul>
    </kendo-virtualization>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: CalendarDOMService }, { type: ɵngcc1.IntlService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }]; }, { min: [{
            type: Input
        }], max: [{
            type: Input
        }], focusedDate: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], pageChange: [{
            type: Output
        }], getComponentClass: [{
            type: HostBinding,
            args: ["class.k-calendar-navigation"]
        }], activeView: [{
            type: Input
        }], templateRef: [{
            type: Input
        }], virtualization: [{
            type: ViewChild,
            args: [VirtualizationComponent, { static: false }]
        }], list: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewListComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-viewlist',
                template: `
    <kendo-calendar-header
        [currentDate]="activeDate"
        [min]="min"
        [max]="max"
        [activeView]="activeView"
        [templateRef]="headerTitleTemplateRef"
        (todayButtonClick)="todayButtonClick.emit($event)"
    >
    </kendo-calendar-header>
    <table class="k-calendar-weekdays k-calendar-table" style="table-layout: auto;" *ngIf="isMonthView()">
        <thead class="k-calendar-thead">
            <tr class="k-calendar-tr">
                <th class="k-calendar-th" *ngFor="let name of weekNames" [style.width.%]="colWidth">{{name}}</th>
            </tr>
        </thead>
    </table>
    <kendo-virtualization
        [tabindex]="-1"
        [skip]="skip"
        [take]="take"
        [total]="total"
        [itemHeight]="viewHeight"
        [topOffset]="viewOffset"
        [bottomOffset]="bottomOffset"
        [scrollOffsetSize]="viewOffset"
        [maxScrollDifference]="viewHeight"
        (pageChange)="onPageChange($event)"
        (scrollChange)="scrollChange($event)"
        (activeIndexChange)="setActiveDate($event)"
        >
        <table
            #list
            role="grid"
            class="k-calendar-table"
        >
            <colgroup><col *ngFor="let _ of cols" /></colgroup>

            <tbody class="k-calendar-tbody"
                   *kFor="let date of dates"
                   kendoCalendarView
                   role="rowgroup"
                   [activeView]="activeView"
                   [isActive]="isActive"
                   [min]="min" [max]="max"
                   [cellUID]="cellUID"
                   [focusedDate]="focusedDate"
                   [selectedDates]="selectedDates"
                   [weekNumber]="weekNumber"
                   [templateRef]="cellTemplateRef"
                   [weekNumberTemplateRef]="weekNumberTemplateRef"
                   [viewDate]="date"
                   (cellClick)="cellClick.emit($event)"
                   (weekNumberCellClick)="weekNumberCellClick.emit($event)"
            ></tbody>
        </table>
    </kendo-virtualization>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IntlService }, { type: CalendarDOMService }, { type: ɵngcc0.Renderer2 }]; }, { isActive: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], selectedDates: [{
            type: Input
        }], cellClick: [{
            type: Output
        }], weekNumberCellClick: [{
            type: Output
        }], activeDateChange: [{
            type: Output
        }], todayButtonClick: [{
            type: Output
        }], pageChange: [{
            type: Output
        }], getComponentClass: [{
            type: HostBinding,
            args: ["class.k-vstack"]
        }, {
            type: HostBinding,
            args: ["class.k-calendar-view"]
        }], weekNumber: [{
            type: Input
        }], getComponentMonthClass: [{
            type: HostBinding,
            args: ["class.k-calendar-monthview"]
        }], getComponentYearClass: [{
            type: HostBinding,
            args: ["class.k-calendar-yearview"]
        }], getComponentDecadeClass: [{
            type: HostBinding,
            args: ["class.k-calendar-decadeview"]
        }], getComponentCenturyClass: [{
            type: HostBinding,
            args: ["class.k-calendar-centuryview"]
        }], cellTemplateRef: [{
            type: Input
        }], weekNumberTemplateRef: [{
            type: Input
        }], headerTitleTemplateRef: [{
            type: Input
        }], activeView: [{
            type: Input
        }], cellUID: [{
            type: Input
        }], focusedDate: [{
            type: Input
        }], virtualization: [{
            type: ViewChild,
            args: [VirtualizationComponent, { static: false }]
        }], list: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollSyncService, [{
        type: Injectable
    }], function () { return [{ type: CalendarDOMService }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoCalendarNavigationItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-calendar',
                providers: [
                    BusViewService,
                    CALENDAR_VALUE_ACCESSOR,
                    CALENDAR_RANGE_VALIDATORS,
                    KENDO_INPUT_PROVIDER,
                    LocalizationService,
                    DisabledDatesService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.calendar'
                    },
                    NavigationService,
                    ScrollSyncService,
                    SelectionService
                ],
                selector: 'kendo-calendar',
                template: `
    <ng-container kendoCalendarLocalizedMessages
        i18n-today="kendo.calendar.today|The label for the today button in the calendar header"
        today="Today"

        i18n-prevButtonTitle="kendo.calendar.prevButtonTitle|The title of the previous button in the Classic calendar"
        prevButtonTitle="Navigate to previous view"

        i18n-nextButtonTitle="kendo.calendar.nextButtonTitle|The title of the next button in the Classic calendar"
        nextButtonTitle="Navigate to next view"
    >
    </ng-container>
    <ng-container *ngIf="type === 'infinite'">
        <kendo-calendar-navigation
            *ngIf="navigation"
            [activeView]="activeViewEnum"
            [focusedDate]="focusedDate"
            [min]="min"
            [max]="max"
            [templateRef]="navigationItemTemplateRef?.templateRef"
            (valueChange)="handleNavigation($event)"
            (pageChange)="onPageChange()"
        >
        </kendo-calendar-navigation>
        <kendo-calendar-viewlist
            [activeView]="activeViewEnum"
            [isActive]="isActive"
            [cellTemplateRef]="activeCellTemplate()?.templateRef"
            [headerTitleTemplateRef]="headerTitleTemplateRef?.templateRef"
            [weekNumberTemplateRef]="weekNumberTemplateRef?.templateRef"
            [cellUID]="cellUID"
            [min]="min"
            [max]="max"
            [focusedDate]="focusedDate"
            [weekNumber]="weekNumber"
            [selectedDates]="selectedDates"
            (todayButtonClick)="handleDateChange({
                selectedDates: [$event],
                focusedDate: $event
            })"
            (cellClick)="handleCellClick($event)"
            (weekNumberCellClick)="handleWeekNumberClick($event)"
            (activeDateChange)="handleActiveDateChange($event)"
            (pageChange)="onPageChange()"
        >
        </kendo-calendar-viewlist>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
    </ng-container>
    <ng-container *ngIf="type === 'classic'">
        <kendo-multiviewcalendar
            #multiviewcalendar
            [views]="1"
            [min]="min"
            [max]="max"
            [isActive]="isActive"
            [activeView]="activeView"
            [bottomView]="bottomView"
            [topView]="topView"
            [weekNumber]="weekNumber"
            [animateNavigation]="animateNavigation"
            [cellTemplate]="activeCellTemplate()"
            [monthCellTemplate]="monthCellTemplateRef"
            [yearCellTemplate]="yearCellTemplateRef"
            [decadeCellTemplate]="decadeCellTemplateRef"
            [centuryCellTemplate]="centuryCellTemplateRef"
            [headerTitleTemplate]="headerTitleTemplateRef"
            [weekNumberTemplate]="weekNumberTemplateRef"
            [focusedDate]="focusedDate"
            [selection]="selection"
            [value]="value"
            [disabledDates]="disabledDates"
            (activeViewChange)="handleActiveViewChange($event)"
            (navigate)="handleNavigate($event)"
            (valueChange)="handleMultiViewCalendarValueChange($event, multiviewcalendar.focusedDate)"
            (focus)="handleFocus()"
            (blur)="handleBlur($event)"
        >
            <kendo-multiviewcalendar-messages
                [today]="localization.get('today')"
                [prevButtonTitle]="localization.get('prevButtonTitle')"
                [nextButtonTitle]="localization.get('nextButtonTitle')"
            >
            </kendo-multiviewcalendar-messages>
        </kendo-multiviewcalendar>
    </ng-container>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: CalendarDOMService }, { type: ɵngcc0.ElementRef }, { type: NavigationService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScrollSyncService }, { type: DisabledDatesService }, { type: ɵngcc3.LocalizationService }, { type: SelectionService }, { type: PickerService, decorators: [{
                type: Optional
            }] }]; }, { id: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], selection: [{
            type: Input
        }], disabled: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], navigation: [{
            type: Input
        }], activeView: [{
            type: Input
        }], bottomView: [{
            type: Input
        }], topView: [{
            type: Input
        }], animateNavigation: [{
            type: Input
        }], weekNumber: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.k-week-number']
        }], activeViewChange: [{
            type: Output
        }], navigate: [{
            type: Output
        }], activeViewDateChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], focusedDate: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], value: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], disabledDates: [{
            type: Input
        }], type: [{
            type: Input
        }], cellTemplateRef: [{
            type: Input,
            args: ['cellTemplate']
        }], monthCellTemplateRef: [{
            type: Input,
            args: ['monthCellTemplate']
        }], yearCellTemplateRef: [{
            type: Input,
            args: ['yearCellTemplate']
        }], decadeCellTemplateRef: [{
            type: Input,
            args: ['decadeCellTemplate']
        }], centuryCellTemplateRef: [{
            type: Input,
            args: ['centuryCellTemplate']
        }], weekNumberTemplateRef: [{
            type: Input,
            args: ['weekNumberTemplate']
        }], headerTitleTemplateRef: [{
            type: Input,
            args: ['headerTitleTemplate']
        }], navigationItemTemplateRef: [{
            type: Input,
            args: ['navigationItemTemplate']
        }], widgetId: [{
            type: HostBinding,
            args: ['attr.id']
        }], calendarTabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }, {
            type: HostBinding,
            args: ['class.k-disabled']
        }], cellTemplate: [{
            type: ContentChild,
            args: [CellTemplateDirective, { static: false }]
        }], monthCellTemplate: [{
            type: ContentChild,
            args: [MonthCellTemplateDirective, { static: false }]
        }], yearCellTemplate: [{
            type: ContentChild,
            args: [YearCellTemplateDirective, { static: false }]
        }], decadeCellTemplate: [{
            type: ContentChild,
            args: [DecadeCellTemplateDirective, { static: false }]
        }], centuryCellTemplate: [{
            type: ContentChild,
            args: [CenturyCellTemplateDirective, { static: false }]
        }], weekNumberTemplate: [{
            type: ContentChild,
            args: [WeekNumberCellTemplateDirective, { static: false }]
        }], headerTitleTemplate: [{
            type: ContentChild,
            args: [HeaderTitleTemplateDirective, { static: false }]
        }], navigationItemTemplate: [{
            type: ContentChild,
            args: [NavigationItemTemplateDirective, { static: false }]
        }], navigationView: [{
            type: ViewChild,
            args: [NavigationComponent, { static: false }]
        }], monthView: [{
            type: ViewChild,
            args: [ViewListComponent, { static: false }]
        }], multiViewCalendar: [{
            type: ViewChild,
            args: [MultiViewCalendarComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateInputComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-dateinput',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateInputComponent_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateInputComponent_1), multi: true },
                    { provide: L10N_PREFIX, useValue: 'kendo.dateinput' },
                    { provide: KendoInput, useExisting: forwardRef(() => DateInputComponent_1) },
                    LocalizationService
                ],
                selector: 'kendo-dateinput',
                template: `
    <ng-container kendoDateInputLocalizedMessages
        i18n-increment="kendo.dateinput.increment|The label for the **Increment** button in the DateInput"
        increment="Increase value"

        i18n-decrement="kendo.dateinput.decrement|The label for the **Decrement** button in the DateInput"
        decrement="Decrease value"
    >
    </ng-container>
    <input
        #dateInput
        autocomplete="off"
        autocorrect="off"
        autocapitalize="off"
        spellcheck="false"
        class="k-input-inner"
        [attr.role]="role"
        [attr.aria-readonly]="ariaReadOnly"
        [id]="focusableId"
        [title]="title"
        [tabindex]="tabindex"
        [disabled]="disabled"
        [readonly]="readonly"
        [placeholder]="placeholder"
        [attr.aria-expanded]="isPopupOpen"
        [attr.aria-haspopup]="hasPopup"
        [kendoEventsOutsideAngular]="{
            click: handleClick,
            focus: handleFocus,
            mousedown: handleMousedown,
            touchstart: handleMousedown,
            dragstart: handleDragAndDrop,
            drop: handleDragAndDrop,
            blur: handleBlur
        }"
        [scope]="this"
        />
    <span *ngIf="spinners" class="k-input-spinner k-spin-button" (mousedown)="$event.preventDefault()">
        <button
            #spinup
            tabindex="-1"
            class="k-spinner-increase k-button k-icon-button"
            [class.k-active]="arrowDirection === arrow.Up"
            (mousedown)="arrowDirection = arrow.Up"
            (mouseleave)="arrowDirection = arrow.None"
            (click)="handleButtonClick(1)"
            [title]="localization.get('increment')"
            [attr.aria-label]="localization.get('increment')">
            <span class="k-button-icon k-icon k-i-arrow-n"></span>
        </button>
        <button
            #spindown
            tabindex="-1"
            class="k-spinner-decrease k-button k-icon-button"
            (click)="handleButtonClick(-1)"
            [class.k-active]="arrowDirection === arrow.Down"
            (mousedown)="arrowDirection = arrow.Down"
            (mouseleave)="arrowDirection = arrow.None"
            [title]="localization.get('decrement')"
            [attr.aria-label]="localization.get('decrement')">
            <span class="k-button-icon k-icon k-i-arrow-s"></span>
        </button>
    </span>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IntlService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ɵngcc3.LocalizationService }, { type: PickerService, decorators: [{
                type: Optional
            }] }]; }, { focusableId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], title: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], role: [{
            type: Input
        }], ariaReadOnly: [{
            type: Input
        }], format: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], steps: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], autoCorrect: [{
            type: Input
        }], incompleteDateValidation: [{
            type: Input
        }], twoDigitYearMax: [{
            type: Input
        }], spinners: [{
            type: Input
        }], isPopupOpen: [{
            type: Input
        }], hasPopup: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], valueUpdate: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], tabIndex: [{
            type: Input
        }], value: [{
            type: Input
        }], size: [{
            type: Input
        }], rounded: [{
            type: Input
        }], fillMode: [{
            type: Input
        }], wrapperClass: [{
            type: HostBinding,
            args: ['class.k-input']
        }, {
            type: HostBinding,
            args: ['class.k-dateinput']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-disabled']
        }], formatPlaceholder: [{
            type: Input
        }], max: [{
            type: Input
        }], min: [{
            type: Input
        }], dateInput: [{
            type: ViewChild,
            args: ['dateInput', { static: true }]
        }], spinup: [{
            type: ViewChild,
            args: ['spinup', { static: false }]
        }], spindown: [{
            type: ViewChild,
            args: ['spindown', { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-datepicker',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatePickerComponent_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => DatePickerComponent_1), multi: true },
                    { provide: KendoInput, useExisting: forwardRef(() => DatePickerComponent_1) },
                    LocalizationService,
                    PickerService,
                    DisabledDatesService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.datepicker'
                    }
                ],
                selector: 'kendo-datepicker',
                template: `
        <ng-container kendoDatePickerLocalizedMessages
            i18n-today="kendo.datepicker.today|The label for the today button in the calendar header"
            today="Today"

            i18n-toggle="kendo.datepicker.toggle|The title of the toggle button in the datepicker component"
            toggle="Toggle calendar"

            i18n-prevButtonTitle="kendo.datepicker.prevButtonTitle|The title of the previous button in the Classic calendar"
            prevButtonTitle="Navigate to previous view"

            i18n-nextButtonTitle="kendo.datepicker.nextButtonTitle|The title of the next button in the Classic calendar"
            nextButtonTitle="Navigate to next view"
        >
        </ng-container>
        <kendo-dateinput
            #input
            [role]="inputRole"
            [focusableId]="focusableId"
            [hasPopup]="true"
            [isPopupOpen]="show"
            [disabled]="disabled"
            [readonly]="readonly || readOnlyInput"
            [ariaReadOnly]="readonly"
            [tabindex]="tabindex"
            [title]="title"
            [format]="format"
            [twoDigitYearMax]="twoDigitYearMax"
            [formatPlaceholder]="formatPlaceholder"
            [placeholder]="placeholder"
            [min]="min"
            [max]="max"
            [incompleteDateValidation]="incompleteDateValidation"
            [fillMode]="null"
            [rounded]="null"
            [size]="null"
            [value]="value"
            (valueChange)="handleInputChange($event)"
        ></kendo-dateinput>
        <button
            #toggleButton
            type="button"
            class="k-input-button k-button k-icon-button"
            [tabindex]="-1"
            [attr.title]="localization.get('toggle')"
            [attr.aria-label]="localization.get('toggle')"
            [kendoEventsOutsideAngular]="{
                click: handleIconClick,
                mousedown: handleMousedown
            }"
            [scope]="this"
        >
            <span class="k-button-icon k-icon k-i-calendar"></span>
        </button>
        <ng-container #container></ng-container>
        <ng-template #popupTemplate>
            <kendo-calendar
                #calendar
                [type]="calendarType"
                [min]="min"
                [max]="max"
                [navigation]="navigation"
                [animateNavigation]="animateCalendarNavigation"
                [activeView]="activeView"
                [bottomView]="bottomView"
                [topView]="topView"
                [weekNumber]="weekNumber"
                [cellTemplate]="cellTemplate"
                [monthCellTemplate]="monthCellTemplate"
                [yearCellTemplate]="yearCellTemplate"
                [decadeCellTemplate]="decadeCellTemplate"
                [centuryCellTemplate]="centuryCellTemplate"
                [weekNumberTemplate]="weekNumberTemplate"
                [headerTitleTemplate]="headerTitleTemplate"
                [navigationItemTemplate]="navigationItemTemplate"
                [focusedDate]="focusedDate"
                [value]="value"
                (valueChange)="handleChange(mergeTime($event))"
                [kendoEventsOutsideAngular]="{
                    keydown: handleKeydown
                }"
                [scope]="this"
                [disabledDates]="disabledDates"
            >
                <kendo-calendar-messages
                    [today]="localization.get('today')"
                    [prevButtonTitle]="localization.get('prevButtonTitle')"
                    [nextButtonTitle]="localization.get('nextButtonTitle')"
                >
                </kendo-calendar-messages>
            </kendo-calendar>
        <ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc3.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc5.PopupService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.Injector }, { type: PickerService }, { type: DisabledDatesService }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }]; }, { focusableId: [{
            type: Input
        }], activeView: [{
            type: Input
        }], bottomView: [{
            type: Input
        }], topView: [{
            type: Input
        }], calendarType: [{
            type: Input
        }], animateCalendarNavigation: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], readOnlyInput: [{
            type: Input
        }], navigation: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], incompleteDateValidation: [{
            type: Input
        }], focusedDate: [{
            type: Input
        }], format: [{
            type: Input
        }], twoDigitYearMax: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], title: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], disabledDatesValidation: [{
            type: Input
        }], weekNumber: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], wrapperClasses: [{
            type: HostBinding,
            args: ['class.k-datepicker']
        }, {
            type: HostBinding,
            args: ['class.k-input']
        }], cellTemplateRef: [{
            type: Input,
            args: ['cellTemplate']
        }], cellTemplate: [{
            type: ContentChild,
            args: [CellTemplateDirective, { static: false }]
        }], monthCellTemplateRef: [{
            type: Input,
            args: ['monthCellTemplate']
        }], monthCellTemplate: [{
            type: ContentChild,
            args: [MonthCellTemplateDirective, { static: false }]
        }], yearCellTemplateRef: [{
            type: Input,
            args: ['yearCellTemplate']
        }], yearCellTemplate: [{
            type: ContentChild,
            args: [YearCellTemplateDirective, { static: false }]
        }], decadeCellTemplateRef: [{
            type: Input,
            args: ['decadeCellTemplate']
        }], decadeCellTemplate: [{
            type: ContentChild,
            args: [DecadeCellTemplateDirective, { static: false }]
        }], centuryCellTemplateRef: [{
            type: Input,
            args: ['centuryCellTemplate']
        }], centuryCellTemplate: [{
            type: ContentChild,
            args: [CenturyCellTemplateDirective, { static: false }]
        }], weekNumberTemplateRef: [{
            type: Input,
            args: ['weekNumberTemplate']
        }], weekNumberTemplate: [{
            type: ContentChild,
            args: [WeekNumberCellTemplateDirective, { static: false }]
        }], headerTitleTemplateRef: [{
            type: Input,
            args: ['headerTitleTemplate']
        }], headerTitleTemplate: [{
            type: ContentChild,
            args: [HeaderTitleTemplateDirective, { static: false }]
        }], navigationItemTemplateRef: [{
            type: Input,
            args: ['navigationItemTemplate']
        }], navigationItemTemplate: [{
            type: ContentChild,
            args: [NavigationItemTemplateDirective, { static: false }]
        }], popupSettings: [{
            type: Input
        }], value: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], disabledDates: [{
            type: Input
        }], size: [{
            type: Input
        }], rounded: [{
            type: Input
        }], fillMode: [{
            type: Input
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-disabled']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: true }]
        }], toggleButton: [{
            type: ViewChild,
            args: ['toggleButton', { static: true }]
        }], formatPlaceholder: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-timepicker',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TimePickerComponent_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => TimePickerComponent_1), multi: true },
                    { provide: KendoInput, useExisting: forwardRef(() => TimePickerComponent_1) },
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.timepicker'
                    },
                    PickerService
                ],
                selector: 'kendo-timepicker',
                template: `
        <ng-container kendoTimePickerLocalizedMessages
            i18n-accept="kendo.timepicker.accept|The Accept button text in the timepicker component"
            accept="Set"

            i18n-acceptLabel="kendo.timepicker.acceptLabel|The label for the Accept button in the timepicker component"
            acceptLabel="Set time"

            i18n-cancel="kendo.timepicker.cancel|The Cancel button text in the timepicker component"
            cancel="Cancel"

            i18n-cancelLabel="kendo.timepicker.cancelLabel|The label for the Cancel button in the timepicker component"
            cancelLabel="Cancel changes"

            i18n-now="kendo.timepicker.now|The Now button text in the timepicker component"
            now="Now"

            i18n-nowLabel="kendo.timepicker.nowLabel|The label for the Now button in the timepicker component"
            nowLabel="Select now"

            i18n-toggle="kendo.timepicker.toggle|The label for the toggle button in the timepicker component"
            toggle="Toggle time list"
        >
        </ng-container>
        <kendo-dateinput
            #input
            [focusableId]="focusableId"
            [hasPopup]="true"
            [isPopupOpen]="show"
            [disabled]="disabled"
            [readonly]="readonly || readOnlyInput"
            [role]="inputRole"
            [ariaReadOnly]="readonly"
            [format]="format"
            [formatPlaceholder]="formatPlaceholder"
            [placeholder]="placeholder"
            [min]="normalizeTime(min)"
            [max]="normalizeTime(max)"
            [incompleteDateValidation]="incompleteDateValidation"
            [fillMode]="fillMode"
            [rounded]="rounded"
            [size]="size"
            [steps]="steps"
            [tabindex]="!show ? tabindex : -1"
            [title]="title"
            [value]="value"
            (valueChange)="handleInputChange($event)"
        ></kendo-dateinput>
        <button
            #toggleButton
            type="button"
            class="k-input-button k-button k-icon-button"
            [attr.title]="localization.get('toggle')"
            [attr.aria-label]="localization.get('toggle')"
            [kendoEventsOutsideAngular]="{
                click: handleIconClick,
                mousedown: handleMousedown
            }"
            [scope]="this"
        >
            <span class="k-button-icon k-icon k-i-clock"></span>
        </button>
        <ng-template #popupTemplate>
            <kendo-timeselector
                #timeSelector
                [cancelButton]="cancelButton"
                [nowButton]="nowButton"
                [format]="format"
                [min]="min"
                [max]="max"
                [steps]="steps"
                [value]="value"
                [kendoEventsOutsideAngular]="{
                    keydown: handleKeydown,
                    mousedown: handleMousedown
                }"
                [scope]="this"
                (valueChange)="handleChange($event)"
                (valueReject)="handleReject()"
            >
                <kendo-timeselector-messages
                    [acceptLabel]="localization.get('acceptLabel')"
                    [accept]="localization.get('accept')"
                    [cancelLabel]="localization.get('cancelLabel')"
                    [cancel]="localization.get('cancel')"
                    [nowLabel]="localization.get('nowLabel')"
                    [now]="localization.get('now')"
                >
                </kendo-timeselector-messages>
            </kendo-timeselector>
        </ng-template>
        <ng-container #container></ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc3.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc5.PopupService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.Injector }, { type: PickerService }, { type: ɵngcc1.IntlService }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }]; }, { focusableId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], readOnlyInput: [{
            type: Input
        }], format: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], incompleteDateValidation: [{
            type: Input
        }], cancelButton: [{
            type: Input
        }], nowButton: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], title: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], wrapperClasses: [{
            type: HostBinding,
            args: ['class.k-timepicker']
        }, {
            type: HostBinding,
            args: ['class.k-input']
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], steps: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], value: [{
            type: Input
        }], size: [{
            type: Input
        }], rounded: [{
            type: Input
        }], fillMode: [{
            type: Input
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-disabled']
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: false }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: false }]
        }], toggleButton: [{
            type: ViewChild,
            args: ['toggleButton', { static: true }]
        }], formatPlaceholder: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-datetimepicker',
                exportAs: 'kendo-datetimepicker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    PickerService,
                    LocalizationService,
                    DisabledDatesService,
                    { provide: L10N_PREFIX, useValue: 'kendo.datetimepicker' },
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateTimePickerComponent_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateTimePickerComponent_1), multi: true },
                    { provide: KendoInput, useExisting: forwardRef(() => DateTimePickerComponent_1) }
                ],
                template: `
        <ng-container
            kendoDateTimePickerLocalizedMessages

            i18n-dateTab="kendo.datetimepicker.dateTab|The Date tab text in the datetimepicker popup header"
            dateTab="Date"

            i18n-dateTabLabel="kendo.datetimepicker.dateTabLabel|The label for the Date tab in the datetimepicker popup header"
            dateTabLabel="Date tab"

            i18n-timeTab="kendo.datetimepicker.timeTab|The Time tab text in the datetimepicker popup header"
            timeTab="Time"

            i18n-timeTabLabel="kendo.datetimepicker.timeTabLabel|The label for the Time tab in the datetimepicker popup header"
            timeTabLabel="Time tab"

            i18n-toggle="kendo.datetimepicker.toggle|The title of the toggle button in the datetimepicker component"
            toggle="Toggle popup"

            i18n-accept="kendo.datetimepicker.accept|The Accept button text in the datetimepicker component"
            accept="Set"

            i18n-acceptLabel="kendo.datetimepicker.acceptLabel|The label for the Accept button in the datetimepicker component"
            acceptLabel="Set"

            i18n-cancel="kendo.datetimepicker.cancel|The Cancel button text in the datetimepicker component"
            cancel="Cancel"

            i18n-cancelLabel="kendo.datetimepicker.cancelLabel|The label for the Cancel button in the datetimepicker component"
            cancelLabel="Cancel"

            i18n-now="kendo.datetimepicker.now|The Now button text in the timepicker component"
            now="NOW"

            i18n-nowLabel="kendo.datetimepicker.nowLabel|The label for the Now button in the timepicker component"
            nowLabel="Select now"

            i18n-today="kendo.datetimepicker.today|The label for the today button in the calendar header"
            today="Today"

            i18n-prevButtonTitle="kendo.datetimepicker.prevButtonTitle|The title of the previous button in the Classic calendar"
            prevButtonTitle="Navigate to previous view"

            i18n-nextButtonTitle="kendo.datetimepicker.nextButtonTitle|The title of the next button in the Classic calendar"
            nextButtonTitle="Navigate to next view"
        >
        </ng-container>

        <kendo-dateinput
            [value]="value"
            [format]="format"
            [twoDigitYearMax]="twoDigitYearMax"
            [min]="min"
            [max]="max"
            [incompleteDateValidation]="incompleteDateValidation"
            [formatPlaceholder]="formatPlaceholder"
            [placeholder]="placeholder"
            [disabled]="disabled"
            [readonly]="readonly || readOnlyInput"
            [role]="inputRole"
            [ariaReadOnly]="readonly"
            [steps]="steps"
            [tabindex]="tabindex"
            [title]="title"
            [focusableId]="focusableId"
            [hasPopup]="true"
            [isPopupOpen]="isOpen"
            (valueChange)="handleInputValueChange($event)"
            [kendoEventsOutsideAngular]="{
                keydown: handleKeyDown
            }"
            [scope]="this"
            [fillMode]="fillMode"
            [rounded]="rounded"
            [size]="size"
        >
        </kendo-dateinput>
        <button
            #toggleButton
            type="button"
            class="k-input-button k-button k-icon-button"
            [tabindex]="-1"
            [attr.title]="localization.get('toggle')"
            [attr.aria-label]="localization.get('toggle')"
            [kendoEventsOutsideAngular]="{
                mousedown: preventMouseDown,
                click: handleIconClick
            }"
            [scope]="this"
        >
            <span class="k-button-icon k-icon"
                [ngClass]="{
                    'k-i-calendar': activeTab === 'date',
                    'k-i-clock': activeTab === 'time'
                }"
            ></span>
        </button>

        <ng-container #container></ng-container>

        <ng-template #popupTemplate>
            <div
                class="k-datetime-wrap k-{{activeTab}}-tab"
                [kendoEventsOutsideAngular]="{
                    mousedown: preventMouseDown,
                    keydown: handleKeyDown
                }"
                [scope]="this"
            >
                <div class="k-datetime-buttongroup"
                    [kendoEventsOutsideAngular]="{
                        focusin: handleFocus,
                        focusout: handleBlur
                    }"
                    [scope]="this"
                >
                    <div class="k-button-group k-button-group-stretched">
                        <button
                            type="button"
                            class="k-button k-group-start k-date-tab"
                            [ngClass]="popupButtonsClasses()"
                            [class.k-active]="activeTab === 'date'"
                            [attr.title]="localization.get('dateTabLabel')"
                            [attr.aria-label]="localization.get('dateTabLabel')"
                            [kendoEventsOutsideAngular]="{
                                click: changeActiveTab.bind(this, 'date'),
                                keydown: handleBackTabOut
                            }"
                            [scope]="this"
                        >
                            {{localization.get('dateTab')}}
                        </button>
                        <button
                            type="button"
                            class="k-button k-group-end k-time-tab"
                            [ngClass]="popupButtonsClasses()"
                            [class.k-active]="activeTab === 'time'"
                            [attr.title]="localization.get('timeTabLabel')"
                            [attr.aria-label]="localization.get('timeTabLabel')"
                            [kendoEventsOutsideAngular]="{
                                click: changeActiveTab.bind(this, 'time')
                            }"
                        >
                            {{localization.get('timeTab')}}
                        </button>
                    </div>
                </div>
                <div
                    #dateTimeSelector
                    class="k-datetime-selector"
                    [style.transition]="tabSwitchTransition"
                    [kendoEventsOutsideAngular]="{
                        transitionend: handleTabChangeTransitionEnd.bind(this, dateTimeSelector)
                    }"
                >
                    <div class="k-datetime-calendar-wrap">
                        <kendo-calendar
                            [(value)]="calendarValue"
                            [type]="calendarType"
                            [min]="calendarMin"
                            [max]="calendarMax"
                            [focusedDate]="focusedDate"
                            [weekNumber]="weekNumber"
                            [navigation]="false"
                            [animateNavigation]="animateCalendarNavigation"
                            [cellTemplate]="cellTemplate"
                            [monthCellTemplate]="monthCellTemplate"
                            [yearCellTemplate]="yearCellTemplate"
                            [decadeCellTemplate]="decadeCellTemplate"
                            [centuryCellTemplate]="centuryCellTemplate"
                            [weekNumberTemplate]="weekNumberTemplate"
                            [headerTitleTemplate]="headerTitleTemplate"
                            [disabled]="disableCalendar"
                            [disabledDates]="disabledDates"
                            (valueChange)="handleCalendarValueChange()"
                        >
                            <kendo-calendar-messages
                                [today]="localization.get('today')"
                                [prevButtonTitle]="localization.get('prevButtonTitle')"
                                [nextButtonTitle]="localization.get('nextButtonTitle')"
                            >
                            </kendo-calendar-messages>
                        </kendo-calendar>
                    </div>
                    <div class="k-datetime-time-wrap">
                        <kendo-timeselector
                            [value]="value"
                            [format]="timeSelectorFormat"
                            [min]="timeSelectorMin"
                            [max]="timeSelectorMax"
                            [setButton]="false"
                            [cancelButton]="false"
                            [steps]="steps"
                            [disabled]="disableTimeSelector"
                        >
                            <kendo-timeselector-messages
                                [now]="localization.get('now')"
                                [nowLabel]="localization.get('nowLabel')"
                            >
                            </kendo-timeselector-messages>
                        </kendo-timeselector>
                    </div>
                </div>
                <div
                    class="k-datetime-footer k-action-buttons k-actions k-hstack k-justify-content-stretch"
                    [kendoEventsOutsideAngular]="{
                        keydown: handleTabOut,
                        focusin: handleFocus,
                        focusout: handleBlur
                    }"
                    [scope]="this"
                >
                    <button
                        *ngIf="cancelButton"
                        type="button"
                        class="k-button k-time-cancel"
                        [ngClass]="popupButtonsClasses()"
                        [attr.title]="localization.get('cancelLabel')"
                        [attr.aria-label]="localization.get('cancelLabel')"
                        [kendoEventsOutsideAngular]="{
                            click: handleCancel
                        }"
                        [scope]="this"
                    >
                        {{localization.get('cancel')}}
                    </button>
                    <button
                        type="button"
                        class="k-button k-time-accept"
                        [ngClass]="popupButtonsClasses('primary')"
                        [attr.title]="localization.get('acceptLabel')"
                        [attr.aria-label]="localization.get('acceptLabel')"
                        [disabled]="!calendarValue"
                        [kendoEventsOutsideAngular]="{
                            click: handleAccept
                        }"
                        [scope]="this"
                    >
                        {{localization.get('accept')}}
                    </button>
                </div>
            </div>
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc5.PopupService }, { type: ɵngcc1.IntlService }, { type: ɵngcc0.ChangeDetectorRef }, { type: PickerService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }, { type: ɵngcc3.LocalizationService }, { type: DisabledDatesService }, { type: ɵngcc0.Renderer2 }]; }, { hostClasses: [{
            type: HostBinding,
            args: ['class.k-datetimepicker']
        }, {
            type: HostBinding,
            args: ['class.k-input']
        }], twoDigitYearMax: [{
            type: Input
        }], focusableId: [{
            type: Input
        }], title: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], readOnlyInput: [{
            type: Input
        }], cancelButton: [{
            type: Input
        }], steps: [{
            type: Input
        }], calendarType: [{
            type: Input
        }], animateCalendarNavigation: [{
            type: Input
        }], weekNumber: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], disabledDatesValidation: [{
            type: Input
        }], incompleteDateValidation: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-disabled']
        }], value: [{
            type: Input
        }], format: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], disabledDates: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], defaultTab: [{
            type: Input
        }], size: [{
            type: Input
        }], rounded: [{
            type: Input
        }], fillMode: [{
            type: Input
        }], toggleButton: [{
            type: ViewChild,
            args: ['toggleButton', { static: true }]
        }], formatPlaceholder: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], focusedDate: [{
            type: Input
        }], cellTemplate: [{
            type: ContentChild,
            args: [CellTemplateDirective, { static: false }]
        }], monthCellTemplate: [{
            type: ContentChild,
            args: [MonthCellTemplateDirective, { static: false }]
        }], yearCellTemplate: [{
            type: ContentChild,
            args: [YearCellTemplateDirective, { static: false }]
        }], decadeCellTemplate: [{
            type: ContentChild,
            args: [DecadeCellTemplateDirective, { static: false }]
        }], centuryCellTemplate: [{
            type: ContentChild,
            args: [CenturyCellTemplateDirective, { static: false }]
        }], weekNumberTemplate: [{
            type: ContentChild,
            args: [WeekNumberCellTemplateDirective, { static: false }]
        }], headerTitleTemplate: [{
            type: ContentChild,
            args: [HeaderTitleTemplateDirective, { static: false }]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { read: TemplateRef, static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangePopupTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDateRangePopupTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangePopupComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendo-daterange-popup',
                selector: 'kendo-daterange-popup',
                template: `
        <ng-container #container></ng-container>
        <ng-template #defaultTemplate>
            <kendo-multiviewcalendar kendoDateRangeSelection></kendo-multiviewcalendar>
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc5.PopupService }, { type: DateRangeService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, { animate: [{
            type: Input
        }], collision: [{
            type: Input
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], cancel: [{
            type: Output
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: false }]
        }], defaultTemplate: [{
            type: ViewChild,
            args: ['defaultTemplate', { static: false }]
        }], contentTemplate: [{
            type: ContentChild,
            args: [DateRangePopupTemplateDirective, { static: false }]
        }], viewCalendar: [{
            type: ViewChildren,
            args: [MultiViewCalendarComponent]
        }], contentCalendar: [{
            type: ContentChildren,
            args: [MultiViewCalendarComponent]
        }], anchor: [{
            type: Input
        }], anchorAlign: [{
            type: Input
        }], appendTo: [{
            type: Input
        }], popupAlign: [{
            type: Input
        }], margin: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeComponent, [{
        type: Component,
        args: [{
                providers: [DateRangeService],
                selector: 'kendo-daterange',
                template: `
        <ng-content></ng-content>
        <kendo-daterange-popup *ngIf="showDefault"></kendo-daterange-popup>
    `
            }]
    }], function () { return []; }, { contentPopup: [{
            type: ContentChildren,
            args: [DateRangePopupComponent]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeEndInputDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDateRangeEndInput]'
            }]
    }], function () { return [{ type: DateRangeService }, { type: DateInputComponent }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { navigateCalendarOnFocus: [{
            type: Input
        }], autoCorrectOn: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeStartInputDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDateRangeStartInput]'
            }]
    }], function () { return [{ type: DateRangeService }, { type: DateInputComponent }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { navigateCalendarOnFocus: [{
            type: Input
        }], autoCorrectOn: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeSelectionDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDateRangeSelection]'
            }]
    }], function () { return [{ type: MultiViewCalendarComponent }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DateRangeService, decorators: [{
                type: Optional
            }] }]; }, { autoCorrectOn: [{
            type: Input
        }], activeRangeEndChange: [{
            type: Output
        }], selectionRangeChange: [{
            type: Output
        }], selectionRange: [{
            type: Input
        }], activeRangeEnd: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KForOf, [{
        type: Directive,
        args: [{ selector: '[kFor][kForOf]' }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, { kForTemplate: [{
            type: Input
        }], kForOf: [{
            type: Input
        }], kForTrackBy: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewComponent, [{
        type: Component,
        args: [{
                selector: '[kendoCalendarView]',
                template: `
    <ng-template #emptyCell><td class="k-empty k-calendar-td">&nbsp;</td></ng-template>
    <tr *ngIf="!isHorizontal()" class="k-calendar-tr" role="row"><th class="k-calendar-caption" scope="col" [colSpan]="colSpan">{{title}}</th></tr>
    <tr *kFor="let row of data; let rowIndex = index" class="k-calendar-tr" role="row">
        <ng-template [ngIf]="weekNumber">
            <td
                class="k-alt k-calendar-td"
                *ngIf="firstDate(row); else emptyCell"
                [kendoEventsOutsideAngular]="{
                    click: handleWeekNumberClick.bind(this, row)
                }"
            >
                <ng-template [ngIf]="!weekNumberTemplateRef">
                    {{getWeekNumber(firstDate(row))}}
                </ng-template>
                <ng-template
                    [ngIf]="weekNumberTemplateRef"
                    [ngTemplateOutlet]="weekNumberTemplateRef"
                    [ngTemplateOutletContext]="{
                        $implicit: firstDate(row),
                        cellContext: getWeekNumberContext(row)
                    }"
                ></ng-template>
            </td>
        </ng-template>
        <ng-container *kFor="let cell of row; let cellIndex = index">
            <td class="k-calendar-td"
                *ngIf="shouldRenderCellContent(cell); else emptyCell"
                role="gridcell"
                [attr.id]="cell.id"
                [attr.data-cell-index]="tableCellIndex(rowIndex, cellIndex)"
                [attr.aria-selected]="cell.isSelected || cell.isRangeStart || cell.isRangeMid || cell.isRangeEnd"
                [attr.aria-disabled]="cell.isDisabled"
                [ngClass]="getStyles(cell)"
                [title]="cell.title"
            >
                <span class="k-link">
                    <ng-template [ngIf]="!templateRef">{{cell.formattedValue}}</ng-template>
                    <ng-template
                        *ngIf="templateRef"
                        [ngTemplateOutlet]="templateRef"
                        [ngTemplateOutletContext]="{ $implicit: cell.value, cellContext: cell }"
                    ></ng-template>
                </span>
            </td>
        </ng-container>
    </tr>
  `
            }]
    }], function () { return [{ type: BusViewService }, { type: ɵngcc1.IntlService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: DisabledDatesService }]; }, { direction: [{
            type: Input
        }], isActive: [{
            type: Input
        }], selectedDates: [{
            type: Input
        }], cellClick: [{
            type: Output
        }], weekNumberCellClick: [{
            type: Output
        }], cellEnter: [{
            type: Output
        }], cellLeave: [{
            type: Output
        }], weekNumber: [{
            type: Input
        }], activeView: [{
            type: Input
        }], cellUID: [{
            type: Input
        }], focusedDate: [{
            type: Input
        }], viewDate: [{
            type: Input
        }], activeRangeEnd: [{
            type: Input
        }], selectionRange: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], viewIndex: [{
            type: Input
        }], templateRef: [{
            type: Input
        }], weekNumberTemplateRef: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarCommonModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    KForOf,
                    HeaderComponent,
                    ViewComponent
                ],
                exports: [
                    KForOf,
                    HeaderComponent,
                    ViewComponent
                ],
                imports: [CommonModule, EventsModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CalendarCommonModule, { declarations: function () { return [KForOf, HeaderComponent, ViewComponent]; }, imports: function () { return [CommonModule, EventsModule]; }, exports: function () { return [KForOf, HeaderComponent, ViewComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TemplatesModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CellTemplateDirective,
                    MonthCellTemplateDirective,
                    YearCellTemplateDirective,
                    DecadeCellTemplateDirective,
                    CenturyCellTemplateDirective,
                    WeekNumberCellTemplateDirective,
                    HeaderTitleTemplateDirective,
                    NavigationItemTemplateDirective
                ],
                exports: [
                    CellTemplateDirective,
                    MonthCellTemplateDirective,
                    YearCellTemplateDirective,
                    DecadeCellTemplateDirective,
                    CenturyCellTemplateDirective,
                    WeekNumberCellTemplateDirective,
                    HeaderTitleTemplateDirective,
                    NavigationItemTemplateDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TemplatesModule, { declarations: [CellTemplateDirective, MonthCellTemplateDirective, YearCellTemplateDirective, DecadeCellTemplateDirective, CenturyCellTemplateDirective, WeekNumberCellTemplateDirective, HeaderTitleTemplateDirective, NavigationItemTemplateDirective], exports: [CellTemplateDirective, MonthCellTemplateDirective, YearCellTemplateDirective, DecadeCellTemplateDirective, CenturyCellTemplateDirective, WeekNumberCellTemplateDirective, HeaderTitleTemplateDirective, NavigationItemTemplateDirective] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiViewCalendarLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => MultiViewCalendarLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoMultiViewCalendarLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiViewCalendarCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => MultiViewCalendarCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-multiviewcalendar-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiViewCalendarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    HorizontalViewListComponent,
                    MultiViewCalendarLocalizedMessagesDirective,
                    MultiViewCalendarCustomMessagesComponent,
                    MultiViewCalendarComponent
                ],
                exports: [
                    HorizontalViewListComponent,
                    MultiViewCalendarLocalizedMessagesDirective,
                    MultiViewCalendarCustomMessagesComponent,
                    MultiViewCalendarComponent,
                    CalendarCommonModule,
                    TemplatesModule
                ],
                imports: [
                    CommonModule,
                    CalendarCommonModule,
                    IntlModule,
                    TemplatesModule,
                    PopupModule,
                    EventsModule
                ],
                providers: [
                    NavigationService,
                    CenturyViewService,
                    DecadeViewService,
                    MonthViewService,
                    YearViewService,
                    WeekNamesService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiViewCalendarModule, { declarations: function () { return [HorizontalViewListComponent, MultiViewCalendarLocalizedMessagesDirective, MultiViewCalendarCustomMessagesComponent, MultiViewCalendarComponent]; }, imports: function () { return [CommonModule, CalendarCommonModule, IntlModule, TemplatesModule, PopupModule,
        EventsModule]; }, exports: function () { return [HorizontalViewListComponent, MultiViewCalendarLocalizedMessagesDirective, MultiViewCalendarCustomMessagesComponent, MultiViewCalendarComponent, CalendarCommonModule, TemplatesModule]; } }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: CalendarMessages,
                        useExisting: forwardRef(() => CalendarLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoCalendarLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: CalendarMessages,
                        useExisting: forwardRef(() => CalendarCustomMessagesComponent_1)
                    }
                ],
                selector: 'kendo-calendar-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VirtualizationModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES],
                exports: [COMPONENT_DIRECTIVES],
                imports: [CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VirtualizationModule, { declarations: function () { return [VirtualizationComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [VirtualizationComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CalendarComponent,
                    NavigationComponent,
                    CalendarCustomMessagesComponent,
                    CalendarLocalizedMessagesDirective,
                    ViewListComponent
                ],
                exports: [
                    CalendarComponent,
                    NavigationComponent,
                    CalendarCustomMessagesComponent,
                    CalendarLocalizedMessagesDirective,
                    ViewListComponent,
                    CalendarCommonModule,
                    TemplatesModule
                ],
                imports: [
                    CommonModule,
                    CalendarCommonModule,
                    MultiViewCalendarModule,
                    IntlModule,
                    TemplatesModule,
                    VirtualizationModule,
                    EventsModule,
                    ResizeSensorModule
                ],
                providers: [
                    CalendarDOMService,
                    CenturyViewService,
                    DecadeViewService,
                    MonthViewService,
                    YearViewService,
                    WeekNamesService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CalendarModule, { declarations: function () { return [CalendarComponent, NavigationComponent, CalendarCustomMessagesComponent, CalendarLocalizedMessagesDirective, ViewListComponent]; }, imports: function () { return [CommonModule, CalendarCommonModule, MultiViewCalendarModule, IntlModule, TemplatesModule, VirtualizationModule, EventsModule,
        ResizeSensorModule]; }, exports: function () { return [CalendarComponent, NavigationComponent, CalendarCustomMessagesComponent, CalendarLocalizedMessagesDirective, ViewListComponent, CalendarCommonModule, TemplatesModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarsModule, [{
        type: NgModule,
        args: [{
                exports: [
                    CalendarModule,
                    MultiViewCalendarModule
                ],
                imports: [
                    CalendarModule,
                    MultiViewCalendarModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CalendarsModule, { imports: [CalendarModule, MultiViewCalendarModule], exports: [CalendarModule, MultiViewCalendarModule] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateInputLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: DateInputMessages,
                        useExisting: forwardRef(() => DateInputLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoDateInputLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateInputCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: DateInputMessages,
                        useExisting: forwardRef(() => DateInputCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-dateinput-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateInputModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DateInputComponent,
                    DateInputCustomMessagesComponent,
                    DateInputLocalizedMessagesDirective
                ],
                exports: [
                    DateInputComponent,
                    DateInputCustomMessagesComponent,
                    DateInputLocalizedMessagesDirective
                ],
                imports: [CommonModule, IntlModule, EventsModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateInputModule, { declarations: function () { return [DateInputComponent, DateInputCustomMessagesComponent, DateInputLocalizedMessagesDirective]; }, imports: function () { return [CommonModule, IntlModule, EventsModule]; }, exports: function () { return [DateInputComponent, DateInputCustomMessagesComponent, DateInputLocalizedMessagesDirective]; } }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: DatePickerMessages,
                        useExisting: forwardRef(() => DatePickerLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoDatePickerLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: DatePickerMessages,
                        useExisting: forwardRef(() => DatePickerCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-datepicker-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DatePickerComponent,
                    DatePickerCustomMessagesComponent,
                    DatePickerLocalizedMessagesDirective
                ],
                exports: [
                    DatePickerComponent,
                    DatePickerCustomMessagesComponent,
                    DatePickerLocalizedMessagesDirective,
                    TemplatesModule
                ],
                imports: [
                    CommonModule,
                    DateInputModule,
                    CalendarModule,
                    IntlModule,
                    PopupModule,
                    TemplatesModule,
                    EventsModule
                ],
                providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0$e }]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DatePickerModule, { declarations: function () { return [DatePickerComponent, DatePickerCustomMessagesComponent, DatePickerLocalizedMessagesDirective]; }, imports: function () { return [CommonModule, DateInputModule, CalendarModule, IntlModule,
        PopupModule, TemplatesModule, EventsModule]; }, exports: function () { return [DatePickerComponent, DatePickerCustomMessagesComponent, DatePickerLocalizedMessagesDirective, TemplatesModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateRangeModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES$1],
                exports: [COMPONENT_DIRECTIVES$1],
                imports: [CommonModule, COMPONENT_MODULES]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateRangeModule, { declarations: function () { return [DateRangeComponent, DateRangePopupComponent, DateRangePopupTemplateDirective, DateRangeSelectionDirective, DateRangeStartInputDirective, DateRangeEndInputDirective]; }, imports: function () { return [CommonModule, MultiViewCalendarModule, DateInputModule, PopupModule,
        EventsModule]; }, exports: function () { return [DateRangeComponent, DateRangePopupComponent, DateRangePopupTemplateDirective, DateRangeSelectionDirective, DateRangeStartInputDirective, DateRangeEndInputDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerDOMService, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HoursService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MinutesService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SecondsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MillisecondsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DayPeriodService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.IntlService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimeListComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-timelist',
                template: `
    <kendo-virtualization
        [skip]="skip"
        [take]="total"
        [total]="total"
        [itemHeight]="itemHeight"
        [maxScrollDifference]="listHeight"
        [topOffset]="topOffset"
        [bottomOffset]="bottomOffset"
        class="k-time-container"
        role="presentation"
        tabindex="-1"
    >
        <ul [ngStyle]="style" class="k-reset"
            [kendoEventsOutsideAngular]="{
                click: handleItemClick
            }"
            [scope]="this"
        >
            <li *ngFor="let item of data; let index = index;" class="k-item"
                [attr.data-timelist-item-index]="index">
                <span>{{item.text}}</span>
            </li>
        </ul>
    </kendo-virtualization>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Injector }, { type: TimePickerDOMService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { min: [{
            type: Input
        }], max: [{
            type: Input
        }], step: [{
            type: Input
        }], disabled: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], componentClass: [{
            type: HostBinding,
            args: ["class.k-time-list"]
        }], tabIndex: [{
            type: HostBinding,
            args: ["attr.tabindex"]
        }], value: [{
            type: Input
        }], part: [{
            type: Input
        }], virtualization: [{
            type: ViewChild,
            args: [VirtualizationComponent, { static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimeSelectorComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-timeselector',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.timeselector'
                    }
                ],
                selector: 'kendo-timeselector',
                template: `
        <ng-container kendoTimeSelectorLocalizedMessages
            i18n-accept="kendo.timeselector.accept|The Accept button text in the timeselector component"
            accept="Set"

            i18n-acceptLabel="kendo.timeselector.acceptLabel|The label for the Accept button in the timeselector component"
            acceptLabel="Set time"

            i18n-cancel="kendo.timeselector.cancel|The Cancel button text in the timeselector component"
            cancel="Cancel"

            i18n-cancelLabel="kendo.timeselector.cancelLabel|The label for the Cancel button in the timeselector component"
            cancelLabel="Cancel changes"

            i18n-now="kendo.timeselector.now|The Now button text in the timeselector component"
            now="Now"

            i18n-nowLabel="kendo.timeselector.nowLabel|The label for the Now button in the timeselector component"
            nowLabel="Select now"
        >
        </ng-container>
        <div class="k-time-header">
            <span class="k-title k-timeselector-title">
                {{ intl.formatDate(current, format) }}
            </span>
            <button
                #now
                *ngIf="showNowButton"
                type="button"
                class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-time-now"
                [attr.title]="localization.get('nowLabel')"
                [attr.aria-label]="localization.get('nowLabel')"
                [kendoEventsOutsideAngular]="{
                    click: handleNow,
                    focus: handleFocus,
                    blur: handleBlur
                }"
                [scope]="this"
                [disabled]="disabled"
            >{{localization.get('now')}}</button>
        </div>
        <div class="k-time-list-container">
            <span class="k-time-highlight"></span>
            <ng-template ngFor [ngForOf]="dateFormatParts" let-part let-idx="index">
                <div
                    #listWrapper
                    class="k-time-list-wrapper"
                    role="presentation" tabindex="-1"
                    *ngIf="part.type !== 'literal'"
                >
                    <span class="k-title k-timeselector-title">{{intl.dateFieldName(part)}}</span>
                    <kendo-timelist
                        [min]="min"
                        [max]="max"
                        [part]="part"
                        [step]="partStep(part)"
                        [disabled]="disabled"
                        [(value)]="current"
                        [kendoEventsOutsideAngular]="{
                            focus: handleListFocus,
                            blur: handleBlur
                        }"
                        [scope]="this"
                        [attr.data-timelist-index]="idx"
                    ></kendo-timelist>
                </div>
                <div class="k-time-separator" *ngIf="part.type === 'literal'">
                    {{part.pattern}}
                </div>
            </ng-template>
        </div>
        <div class="k-time-footer k-action-buttons k-actions k-hstack k-justify-content-stretch" *ngIf="setButton || cancelButton">
            <button
                #cancel
                *ngIf="cancelButton"
                class="k-button k-time-cancel k-button-md k-rounded-md k-button-solid k-button-solid-base"
                type="button"
                [attr.title]="localization.get('cancelLabel')"
                [attr.aria-label]="localization.get('cancelLabel')"
                [kendoEventsOutsideAngular]="{
                    click: handleReject,
                    focus: handleFocus,
                    blur: handleBlur
                }"
                [scope]="this"
                [disabled]="disabled"
            >{{localization.get('cancel')}}</button>
            <button
                #accept
                *ngIf="setButton"
                type="button"
                class="k-button k-time-accept k-button-md k-rounded-md k-button-solid k-button-solid-primary"
                [attr.title]="localization.get('acceptLabel')"
                [attr.aria-label]="localization.get('acceptLabel')"
                [kendoEventsOutsideAngular]="{
                    click: handleAccept,
                    focus: handleFocus,
                    blur: handleBlur
                }"
                [scope]="this"
                [disabled]="disabled"
            >{{localization.get('accept')}}</button>
        </div>
    `
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.IntlService }, { type: TimePickerDOMService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: PickerService, decorators: [{
                type: Optional
            }] }]; }, { format: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], cancelButton: [{
            type: Input
        }], setButton: [{
            type: Input
        }], nowButton: [{
            type: Input
        }], disabled: [{
            type: Input
        }], value: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], valueReject: [{
            type: Output
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-disabled']
        }], steps: [{
            type: Input
        }], accept: [{
            type: ViewChild,
            args: ['accept', { static: false }]
        }], cancel: [{
            type: ViewChild,
            args: ['cancel', { static: false }]
        }], now: [{
            type: ViewChild,
            args: ['now', { static: false }]
        }], timeLists: [{
            type: ViewChildren,
            args: [TimeListComponent]
        }], timeListWrappers: [{
            type: ViewChildren,
            args: ['listWrapper']
        }] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: TimePickerMessages,
                        useExisting: forwardRef(() => TimePickerLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoTimePickerLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: TimePickerMessages,
                        useExisting: forwardRef(() => TimePickerCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-timepicker-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimeSelectorLocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: TimePickerMessages,
                        useExisting: forwardRef(() => TimeSelectorLocalizedMessagesDirective_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoTimeSelectorLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimeSelectorCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: TimePickerMessages,
                        useExisting: forwardRef(() => TimeSelectorCustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-timeselector-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES$2],
                exports: [COMPONENT_DIRECTIVES$2],
                imports: [CommonModule, ...COMPONENT_MODULES$1],
                providers: providers
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimePickerModule, { declarations: function () { return [TimePickerLocalizedMessagesDirective, TimeListComponent, TimePickerCustomMessagesComponent, TimePickerComponent, TimeSelectorLocalizedMessagesDirective, TimeSelectorCustomMessagesComponent, TimeSelectorComponent]; }, imports: function () { return [CommonModule, DateInputModule, IntlModule,
        PopupModule, VirtualizationModule, EventsModule]; }, exports: function () { return [TimePickerLocalizedMessagesDirective, TimeListComponent, TimePickerCustomMessagesComponent, TimePickerComponent, TimeSelectorLocalizedMessagesDirective, TimeSelectorCustomMessagesComponent, TimeSelectorComponent]; } }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages$1,
                        useExisting: forwardRef(() => DateTimePickerCustomMessagesComponent_1)
                    }
                ],
                selector: 'kendo-datetimepicker-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages$1,
                        useExisting: forwardRef(() => LocalizedMessagesDirective_1)
                    }
                ],
                selector: '[kendoDateTimePickerLocalizedMessages]'
            }]
    }], function () { return [{ type: ɵngcc3.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ...COMPONENT_DIRECTIVES$3
                ],
                exports: [
                    ...COMPONENT_DIRECTIVES$3,
                    TemplatesModule
                ],
                imports: [
                    CommonModule,
                    IntlModule,
                    DateInputModule,
                    CalendarModule,
                    TimePickerModule,
                    PopupModule,
                    EventsModule,
                    TemplatesModule
                ],
                providers: [
                    { provide: TOUCH_ENABLED, useValue: ɵ0$p }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateTimePickerModule, { declarations: function () { return [DateTimePickerComponent, DateTimePickerCustomMessagesComponent, LocalizedMessagesDirective]; }, imports: function () { return [CommonModule,
        IntlModule, DateInputModule, CalendarModule, TimePickerModule, PopupModule,
        EventsModule, TemplatesModule]; }, exports: function () { return [DateTimePickerComponent, DateTimePickerCustomMessagesComponent, LocalizedMessagesDirective, TemplatesModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateInputsModule, [{
        type: NgModule,
        args: [{
                exports: COMPONENT_MODULES$2,
                imports: COMPONENT_MODULES$2
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateInputsModule, { imports: [CalendarsModule, DateInputModule, DatePickerModule, TimePickerModule, DateRangeModule, DateTimePickerModule], exports: [CalendarsModule, DateInputModule, DatePickerModule, TimePickerModule, DateRangeModule, DateTimePickerModule] }); })();


/**
 * Generated bundle index. Do not edit.
 */

export { CalendarCommonModule, CALENDAR_RANGE_VALIDATORS, CALENDAR_VALUE_ACCESSOR, KENDO_INPUT_PROVIDER, KForOf, KForOfContext, HeaderComponent, HorizontalViewListComponent, CalendarMessages, MultiViewCalendarCustomMessagesComponent, Messages, RANGE_CALENDAR_RANGE_VALIDATORS, RANGE_CALENDAR_VALUE_ACCESSOR, NavigationComponent, BusViewService, CenturyViewService, DecadeViewService, DisabledDatesService, CalendarDOMService, MonthViewService, NavigationService, ScrollSyncService, SelectionService, WeekNamesService, YearViewService, TemplatesModule, CellTemplateDirective, CenturyCellTemplateDirective, DecadeCellTemplateDirective, HeaderTitleTemplateDirective, MonthCellTemplateDirective, NavigationItemTemplateDirective, WeekNumberCellTemplateDirective, YearCellTemplateDirective, ViewListComponent, ViewComponent, PickerService, DateInputMessages, DatePickerMessages, DateRangeInput, DateRangePopupTemplateDirective, DateTimePickerCustomMessagesComponent, LocalizedMessagesDirective, Messages$1, TimePickerMessages, TimePickerCustomMessagesComponent, TimeSelectorCustomMessagesComponent, DayPeriodService, TimePickerDOMService, HoursService, MillisecondsService, MinutesService, SecondsService, TimeListComponent, TimeSelectorComponent, TOUCH_ENABLED, ScrollerService, DEFAULT_SCROLLER_FACTORY, SCROLLER_FACTORY_TOKEN, VirtualizationComponent, VirtualizationModule, CalendarComponent, DateInputComponent, DatePickerComponent, TimePickerComponent, DateTimePickerComponent, MultiViewCalendarComponent, DateRangeComponent, DateRangePopupComponent, DateRangeEndInputDirective, DateRangeStartInputDirective, DateRangeSelectionDirective, CalendarModule, CalendarsModule, DateInputModule, DatePickerModule, DateInputsModule, TimePickerModule, DateTimePickerModule, MultiViewCalendarModule, DateRangeModule, DateRangeService, CalendarCustomMessagesComponent, DateInputCustomMessagesComponent, DatePickerCustomMessagesComponent, PreventableEvent, CalendarLocalizedMessagesDirective, MultiViewCalendarLocalizedMessagesDirective, DateInputLocalizedMessagesDirective, DatePickerLocalizedMessagesDirective, TimePickerLocalizedMessagesDirective, TimeSelectorLocalizedMessagesDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,