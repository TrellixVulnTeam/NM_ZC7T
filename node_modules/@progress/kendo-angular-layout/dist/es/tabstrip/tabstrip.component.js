/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, QueryList, ViewChild, ViewChildren, Renderer2, NgZone } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { hasClass } from './../common/dom-queries';
import { TabStripTabComponent } from './models/tabstrip-tab.component';
import { TabStripService } from './tabstrip.service';
import { ScrollService } from './tabstrip-scroll.service';
import { Subscription } from 'rxjs';
import { isFocusable } from '../common/dom-queries';
import { getTabByIndex, isTablistHorizontal, tabStripHasScrollButtons, mouseScrollEnabled, resetTabFocus } from './util';
import { normalizeScrollableSettings } from './models/scrollable-settings';
import { TabStripScrollableButtonComponent } from './scrollable-button.component';
import { take } from 'rxjs/operators';
/**
 * Represents the [Kendo UI TabStrip component for Angular]({% slug overview_tabstrip %}).
 */
var TabStripComponent = /** @class */ (function () {
    function TabStripComponent(localization, renderer, wrapper, tabstripService, scrollService, ngZone) {
        this.localization = localization;
        this.renderer = renderer;
        this.wrapper = wrapper;
        this.tabstripService = tabstripService;
        this.scrollService = scrollService;
        this.ngZone = ngZone;
        /**
         * Enables the tab animation.
         *
         * @default true
         */
        this.animate = true;
        /**
         * Sets the position of the tabs. Defaults to `top`.
         *
         * @default 'top'
         */
        this.tabPosition = 'top';
        /**
         * When set to `true`, the component renders all tabs and they are persisted in the DOM.
         * By default, `keepTabContent` is `false`.
         *
         * @default false
         */
        this.keepTabContent = false;
        /**
         * When set to `true`, a close button will be rendered inside each tab.
         * By default, `closable` is `false`.
         *
         * @default false
         */
        this.closable = false;
        /**
         * Allows defining a custom CSS class, or multiple classes separated by spaces, which will be applied to the close button span element.
         * Allows the usage of custom icons.
         */
        this.closeIcon = 'k-icon k-i-x';
        /**
         * Fires each time the user selects a tab ([see example]({% slug overview_tabstrip %}#toc-basic-usage)).
         * The event data contains the index of the selected tab and its title.
         */
        this.tabSelect = new EventEmitter();
        /**
         * Fires each time the user closes a tab.
         * The event data contains the index of the closed tab and its instance.
         */
        this.tabClose = new EventEmitter();
        /**
         * Fires each time the user scrolls the TabStrip list.
         * The event is preventable.
         */
        this.tabScroll = new EventEmitter();
        this.hostClasses = true;
        /**
         * A query list of all declared tabs.
         */
        this.tabs = new QueryList();
        this._scrollableSettings = normalizeScrollableSettings(false);
        this.subscriptions = new Subscription();
        this.subscriptionsArePresent = false;
        validatePackage(packageMetadata);
        this.tabstripService.owner = this;
        this.scrollService.owner = this;
    }
    Object.defineProperty(TabStripComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        /**
         * Sets the height of the TabStrip.
         */
        set: function (value) {
            this._height = value;
            this.renderer.setStyle(this.wrapper.nativeElement, 'height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "scrollable", {
        get: function () {
            return this._scrollableSettings;
        },
        /**
         * Enables the scrolling of the tab list. When set to `true` and the total size of all tabs
         * is greater than the size of the TabStrip container, scroll buttons will be rendered on each end of the tab list.
         *
         * By default, `scrollable` is `false`.
         *
         * @default false
         */
        set: function (value) {
            this._scrollableSettings = normalizeScrollableSettings(value);
            if (this.tablist) {
                this.toggleScrollButtons(this.scrollService.tabsOverflow);
                this.attachWheelHandler(this.tablist.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabsAtTop", {
        get: function () {
            return this.tabPosition === 'top';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabsAtRight", {
        get: function () {
            return this.tabPosition === 'right';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabsAtBottom", {
        get: function () {
            return this.tabPosition === 'bottom';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabsAtLeft", {
        get: function () {
            return this.tabPosition === 'left';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "dir", {
        get: function () {
            return this.localization.rtl ? 'rtl' : 'ltr';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabStripScrollable", {
        get: function () {
            return this._scrollableSettings.enabled;
        },
        enumerable: true,
        configurable: true
    });
    TabStripComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (_this.scrollService.tabsOverflow) {
                _this.toggleScrollButtons(true);
            }
            else {
                _this.toggleScrollButtons(false);
            }
            setTimeout(function () {
                _this.scrollToSelectedTab();
            });
        });
        this.initDomEvents();
    };
    TabStripComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var positionChange = changes.tabPosition;
        if (positionChange) {
            var tabsAtBottomChanged_1 = positionChange.previousValue === 'bottom' || positionChange.currentValue === 'bottom';
            this.ngZone.onStable.pipe(take(1)).subscribe(function () {
                if (tabsAtBottomChanged_1) {
                    if (_this.subscriptionsArePresent) {
                        _this.subscriptions.unsubscribe();
                        _this.subscriptions = new Subscription();
                        _this.subscriptionsArePresent = false;
                    }
                    _this.initDomEvents();
                }
                _this.scrollService.restoreScrollPosition();
            });
        }
    };
    TabStripComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    Object.defineProperty(TabStripComponent.prototype, "tabsAlignmentStyles", {
        /**
         * @hidden
         */
        get: function () {
            return {
                start: 'flex-start',
                end: 'flex-end',
                center: 'center',
                justify: 'space-between'
            }[this.tabAlignment];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabListWidth", {
        /**
         * @hidden
         */
        get: function () {
            if (this.tabPosition === 'top' || this.tabPosition === 'bottom') {
                return '100%';
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "tabListHeight", {
        /**
         * @hidden
         */
        get: function () {
            if (this.tabPosition === 'left' || this.tabPosition === 'right') {
                return '100%';
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "isScrollable", {
        /**
         * @hidden
         */
        get: function () {
            return this._scrollableSettings.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "hasScrollButtons", {
        /**
         * @hidden
         */
        get: function () {
            return tabStripHasScrollButtons(this._scrollableSettings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "mouseScrollEnabled", {
        /**
         * @hidden
         */
        get: function () {
            return mouseScrollEnabled(this._scrollableSettings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabStripComponent.prototype, "itemsWrapperClass", {
        /**
         * @hidden
         */
        get: function () {
            return isTablistHorizontal(this.tabPosition) ? 'k-hstack' : 'k-vstack';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Allows the user to select a tab programmatically.
     * @param {number} index - The index of the tab that will be selected.
     */
    TabStripComponent.prototype.selectTab = function (index) {
        var tab = getTabByIndex(this.tabs, index);
        if (!tab || tab.disabled) {
            return;
        }
        this.tabstripService.selectTab(tab, index);
        this.scrollToSelectedTab();
    };
    /**
     * @hidden
     */
    TabStripComponent.prototype.onTabClick = function (originalEvent, tabIndex) {
        if (isFocusable(originalEvent.target)) {
            return;
        }
        var targetElement = originalEvent.target;
        var isTargetCloseButton = hasClass(targetElement, 'k-remove-tab') || hasClass(targetElement.parentElement, 'k-remove-tab');
        if (isTargetCloseButton) {
            return;
        }
        var tab = getTabByIndex(this.tabs, tabIndex);
        this.tabstripService.onTabSelect(tab, tabIndex);
        this.scrollToSelectedTab();
    };
    /**
     * @hidden
     */
    TabStripComponent.prototype.onResize = function () {
        var _this = this;
        if (this.scrollService.tabsOverflow) {
            this.toggleScrollButtons(true);
        }
        else {
            this.toggleScrollButtons(false);
        }
        this.ngZone.runOutsideAngular(function () {
            _this.scrollService.toggleScrollButtonsState();
        });
    };
    /**
     * @hidden
     */
    TabStripComponent.prototype.scrollToSelectedTab = function () {
        if (this._scrollableSettings.enabled) {
            this.scrollService.scrollToSelectedTab();
        }
    };
    TabStripComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.wrapper || this.subscriptionsArePresent) {
            return;
        }
        var tablist = this.tablist.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(tablist, 'keydown', function (ev) {
                _this.tabstripService.onKeyDown(ev);
            }));
        });
        this.subscriptions.add(this.renderer.listen(tablist, 'focusout', function () {
            resetTabFocus(_this.tabs);
        }));
        if (this.isScrollable && this.mouseScrollEnabled) {
            this.attachWheelHandler(tablist);
        }
        this.subscriptionsArePresent = true;
    };
    TabStripComponent.prototype.toggleScrollButtons = function (tabsOverflow) {
        var _this = this;
        this.ngZone.onStable.pipe(take(1)).subscribe(function () {
            var scrollButtonsSetting = _this._scrollableSettings.scrollButtons;
            var scrollButtonsArePresent = _this.prevScrollButton && _this.nextScrollButton;
            var shouldShowButtons = scrollButtonsArePresent && tabsOverflow;
            var shouldHideButtons = scrollButtonsArePresent &&
                !tabsOverflow &&
                scrollButtonsSetting !== 'visible';
            var alwaysVisible = scrollButtonsSetting === 'visible';
            if (shouldHideButtons) {
                _this.prevScrollButton.toggle(false);
                _this.nextScrollButton.toggle(false);
            }
            else if (shouldShowButtons || alwaysVisible) {
                _this.prevScrollButton.toggle(true);
                _this.nextScrollButton.toggle(true);
            }
            if (scrollButtonsArePresent && alwaysVisible) {
                _this.ngZone.runOutsideAngular(function () {
                    _this.scrollService.toggleScrollButtonsState();
                });
            }
        });
    };
    TabStripComponent.prototype.attachWheelHandler = function (tablist) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(tablist, 'wheel', function (wheelEvent) {
                var tabStripScrollEvent = _this.scrollService.emitScrollEvent(wheelEvent);
                var isTabStripScrollEventPrevented = tabStripScrollEvent.isDefaultPrevented();
                if (isTabStripScrollEventPrevented || !_this.scrollService.tabsOverflow) {
                    return;
                }
                _this.scrollService.onMouseScroll(wheelEvent);
            }));
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], TabStripComponent.prototype, "height", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TabStripComponent.prototype, "animate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], TabStripComponent.prototype, "tabAlignment", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], TabStripComponent.prototype, "tabPosition", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TabStripComponent.prototype, "keepTabContent", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TabStripComponent.prototype, "closable", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], TabStripComponent.prototype, "scrollable", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], TabStripComponent.prototype, "closeIcon", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], TabStripComponent.prototype, "tabSelect", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], TabStripComponent.prototype, "tabClose", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], TabStripComponent.prototype, "tabScroll", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip'),
        HostBinding('class.k-floatwrap'),
        tslib_1.__metadata("design:type", Boolean)
    ], TabStripComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip-top'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "tabsAtTop", null);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip-right'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "tabsAtRight", null);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip-bottom'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "tabsAtBottom", null);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip-left'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "tabsAtLeft", null);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "dir", null);
    tslib_1.__decorate([
        HostBinding('class.k-tabstrip-scrollable'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TabStripComponent.prototype, "tabStripScrollable", null);
    tslib_1.__decorate([
        ContentChildren(TabStripTabComponent),
        tslib_1.__metadata("design:type", QueryList)
    ], TabStripComponent.prototype, "tabs", void 0);
    tslib_1.__decorate([
        ViewChild('tablist', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], TabStripComponent.prototype, "tablist", void 0);
    tslib_1.__decorate([
        ViewChildren('tabHeaderContainer', { read: ElementRef }),
        tslib_1.__metadata("design:type", QueryList)
    ], TabStripComponent.prototype, "tabHeaderContainers", void 0);
    tslib_1.__decorate([
        ViewChild('prevScrollButton', { static: false }),
        tslib_1.__metadata("design:type", TabStripScrollableButtonComponent)
    ], TabStripComponent.prototype, "prevScrollButton", void 0);
    tslib_1.__decorate([
        ViewChild('nextScrollButton', { static: false }),
        tslib_1.__metadata("design:type", TabStripScrollableButtonComponent)
    ], TabStripComponent.prototype, "nextScrollButton", void 0);
    TabStripComponent = tslib_1.__decorate([
        Component({
            animations: [
                trigger('state', [
                    state('active', style({ opacity: 1 })),
                    transition('* => active', [
                        style({ opacity: 0 }),
                        animate('400ms ease-in')
                    ])
                ])
            ],
            providers: [
                TabStripService,
                ScrollService,
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.tabstrip'
                }
            ],
            exportAs: 'kendoTabStrip',
            selector: 'kendo-tabstrip',
            template: "\n        <ng-container kendoTabStripLocalizedMessages\n            i18n-closeTitle=\"kendo.tabstrip.closeTitle|The title for the **Close** button in the TabStrip tab.\"\n            closeTitle=\"Close\">\n        </ng-container>\n        <ng-container *ngIf=\"!tabsAtBottom\">\n            <ng-container *ngTemplateOutlet=\"heading\">\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"content\">\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"tabsAtBottom\">\n            <ng-container *ngTemplateOutlet=\"content\">\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"heading\">\n            </ng-container>\n        </ng-container>\n        <ng-template #heading>\n            <div class=\"k-tabstrip-items-wrapper\" [ngClass]=\"itemsWrapperClass\">\n                <span *ngIf=\"hasScrollButtons\"\n                     #prevScrollButton\n                    kendoTabStripScrollableButton\n                    [prev]=\"true\"></span>\n                <ul role=\"tablist\" #tablist\n                    class=\"k-reset k-tabstrip-items\"\n                    [style.justifyContent]=\"tabsAlignmentStyles\"\n                    [style.width]=\"tabListWidth\"\n                    [style.height]=\"tabListHeight\"\n                >\n                    <ng-container *ngFor=\"let tab of tabs; let i = index;\">\n                        <li *ngIf=\"!tab.closed\"\n                            #tabHeaderContainer\n                            kendoTabStripTab\n                            [ngClass]=\"tab.cssClass\"\n                            [ngStyle]=\"tab.cssStyle\"\n                            [tab]=\"tab\"\n                            [index]=\"i\"\n                            role=\"tab\"\n                            [tabStripClosable]=\"closable\"\n                            [tabStripCloseIcon]=\"closeIcon\"\n                            (click)=\"onTabClick($event, i)\"\n                            [id]=\"'k-tabstrip-tab-' + i\"\n                            [attr.aria-controls]=\"'k-tabstrip-tabpanel-' + i\">\n                        </li>\n                    </ng-container>\n                </ul>\n                <span *ngIf=\"hasScrollButtons\" #nextScrollButton\n                    kendoTabStripScrollableButton\n                    [prev]=\"false\">\n                </span>\n            </div>\n        </ng-template>\n        <ng-template #content>\n            <ng-template ngFor let-tab [ngForOf]=\"tabs\" let-i=\"index\">\n                <div\n                    [@state]=\"tab.selected && animate ? 'active' : 'inactive'\"\n                    *ngIf=\"!tab.closed && (tab.selected || keepTabContent)\"\n                    [ngClass]=\"!this.keepTabContent || tab.selected ? 'k-content k-state-active' : 'k-content'\"\n                    [tabIndex]=\"0\"\n                    role=\"tabpanel\"\n                    [id]=\"'k-tabstrip-tabpanel-' + i\"\n                    [attr.aria-hidden]=\"!tab.selected\"\n                    [attr.aria-expanded]=\"tab.selected\"\n                    [attr.aria-labelledby]=\"'k-tabstrip-tab-' + i\"\n                    [attr.aria-disabled]=\"tab.disabled\"\n                >\n                    <ng-template [ngTemplateOutlet]=\"tab.tabContent?.templateRef\">\n                    </ng-template>\n                </div>\n            </ng-template>\n        </ng-template>\n        <kendo-resize-sensor *ngIf=\"isScrollable\" (resize)=\"onResize()\"></kendo-resize-sensor>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [LocalizationService,
            Renderer2,
            ElementRef,
            TabStripService,
            ScrollService,
            NgZone])
    ], TabStripComponent);
    return TabStripComponent;
}());
export { TabStripComponent };
