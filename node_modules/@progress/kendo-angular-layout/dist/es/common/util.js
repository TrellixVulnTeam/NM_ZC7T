/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Keys } from '@progress/kendo-angular-common';
var nextId = 0;
var SIZES = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
var ROUNDNESS = {
    small: 'sm',
    medium: 'md',
    large: 'lg',
    full: 'full'
};
var SHAPE_TO_ROUNDED = {
    rounded: 'large',
    circle: 'full'
};
var parsePanelBarItems = function (data) {
    return data.map(function (item) {
        if (!item.id) {
            item.id = "default-" + nextId++;
        }
        if (item.children) {
            item.children = parsePanelBarItems(item.children);
        }
        return item;
    });
};
var ɵ0 = parsePanelBarItems;
export default {
    parsePanelBarItems: parsePanelBarItems
};
/**
 * @hidden
 */
export var isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
export var isHorizontalArrowKey = function (keyCode) { return keyCode === Keys.ArrowLeft || keyCode === Keys.ArrowRight; };
/**
 * @hidden
 */
export var isVerticalArrowKey = function (keyCode) { return keyCode === Keys.ArrowUp || keyCode === Keys.ArrowDown; };
/**
 * @hidden
 */
export var isArrowKey = function (keyCode) {
    return isHorizontalArrowKey(keyCode) || isVerticalArrowKey(keyCode);
};
/**
 * @hidden
 */
export var isNavigationKey = function (keyCode) {
    return keyCode === Keys.PageUp || keyCode === Keys.PageDown ||
        keyCode === Keys.Home || keyCode === Keys.End;
};
/**
 * @hidden
 *
 * Returns the styling classes to be added and removed
 */
export var getStylingClasses = function (componentType, stylingOption, previousValue, newValue) {
    switch (stylingOption) {
        case 'size':
            return {
                toRemove: "k-" + componentType + "-" + SIZES[previousValue],
                toAdd: newValue ? "k-" + componentType + "-" + SIZES[newValue] : null
            };
        case 'rounded':
            return {
                toRemove: "k-rounded-" + ROUNDNESS[previousValue],
                toAdd: newValue ? "k-rounded-" + ROUNDNESS[newValue] : null
            };
        default:
            break;
    }
};
/**
 * @hidden
 */
export var mapShapeToRounded = function (shape) { return SHAPE_TO_ROUNDED[shape] || null; };
/**
 * @hidden
 */
export var isNumber = function (value) { return typeof value === 'number' && isFinite(value); };
export { ɵ0 };
