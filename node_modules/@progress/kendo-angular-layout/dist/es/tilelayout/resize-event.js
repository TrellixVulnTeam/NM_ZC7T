/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { PreventableEvent } from './preventable-event';
/**
 * Arguments for the `resize` event. The `resize` event fires when any item size
 * is changed from the UI. If you cancel the event, the change is prevented ([see example]({% slug resizing_tilelayout %}#toc-handling-the-resize-event)).
 */
var TileLayoutResizeEvent = /** @class */ (function (_super) {
    tslib_1.__extends(TileLayoutResizeEvent, _super);
    /**
     * Constructs the event arguments for the `resize` event.
     * @param item - The TileLayoutItem being resized
     * @param items - The TileLayoutItem collection
     * @param newRowSpan - The new rowSpan of the resized item
     * @param oldRowSpan - The initial rowSpan of the resized item
     * @param newColSpan - The new colSpan of the resized item
     * @param oldColSpan - The initial colSpan of the resized item
     * @hidden
     */
    function TileLayoutResizeEvent(item, items, newRowSpan, oldRowSpan, newColSpan, oldColSpan) {
        var _this = _super.call(this) || this;
        _this.item = item;
        _this.items = items;
        _this.newRowSpan = newRowSpan;
        _this.oldRowSpan = oldRowSpan;
        _this.newColSpan = newColSpan;
        _this.oldColSpan = oldColSpan;
        return _this;
    }
    return TileLayoutResizeEvent;
}(PreventableEvent));
export { TileLayoutResizeEvent };
