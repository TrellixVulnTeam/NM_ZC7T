/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
/**
 * @hidden
 */
export var VERTICAL_SUFFIX = {
    top: 'start',
    middle: 'center',
    bottom: 'end',
    stretch: 'stretch'
};
/**
 * @hidden
 */
export var JUSTIFY_PREFIX = "k-justify-content";
/**
 * @hidden
 */
export var GRID_JUSTIFY_PREFIX = "k-justify-items";
/**
 * @hidden
 */
export var ALIGN_PREFIX = "k-align-items";
/**
 * @hidden
 */
export var normalizeGap = function (gap) {
    if (typeof gap === 'number' || typeof gap === 'string') {
        return { cols: gap, rows: gap };
    }
    else {
        var parsedGap = {};
        parsedGap.rows = gap.rows ? gap.rows : 0;
        parsedGap.cols = gap.cols ? gap.cols : 0;
        return parsedGap;
    }
};
/**
 * @hidden
 */
export var generateGapStyle = function (gap) {
    if (gap.rows === gap.cols) {
        return typeof gap.rows === 'number' ? gap.rows + "px" : gap.rows;
    }
    else {
        var rowStyle = "" + (typeof gap.rows === 'number' ? gap.rows + 'px' : gap.rows);
        var colStyle = "" + (typeof gap.cols === 'number' ? gap.cols + 'px' : gap.cols);
        return rowStyle + " " + colStyle;
    }
};
/**
 * @hidden
 */
export var generateGridStyle = function (items, itemType) {
    var styling = [];
    items.forEach(function (item) {
        if (typeof item === 'number') {
            styling.push(item + "px");
        }
        else if (typeof item === 'string') {
            styling.push(item);
        }
        else {
            if (itemType === 'rows') {
                var rowHeight = item.height;
                if (rowHeight) {
                    styling.push(typeof rowHeight === 'number' ? rowHeight + "px" : rowHeight);
                }
                else {
                    styling.push('0px');
                }
            }
            else {
                var colWidth = item.width;
                if (colWidth) {
                    styling.push(typeof colWidth === 'number' ? colWidth + "px" : colWidth);
                }
                else {
                    styling.push('0px');
                }
            }
        }
    });
    return styling;
};
/**
 * @hidden
 */
export var validateGridLayoutRowsCols = function (arr) {
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var el = arr_1[_i];
        var isNum = typeof el === 'number';
        var isStr = typeof el === 'string';
        var isObject = typeof el === 'object' && el !== null;
        if (!isNum && !isStr && !isObject) {
            return false;
        }
    }
    return true;
};
