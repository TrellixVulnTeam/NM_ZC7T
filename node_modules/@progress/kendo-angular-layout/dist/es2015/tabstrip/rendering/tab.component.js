/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { TabStripTabComponent } from '../models/tabstrip-tab.component';
import { TabStripService } from '../tabstrip.service';
import { Component, HostBinding, Input } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { isPresent } from '../../common/util';
/**
 * @hidden
 */
let TabComponent = class TabComponent {
    constructor(localization, tabstripService) {
        this.localization = localization;
        this.tabstripService = tabstripService;
        this.hostClasses = true;
    }
    get activeClass() {
        return this.tab.selected;
    }
    get disabledClass() {
        return this.tab.disabled;
    }
    get focusedClass() {
        return this.tab.focused;
    }
    get tabIndex() {
        return this.tab.selected || this.tab.focused ? 0 : -1;
    }
    get tabClosable() {
        if (this.tab.closable !== undefined) {
            return this.tab.closable;
        }
        return this.tabStripClosable;
    }
    get closeButtonClasses() {
        if (isPresent(this.tab.closeIcon)) {
            return this.tab.closeIcon;
        }
        return this.tabStripCloseIcon;
    }
    get closeButtonTitle() {
        return this.localization.get('closeTitle');
    }
    closeTab(index) {
        this.tabstripService.onTabClose(this.tab, index);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TabStripTabComponent)
], TabComponent.prototype, "tab", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], TabComponent.prototype, "index", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TabComponent.prototype, "tabStripClosable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TabComponent.prototype, "tabStripCloseIcon", void 0);
tslib_1.__decorate([
    HostBinding('class.k-item'),
    HostBinding('class.k-state-default'),
    tslib_1.__metadata("design:type", Boolean)
], TabComponent.prototype, "hostClasses", void 0);
tslib_1.__decorate([
    HostBinding('attr.aria-selected]'),
    HostBinding('class.k-state-active'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], TabComponent.prototype, "activeClass", null);
tslib_1.__decorate([
    HostBinding('attr.aria-disabled]'),
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], TabComponent.prototype, "disabledClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-focused'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], TabComponent.prototype, "focusedClass", null);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [])
], TabComponent.prototype, "tabIndex", null);
TabComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoTabStripTab]',
        template: `
        <span class="k-link" *ngIf="!tab.tabTitle">{{ tab.title }}</span>
        <span class="k-link" *ngIf="tab.tabTitle">
            <ng-template [ngTemplateOutlet]="tab.tabTitle?.templateRef">
            </ng-template>
        </span>
        <span class="k-remove-tab k-button k-icon-button k-flat" *ngIf="tabClosable"
            role="button"
            [title]="closeButtonTitle"
            [attr.aria-label]="closeButtonTitle"
            (click)="closeTab(index)"
        >
            <span [ngClass]="closeButtonClasses"></span>
        </span>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [LocalizationService,
        TabStripService])
], TabComponent);
export { TabComponent };
