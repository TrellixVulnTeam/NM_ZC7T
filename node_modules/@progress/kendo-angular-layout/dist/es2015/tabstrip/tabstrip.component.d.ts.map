{"version":3,"file":"tabstrip.component.d.ts","sources":["tabstrip.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, QueryList, Renderer2, OnDestroy, AfterViewInit, NgZone, SimpleChanges } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { TabStripTabComponent } from './models/tabstrip-tab.component';\nimport { SelectEvent, TabCloseEvent } from './events';\nimport { TabStripService } from './tabstrip.service';\nimport { ScrollService } from './tabstrip-scroll.service';\nimport { TabPosition } from './models/tab-position';\nimport { TabAlignment } from './models/tab-alignment';\nimport { Subscription } from 'rxjs';\nimport { TabStripScrollableSettings } from './models/scrollable-settings';\nimport { TabScrollEvent } from './events/tabscroll-event';\nimport { TabStripScrollableButtonComponent } from './scrollable-button.component';\n/**\n * Represents the [Kendo UI TabStrip component for Angular]({% slug overview_tabstrip %}).\n */\nexport declare class TabStripComponent implements AfterViewInit, OnDestroy {\n    localization: LocalizationService;\n    private renderer;\n    wrapper: ElementRef;\n    private tabstripService;\n    private scrollService;\n    private ngZone;\n    /**\n     * Sets the height of the TabStrip.\n     */\n    height: string | null | undefined;\n    /**\n     * Enables the tab animation.\n     *\n     * @default true\n     */\n    animate: boolean;\n    /**\n     * Sets the alignment of the tabs.\n     */\n    tabAlignment: TabAlignment;\n    /**\n     * Sets the position of the tabs. Defaults to `top`.\n     *\n     * @default 'top'\n     */\n    tabPosition: TabPosition;\n    /**\n     * When set to `true`, the component renders all tabs and they are persisted in the DOM.\n     * By default, `keepTabContent` is `false`.\n     *\n     * @default false\n     */\n    keepTabContent: boolean;\n    /**\n     * When set to `true`, a close button will be rendered inside each tab.\n     * By default, `closable` is `false`.\n     *\n     * @default false\n     */\n    closable: boolean;\n    /**\n     * Enables the scrolling of the tab list. When set to `true` and the total size of all tabs\n     * is greater than the size of the TabStrip container, scroll buttons will be rendered on each end of the tab list.\n     *\n     * By default, `scrollable` is `false`.\n     *\n     * @default false\n     */\n    scrollable: boolean | TabStripScrollableSettings;\n    /**\n     * Allows defining a custom CSS class, or multiple classes separated by spaces, which will be applied to the close button span element.\n     * Allows the usage of custom icons.\n     */\n    closeIcon: string;\n    /**\n     * Fires each time the user selects a tab ([see example]({% slug overview_tabstrip %}#toc-basic-usage)).\n     * The event data contains the index of the selected tab and its title.\n     */\n    tabSelect: EventEmitter<SelectEvent>;\n    /**\n     * Fires each time the user closes a tab.\n     * The event data contains the index of the closed tab and its instance.\n     */\n    tabClose: EventEmitter<TabCloseEvent>;\n    /**\n     * Fires each time the user scrolls the TabStrip list.\n     * The event is preventable.\n     */\n    tabScroll: EventEmitter<TabScrollEvent>;\n    hostClasses: boolean;\n    readonly tabsAtTop: boolean;\n    readonly tabsAtRight: boolean;\n    readonly tabsAtBottom: boolean;\n    readonly tabsAtLeft: boolean;\n    readonly dir: string;\n    readonly tabStripScrollable: boolean;\n    /**\n     * A query list of all declared tabs.\n     */\n    tabs: QueryList<TabStripTabComponent>;\n    /**\n     * @hidden\n     */\n    tablist: ElementRef;\n    /**\n     * @hidden\n     */\n    tabHeaderContainers: QueryList<ElementRef<HTMLLIElement>>;\n    /**\n     * @hidden\n     */\n    prevScrollButton: TabStripScrollableButtonComponent;\n    /**\n     * @hidden\n     */\n    nextScrollButton: TabStripScrollableButtonComponent;\n    /**\n     * @hidden\n     */\n    localizationChangeSubscription: Subscription;\n    private _height;\n    private _scrollableSettings;\n    private subscriptions;\n    private subscriptionsArePresent;\n    constructor(localization: LocalizationService, renderer: Renderer2, wrapper: ElementRef, tabstripService: TabStripService, scrollService: ScrollService, ngZone: NgZone);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly tabsAlignmentStyles: string;\n    /**\n     * @hidden\n     */\n    readonly tabListWidth: string;\n    /**\n     * @hidden\n     */\n    readonly tabListHeight: string;\n    /**\n     * @hidden\n     */\n    readonly isScrollable: boolean;\n    /**\n     * @hidden\n     */\n    readonly hasScrollButtons: boolean;\n    /**\n     * @hidden\n     */\n    readonly mouseScrollEnabled: boolean;\n    /**\n     * @hidden\n     */\n    readonly itemsWrapperClass: string;\n    /**\n     * Allows the user to select a tab programmatically.\n     * @param {number} index - The index of the tab that will be selected.\n     */\n    selectTab(index: number): void;\n    /**\n     * @hidden\n     */\n    onTabClick(originalEvent: MouseEvent, tabIndex: number): void;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    /**\n     * @hidden\n     */\n    scrollToSelectedTab(): void;\n    private initDomEvents;\n    private toggleScrollButtons;\n    private attachWheelHandler;\n}\n"]}