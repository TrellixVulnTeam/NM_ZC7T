{"version":3,"file":"avatar.component.d.ts","sources":["avatar.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit, Renderer2, ElementRef, AfterViewInit } from '@angular/core';\nimport { AvatarFillMode, AvatarShape, AvatarSize, AvatarThemeColor, AvatarRounded } from './models/models';\n/**\n * Displays images, icons or initials representing people or other entities.\n */\nexport declare class AvatarComponent implements OnInit, AfterViewInit {\n    private renderer;\n    private element;\n    hostClass: boolean;\n    /**\n     * @hidden\n     */\n    readonly borderClass: boolean;\n    /**\n     * @hidden\n     */\n    readonly flexBasis: string;\n    /**\n     * Sets the shape for the avatar.\n     * @hidden\n     */\n    shape: AvatarShape;\n    /**\n     * Specifies the size of the avatar\n     * ([see example]({% slug appearance_avatar %}#toc-size)).\n     *\n     * The possible values are:\n     * * `small`\n     * * `medium` (Default)\n     * * `large`\n     *\n     */\n    size: AvatarSize;\n    /**\n     * Specifies the rounded styling of the avatar\n     * ([see example]({% slug appearance_avatar %}#toc-rounded-corners)).\n     *\n     * The possible values are:\n     * * `small`\n     * * `medium`\n     * * `large`\n     * * `full` (Default)\n     * * null\n     *\n     */\n    rounded: AvatarRounded;\n    /**\n     * Specifies the theme color of the avatar.\n     * The theme color will be applied as background and border color, while also amending the text color accordingly.\n     *\n     * The possible values are:\n     * * `base`&mdash; Applies the base coloring value.\n     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.\n     * * `secondary`&mdash;Applies coloring based on secondary theme color.\n     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.\n     * * `info`&mdash;Applies coloring based on info theme color.\n     * * `success`&mdash; Applies coloring based on success theme color.\n     * * `warning`&mdash; Applies coloring based on warning theme color.\n     * * `error`&mdash; Applies coloring based on error theme color.\n     * * `dark`&mdash; Applies coloring based on dark theme color.\n     * * `light`&mdash; Applies coloring based on light theme color.\n     * * `inverse`&mdash; Applies coloring based on inverted theme color.\n     */\n    themeColor: AvatarThemeColor;\n    /**\n     * Specifies the appearance fill style of the avatar.\n     *\n     * The possible values are:\n     * * `solid` (Default)\n     * * `outline`\n     * * null\n     *\n     */\n    fillMode: AvatarFillMode;\n    /**\n     * Specifies the appearance fill style of the avatar.\n     * Deprecated, left for backward compatibility.\n     *\n     * @hidden\n     */\n    fill: AvatarFillMode;\n    /**\n     * Sets a border to the avatar.\n     */\n    border: boolean;\n    /**\n     * Defines a CSS class — or multiple classes separated by spaces —\n     * which are applied to a span element inside the avatar.\n     * Allows the usage of custom icons.\n     */\n    iconClass: string;\n    /**\n     * Sets the width of the avatar.\n     */\n    width: string;\n    /**\n     * @hidden\n     */\n    readonly avatarWidth: string;\n    /**\n     * Sets the height of the avatar.\n     */\n    height: string;\n    /**\n     * @hidden\n     */\n    readonly avatarHeight: string;\n    /**\n     * The CSS styles that will be rendered on the content element of the avatar.\n     * Supports the type of values that are supported by [ngStyle]({{ site.data.urls.angular['ngstyleapi'] }}).\n     */\n    cssStyle?: any;\n    /**\n     * Sets `initials` to the avatar.\n     */\n    initials: string;\n    /**\n     * Sets the `icon` for the avatar.\n     * All [Kendo UI Icons]({% slug icons %}#toc-list-of-font-icons) are supported.\n     */\n    icon: string;\n    /**\n     * Sets the `image` source of the avatar.\n     */\n    imageSrc: string;\n    private _themeColor;\n    private _size;\n    private _fillMode;\n    private _rounded;\n    constructor(renderer: Renderer2, element: ElementRef);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    iconClasses(): string;\n    /**\n     * @hidden\n     */\n    readonly customAvatar: boolean;\n    private verifyProperties;\n    private handleClasses;\n    private handleFillModeAndThemeColorClasses;\n}\n"]}