/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { RESIZE_HANDLE_DIMENSIONS } from './constants';
/**
 * @hidden
 */
let TileLayoutResizeHandleDirective = class TileLayoutResizeHandleDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.sizeHandle();
    }
    setHorizontalPosition(element) {
        this.renderer.setStyle(element, this.rtl ? 'left' : 'right', -RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].overlapX + 'px');
    }
    setBottom(element) {
        this.renderer.setStyle(element, 'bottom', -RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].overlapY + 'px');
    }
    sizeHandle() {
        const element = this.el.nativeElement;
        const handleWidth = RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].width ?
            `${RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].width}px` : '100%';
        const handleHeight = RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].height ?
            `${RESIZE_HANDLE_DIMENSIONS[this.resizeDirection].height}px` : '100%';
        this.renderer.setStyle(element, 'width', handleWidth);
        this.renderer.setStyle(element, 'height', handleHeight);
        if (this.resizeDirection === 'ew') {
            this.setHorizontalPosition(element);
        }
        else if (this.resizeDirection === 'ns') {
            this.setBottom(element);
        }
        else {
            this.setHorizontalPosition(element);
            this.setBottom(element);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TileLayoutResizeHandleDirective.prototype, "resizeDirection", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TileLayoutResizeHandleDirective.prototype, "rtl", void 0);
TileLayoutResizeHandleDirective = tslib_1.__decorate([
    Directive({
        selector: '[kendoTileLayoutResizeHandle]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2])
], TileLayoutResizeHandleDirective);
export { TileLayoutResizeHandleDirective };
