{"version":3,"file":"tilelayout.component.d.ts","sources":["tilelayout.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, QueryList, SimpleChanges, ElementRef, Renderer2, NgZone, OnInit, AfterViewInit, OnDestroy, AfterContentInit, OnChanges } from '@angular/core';\nimport { TileLayoutDraggingService } from './dragging-service';\nimport { TileLayoutResizeEvent } from './resize-event';\nimport { TileLayoutItemComponent } from './tilelayout-item.component';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { TileLayoutReorderEvent } from './reorder-event';\nimport { TileLayoutGap } from './models/gap.interface';\nimport { TileLayoutFlowMode } from './models/flowmode.type';\n/**\n * Represents the [Kendo UI TileLayout component for Angular]({% slug overview_tilelayout %})\n */\nexport declare class TileLayoutComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy, OnChanges {\n    private elem;\n    private renderer;\n    private localization;\n    private draggingService;\n    private zone;\n    /**\n     * Defines the number of columns ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     * @default 1\n     */\n    columns: number;\n    /**\n     * Determines the width of the columns. Numeric values are treated as pixels ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     * @default '1fr'\n     */\n    columnWidth: string | number;\n    /**\n     * The numeric values which determine the spacing in pixels between the layout items horizontally and vertically.\n     * Properties:\n     * * rows - the vertical spacing. Numeric values are treated as pixels. Defaults to `16`.\n     * * columns - the horizontal spacing. Numeric values are treated as pixels. Defaults to `16`.\n     *\n     * When bound to a single numeric value, it will be set to both `rows` and `columns` properties.\n     */\n    gap: TileLayoutGap | number;\n    /**\n     * Determines whether the reordering functionality will be enabled ([see example]({% slug reordering_tilelayout %})).\n     * @default false\n     */\n    reorderable: boolean;\n    /**\n     * Determines whether the resizing functionality will be enabled ([see example]({% slug resizing_tilelayout %})).\n     * @default false\n     */\n    resizable: boolean;\n    /**\n     * Determines the height of the rows. Numeric values are treated as pixels ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     * @default '1fr'\n     */\n    rowHeight: string | number;\n    /**\n     * Controls how the auto-placement algorithm works, specifying exactly how auto-placed items are flowed in the TileLayout ([see example]({% slug tiles_autoflow_tilelayout %})).\n     * For further reference, check the [grid-auto-flow CSS article](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow).\n     *\n     * The possible values are:\n     * * (Default) `column`\n     * * `row`\n     * * `row dense`\n     * * `column dense`\n     * * `none`\n     *\n     */\n    autoFlow: TileLayoutFlowMode;\n    /**\n     * Fires when the user completes the reordering of the item ([see example]({% slug overview_tilelayout %}#toc-events)).\n     * This event is preventable. If you cancel it, the item will not be reordered.\n     */\n    reorder: EventEmitter<TileLayoutReorderEvent>;\n    /**\n     * Fires when the user completes the resizing of the item ([see example]({% slug overview_tilelayout %}#toc-events)).\n     * This event is preventable. If you cancel it, the item will not be resized.\n     */\n    resize: EventEmitter<TileLayoutResizeEvent>;\n    hostClass: boolean;\n    readonly gapStyle: string;\n    direction: 'ltr' | 'rtl';\n    readonly currentColStart: string;\n    readonly currentRowStart: string;\n    readonly draggedItemWrapper: HTMLElement;\n    readonly targetOrder: number;\n    /**\n     * A query list of all declared [TileLayoutItemComponent]({% slug api_layout_tilelayoutitemcomponent %}) items.\n     */\n    items: QueryList<TileLayoutItemComponent>;\n    private hint;\n    private draggable;\n    private subs;\n    private _gap;\n    constructor(elem: ElementRef, renderer: Renderer2, localization: LocalizationService, draggingService: TileLayoutDraggingService, zone: NgZone);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private handlePress;\n    private handleDrag;\n    private handleRelease;\n    private applyColStyling;\n    private applyRowStyling;\n    private draggingServiceConfig;\n    private initializeDraggable;\n    private applyAutoFlow;\n    private setItemsOrder;\n}\n"]}