/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ContentChildren, QueryList, ElementRef, Renderer2, NgZone, ViewChild } from '@angular/core';
import { TileLayoutDraggingService } from './dragging-service';
import { Subscription } from 'rxjs';
import Draggable from '@telerik/kendo-draggable';
import { TileLayoutItemComponent } from './tilelayout-item.component';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { hasObservers } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { isPresent } from '../common/util';
const autoFlowClasses = {
    column: 'k-grid-flow-col',
    row: 'k-grid-flow-row',
    'column-dense': 'k-grid-flow-col-dense',
    'row-dense': 'k-grid-flow-row-dense'
};
/**
 * Represents the [Kendo UI TileLayout component for Angular]({% slug overview_tilelayout %})
 */
let TileLayoutComponent = class TileLayoutComponent {
    constructor(elem, renderer, localization, draggingService, zone) {
        this.elem = elem;
        this.renderer = renderer;
        this.localization = localization;
        this.draggingService = draggingService;
        this.zone = zone;
        /**
         * Defines the number of columns ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
         * @default 1
         */
        this.columns = 1;
        /**
         * Determines the width of the columns. Numeric values are treated as pixels ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
         * @default '1fr'
         */
        this.columnWidth = '1fr';
        /**
         * Determines whether the reordering functionality will be enabled ([see example]({% slug reordering_tilelayout %})).
         * @default false
         */
        this.reorderable = false;
        /**
         * Determines whether the resizing functionality will be enabled ([see example]({% slug resizing_tilelayout %})).
         * @default false
         */
        this.resizable = false;
        /**
         * Determines the height of the rows. Numeric values are treated as pixels ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
         * @default '1fr'
         */
        this.rowHeight = '1fr';
        /**
         * Controls how the auto-placement algorithm works, specifying exactly how auto-placed items are flowed in the TileLayout ([see example]({% slug tiles_autoflow_tilelayout %})).
         * For further reference, check the [grid-auto-flow CSS article](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow).
         *
         * The possible values are:
         * * (Default) `column`
         * * `row`
         * * `row dense`
         * * `column dense`
         * * `none`
         *
         */
        this.autoFlow = 'column';
        /**
         * Fires when the user completes the reordering of the item ([see example]({% slug overview_tilelayout %}#toc-events)).
         * This event is preventable. If you cancel it, the item will not be reordered.
         */
        this.reorder = new EventEmitter();
        /**
         * Fires when the user completes the resizing of the item ([see example]({% slug overview_tilelayout %}#toc-events)).
         * This event is preventable. If you cancel it, the item will not be resized.
         */
        this.resize = new EventEmitter();
        this.hostClass = true;
        this.subs = new Subscription();
        this._gap = {
            rows: 16,
            columns: 16
        };
        validatePackage(packageMetadata);
    }
    /**
     * The numeric values which determine the spacing in pixels between the layout items horizontally and vertically.
     * Properties:
     * * rows - the vertical spacing. Numeric values are treated as pixels. Defaults to `16`.
     * * columns - the horizontal spacing. Numeric values are treated as pixels. Defaults to `16`.
     *
     * When bound to a single numeric value, it will be set to both `rows` and `columns` properties.
     */
    set gap(value) {
        this._gap = (typeof value === 'number') ? { rows: value, columns: value } : Object.assign(this._gap, value);
    }
    get gap() {
        return this._gap;
    }
    get gapStyle() {
        return `${this.gap.rows}px ${this.gap.columns}px`;
    }
    get currentColStart() {
        return this.draggingService.colStart;
    }
    get currentRowStart() {
        return this.draggingService.rowStart;
    }
    get draggedItemWrapper() {
        return this.draggingService.itemWrapper;
    }
    get targetOrder() {
        return this.draggingService.order;
    }
    ngOnInit() {
        this.applyColStyling();
        this.applyRowStyling();
        this.draggingService.reorderable.next(this.reorderable);
        this.draggingService.resizable.next(this.resizable);
        if (hasObservers(this.reorder)) {
            this.subs.add(this.draggingService.reorder.subscribe(e => this.reorder.emit(e)));
        }
        if (hasObservers(this.resize)) {
            this.subs.add(this.draggingService.resize.subscribe(e => this.resize.emit(e)));
        }
        this.subs.add(this.draggingService.reorderable.subscribe(reorderable => {
            if (reorderable && !this.draggable) {
                this.initializeDraggable();
            }
        }));
        this.subs.add(this.draggingService.resizable.subscribe(resizable => {
            if (resizable && !this.draggable) {
                this.initializeDraggable();
            }
        }));
        this.subs.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
    }
    ngAfterViewInit() {
        this.draggingService.tileLayoutSettings = this.draggingServiceConfig();
        this.applyAutoFlow(null, autoFlowClasses[this.autoFlow]);
        this.items.changes.subscribe(() => {
            this.setItemsOrder();
            this.draggingService.tileLayoutSettings.items = this.items.toArray();
        });
    }
    ngAfterContentInit() {
        this.setItemsOrder();
    }
    ngOnChanges(changes) {
        if (changes.columns || changes.columnWidth) {
            this.applyColStyling();
        }
        if (changes.rowHeight) {
            this.applyRowStyling();
        }
        if (changes.reorderable) {
            this.draggingService.reorderable.next(changes.reorderable.currentValue);
        }
        if (changes.resizable) {
            this.draggingService.resizable.next(changes.resizable.currentValue);
        }
        if (changes.gap || changes.autoFlow || changes.columns) {
            this.draggingService.tileLayoutSettings = this.draggingServiceConfig();
            if (changes.autoFlow) {
                this.applyAutoFlow(autoFlowClasses[changes.autoFlow.previousValue] || '', autoFlowClasses[changes.autoFlow.currentValue]);
            }
        }
    }
    ngOnDestroy() {
        if (this.draggable) {
            this.draggable.destroy();
        }
        this.subs.unsubscribe();
    }
    handlePress({ originalEvent }) {
        this.draggingService.handlePress(originalEvent);
    }
    handleDrag({ originalEvent }) {
        this.draggingService.handleDrag(originalEvent);
    }
    handleRelease({ originalEvent }) {
        this.draggingService.handleRelease(originalEvent);
    }
    applyColStyling() {
        const colWidth = typeof this.columnWidth === 'number' ? `${this.columnWidth}px` : this.columnWidth;
        const gridTemplateColumnsStyle = `repeat(${this.columns}, ${colWidth})`;
        this.renderer.setStyle(this.elem.nativeElement, 'grid-template-columns', gridTemplateColumnsStyle);
    }
    applyRowStyling() {
        const rowHeight = typeof this.rowHeight === 'number' ? `${this.rowHeight}px` : this.rowHeight;
        const gridAutoRowsStyle = `${rowHeight}`;
        this.renderer.setStyle(this.elem.nativeElement, 'grid-auto-rows', gridAutoRowsStyle);
    }
    draggingServiceConfig() {
        return {
            tileLayoutElement: this.elem ? this.elem.nativeElement : undefined,
            hintElement: this.hint ? this.hint.nativeElement : undefined,
            gap: this.gap,
            columns: this.columns,
            autoFlow: this.autoFlow,
            items: this.items ? this.items.toArray() : []
        };
    }
    initializeDraggable() {
        this.draggable = new Draggable({
            press: this.handlePress.bind(this),
            drag: this.handleDrag.bind(this),
            release: this.handleRelease.bind(this)
        });
        this.zone.runOutsideAngular(() => this.draggable.bindTo(this.elem.nativeElement));
    }
    applyAutoFlow(classToRemove, classToAdd) {
        const element = this.elem.nativeElement;
        if (classToRemove) {
            this.renderer.removeClass(element, classToRemove);
        }
        if (this.autoFlow !== 'none' && isPresent(classToAdd)) {
            this.renderer.addClass(element, classToAdd);
        }
    }
    setItemsOrder() {
        this.items.forEach((item, index) => {
            if (!isPresent(item.order)) {
                item.order = index;
            }
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], TileLayoutComponent.prototype, "columns", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TileLayoutComponent.prototype, "columnWidth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], TileLayoutComponent.prototype, "gap", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TileLayoutComponent.prototype, "reorderable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TileLayoutComponent.prototype, "resizable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TileLayoutComponent.prototype, "rowHeight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TileLayoutComponent.prototype, "autoFlow", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TileLayoutComponent.prototype, "reorder", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TileLayoutComponent.prototype, "resize", void 0);
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-tilelayout'),
    tslib_1.__metadata("design:type", Boolean)
], TileLayoutComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('style.gap'),
    HostBinding('style.padding'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], TileLayoutComponent.prototype, "gapStyle", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], TileLayoutComponent.prototype, "direction", void 0);
tslib_1.__decorate([
    ContentChildren(TileLayoutItemComponent),
    tslib_1.__metadata("design:type", QueryList)
], TileLayoutComponent.prototype, "items", void 0);
tslib_1.__decorate([
    ViewChild('hint', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], TileLayoutComponent.prototype, "hint", void 0);
TileLayoutComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-tilelayout',
        providers: [
            LocalizationService,
            TileLayoutDraggingService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.tilelayout.component'
            }
        ],
        template: `
        <ng-content></ng-content>
        <div #hint class="k-layout-item-hint k-layout-item-hint-reorder"
            [style.display]="'none'"
            [style.order]="targetOrder"
            [style.gridColumnEnd]="draggedItemWrapper?.style.gridColumnEnd"
            [style.gridRowEnd]="draggedItemWrapper?.style.gridRowEnd"
            [style.gridColumnStart]="currentColStart"
            [style.gridRowStart]="currentRowStart"
            [style.zIndex]="'1'"></div>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        LocalizationService,
        TileLayoutDraggingService,
        NgZone])
], TileLayoutComponent);
export { TileLayoutComponent };
