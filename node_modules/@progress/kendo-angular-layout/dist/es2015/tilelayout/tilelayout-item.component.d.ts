/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ElementRef, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { TileLayoutDraggingService } from './dragging-service';
/**
 * Represents a tile item within the TileLayoutComponent.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TileLayoutItemComponent implements AfterViewInit, OnDestroy, OnChanges {
    elem: ElementRef;
    private renderer;
    private localization;
    private draggingService;
    /**
     * The title that will be rendered in the item header ([see example]({% slug tiles_tilelayout %}#toc-tiles-configuration)).
     */
    title: string;
    /**
     * Determines how many rows will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     * @default 1
     */
    rowSpan: number;
    /**
     * Determines how many columns will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     * @default 1
     */
    colSpan: number;
    /**
     * Determines the order of the tile items within the TileLayout.
     * If not set, the items will receive increasing sequential order in accordance with
     * their position in the DOM when initially rendered.
     */
    order: number;
    /**
     * Sets the starting column of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     */
    col: number;
    /**
     * Sets the starting row of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     */
    row: number;
    /**
     * Determines whether the item can be reordered. By default all items are reorderable when the [reorderable]({% slug api_layout_tilelayoutcomponent %}#toc-reorderable) property of the TileLayoutComponent is set to `true` ([see example]({% slug reordering_tilelayout %}#toc-disable-reordering)).
     *
     * @default true
     */
    reorderable: boolean;
    /**
     * Determines whether the item can be resized. By default all items are resizable when the [resizable]({% slug api_layout_tilelayoutcomponent %}#resizable) property of the TileLayoutComponent is set to `true` ([see example]({% slug resizing_tilelayout %}#toc-disable-resizing)).
     * @default true
     */
    resizable: boolean;
    itemClass: boolean;
    readonly colEnd: string;
    readonly rowEnd: string;
    readonly colStart: string;
    readonly rowStart: string;
    /**
     * @hidden
     */
    resizeDirections: Array<string>;
    /**
     * @hidden
     */
    rtl: boolean;
    private subs;
    private _order;
    constructor(elem: ElementRef, renderer: Renderer2, localization: LocalizationService, draggingService: TileLayoutDraggingService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private toggleCursorClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TileLayoutItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TileLayoutItemComponent, "kendo-tilelayout-item", never, { "rowSpan": "rowSpan"; "colSpan": "colSpan"; "reorderable": "reorderable"; "resizable": "resizable"; "order": "order"; "title": "title"; "col": "col"; "row": "row"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=tilelayout-item.component.d.ts.map