{"version":3,"file":"tilelayout-item.component.d.ts","sources":["tilelayout-item.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, ElementRef, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { TileLayoutDraggingService } from './dragging-service';\n/**\n * Represents a tile item within the TileLayoutComponent.\n */\nexport declare class TileLayoutItemComponent implements AfterViewInit, OnDestroy, OnChanges {\n    elem: ElementRef;\n    private renderer;\n    private localization;\n    private draggingService;\n    /**\n     * The title that will be rendered in the item header ([see example]({% slug tiles_tilelayout %}#toc-tiles-configuration)).\n     */\n    title: string;\n    /**\n     * Determines how many rows will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     * @default 1\n     */\n    rowSpan: number;\n    /**\n     * Determines how many columns will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     * @default 1\n     */\n    colSpan: number;\n    /**\n     * Determines the order of the tile items within the TileLayout.\n     * If not set, the items will receive increasing sequential order in accordance with\n     * their position in the DOM when initially rendered.\n     */\n    order: number;\n    /**\n     * Sets the starting column of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     */\n    col: number;\n    /**\n     * Sets the starting row of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).\n     */\n    row: number;\n    /**\n     * Determines whether the item can be reordered. By default all items are reorderable when the [reorderable]({% slug api_layout_tilelayoutcomponent %}#toc-reorderable) property of the TileLayoutComponent is set to `true` ([see example]({% slug reordering_tilelayout %}#toc-disable-reordering)).\n     *\n     * @default true\n     */\n    reorderable: boolean;\n    /**\n     * Determines whether the item can be resized. By default all items are resizable when the [resizable]({% slug api_layout_tilelayoutcomponent %}#resizable) property of the TileLayoutComponent is set to `true` ([see example]({% slug resizing_tilelayout %}#toc-disable-resizing)).\n     * @default true\n     */\n    resizable: boolean;\n    itemClass: boolean;\n    readonly colEnd: string;\n    readonly rowEnd: string;\n    readonly colStart: string;\n    readonly rowStart: string;\n    /**\n     * @hidden\n     */\n    resizeDirections: Array<string>;\n    /**\n     * @hidden\n     */\n    rtl: boolean;\n    private subs;\n    private _order;\n    constructor(elem: ElementRef, renderer: Renderer2, localization: LocalizationService, draggingService: TileLayoutDraggingService);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private toggleCursorClass;\n}\n"]}