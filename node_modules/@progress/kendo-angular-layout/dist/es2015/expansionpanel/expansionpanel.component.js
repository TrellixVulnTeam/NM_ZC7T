/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { AnimationBuilder } from '@angular/animations';
import { isFocusable, hasClass } from './../common/dom-queries';
import { Component, ContentChild, EventEmitter, HostBinding, Input, Output, ElementRef, Renderer2, HostListener, NgZone, ViewChild } from '@angular/core';
import { ExpansionPanelTitleDirective } from './expansionpanel-title.directive';
import { collapse, expand } from './animations';
import { isPresent } from '../common/util';
import { Subscription } from 'rxjs';
import { Keys } from '@progress/kendo-angular-common';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { ExpansionPanelActionEvent } from './events/action-event';
import { take } from 'rxjs/operators';
const DEFAULT_DURATION = 200;
const CONTENT_HIDDEN_CLASS = 'k-hidden';
/**
 * Represents the [Kendo UI ExpansionPanel component for Angular]({% slug overview_expansionpanel %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-expansionpanel title="Chile" subtitle="South America">
 *              There are various theories about the origin of the word Chile.
 *        </kendo-expansionpanel>
 *    `
 * })
 * class AppComponent {}
 * ```
 */
let ExpansionPanelComponent = class ExpansionPanelComponent {
    constructor(renderer, hostElement, ngZone, localizationService, builder) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.localizationService = localizationService;
        this.builder = builder;
        /**
         * Specifies the primary text in the header of the ExpansionPanel
         * ([see example]({% slug title_expansionpanel %}#toc-title-and-subtitle)).
         */
        this.title = '';
        /**
         * Specifies the secondary text in the header of the ExpansionPanel, which is rendered next to the collapse/expand icon
         * ([see example]({% slug title_expansionpanel %}#toc-title-and-subtitle)).
         */
        this.subtitle = '';
        /**
         * Specifies whether the ExpansionPanel is disabled. If disabled, the ExpansionPanel can be neither expanded nor collapsed
         * ([see example]({% slug disabled_expansionpanel %})).
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Specifies the animation settings of the ExpansionPanel
         * ([see example]({% slug animations_expansionpanel %})).
         *
         * The possible values are:
         * * Boolean
         *    * (Default) `true` Numeric values represent duration. Default duration is 200ms.
         *    * false
         * * Number
         */
        this.animation = true;
        /**
         * Fires when the `expanded` property of the component is updated.
         * Used to provide a two-way binding for the `expanded` property
         * ([see example]({% slug overview_expansionpanel %}#toc-events)).
         */
        this.expandedChange = new EventEmitter();
        /**
         * Fires when the expanded state of the ExpansionPanel is about to change. This event is preventable
         * ([see example]({% slug overview_expansionpanel %}#toc-events)).
         */
        this.action = new EventEmitter();
        /**
         * Fires when the ExpansionPanel is expanded. If there is animation it will fire when the animation is complete
         * ([see example]({% slug overview_expansionpanel %}#toc-events)).
         */
        this.expand = new EventEmitter();
        /**
         * Fires when the ExpansionPanel is collapsed. If there is animation it will fire when the animation is complete
         * ([see example]({% slug overview_expansionpanel %}#toc-events)).
         */
        this.collapse = new EventEmitter();
        this.hostClass = true;
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.focused = false;
        this.animationEnd = new EventEmitter();
        this.subscriptions = new Subscription();
        this._expanded = false;
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    /**
     * Specifies whether the ExpansionPanel is expanded. The property supports two-way binding.
     * ([see example]({% slug interaction_expansionpanel %}#toc-setting-the-initial-state)).
     *
     * @default false
     */
    set expanded(value) {
        if (value === this.expanded) {
            return;
        }
        this._expanded = value;
        if (this.expanded) {
            this.removeContentHiddenClass();
        }
        else {
            this.addContentHiddenClass();
        }
    }
    get expanded() {
        return this._expanded;
    }
    get expandedClass() {
        return this.expanded && !this.disabled;
    }
    get focusClass() {
        return this.focused;
    }
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @hidden
     */
    onComponentBlur() {
        if (this.focused) {
            this.focused = false;
        }
    }
    /**
     * @hidden
     */
    onComponentFocus() {
        if (!this.focused) {
            this.focused = true;
        }
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement.nativeElement, 'title');
        this.subscriptions = this.localizationService.changes.subscribe(({ rtl }) => { this.direction = rtl ? 'rtl' : 'ltr'; });
    }
    ngAfterViewInit() {
        this.initDomEvents();
        if (!this.expanded) {
            this.renderer.addClass(this.content.nativeElement, CONTENT_HIDDEN_CLASS);
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    initDomEvents() {
        if (!this.hostElement) {
            return;
        }
        if (!this.disabled) {
            this.ngZone.runOutsideAngular(() => {
                const nativeElement = this.hostElement.nativeElement;
                this.subscriptions.add(this.renderer.listen(nativeElement, 'keydown', this.keyDownHandler.bind(this)));
            });
        }
    }
    /**
     * @hidden
     */
    keyDownHandler(ev) {
        const isEnterOrSpace = ev.keyCode === Keys.Enter || ev.keyCode === Keys.Space;
        if (!isEnterOrSpace) {
            return;
        }
        if (hasClass(ev.target, 'k-expander')) {
            ev.preventDefault();
            this.ngZone.run(() => {
                this.onHeaderAction();
            });
        }
    }
    /**
     * @hidden
     */
    onHeaderClick(ev) {
        if (!isFocusable(ev.target) && !this.disabled) {
            this.onHeaderAction();
        }
    }
    /**
     * @hidden
     */
    onHeaderAction() {
        this.focused = true;
        const eventArgs = new ExpansionPanelActionEvent();
        eventArgs.action = this.expanded ? 'collapse' : 'expand';
        this.action.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.setExpanded(!this.expanded);
            if (this.expanded) {
                this.removeContentHiddenClass();
            }
            if (this.animation) {
                this.animateContent();
                return;
            }
            if (!this.expanded) {
                this.addContentHiddenClass();
            }
            this.emitExpandCollapseEvent();
        }
    }
    /**
     * @hidden
     */
    get indicatorClasses() {
        if (this.expanded) {
            return this.collapseIcon ? this.collapseIcon : `k-icon k-i-arrow-chevron-up`;
        }
        else {
            return this.expandIcon ? this.expandIcon : `k-icon k-i-arrow-chevron-down`;
        }
    }
    /**
     * Toggles the visibility of the ExpansionPanel
     * ([see example]({% slug interaction_expansionpanel %}#toc-toggling-the-content)).
     *
     * @param expanded? - Boolean. Specifies, whether the ExpansionPanel will be expanded or collapsed.
     */
    toggle(expanded) {
        const previous = this.expanded;
        const current = isPresent(expanded) ? expanded : !previous;
        if (current === previous) {
            return;
        }
        this.setExpanded(current);
        if (this.expanded) {
            this.removeContentHiddenClass();
        }
        if (this.animation) {
            this.animateContent();
            return;
        }
        if (!this.expanded) {
            this.addContentHiddenClass();
        }
        this.emitExpandCollapseEvent();
    }
    setExpanded(value) {
        this._expanded = value;
        this.expandedChange.emit(value);
    }
    animateContent() {
        const duration = typeof this.animation === 'boolean' ? DEFAULT_DURATION : this.animation;
        const contentHeight = getComputedStyle(this.content.nativeElement).height;
        const animation = this.expanded ? expand(duration, contentHeight) : collapse(duration, contentHeight);
        const player = this.createPlayer(animation, this.content.nativeElement);
        this.animationEnd.pipe(take(1)).subscribe(() => {
            if (!this.expanded) {
                this.addContentHiddenClass();
            }
            this.emitExpandCollapseEvent();
        });
        player.play();
    }
    createPlayer(animation, animatedElement) {
        const factory = this.builder.build(animation);
        let player = factory.create(animatedElement);
        player.onDone(() => {
            if (player) {
                this.animationEnd.emit();
                player.destroy();
                player = null;
            }
        });
        return player;
    }
    emitExpandCollapseEvent() {
        this[this.expanded ? 'expand' : 'collapse'].emit();
    }
    addContentHiddenClass() {
        this.renderer.addClass(this.content.nativeElement, CONTENT_HIDDEN_CLASS);
    }
    removeContentHiddenClass() {
        this.renderer.removeClass(this.content.nativeElement, CONTENT_HIDDEN_CLASS);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExpansionPanelComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExpansionPanelComponent.prototype, "subtitle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ExpansionPanelComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ExpansionPanelComponent.prototype, "expanded", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExpansionPanelComponent.prototype, "expandIcon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExpansionPanelComponent.prototype, "collapseIcon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ExpansionPanelComponent.prototype, "animation", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ExpansionPanelComponent.prototype, "expandedChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ExpansionPanelComponent.prototype, "action", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ExpansionPanelComponent.prototype, "expand", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ExpansionPanelComponent.prototype, "collapse", void 0);
tslib_1.__decorate([
    ContentChild(ExpansionPanelTitleDirective, { static: false }),
    tslib_1.__metadata("design:type", ExpansionPanelTitleDirective)
], ExpansionPanelComponent.prototype, "titleTemplate", void 0);
tslib_1.__decorate([
    ViewChild('content', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], ExpansionPanelComponent.prototype, "content", void 0);
tslib_1.__decorate([
    HostBinding('class.k-expander'),
    tslib_1.__metadata("design:type", Boolean)
], ExpansionPanelComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('attr.aria-expanded'),
    HostBinding('class.k-expanded'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ExpansionPanelComponent.prototype, "expandedClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-focus'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ExpansionPanelComponent.prototype, "focusClass", null);
tslib_1.__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ExpansionPanelComponent.prototype, "disabledClass", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], ExpansionPanelComponent.prototype, "direction", void 0);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Number)
], ExpansionPanelComponent.prototype, "tabindex", void 0);
tslib_1.__decorate([
    HostListener('blur'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ExpansionPanelComponent.prototype, "onComponentBlur", null);
tslib_1.__decorate([
    HostListener('focus'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ExpansionPanelComponent.prototype, "onComponentFocus", null);
ExpansionPanelComponent = tslib_1.__decorate([
    Component({
        exportAs: 'kendoExpansionPanel',
        providers: [
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.expansionpanel'
            }
        ],
        selector: 'kendo-expansionpanel',
        template: `
        <div
            [class.k-expander-header]="true"
            (click)="onHeaderClick($event)">
            <ng-container *ngIf="!titleTemplate">
                <div *ngIf="title" class="k-expander-title">{{ title }}</div>
                <span class="k-spacer"></span>
                <div *ngIf="subtitle" class="k-expander-sub-title">
                    {{ subtitle }}
                </div>
            </ng-container>
            <ng-template
                *ngIf="titleTemplate"
                [ngTemplateOutlet]="titleTemplate?.templateRef">
            </ng-template>
            <span class="k-expander-indicator">
                <span [ngClass]="indicatorClasses"></span>
            </span>
        </div>
        <div #content class="k-expander-content-wrapper">
            <div  class="k-expander-content" [attr.aria-hidden]="!expanded">
                <ng-content></ng-content>
            </div>
        </div>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef,
        NgZone,
        LocalizationService,
        AnimationBuilder])
], ExpansionPanelComponent);
export { ExpansionPanelComponent };
