{"version":3,"file":"expansionpanel.component.d.ts","sources":["expansionpanel.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AnimationBuilder } from '@angular/animations';\nimport { EventEmitter, ElementRef, Renderer2, NgZone, OnDestroy, OnInit, AfterViewInit } from '@angular/core';\nimport { ExpansionPanelTitleDirective } from './expansionpanel-title.directive';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ExpansionPanelActionEvent } from './events/action-event';\n/**\n * Represents the [Kendo UI ExpansionPanel component for Angular]({% slug overview_expansionpanel %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-expansionpanel title=\"Chile\" subtitle=\"South America\">\n *              There are various theories about the origin of the word Chile.\n *        </kendo-expansionpanel>\n *    `\n * })\n * class AppComponent {}\n * ```\n */\nexport declare class ExpansionPanelComponent implements OnInit, AfterViewInit, OnDestroy {\n    private renderer;\n    private hostElement;\n    private ngZone;\n    private localizationService;\n    private builder;\n    /**\n     * Specifies the primary text in the header of the ExpansionPanel\n     * ([see example]({% slug title_expansionpanel %}#toc-title-and-subtitle)).\n     */\n    title: string;\n    /**\n     * Specifies the secondary text in the header of the ExpansionPanel, which is rendered next to the collapse/expand icon\n     * ([see example]({% slug title_expansionpanel %}#toc-title-and-subtitle)).\n     */\n    subtitle: string;\n    /**\n     * Specifies whether the ExpansionPanel is disabled. If disabled, the ExpansionPanel can be neither expanded nor collapsed\n     * ([see example]({% slug disabled_expansionpanel %})).\n     *\n     * @default false\n     */\n    disabled: boolean;\n    /**\n     * Specifies whether the ExpansionPanel is expanded. The property supports two-way binding.\n     * ([see example]({% slug interaction_expansionpanel %}#toc-setting-the-initial-state)).\n     *\n     * @default false\n     */\n    expanded: boolean;\n    /**\n     * Sets a custom icon via css class(es), for the collapsed state of the component\n     * ([see example]({% slug icons_expansionpanel %}#toc-icons)).\n     */\n    expandIcon: string;\n    /**\n     * Sets a custom icon via css class(es), for the expanded state of the component\n     * ([see example]({% slug icons_expansionpanel %}#toc-icons)).\n     */\n    collapseIcon: string;\n    /**\n     * Specifies the animation settings of the ExpansionPanel\n     * ([see example]({% slug animations_expansionpanel %})).\n     *\n     * The possible values are:\n     * * Boolean\n     *    * (Default) `true` Numeric values represent duration. Default duration is 200ms.\n     *    * false\n     * * Number\n     */\n    animation?: boolean | number;\n    /**\n     * Fires when the `expanded` property of the component is updated.\n     * Used to provide a two-way binding for the `expanded` property\n     * ([see example]({% slug overview_expansionpanel %}#toc-events)).\n     */\n    expandedChange: EventEmitter<boolean>;\n    /**\n     * Fires when the expanded state of the ExpansionPanel is about to change. This event is preventable\n     * ([see example]({% slug overview_expansionpanel %}#toc-events)).\n     */\n    action: EventEmitter<ExpansionPanelActionEvent>;\n    /**\n     * Fires when the ExpansionPanel is expanded. If there is animation it will fire when the animation is complete\n     * ([see example]({% slug overview_expansionpanel %}#toc-events)).\n     */\n    expand: EventEmitter<any>;\n    /**\n     * Fires when the ExpansionPanel is collapsed. If there is animation it will fire when the animation is complete\n     * ([see example]({% slug overview_expansionpanel %}#toc-events)).\n     */\n    collapse: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    titleTemplate: ExpansionPanelTitleDirective;\n    content: ElementRef;\n    hostClass: boolean;\n    readonly expandedClass: boolean;\n    readonly focusClass: boolean;\n    readonly disabledClass: boolean;\n    direction: string;\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    focused: boolean;\n    private animationEnd;\n    private subscriptions;\n    private _expanded;\n    /**\n     * @hidden\n     */\n    onComponentBlur(): void;\n    /**\n     * @hidden\n     */\n    onComponentFocus(): void;\n    constructor(renderer: Renderer2, hostElement: ElementRef, ngZone: NgZone, localizationService: LocalizationService, builder: AnimationBuilder);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    initDomEvents(): void;\n    /**\n     * @hidden\n     */\n    keyDownHandler(ev: any): void;\n    /**\n     * @hidden\n     */\n    onHeaderClick(ev: any): void;\n    /**\n     * @hidden\n     */\n    onHeaderAction(): void;\n    /**\n     * @hidden\n     */\n    readonly indicatorClasses: string;\n    /**\n     * Toggles the visibility of the ExpansionPanel\n     * ([see example]({% slug interaction_expansionpanel %}#toc-toggling-the-content)).\n     *\n     * @param expanded? - Boolean. Specifies, whether the ExpansionPanel will be expanded or collapsed.\n     */\n    toggle(expanded?: boolean): void;\n    private setExpanded;\n    private animateContent;\n    private createPlayer;\n    private emitExpandCollapseEvent;\n    private addContentHiddenClass;\n    private removeContentHiddenClass;\n}\n"]}