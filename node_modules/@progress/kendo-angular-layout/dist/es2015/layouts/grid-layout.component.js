/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Renderer2, ElementRef, isDevMode } from '@angular/core';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { ALIGN_PREFIX, generateGapStyle, generateGridStyle, GRID_JUSTIFY_PREFIX, normalizeGap, VERTICAL_SUFFIX, validateGridLayoutRowsCols } from './util';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { isPresent } from '../common/util';
import { isChanged } from '@progress/kendo-angular-common';
/**
 * Represents the [Kendo UI GridLayout component for Angular]({% slug overview_gridlayout %}).
 */
let GridLayoutComponent = class GridLayoutComponent {
    constructor(renderer, element, localization) {
        this.renderer = renderer;
        this.element = element;
        this.localization = localization;
        this.hostClass = true;
        /**
         * Specifies the gaps between the elements. The default value is `0`
         * ([see example]({% slug layout_gridlayout %}#toc-gaps)).
         */
        this.gap = 0;
        this._align = {
            horizontal: 'stretch',
            vertical: 'stretch'
        };
        validatePackage(packageMetadata);
    }
    get dir() {
        return this.direction;
    }
    /**
     * Specifies the horizontal and vertical alignment of the inner GridLayout elements
     * ([see example]({% slug layout_gridlayout %}#toc-alignment)).
     */
    set align(align) {
        this._align = Object.assign({}, this._align, align);
        this.handleAlignClasses();
    }
    get align() {
        return this._align;
    }
    ngAfterViewInit() {
        this.handleAlignClasses();
        this.handleGridTemplateStyling('rows');
        this.handleGridTemplateStyling('cols');
        this.setGap();
    }
    ngOnChanges(changes) {
        if (isChanged('gap', changes)) {
            this.setGap();
        }
        if (isChanged('rows', changes)) {
            this.handleGridTemplateStyling('rows');
        }
        if (isChanged('cols', changes)) {
            this.handleGridTemplateStyling('cols');
        }
    }
    handleAlignClasses() {
        const elem = this.element.nativeElement;
        if (isPresent(this.justifyClass)) {
            this.renderer.removeClass(elem, this.justifyClass);
        }
        if (isPresent(this.alignClass)) {
            this.renderer.removeClass(elem, this.alignClass);
        }
        this.justifyClass = `${GRID_JUSTIFY_PREFIX}-${this.align.horizontal}`;
        this.alignClass = `${ALIGN_PREFIX}-${VERTICAL_SUFFIX[this.align.vertical]}`;
        this.renderer.addClass(elem, this.justifyClass);
        this.renderer.addClass(elem, this.alignClass);
    }
    setGap() {
        let parsedGap = normalizeGap(this.gap);
        let gapStyle = generateGapStyle(parsedGap);
        this.renderer.setStyle(this.element.nativeElement, 'gap', gapStyle);
    }
    handleGridTemplateStyling(type) {
        if (!isPresent(this[type])) {
            return;
        }
        const isValid = validateGridLayoutRowsCols(this[type]);
        if (!isValid && isDevMode()) {
            const valueType = type === 'rows' ? 'GridLayoutRowSize' : 'GridLayoutColSize';
            throw new Error(`The provided ${type} value contains invalid elements. The array supports values of type number, string or ${valueType}.`);
        }
        const gridTemplateStyle = type === 'rows' ? 'grid-template-rows' : 'grid-template-columns';
        const gridStyle = generateGridStyle(this[type], type);
        this.renderer.setStyle(this.element.nativeElement, gridTemplateStyle, gridStyle.join(' '));
    }
    get direction() {
        return this.localization.rtl ? 'rtl' : 'ltr';
    }
};
tslib_1.__decorate([
    HostBinding('class.k-grid-layout'),
    tslib_1.__metadata("design:type", Boolean)
], GridLayoutComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], GridLayoutComponent.prototype, "dir", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], GridLayoutComponent.prototype, "rows", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], GridLayoutComponent.prototype, "cols", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], GridLayoutComponent.prototype, "gap", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], GridLayoutComponent.prototype, "align", null);
GridLayoutComponent = tslib_1.__decorate([
    Component({
        exportAs: 'kendoGridLayout',
        selector: 'kendo-gridlayout',
        providers: [
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.gridlayout'
            }
        ],
        template: `
        <ng-content></ng-content>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef,
        LocalizationService])
], GridLayoutComponent);
export { GridLayoutComponent };
