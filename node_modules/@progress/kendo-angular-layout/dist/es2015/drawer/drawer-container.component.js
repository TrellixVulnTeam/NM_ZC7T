/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, ContentChild } from '@angular/core';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { DrawerComponent } from './drawer.component';
import { isPresent } from '../common/util';
/**
 * Serves as a container for the [Kendo UI Drawer component for Angular]({% slug overview_drawer %}) and its content.
 */
let DrawerContainerComponent = class DrawerContainerComponent {
    constructor(localizationService) {
        this.localizationService = localizationService;
        this.rtl = false;
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(({ rtl }) => {
            this.rtl = rtl;
            this.direction = this.rtl ? 'rtl' : 'ltr';
        });
    }
    get hostClass() {
        return true;
    }
    get overlayClass() {
        return this.drawer.mode === 'overlay';
    }
    get miniClass() {
        return this.drawer.mini;
    }
    get pushClass() {
        return this.drawer.mode === 'push';
    }
    get isExpandedClass() {
        return this.drawer.expanded;
    }
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    get overlay() {
        return isPresent(this.drawer) &&
            this.drawer.expanded &&
            this.drawer.mode === 'overlay';
    }
    /**
     * @hidden
     */
    closeDrawer() {
        if (this.overlay && this.drawer.autoCollapse) {
            this.drawer.toggle(false);
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.k-drawer-container'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerContainerComponent.prototype, "hostClass", null);
tslib_1.__decorate([
    HostBinding('class.k-drawer-overlay'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerContainerComponent.prototype, "overlayClass", null);
tslib_1.__decorate([
    HostBinding('class.k-drawer-mini'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerContainerComponent.prototype, "miniClass", null);
tslib_1.__decorate([
    HostBinding('class.k-drawer-push'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerContainerComponent.prototype, "pushClass", null);
tslib_1.__decorate([
    HostBinding('class.k-drawer-expanded'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerContainerComponent.prototype, "isExpandedClass", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], DrawerContainerComponent.prototype, "direction", void 0);
tslib_1.__decorate([
    ContentChild(DrawerComponent, { static: false }),
    tslib_1.__metadata("design:type", DrawerComponent)
], DrawerContainerComponent.prototype, "drawer", void 0);
DrawerContainerComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-drawer-container',
        providers: [
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.drawer.container'
            }
        ],
        template: `
        <div class="k-overlay" *ngIf="overlay" (click)="closeDrawer()"></div>
        <ng-content></ng-content>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [LocalizationService])
], DrawerContainerComponent);
export { DrawerContainerComponent };
