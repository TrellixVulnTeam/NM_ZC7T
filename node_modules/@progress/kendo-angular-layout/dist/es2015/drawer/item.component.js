/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input, TemplateRef, HostBinding, ElementRef, Renderer2 } from "@angular/core";
import { DrawerService } from './drawer.service';
import { nestedLink, DRAWER_LINK_SELECTOR } from './util';
/**
 * @hidden
 */
let DrawerItemComponent = class DrawerItemComponent {
    constructor(drawer, element, renderer) {
        this.drawer = drawer;
        this.element = element;
        this.renderer = renderer;
    }
    get disabledClass() {
        return this.item.disabled;
    }
    get selectedClass() {
        return this.drawer.selectedIndices.indexOf(this.index) >= 0;
    }
    get label() {
        return this.item.text ? this.item.text : null;
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        const link = nestedLink(this.element.nativeElement, DRAWER_LINK_SELECTOR);
        if (link) {
            this.renderer.removeAttribute(link, 'tabindex');
        }
    }
    /**
     * @hidden
     */
    get iconClasses() {
        const classes = [];
        if (this.item.icon) {
            classes.push(`k-icon ${this.item.icon}`);
        }
        if (this.item.iconClass) {
            classes.push(`${this.item.iconClass}`);
        }
        return classes;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DrawerItemComponent.prototype, "item", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], DrawerItemComponent.prototype, "index", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], DrawerItemComponent.prototype, "itemTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DrawerItemComponent.prototype, "mini", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DrawerItemComponent.prototype, "expanded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DrawerItemComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DrawerItemComponent.prototype, "cssClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DrawerItemComponent.prototype, "cssStyle", void 0);
tslib_1.__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerItemComponent.prototype, "disabledClass", null);
tslib_1.__decorate([
    HostBinding('attr.aria-selected'),
    HostBinding('class.k-state-selected'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerItemComponent.prototype, "selectedClass", null);
tslib_1.__decorate([
    HostBinding('attr.aria-label'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DrawerItemComponent.prototype, "label", null);
DrawerItemComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoDrawerItem]',
        template: `
        <ng-template *ngIf="itemTemplate; else defaultTemplate"
            [ngTemplateOutlet]="itemTemplate"
            [ngTemplateOutletContext]="{ $implicit: item }">
        </ng-template>

        <ng-template #defaultTemplate>
            <ng-container *ngIf="expanded">
                <span [ngClass]="iconClasses"></span>
                <span class="k-item-text">{{ item.text }}</span>
            </ng-container>
            <ng-container *ngIf="mini && !expanded">
                <span [ngClass]="iconClasses"></span>
            </ng-container>
        </ng-template>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [DrawerService, ElementRef, Renderer2])
], DrawerItemComponent);
export { DrawerItemComponent };
