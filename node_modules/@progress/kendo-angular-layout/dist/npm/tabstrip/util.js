/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../common/util");
/**
 * @hidden
 *
 * Checks if the current target is a TabStrip tab element
 */
exports.isTabElement = function (target) {
    var targetId = target.getAttribute('id');
    if (util_1.isPresent(targetId) || targetId.indexOf('k-tabstrip-tab-') >= 0) {
        return true;
    }
    return false;
};
/**
 * @hidden
 *
 * Checks if the current tab is closable. Depends on the value of the TabStrip closable property.
 */
exports.isTabClosable = function (tab, tabStripClosable) {
    if (tab.closable !== undefined) {
        return tab.closable;
    }
    return tabStripClosable;
};
/**
 * @hidden
 *
 * Checks if the TabStrip scroll buttons will be rendered. Depends on the value of the TabStrip scrollable settings.
 */
exports.tabStripHasScrollButtons = function (scrollableSettings) {
    return scrollableSettings.enabled && scrollableSettings.scrollButtons !== 'hidden';
};
/**
 * @hidden
 *
 * Checks if the TabStrip mouse scroll will be enabled. Depends on the value of the TabStrip scrollable settings.
 */
exports.mouseScrollEnabled = function (scrollableSettings) {
    return scrollableSettings.enabled && scrollableSettings.mouseScroll;
};
/**
 * @hidden
 *
 * Retrieves the current active tab element and its index.
 * This could either be the currently selected tab or the currently focused tab.
 */
exports.getActiveTab = function (tabs) {
    var focusedTab;
    var selectedTab;
    var focusedIndex = -1;
    var selectedIndex = -1;
    tabs.forEach(function (tab, index) {
        if (tab.selected) {
            selectedTab = tab;
            selectedIndex = index;
        }
        else if (tab.focused) {
            focusedTab = tab;
            focusedIndex = index;
        }
    });
    return focusedIndex >= 0 ?
        { tab: focusedTab, index: focusedIndex } :
        { tab: selectedTab, index: selectedIndex };
};
/**
 * @hidden
 */
exports.getTabByIndex = function (tabs, index) {
    var filtered = tabs.filter(function (_tab, i) { return i === index; });
    if (filtered.length > 0) {
        return filtered[0];
    }
    return null;
};
/**
 * @hidden
 */
exports.getTabHeaderByIndex = function (tabHeaderContainers, index) {
    var filtered = tabHeaderContainers.filter(function (_tabHeader, i) { return i === index; });
    if (filtered.length > 0) {
        return filtered[0];
    }
    return null;
};
/**
 * @hidden
 */
exports.resetTabFocus = function (tabs) {
    tabs.forEach(function (tab) {
        tab.focused = false;
    });
};
/**
 * @hidden
 */
exports.resetTabSelection = function (tabs) {
    tabs.forEach(function (tab) {
        tab.selected = false;
    });
};
/**
 * @hidden
 */
exports.isTablistHorizontal = function (tabPosition) {
    return tabPosition === 'top' || tabPosition === 'bottom';
};
