/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var nextId = 0;
var SIZES = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
var ROUNDNESS = {
    small: 'sm',
    medium: 'md',
    large: 'lg',
    full: 'full'
};
var SHAPE_TO_ROUNDED = {
    rounded: 'large',
    circle: 'full'
};
var parsePanelBarItems = function (data) {
    return data.map(function (item) {
        if (!item.id) {
            item.id = "default-" + nextId++;
        }
        if (item.children) {
            item.children = parsePanelBarItems(item.children);
        }
        return item;
    });
};
var ɵ0 = parsePanelBarItems;
exports.ɵ0 = ɵ0;
exports.default = {
    parsePanelBarItems: parsePanelBarItems
};
/**
 * @hidden
 */
exports.isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
exports.isHorizontalArrowKey = function (keyCode) { return keyCode === kendo_angular_common_1.Keys.ArrowLeft || keyCode === kendo_angular_common_1.Keys.ArrowRight; };
/**
 * @hidden
 */
exports.isVerticalArrowKey = function (keyCode) { return keyCode === kendo_angular_common_1.Keys.ArrowUp || keyCode === kendo_angular_common_1.Keys.ArrowDown; };
/**
 * @hidden
 */
exports.isArrowKey = function (keyCode) {
    return exports.isHorizontalArrowKey(keyCode) || exports.isVerticalArrowKey(keyCode);
};
/**
 * @hidden
 */
exports.isNavigationKey = function (keyCode) {
    return keyCode === kendo_angular_common_1.Keys.PageUp || keyCode === kendo_angular_common_1.Keys.PageDown ||
        keyCode === kendo_angular_common_1.Keys.Home || keyCode === kendo_angular_common_1.Keys.End;
};
/**
 * @hidden
 *
 * Returns the styling classes to be added and removed
 */
exports.getStylingClasses = function (componentType, stylingOption, previousValue, newValue) {
    switch (stylingOption) {
        case 'size':
            return {
                toRemove: "k-" + componentType + "-" + SIZES[previousValue],
                toAdd: newValue ? "k-" + componentType + "-" + SIZES[newValue] : null
            };
        case 'rounded':
            return {
                toRemove: "k-rounded-" + ROUNDNESS[previousValue],
                toAdd: newValue ? "k-rounded-" + ROUNDNESS[newValue] : null
            };
        default:
            break;
    }
};
/**
 * @hidden
 */
exports.mapShapeToRounded = function (shape) { return SHAPE_TO_ROUNDED[shape] || null; };
/**
 * @hidden
 */
exports.isNumber = function (value) { return typeof value === 'number' && isFinite(value); };
