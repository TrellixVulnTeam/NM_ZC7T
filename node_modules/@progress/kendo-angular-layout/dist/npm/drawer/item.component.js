/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var drawer_service_1 = require("./drawer.service");
var util_1 = require("./util");
/**
 * @hidden
 */
var DrawerItemComponent = /** @class */ (function () {
    function DrawerItemComponent(drawer, element, renderer) {
        this.drawer = drawer;
        this.element = element;
        this.renderer = renderer;
    }
    Object.defineProperty(DrawerItemComponent.prototype, "disabledClass", {
        get: function () {
            return this.item.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerItemComponent.prototype, "selectedClass", {
        get: function () {
            return this.drawer.selectedIndices.indexOf(this.index) >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerItemComponent.prototype, "label", {
        get: function () {
            return this.item.text ? this.item.text : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DrawerItemComponent.prototype.ngAfterViewInit = function () {
        var link = util_1.nestedLink(this.element.nativeElement, util_1.DRAWER_LINK_SELECTOR);
        if (link) {
            this.renderer.removeAttribute(link, 'tabindex');
        }
    };
    Object.defineProperty(DrawerItemComponent.prototype, "iconClasses", {
        /**
         * @hidden
         */
        get: function () {
            var classes = [];
            if (this.item.icon) {
                classes.push("k-icon " + this.item.icon);
            }
            if (this.item.iconClass) {
                classes.push("" + this.item.iconClass);
            }
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DrawerItemComponent.prototype, "item", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], DrawerItemComponent.prototype, "index", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], DrawerItemComponent.prototype, "itemTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DrawerItemComponent.prototype, "mini", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DrawerItemComponent.prototype, "expanded", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DrawerItemComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DrawerItemComponent.prototype, "cssClass", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DrawerItemComponent.prototype, "cssStyle", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-disabled'),
        core_1.HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], DrawerItemComponent.prototype, "disabledClass", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-selected'),
        core_1.HostBinding('class.k-state-selected'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], DrawerItemComponent.prototype, "selectedClass", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-label'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], DrawerItemComponent.prototype, "label", null);
    DrawerItemComponent = tslib_1.__decorate([
        core_1.Component({
            selector: '[kendoDrawerItem]',
            template: "\n        <ng-template *ngIf=\"itemTemplate; else defaultTemplate\"\n            [ngTemplateOutlet]=\"itemTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: item }\">\n        </ng-template>\n\n        <ng-template #defaultTemplate>\n            <ng-container *ngIf=\"expanded\">\n                <span [ngClass]=\"iconClasses\"></span>\n                <span class=\"k-item-text\">{{ item.text }}</span>\n            </ng-container>\n            <ng-container *ngIf=\"mini && !expanded\">\n                <span [ngClass]=\"iconClasses\"></span>\n            </ng-container>\n        </ng-template>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [drawer_service_1.DrawerService, core_1.ElementRef, core_1.Renderer2])
    ], DrawerItemComponent);
    return DrawerItemComponent;
}());
exports.DrawerItemComponent = DrawerItemComponent;
