/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var operators_1 = require("rxjs/operators");
var directives_base_1 = require("./directives-base");
var popover_service_1 = require("./popover.service");
/**
 * Represents the [`kendoPopoverAnchor`]({% slug configuration_popover %}#toc-anchordirective) directive.
 * It is used to target an element, which should display a popover on interaction.
 *
 * @example
 * ```ts-no-run
 * <button kendoPopoverAnchor [popover]="myPopover">Show Popover</button>
 * ```
 */
var PopoverAnchorDirective = /** @class */ (function (_super) {
    tslib_1.__extends(PopoverAnchorDirective, _super);
    function PopoverAnchorDirective(hostEl, ngZone, popupService, renderer, popoverService) {
        var _this = _super.call(this, ngZone, popupService, renderer) || this;
        _this.hostEl = hostEl;
        _this.ngZone = ngZone;
        _this.popupService = popupService;
        _this.renderer = renderer;
        _this.popoverService = popoverService;
        _this.mouseenterHandler = function () {
            _this.controlVisibility(_this.hostEl.nativeElement, true);
        };
        _this.mouseleaveHandler = function () {
            if (_this.isPrevented(_this.hostEl.nativeElement, false)) {
                return;
            }
            if (!_this._hideSub) {
                _this._hideSub = _this.popoverService.hidePopover.subscribe(function (val) {
                    var isPopoverHovered = val[0], isAnchorHovered = val[1];
                    if (!isPopoverHovered && !isAnchorHovered) {
                        _this.hide();
                    }
                });
            }
        };
        _this.focusHandler = function () {
            _this.controlVisibility(_this.hostEl.nativeElement, true);
        };
        _this.blurHandler = function (args) {
            var event = args.domEvent;
            if (_this.isPrevented(_this.hostEl.nativeElement, false)) {
                return;
            }
            // from anchor to popup focus check
            var isFocusInside = !!kendo_angular_common_1.closest(event.relatedTarget, function (node) { return node.classList && node.classList.contains('k-popover'); });
            if (!isFocusInside) {
                _this.hide();
            }
            if (!_this._focusInsideSub) {
                // inside popup focus check
                _this._focusInsideSub = _this.popoverService.isFocusInsidePopover.pipe(operators_1.filter(function (v) { return v !== null; })).subscribe(function (val) {
                    if (!val) {
                        _this.hide();
                    }
                });
            }
        };
        _this._popoverService = _this.popoverService;
        return _this;
    }
    /**
     * Shows the Popover. [See example]({% slug programmaticcontrol_popover %})
     */
    PopoverAnchorDirective.prototype.show = function () {
        var _this = this;
        if (this.popupRef) {
            return;
        }
        this.ngZone.run(function () {
            _this.openPopup(_this.hostEl);
        });
        this.popupRef.popupAnchorViewportLeave
            .pipe(operators_1.take(1))
            .subscribe(function () { return _this.hide(); });
    };
    /**
     * Toggles the visibility of the Popover. [See example]({% slug programmaticcontrol_popover %})
     */
    PopoverAnchorDirective.prototype.toggle = function () {
        if (this.popupRef) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    PopoverAnchorDirective.prototype.subscribeToEvents = function (arr) {
        var _this = this;
        this.subs.add(this.renderer.listen(this.hostEl.nativeElement, arr[0].name, function () {
            _this.popoverService.emitAnchorState(true, _this.hostEl.nativeElement);
            arr[0].handler();
        }));
        this.subs.add(this.renderer.listen(this.hostEl.nativeElement, arr[1].name, function (e) {
            _this.popoverService.emitAnchorState(false, null);
            arr[1].handler({ domEvent: e });
        }));
    };
    PopoverAnchorDirective.prototype.subscribeClick = function () {
        var _this = this;
        if (this.disposeClickListener) {
            this.disposeClickListener();
        }
        this.disposeClickListener = this.renderer.listen(document, 'click', function (e) {
            _this.onClick(e);
        });
    };
    /**
     * @hidden
     */
    PopoverAnchorDirective.prototype.onClick = function (event) {
        var _this = this;
        var isInsidePopup = !!kendo_angular_common_1.closest(event.target, function (node) { return node.classList && node.classList.contains('k-popup'); });
        var isAnchor = !!kendo_angular_common_1.closest(event.target, function (node) { return node === _this.hostEl.nativeElement; });
        if (isInsidePopup || (this.popupRef && isAnchor)) {
            return;
        }
        if (isAnchor) {
            // on opening
            this.controlVisibility(this.hostEl.nativeElement, true);
        }
        else {
            // on closing
            this.controlVisibility(this.hostEl.nativeElement, false);
        }
    };
    PopoverAnchorDirective.prototype.controlVisibility = function (anchor, show) {
        if (this.isPrevented(anchor, show)) {
            return;
        }
        show ? this.show() : this.hide();
    };
    PopoverAnchorDirective = tslib_1.__decorate([
        core_1.Directive({
            selector: '[kendoPopoverAnchor]',
            exportAs: 'kendoPopoverAnchor',
            providers: [popover_service_1.PopoverService]
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef,
            core_1.NgZone,
            kendo_angular_popup_1.PopupService,
            core_1.Renderer2,
            popover_service_1.PopoverService])
    ], PopoverAnchorDirective);
    return PopoverAnchorDirective;
}(directives_base_1.PopoverDirectivesBase));
exports.PopoverAnchorDirective = PopoverAnchorDirective;
