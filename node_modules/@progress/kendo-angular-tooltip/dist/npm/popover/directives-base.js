/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var constants_1 = require("../constants");
var events_1 = require("../models/events");
var utils_1 = require("../utils");
var popover_component_1 = require("./popover.component");
var rxjs_1 = require("rxjs");
var validShowOptions = ['hover', 'click', 'none', 'focus'];
/**
 * @hidden
 */
var PopoverDirectivesBase = /** @class */ (function () {
    function PopoverDirectivesBase(ngZone, popupService, renderer) {
        this.ngZone = ngZone;
        this.popupService = popupService;
        this.renderer = renderer;
        this.subs = new rxjs_1.Subscription();
        this._showOn = 'click';
    }
    Object.defineProperty(PopoverDirectivesBase.prototype, "popover", {
        get: function () {
            return this._popover;
        },
        /**
         * Specifies the popover instance that will be rendered.
         * Accepts a [`PopoverComponent`]({% slug api_tooltip_popovercomponent %}) instance or
         * a [`PopoverFn`]({% slug api_tooltip_popoverfn %}) callback which returns a [`PopoverComponent`]({% slug api_tooltip_popovercomponent %}) instance
         * depending on the current anchor element.
         *
         * [See example]({% slug templates_popover %}#toc-popovercallback)
         */
        set: function (value) {
            if (value instanceof popover_component_1.PopoverComponent || typeof value === "function") {
                this._popover = value;
            }
            else {
                if (core_1.isDevMode) {
                    throw new Error(constants_1.ERRORS.popover);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopoverDirectivesBase.prototype, "showOn", {
        get: function () {
            return this._showOn;
        },
        /**
         * The event on which the Popover will be shown
         *
         * The supported values are:
         * - `click` (default) &mdash;The Popover will be shown when its `anchor` element is clicked.
         * - `hover`&mdash;The Popover will be shown when its `anchor` element is hovered.
         * - `focus`&mdash;The Popover will be shown when its `anchor` element is focused.
         * - `none`&mdash;The Popover will not be shown on user interaction. It could be rendered via the Popover API methods.
         */
        set: function (value) {
            if (core_1.isDevMode && !utils_1.containsItem(validShowOptions, value)) {
                throw new Error(constants_1.ERRORS.showOn);
            }
            this._showOn = value;
        },
        enumerable: true,
        configurable: true
    });
    PopoverDirectivesBase.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!kendo_angular_common_1.isDocumentAvailable()) {
            return;
        }
        this.ngZone.runOutsideAngular(function () {
            switch (_this.showOn) {
                case 'hover':
                    _this.subscribeToEvents([{
                            name: 'mouseenter', handler: _this.mouseenterHandler
                        }, {
                            name: 'mouseleave', handler: _this.mouseleaveHandler
                        }]);
                    break;
                case 'focus':
                    _this.subscribeToEvents([{
                            name: 'focus', handler: _this.focusHandler
                        }, {
                            name: 'blur', handler: _this.blurHandler
                        }]);
                    break;
                case 'click':
                    _this.subscribeClick();
                    break;
                default:
                    break;
            }
        });
    };
    PopoverDirectivesBase.prototype.ngOnDestroy = function () {
        this.closePopup();
        if (this.disposeHoverOverListener) {
            this.disposeHoverOverListener();
        }
        if (this.disposeHoverOutListener) {
            this.disposeHoverOutListener();
        }
        if (this.disposeClickListener) {
            this.disposeClickListener();
        }
        if (this._focusInsideSub) {
            this._focusInsideSub.unsubscribe();
        }
        if (this._hideSub) {
            this._hideSub.unsubscribe();
        }
        if (this.subs) {
            this.subs.unsubscribe();
        }
        if (this._popupOpenSub) {
            this._popupOpenSub.unsubscribe();
        }
        if (this._popupCloseSub) {
            this._popupCloseSub.unsubscribe();
        }
    };
    /**
     * Hides the Popover ([See example]({% slug programmaticcontrol_popover %})).
     */
    PopoverDirectivesBase.prototype.hide = function () {
        this.closePopup();
    };
    /**
     * @hidden
     */
    PopoverDirectivesBase.prototype.closePopup = function () {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
            if (this.disposePopupHoverOutListener) {
                this.disposePopupHoverOutListener();
            }
            if (this.disposePopupHoverInListener) {
                this.disposePopupHoverInListener();
            }
            if (this.disposePopupFocusOutListener) {
                this.disposePopupFocusOutListener();
            }
        }
    };
    /**
     * @hidden
     */
    PopoverDirectivesBase.prototype.openPopup = function (anchor) {
        var _anchor = anchor instanceof core_1.ElementRef ? anchor.nativeElement : anchor;
        var popoverComp = this.popover instanceof popover_component_1.PopoverComponent ? this.popover : this.popover(_anchor);
        var alignSettings = utils_1.align(popoverComp.position, popoverComp.offset);
        var anchorAlign = alignSettings.anchorAlign;
        var popupAlign = alignSettings.popupAlign;
        var popupMargin = alignSettings.popupMargin;
        var _animation = popoverComp.animation;
        this.popupRef = this.popupService.open({
            anchor: { nativeElement: _anchor },
            animate: _animation,
            content: popover_component_1.PopoverComponent,
            popupAlign: popupAlign,
            anchorAlign: anchorAlign,
            margin: popupMargin,
            popupClass: 'k-popup-transparent',
            collision: { horizontal: 'fit', vertical: 'fit' }
        });
        this.applySettings(this.popupRef.content, popoverComp, anchor);
        this.monitorPopup();
        this.initializeCompletionEvents(popoverComp, _anchor);
    };
    /**
     * @hidden
     */
    PopoverDirectivesBase.prototype.isPrevented = function (anchorElement, show) {
        var popoverComp = this.popover instanceof popover_component_1.PopoverComponent ? this.popover : this.popover(anchorElement);
        var eventArgs;
        eventArgs = this.initializeEvents(popoverComp, eventArgs, show, anchorElement);
        return eventArgs.isDefaultPrevented();
    };
    /**
     * @hidden
     */
    PopoverDirectivesBase.prototype.monitorPopup = function () {
        var _this = this;
        if (this.showOn === 'hover') {
            this.ngZone.runOutsideAngular(function () {
                var popup = _this.popupRef.popupElement;
                _this.disposePopupHoverInListener = _this.renderer.listen(popup, 'mouseenter', function (_) {
                    _this.ngZone.run(function (_) { return _this._popoverService.emitPopoverState(true); });
                });
                _this.disposePopupHoverOutListener = _this.renderer.listen(popup, 'mouseleave', function (_) {
                    _this.ngZone.run(function (_) { return _this._popoverService.emitPopoverState(false); });
                });
            });
        }
        if (this.showOn === 'focus') {
            this.ngZone.runOutsideAngular(function () {
                var popup = _this.popupRef.popupElement;
                _this.disposePopupFocusOutListener = _this.renderer.listen(popup, 'focusout', function (e) {
                    var isInsidePopover = kendo_angular_common_1.closest(e.relatedTarget, function (node) { return node.classList && node.classList.contains('k-popover'); });
                    if (!isInsidePopover) {
                        _this.ngZone.run(function (_) { return _this._popoverService.emitFocusInsidePopover(false); });
                    }
                });
            });
        }
    };
    PopoverDirectivesBase.prototype.applySettings = function (contentComponent, popover, anchor) {
        var content = contentComponent.instance;
        var _anchor = anchor instanceof core_1.ElementRef ? anchor.nativeElement : anchor;
        content.visible = true;
        content.anchor = _anchor;
        content.position = popover.position;
        content.offset = popover.offset;
        content.width = popover.width;
        content.height = popover.height;
        content.title = popover.title;
        content.body = popover.body;
        content.callout = popover.callout;
        content.animation = popover.animation;
        content.contextData = popover.templateData(_anchor);
        content.titleTemplate = popover.titleTemplate;
        content.bodyTemplate = popover.bodyTemplate;
        content.actionsTemplate = popover.actionsTemplate;
        this.popupRef.content.changeDetectorRef.detectChanges();
    };
    /**
     * @hidden
     */
    PopoverDirectivesBase.prototype.initializeEvents = function (popoverComp, eventArgs, show, anchorElement) {
        if (show) {
            eventArgs = new events_1.PopoverShowEvent(anchorElement);
            if (this.shouldEmitEvent(!!this.popupRef, 'show', popoverComp)) {
                this.ngZone.run(function () { return popoverComp.show.emit(eventArgs); });
            }
        }
        else {
            eventArgs = new events_1.PopoverHideEvent(anchorElement, this.popupRef);
            if (this.shouldEmitEvent(!!this.popupRef, 'hide', popoverComp)) {
                this.ngZone.run(function () { return popoverComp.hide.emit(eventArgs); });
            }
        }
        return eventArgs;
    };
    PopoverDirectivesBase.prototype.initializeCompletionEvents = function (popoverComp, _anchor) {
        var _this = this;
        if (this.shouldEmitCompletionEvents('shown', popoverComp)) {
            this.popupRef.popupOpen.subscribe(function () {
                var eventArgs = new events_1.PopoverShownEvent(_anchor, _this.popupRef);
                popoverComp.shown.emit(eventArgs);
            });
        }
        if (this.shouldEmitCompletionEvents('hidden', popoverComp)) {
            this.popupRef.popupClose.subscribe(function () {
                _this.ngZone.run(function (_) {
                    var eventArgs = new events_1.PopoverHiddenEvent(_anchor);
                    popoverComp.hidden.emit(eventArgs);
                });
            });
        }
    };
    PopoverDirectivesBase.prototype.shouldEmitEvent = function (hasPopup, event, popoverComp) {
        if ((event === 'show' && !hasPopup && kendo_angular_common_1.hasObservers(popoverComp[event]))
            || (event === 'hide' && hasPopup && kendo_angular_common_1.hasObservers(popoverComp[event]))) {
            return true;
        }
        return false;
    };
    PopoverDirectivesBase.prototype.shouldEmitCompletionEvents = function (event, popoverComp) {
        if ((kendo_angular_common_1.hasObservers(popoverComp[event]) && !this._popupOpenSub)
            || (kendo_angular_common_1.hasObservers(popoverComp[event]) && !this._popupCloseSub)) {
            return true;
        }
        return false;
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PopoverDirectivesBase.prototype, "popover", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PopoverDirectivesBase.prototype, "showOn", null);
    return PopoverDirectivesBase;
}());
exports.PopoverDirectivesBase = PopoverDirectivesBase;
