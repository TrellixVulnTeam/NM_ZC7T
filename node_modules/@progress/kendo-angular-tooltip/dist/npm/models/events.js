/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
/**
 * Arguments for the `show` event. The `show` event fires when a popover is about
 * to be opened. If you cancel the event, the opening is prevented.
 */
var PopoverShowEvent = /** @class */ (function (_super) {
    tslib_1.__extends(PopoverShowEvent, _super);
    /**
     * @hidden
     * Constructs the event arguments for the `show` event.
     * @param anchor - The host element related to the popover.
     */
    function PopoverShowEvent(anchor) {
        var _this = _super.call(this) || this;
        _this.anchor = anchor;
        return _this;
    }
    return PopoverShowEvent;
}(kendo_angular_common_1.PreventableEvent));
exports.PopoverShowEvent = PopoverShowEvent;
/**
 * Arguments for the `hide` event. The `hide` event fires when a popover is about
 * to be closed. If you cancel the event, the popover stays open.
 */
var PopoverHideEvent = /** @class */ (function (_super) {
    tslib_1.__extends(PopoverHideEvent, _super);
    /**
     * @hidden
     * Constructs the event arguments for the `hide` event.
     * @param anchor - The host element related to the popover.
     * @param popover - The popover element.
     */
    function PopoverHideEvent(anchor, popover) {
        var _this = _super.call(this) || this;
        _this.anchor = anchor;
        _this.popover = popover;
        return _this;
    }
    return PopoverHideEvent;
}(kendo_angular_common_1.PreventableEvent));
exports.PopoverHideEvent = PopoverHideEvent;
/**
 * Arguments for the `shown` event. The `shown` event fires after the popover has opened and its opening animation has finished.
 */
var PopoverShownEvent = /** @class */ (function () {
    /**
     * @hidden
     * Constructs the event arguments for the `shown` event.
     * @param anchor - The host element related to the popover.
     * @param popover - The popover element.
     */
    function PopoverShownEvent(anchor, popover) {
        this.anchor = anchor;
        this.popover = popover;
    }
    return PopoverShownEvent;
}());
exports.PopoverShownEvent = PopoverShownEvent;
/**
 * Arguments for the `hidden` event. The `hidden` event fires after the popover has closed and its closing animation has finished.
 */
var PopoverHiddenEvent = /** @class */ (function () {
    /**
     * @hidden
     * Constructs the event arguments for the `hidden` event.
     * @param anchor - The host element related to the popover.
     */
    function PopoverHiddenEvent(anchor) {
        this.anchor = anchor;
    }
    return PopoverHiddenEvent;
}());
exports.PopoverHiddenEvent = PopoverHiddenEvent;
