{"version":3,"file":"directives-base.d.ts","sources":["directives-base.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ComponentRef, ElementRef, NgZone, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { PopupRef, PopupService } from \"@progress/kendo-angular-popup\";\nimport { PopoverFn } from \"../models/functions.model\";\nimport { PopoverShowOption } from \"../models/popover-show-option.type\";\nimport { PopoverComponent } from \"./popover.component\";\nimport { PopoverService } from \"./popover.service\";\nimport { Subscription } from \"rxjs\";\n/**\n * @hidden\n */\nexport declare abstract class PopoverDirectivesBase implements OnDestroy {\n    protected ngZone: NgZone;\n    protected popupService: PopupService;\n    protected renderer: Renderer2;\n    /**\n     * Specifies the popover instance that will be rendered.\n     * Accepts a [`PopoverComponent`]({% slug api_tooltip_popovercomponent %}) instance or\n     * a [`PopoverFn`]({% slug api_tooltip_popoverfn %}) callback which returns a [`PopoverComponent`]({% slug api_tooltip_popovercomponent %}) instance\n     * depending on the current anchor element.\n     *\n     * [See example]({% slug templates_popover %}#toc-popovercallback)\n     */\n    popover: PopoverComponent | PopoverFn;\n    /**\n     * The event on which the Popover will be shown\n     *\n     * The supported values are:\n     * - `click` (default) &mdash;The Popover will be shown when its `anchor` element is clicked.\n     * - `hover`&mdash;The Popover will be shown when its `anchor` element is hovered.\n     * - `focus`&mdash;The Popover will be shown when its `anchor` element is focused.\n     * - `none`&mdash;The Popover will not be shown on user interaction. It could be rendered via the Popover API methods.\n     */\n    showOn: PopoverShowOption;\n    popupRef: PopupRef;\n    protected disposeHoverOverListener: () => void;\n    protected disposeHoverOutListener: () => void;\n    protected disposeClickListener: () => void;\n    protected disposePopupHoverOutListener: () => void;\n    protected disposePopupHoverInListener: () => void;\n    protected disposePopupFocusOutListener: () => void;\n    protected subs: Subscription;\n    protected _popoverService: PopoverService;\n    protected _hideSub: Subscription;\n    protected _focusInsideSub: Subscription;\n    private _popover;\n    private _showOn;\n    private _popupOpenSub;\n    private _popupCloseSub;\n    constructor(ngZone: NgZone, popupService: PopupService, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Hides the Popover ([See example]({% slug programmaticcontrol_popover %})).\n     */\n    hide(): void;\n    /**\n     * @hidden\n     */\n    protected closePopup(): void;\n    /**\n     * @hidden\n     */\n    protected openPopup(anchor: Element | ElementRef): void;\n    /**\n     * @hidden\n     */\n    protected isPrevented(anchorElement: Element, show: boolean): boolean;\n    /**\n     * @hidden\n     */\n    protected monitorPopup(): void;\n    protected applySettings(contentComponent: ComponentRef<PopoverComponent>, popover: PopoverComponent, anchor: Element | ElementRef): void;\n    protected abstract subscribeToEvents(args?: any): void;\n    protected abstract subscribeClick(): void;\n    protected abstract mouseenterHandler(args?: any): void;\n    protected abstract mouseleaveHandler(args?: any): void;\n    protected abstract focusHandler(args?: any): void;\n    protected abstract blurHandler(args?: any): void;\n    /**\n     * @hidden\n     */\n    private initializeEvents;\n    private initializeCompletionEvents;\n    private shouldEmitEvent;\n    private shouldEmitCompletionEvents;\n}\n"]}