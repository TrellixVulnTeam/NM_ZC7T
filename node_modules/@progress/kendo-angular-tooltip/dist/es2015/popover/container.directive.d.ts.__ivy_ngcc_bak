/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, NgZone, Renderer2 } from "@angular/core";
import { PopupService } from "@progress/kendo-angular-popup";
import { PopoverDirectivesBase } from './directives-base';
import { PopoverService } from "./popover.service";
/**
 * Represents the [`kendoPopoverContainer`]({% slug configuration_popover %}#toc-containerdirective) directive.
 * It is used to filter and target multiple elements, which should display a popover on interaction.
 *
 * @example
 * ```ts-no-run
 * <div kendoPopoverContainer [popover]="myPopover" filter=".has-popover">
 *     <button class="has-popover">Show Popover</button>
 *     <button>Button Without Popover</button>
 *     <button class="has-popover">Show Popover</button>
 * </div>
 * ```
 */
export declare class PopoverContainerDirective extends PopoverDirectivesBase {
    wrapperEl: ElementRef;
    protected ngZone: NgZone;
    protected popupService: PopupService;
    protected renderer: Renderer2;
    protected popoverService: PopoverService;
    /**
     * Specifies a selector for the elements that should display a popover.
     *
     * The possible values include any valid query selector.
     * [See example]({% slug configuration_popover %}#toc-containerdirective)
     */
    filter: string;
    constructor(wrapperEl: ElementRef, ngZone: NgZone, popupService: PopupService, renderer: Renderer2, popoverService: PopoverService);
    /**
     * Shows the Popover.
     *
     * @param anchor&mdash;Specifies the element that will be used as an anchor. The Popover opens relative to that element. [See example]({% slug programmaticcontrol_popover %})
     */
    show(anchor: Element | ElementRef): void;
    /**
     * Toggles the visibility of the Popover. [See example]({% slug programmaticcontrol_popover %})
     *
     * @param anchor&mdash;Specifies the element that will be used as an anchor. The Popover opens relative to that element.
     */
    toggle(anchor: Element | ElementRef): void;
    protected subscribeClick(): void;
    protected mouseenterHandler: (anchor: Element) => void;
    protected mouseleaveHandler: (args: any) => void;
    protected focusHandler: (anchor: Element) => void;
    protected blurHandler: (args: any) => void;
    protected subscribeToEvents(arr: any[]): void;
    private clickHandler;
    private controlVisibility;
}
