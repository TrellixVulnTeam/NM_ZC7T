{"version":3,"file":"container.directive.d.ts","sources":["container.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, NgZone, Renderer2 } from \"@angular/core\";\nimport { PopupService } from \"@progress/kendo-angular-popup\";\nimport { PopoverDirectivesBase } from './directives-base';\nimport { PopoverService } from \"./popover.service\";\n/**\n * Represents the [`kendoPopoverContainer`]({% slug configuration_popover %}#toc-containerdirective) directive.\n * It is used to filter and target multiple elements, which should display a popover on interaction.\n *\n * @example\n * ```ts-no-run\n * <div kendoPopoverContainer [popover]=\"myPopover\" filter=\".has-popover\">\n *     <button class=\"has-popover\">Show Popover</button>\n *     <button>Button Without Popover</button>\n *     <button class=\"has-popover\">Show Popover</button>\n * </div>\n * ```\n */\nexport declare class PopoverContainerDirective extends PopoverDirectivesBase {\n    wrapperEl: ElementRef;\n    protected ngZone: NgZone;\n    protected popupService: PopupService;\n    protected renderer: Renderer2;\n    protected popoverService: PopoverService;\n    /**\n     * Specifies a selector for the elements that should display a popover.\n     *\n     * The possible values include any valid query selector.\n     * [See example]({% slug configuration_popover %}#toc-containerdirective)\n     */\n    filter: string;\n    constructor(wrapperEl: ElementRef, ngZone: NgZone, popupService: PopupService, renderer: Renderer2, popoverService: PopoverService);\n    /**\n     * Shows the Popover.\n     *\n     * @param anchor&mdash;Specifies the element that will be used as an anchor. The Popover opens relative to that element. [See example]({% slug programmaticcontrol_popover %})\n     */\n    show(anchor: Element | ElementRef): void;\n    /**\n     * Toggles the visibility of the Popover. [See example]({% slug programmaticcontrol_popover %})\n     *\n     * @param anchor&mdash;Specifies the element that will be used as an anchor. The Popover opens relative to that element.\n     */\n    toggle(anchor: Element | ElementRef): void;\n    protected subscribeClick(): void;\n    protected mouseenterHandler: (anchor: Element) => void;\n    protected mouseleaveHandler: (args: any) => void;\n    protected focusHandler: (anchor: Element) => void;\n    protected blurHandler: (args: any) => void;\n    protected subscribeToEvents(arr: any[]): void;\n    private clickHandler;\n    private controlVisibility;\n}\n"]}