{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, OnDestroy, ElementRef, NgZone, OnChanges, Renderer2, AfterViewChecked } from '@angular/core';\nimport { PopupService, PopupRef, Collision } from '@progress/kendo-angular-popup';\nimport { TooltipSettings } from './tooltip.settings';\nimport { Position } from '../models/position.type';\nimport { ShowOption } from '../models/show.option.type';\n/**\n * Represents the [Kendo UI Tooltip directive for Angular]({% slug overview_tooltip %}).\n * Used to display additional information that is related to an element.\n *\n * @example\n * ```ts-no-run\n * <div kendoTooltip>\n *    <a title=\"Tooltip title\" href=\"foo\">foo</a>\n * </div>\n * ```\n */\nexport declare class TooltipDirective implements OnDestroy, OnChanges, AfterViewChecked {\n    tooltipWrapper: ElementRef;\n    ngZone: NgZone;\n    private renderer;\n    private popupService;\n    /**\n     * Specifies a selector for elements within a container which will display a tooltip\n     * ([see example]({% slug anchorelements_tooltip %})). The possible values include any\n     * DOM `selector`. The default value is `[title]`.\n     */\n    filter: string;\n    /**\n     * Specifies the position of the Tooltip that is relative to the\n     * anchor element ([see example]({% slug positioning_tooltip %})).\n     *\n     * The possible values are:\n     * * `top` (default)\n     * * `bottom`\n     * * `left`\n     * * `right`\n     */\n    position: Position;\n    /**\n     * Renders the passed template as a header title of the Tooltip\n     * ([see example]({% slug anchorelements_tooltip %})).\n     */\n    titleTemplate?: TemplateRef<any>;\n    /**\n     * Specifies when the Тooltip will be rendered\n     * ([see example]({% slug programmaticopening_tooltip %})).\n     *\n     * The possible values are:\n     * * `hover` (default)\n     * * `click`\n     * * `none`\n     */\n    showOn: ShowOption;\n    /**\n     * Specifies the delay in milliseconds before the Tooltip is shown.\n     * * `100` (default) milliseconds.\n     */\n    showAfter: number;\n    /**\n     * Specifies if the Тooltip will display a callout arrow.\n     *\n     * The possible values are:\n     * * `true` (default)\n     * * `false`\n     */\n    callout: boolean;\n    /**\n     * Specifies if the Тooltip will display a **Close** button\n     * ([see example]({% slug closable_tooltip %})).\n     *\n     * The possible values are:\n     * * `true`\n     * * `false`\n     */\n    closable: boolean;\n    /**\n     * Specifies the offset in pixels between the Tooltip and the anchor. Defaults to `6` pixels.\n     * If the `callout` property is set to `true`, the offset is rendered from the callout arrow.\n     * If the `callout` property is set to `false`, the offset is rendered from the content of the Tooltip.\n     */\n    offset: number;\n    /**\n     * Specifies the width of the Тooltip ([see example]({% slug anchorelements_tooltip %})).\n     */\n    tooltipWidth: number;\n    /**\n     * Specifies the height of the Тooltip.\n     */\n    tooltipHeight: number;\n    /**\n     * Specifies a CSS class that will be added to the Tooltip.\n     */\n    tooltipClass: string;\n    /**\n     * Provides screen boundary detection when the Тooltip is shown.\n     */\n    collision: Collision;\n    /**\n     * Specifies the title of the close button.\n     */\n    closeTitle: string;\n    /**\n     * Sets the content of the Tooltip as a template reference\n     * ([see example]({% slug templates_tooltip %})).\n     */\n    tooltipTemplate: TemplateRef<any>;\n    popupRef: PopupRef;\n    template: TemplateRef<any>;\n    private showTimeout;\n    private anchor;\n    private mouseOverSubscription;\n    private mouseOutSubscription;\n    private mouseClickSubscription;\n    private anchorTitleSubscription;\n    private popupPositionChangeSubscription;\n    private popupMouseOutSubscription;\n    private closeClickSubscription;\n    private validPositions;\n    private validShowOptions;\n    constructor(tooltipWrapper: ElementRef, ngZone: NgZone, renderer: Renderer2, popupService: PopupService, settings: TooltipSettings, legacySettings: TooltipSettings);\n    /**\n     * Shows the Tooltip.\n     * @param anchor&mdash; ElementRef|Element.\n     * Specifies the element that will be used as an anchor. The Tooltip opens relative to that element.\n     */\n    show(anchor: ElementRef | Element): void;\n    /**\n     * Hides the Tooltip.\n     */\n    hide(): void;\n    /**\n     * Toggle visibility of the Tooltip.\n     *\n     * @param anchor&mdash; ElementRef|Element. Specifies the element that will be used as an anchor.\n     * @param show&mdash; Optional. Boolean. Specifies if the Tooltip will be rendered.\n     */\n    toggle(anchor: ElementRef | Element, show?: boolean): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    private showContent;\n    private bindContent;\n    private hideElementTitle;\n    private openPopup;\n    private closePopup;\n    private subscribeClick;\n    private onMouseClick;\n    private onMouseOver;\n    private onMouseOut;\n    private verifyProperties;\n}\n"]}