/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { PreventableEvent } from "@progress/kendo-angular-common";
import { PopupRef } from "@progress/kendo-angular-popup";
/**
 * Arguments for the `show` event. The `show` event fires when a popover is about
 * to be opened. If you cancel the event, the opening is prevented.
 */
export declare class PopoverShowEvent extends PreventableEvent {
    /**
     * The host element related to the popover.
     */
    anchor: Element;
    /**
     * @hidden
     * Constructs the event arguments for the `show` event.
     * @param anchor - The host element related to the popover.
     */
    constructor(anchor: Element);
}
/**
 * Arguments for the `hide` event. The `hide` event fires when a popover is about
 * to be closed. If you cancel the event, the popover stays open.
 */
export declare class PopoverHideEvent extends PreventableEvent {
    /**
     * The host element related to the popover.
     */
    anchor: Element;
    /**
     * The popover element.
     */
    popover: PopupRef;
    /**
     * @hidden
     * Constructs the event arguments for the `hide` event.
     * @param anchor - The host element related to the popover.
     * @param popover - The popover element.
     */
    constructor(anchor: Element, popover: PopupRef);
}
/**
 * Arguments for the `shown` event. The `shown` event fires after the popover has opened and its opening animation has finished.
 */
export declare class PopoverShownEvent {
    /**
     * The host element related to the popover.
     */
    anchor: Element;
    /**
     * The popover element.
     */
    popover: PopupRef;
    /**
     * @hidden
     * Constructs the event arguments for the `shown` event.
     * @param anchor - The host element related to the popover.
     * @param popover - The popover element.
     */
    constructor(anchor: Element, popover: PopupRef);
}
/**
 * Arguments for the `hidden` event. The `hidden` event fires after the popover has closed and its closing animation has finished.
 */
export declare class PopoverHiddenEvent {
    /**
     * The host element related to the popover.
     */
    anchor: Element;
    /**
     * @hidden
     * Constructs the event arguments for the `hidden` event.
     * @param anchor - The host element related to the popover.
     */
    constructor(anchor: Element);
}
