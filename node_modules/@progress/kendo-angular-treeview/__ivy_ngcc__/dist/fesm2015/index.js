/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, Injectable, Directive, Optional, TemplateRef, forwardRef, isDevMode, HostBinding, ViewChild, ViewContainerRef, Input, Output, ContentChild, Component, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Renderer2, ComponentFactoryResolver, Host, NgModule } from '@angular/core';
import { isDocumentAvailable, Keys, anyChanged, hasObservers, isChanged, guid } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subject, of, BehaviorSubject, Subscription, EMPTY, merge } from 'rxjs';
import { validatePackage } from '@progress/kendo-licensing';
import { getter, setter } from '@progress/kendo-common';
import { trigger, transition, style, animate } from '@angular/animations';
import { filter, catchError, tap, finalize, switchMap, take, map, delay, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import Draggable from '@telerik/kendo-draggable';
import { InputsModule } from '@progress/kendo-angular-inputs';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@progress/kendo-angular-inputs';

const _c0 = ["assetsContainer"];
function TreeViewComponent_span_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 6);
} }
function TreeViewComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 3)(1, "kendo-textbox", 4);
    ɵngcc0.ɵɵlistener("valueChange", function TreeViewComponent_span_0_Template_kendo_textbox_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.filterChange.emit($event); });
    ɵngcc0.ɵɵtemplate(2, TreeViewComponent_span_0_ng_template_2_Template, 1, 0, "ng-template", 5);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("size", ctx_r0.size)("value", ctx_r0.filter)("clearButton", true)("placeholder", ctx_r0.filterInputPlaceholder);
} }
const _c1 = ["kendoTreeViewGroup", ""];
function TreeViewGroupComponent_li_0_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵlistener("click", function TreeViewGroupComponent_li_0_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); const index_r3 = ctx_r10.index; const node_r2 = ctx_r10.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.expandNode(ctx_r9.nodeIndex(index_r3), node_r2, !ctx_r9.isExpanded(node_r2, ctx_r9.nodeIndex(index_r3))); });
    ɵngcc0.ɵɵelement(1, "span", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    const index_r3 = ctx_r12.index;
    const node_r2 = ctx_r12.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("kendoTreeViewLoading", ctx_r4.nodeIndex(index_r3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("k-i-collapse", ctx_r4.isExpanded(node_r2, ctx_r4.nodeIndex(index_r3)))("k-i-expand", !ctx_r4.isExpanded(node_r2, ctx_r4.nodeIndex(index_r3)));
} }
function TreeViewGroupComponent_li_0_kendo_checkbox_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-checkbox", 14);
    ɵngcc0.ɵɵlistener("checkStateChange", function TreeViewGroupComponent_li_0_kendo_checkbox_3_Template_kendo_checkbox_checkStateChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const index_r3 = ɵngcc0.ɵɵnextContext().index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.checkNode(ctx_r13.nodeIndex(index_r3)); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext();
    const node_r2 = ctx_r16.$implicit;
    const index_r3 = ctx_r16.index;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("size", ctx_r5.size)("node", node_r2)("index", ctx_r5.nodeIndex(index_r3))("isChecked", ctx_r5.isChecked);
} }
function TreeViewGroupComponent_li_0_ng_container_7_ng_template_1_Template(rf, ctx) { }
const _c2 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function TreeViewGroupComponent_li_0_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TreeViewGroupComponent_li_0_ng_container_7_ng_template_1_Template, 0, 0, "ng-template", 15);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext();
    const node_r2 = ctx_r18.$implicit;
    const index_r3 = ctx_r18.index;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r6.nodeTemplateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c2, node_r2, ctx_r6.nodeIndex(index_r3)));
} }
function TreeViewGroupComponent_li_0_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r7.nodeText(node_r2), " ");
} }
function TreeViewGroupComponent_li_0_ul_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ul", 16);
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext();
    const node_r2 = ctx_r20.$implicit;
    const index_r3 = ctx_r20.index;
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("nodes", ctx_r8.fetchChildren)("loadOnDemand", ctx_r8.loadOnDemand)("checkboxes", ctx_r8.checkboxes)("expandIcons", ctx_r8.expandIcons)("selectable", ctx_r8.selectable)("touchActions", ctx_r8.touchActions)("children", ctx_r8.children)("hasChildren", ctx_r8.hasChildren)("isChecked", ctx_r8.isChecked)("isDisabled", ctx_r8.isDisabled)("disabled", ctx_r8.disabled || ctx_r8.isDisabled(node_r2, ctx_r8.nodeIndex(index_r3)))("isExpanded", ctx_r8.isExpanded)("isSelected", ctx_r8.isSelected)("isVisible", ctx_r8.isVisible)("nodeTemplateRef", ctx_r8.nodeTemplateRef)("loadMoreButtonTemplateRef", ctx_r8.loadMoreButtonTemplateRef)("parentIndex", ctx_r8.nodeIndex(index_r3))("parentDataItem", node_r2)("textField", ctx_r8.nextFields)("loadMoreService", ctx_r8.loadMoreService)("@toggle", true)("trackBy", ctx_r8.trackBy);
} }
function TreeViewGroupComponent_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 2)(1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, TreeViewGroupComponent_li_0_span_2_Template, 2, 5, "span", 4);
    ɵngcc0.ɵɵtemplate(3, TreeViewGroupComponent_li_0_kendo_checkbox_3_Template, 1, 4, "kendo-checkbox", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6)(5, "span", 7);
    ɵngcc0.ɵɵelementContainerStart(6, 8);
    ɵngcc0.ɵɵtemplate(7, TreeViewGroupComponent_li_0_ng_container_7_Template, 2, 5, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(8, TreeViewGroupComponent_li_0_ng_container_8_Template, 2, 1, "ng-container", 10);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd()()();
    ɵngcc0.ɵɵtemplate(9, TreeViewGroupComponent_li_0_ul_9_Template, 1, 22, "ul", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const index_r3 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("k-display-none", !ctx_r0.isVisible(node_r2, ctx_r0.nodeIndex(index_r3)));
    ɵngcc0.ɵɵproperty("dataItem", node_r2)("index", ctx_r0.nodeIndex(index_r3))("parentDataItem", ctx_r0.parentDataItem)("parentIndex", ctx_r0.parentIndex)("loadOnDemand", ctx_r0.loadOnDemand)("checkable", ctx_r0.checkboxes)("isChecked", ctx_r0.isChecked(node_r2, ctx_r0.nodeIndex(index_r3)))("isDisabled", ctx_r0.disabled || ctx_r0.isDisabled(node_r2, ctx_r0.nodeIndex(index_r3)))("isVisible", ctx_r0.isVisible(node_r2, ctx_r0.nodeIndex(index_r3)))("expandable", ctx_r0.expandIcons && ctx_r0.hasChildren(node_r2))("isExpanded", ctx_r0.isExpanded(node_r2, ctx_r0.nodeIndex(index_r3)))("selectable", ctx_r0.selectable)("isSelected", ctx_r0.isSelected(node_r2, ctx_r0.nodeIndex(index_r3)));
    ɵngcc0.ɵɵattribute("aria-setsize", ctx_r0.totalNodesCount)("data-treeindex", ctx_r0.nodeIndex(index_r3));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.expandIcons && ctx_r0.hasChildren(node_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.checkboxes);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("touch-action", ctx_r0.touchActions ? "" : "none");
    ɵngcc0.ɵɵproperty("dataItem", node_r2)("index", ctx_r0.nodeIndex(index_r3))("initialSelection", ctx_r0.isSelected(node_r2, ctx_r0.nodeIndex(index_r3)))("isSelected", ctx_r0.isSelected);
    ɵngcc0.ɵɵattribute("data-treeindex", ctx_r0.nodeIndex(index_r3));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r0.hasTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isExpanded(node_r2, ctx_r0.nodeIndex(index_r3)) && ctx_r0.hasChildren(node_r2));
} }
function TreeViewGroupComponent_li_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 21);
} }
function TreeViewGroupComponent_li_1_5_ng_template_0_Template(rf, ctx) { }
const _c3 = function (a0) { return { index: a0 }; };
function TreeViewGroupComponent_li_1_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TreeViewGroupComponent_li_1_5_ng_template_0_Template, 0, 0, "ng-template", 15);
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r22.loadMoreButtonTemplateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, ctx_r22.loadMoreButtonIndex));
} }
function TreeViewGroupComponent_li_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, " Load more ");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function TreeViewGroupComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 17)(1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, TreeViewGroupComponent_li_1_span_2_Template, 1, 0, "span", 18);
    ɵngcc0.ɵɵelementStart(3, "span", 19)(4, "span", 7);
    ɵngcc0.ɵɵtemplate(5, TreeViewGroupComponent_li_1_5_Template, 1, 4, null, 20);
    ɵngcc0.ɵɵtemplate(6, TreeViewGroupComponent_li_1_ng_container_6_Template, 2, 0, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("k-treeview-load-more-checkboxes-container", ctx_r1.checkboxes);
    ɵngcc0.ɵɵproperty("selectable", false)("checkable", false)("expandable", false)("index", ctx_r1.loadMoreButtonIndex)("parentDataItem", ctx_r1.parentDataItem)("parentIndex", ctx_r1.parentIndex);
    ɵngcc0.ɵɵattribute("data-treeindex", ctx_r1.loadMoreButtonIndex);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.loadingMoreNodes);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("index", ctx_r1.loadMoreButtonIndex);
    ɵngcc0.ɵɵattribute("data-treeindex", ctx_r1.loadMoreButtonIndex);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.loadMoreButtonTemplateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.loadMoreButtonTemplateRef);
} }
function DragClueComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("k-icon ", ctx_r0.statusIconClass, " k-drag-status");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.text);
} }
function DragClueComponent_1_ng_template_0_Template(rf, ctx) { }
const _c4 = function (a0, a1, a2, a3) { return { text: a0, action: a1, sourceItem: a2, destinationItem: a3 }; };
function DragClueComponent_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DragClueComponent_1_ng_template_0_Template, 0, 0, "ng-template", 1);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c4, ctx_r1.text, ctx_r1.action, ctx_r1.sourceItem, ctx_r1.destinationItem));
} }
function DropHintComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelement(1, "div", 3)(2, "div", 4);
    ɵngcc0.ɵɵelementEnd();
} }
function DropHintComponent_1_ng_template_0_ng_template_0_Template(rf, ctx) { }
function DropHintComponent_1_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DropHintComponent_1_ng_template_0_ng_template_0_Template, 0, 0, "ng-template");
} }
const _c5 = function (a0, a1, a2) { return { action: a0, sourceItem: a1, destinationItem: a2 }; };
function DropHintComponent_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DropHintComponent_1_ng_template_0_Template, 1, 0, "ng-template", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c5, ctx_r1.action, ctx_r1.sourceItem, ctx_r1.destinationItem));
} }
const packageMetadata = {
    name: '@progress/kendo-angular-treeview',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1646219256,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * @hidden
 */
class DataChangeNotificationService {
    constructor() {
        this.changes = new EventEmitter();
    }
    notify() {
        this.changes.emit();
    }
}
DataChangeNotificationService.ɵfac = function DataChangeNotificationService_Factory(t) { return new (t || DataChangeNotificationService)(); };
DataChangeNotificationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DataChangeNotificationService, factory: DataChangeNotificationService.ɵfac });

/**
 * @hidden
 */
const hasChildren = () => false;
/**
 * @hidden
 */
const isChecked = () => 'none';
/**
 * @hidden
 */
const isDisabled = () => false;
/**
 * @hidden
 */
const isExpanded = () => true;
/**
 * @hidden
 */
const isSelected = () => false;
/**
 * @hidden
 */
const isVisible = () => true;
/**
 * @hidden
 */
const trackBy = (_, item) => item;

/**
 * @hidden
 */
let ExpandStateService = class ExpandStateService {
    /**
     * @hidden
     */
    constructor() {
        this.changes = new Subject();
    }
    expand(index, dataItem) {
        this.changes.next({ dataItem, index, expand: true });
    }
    collapse(index, dataItem) {
        this.changes.next({ dataItem, index, expand: false });
    }
};
ExpandStateService.ɵfac = function ExpandStateService_Factory(t) { return new (t || ExpandStateService)(); };
ExpandStateService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ExpandStateService, factory: function (t) { return ExpandStateService.ɵfac(t); } });

/**
 * @hidden
 */
let IndexBuilderService = class IndexBuilderService {
    /**
     * @hidden
     */
    constructor() {
        this.INDEX_SEPARATOR = '_';
    }
    nodeIndex(index = '', parentIndex = '') {
        return `${parentIndex}${parentIndex ? this.INDEX_SEPARATOR : ''}${index}`;
    }
    indexForLevel(index, level) {
        return index.split(this.INDEX_SEPARATOR).slice(0, level).join(this.INDEX_SEPARATOR);
    }
    lastLevelIndex(index = '') {
        const parts = index.split(this.INDEX_SEPARATOR);
        if (!parts.length) {
            return NaN;
        }
        return parseInt(parts[parts.length - 1], 10);
    }
    level(index) {
        return index.split(this.INDEX_SEPARATOR).length;
    }
};
IndexBuilderService.ɵfac = function IndexBuilderService_Factory(t) { return new (t || IndexBuilderService)(); };
IndexBuilderService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: IndexBuilderService, factory: function (t) { return IndexBuilderService.ɵfac(t); } });

/**
 * @hidden
 */
let LoadingNotificationService = class LoadingNotificationService {
    /**
     * @hidden
     */
    constructor() {
        this.changes = new Subject();
    }
    notifyLoaded(index) {
        this.changes.next(index);
    }
};
LoadingNotificationService.ɵfac = function LoadingNotificationService_Factory(t) { return new (t || LoadingNotificationService)(); };
LoadingNotificationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LoadingNotificationService, factory: function (t) { return LoadingNotificationService.ɵfac(t); } });

const focusableRegex = /^(?:a|input|select|option|textarea|button|object)$/i;
/**
 * @hidden
 */
const match = (element, selector) => {
    const matcher = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
    if (!matcher) {
        return false;
    }
    return matcher.call(element, selector);
};
/**
 * @hidden
 */
const closestWithMatch = (element, selector) => {
    if (!document.documentElement.contains(element)) {
        return null;
    }
    let parent = element;
    while (parent !== null && parent.nodeType === 1) {
        if (match(parent, selector)) {
            return parent;
        }
        parent = parent.parentElement || parent.parentNode;
    }
    return null;
};
/**
 * @hidden
 */
const noop = () => { };
/**
 * @hidden
 */
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const isBlank = (value) => value === null || value === undefined;
/**
 * @hidden
 */
const isArray = (value) => Array.isArray(value);
/**
 * @hidden
 */
const isNullOrEmptyString = (value) => isBlank(value) || value.trim().length === 0;
/**
 * @hidden
 */
const isBoolean = (value) => typeof value === 'boolean';
/**
 * @hidden
 */
const closestNode = (element) => {
    const selector = 'li.k-treeview-item';
    if (!isDocumentAvailable()) {
        return null;
    }
    if (element.closest) {
        return element.closest(selector);
    }
    else {
        return closestWithMatch(element, selector);
    }
};
/**
 * @hidden
 */
const isFocusable = (element) => {
    if (element.tagName) {
        const tagName = element.tagName.toLowerCase();
        const tabIndex = element.getAttribute('tabIndex');
        const skipTab = tabIndex === '-1';
        let focusable = tabIndex !== null && !skipTab;
        if (focusableRegex.test(tagName)) {
            focusable = !element.disabled && !skipTab;
        }
        return focusable;
    }
    return false;
};
/**
 * @hidden
 */
const isContent = (element) => {
    const scopeSelector = '.k-treeview-leaf:not(.k-treeview-load-more-button),.k-treeview-item,.k-treeview';
    if (!isDocumentAvailable()) {
        return null;
    }
    let node = element;
    while (node && !match(node, scopeSelector)) {
        node = node.parentNode;
    }
    if (node) {
        return match(node, '.k-treeview-leaf:not(.k-treeview-load-more-button)');
    }
};
/**
 * @hidden
 *
 * Returns the nested .k-treeview-leaf:not(.k-treeview-load-more-button) element.
 * If the passed parent item is itself a content node, it is returned.
 */
const getContentElement = (parent) => {
    if (!isPresent(parent)) {
        return null;
    }
    const selector = '.k-treeview-leaf:not(.k-treeview-load-more-button)';
    if (match(parent, selector)) {
        return parent;
    }
    return parent.querySelector(selector);
};
/**
 * @hidden
 */
const isLoadMoreButton = (element) => {
    return isPresent(closestWithMatch(element, '.k-treeview-leaf.k-treeview-load-more-button'));
};
/**
 * @hidden
 */
const closest = (node, predicate) => {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};
/**
 * @hidden
 */
const hasParent = (element, container) => {
    return Boolean(closest(element, (node) => node === container));
};
/**
 * @hidden
 */
const focusableNode = (element) => element.nativeElement.querySelector('li[tabindex="0"]');
/**
 * @hidden
 */
const nodeId = (node) => node ? node.getAttribute('data-treeindex') : '';
/**
 * @hidden
 */
const nodeIndex = (item) => (item || {}).index;
/**
 * @hidden
 */
const dataItemsEqual = (first, second) => {
    if (!isPresent(first) && !isPresent(second)) {
        return true;
    }
    return isPresent(first) && isPresent(second) && first.item.dataItem === second.item.dataItem;
};
/**
 * @hidden
 */
const getDataItem = (lookup) => {
    if (!isPresent(lookup)) {
        return lookup;
    }
    return lookup.item.dataItem;
};
/**
 * @hidden
 */
const isArrayWithAtLeastOneItem = v => v && Array.isArray(v) && v.length !== 0;
/**
 * @hidden
 * A recursive tree-filtering algorithm that returns:
 * - all child nodes of matching nodes
 * - a chain parent nodes from the match to the root node
 */
const filterTree = (items, term, { operator, ignoreCase, mode }, textField, depth = 0) => {
    const field = typeof textField === "string" ? textField : textField[depth];
    items.forEach((wrapper) => {
        const matcher = typeof operator === "string" ? matchByFieldAndCase(field, operator, ignoreCase) : operator;
        const isMatch = matcher(wrapper.dataItem, term);
        wrapper.isMatch = isMatch;
        wrapper.visible = isMatch;
        wrapper.containsMatches = false;
        if (isMatch) {
            setParentChain(wrapper.parent);
        }
        if (wrapper.children && wrapper.children.length > 0) {
            if (mode === "strict" || !isMatch) {
                filterTree(wrapper.children, term, { operator, ignoreCase, mode }, textField, depth + 1);
            }
            else {
                makeAllVisible(wrapper.children);
            }
        }
    });
};
const setParentChain = (node) => {
    if (!isPresent(node)) {
        return;
    }
    node.containsMatches = true;
    node.visible = true;
    if (isPresent(node.parent) && !node.parent.containsMatches) {
        setParentChain(node.parent);
    }
};
const makeAllVisible = (nodes) => {
    nodes.forEach(node => {
        node.visible = true;
        if (node.children) {
            makeAllVisible(node.children);
        }
    });
};
const ɵ2 = (a, b) => a.indexOf(b) >= 0, ɵ3 = (a, b) => a.indexOf(b) === -1, ɵ4 = (a, b) => a.lastIndexOf(b, 0) === 0, ɵ5 = (a, b) => a.lastIndexOf(b, 0) === -1, ɵ6 = (a, b) => a.indexOf(b, a.length - b.length) >= 0, ɵ7 = (a, b) => a.indexOf(b, a.length - b.length) < 0;
const operators = {
    contains: ɵ2,
    doesnotcontain: ɵ3,
    startswith: ɵ4,
    doesnotstartwith: ɵ5,
    endswith: ɵ6,
    doesnotendwith: ɵ7
};
const matchByCase = (matcher, ignoreCase) => (a, b) => {
    if (ignoreCase) {
        return matcher(a.toLowerCase(), b.toLowerCase());
    }
    return matcher(a, b);
};
const matchByFieldAndCase = (field, operator, ignoreCase) => (dataItem, term) => matchByCase(operators[operator], ignoreCase)(getter(field)(dataItem), term);
/**
 * @hidden
 */
const buildTreeIndex = (parentIndex, itemIndex) => {
    return [parentIndex, itemIndex].filter(part => isPresent(part)).join('_');
};
/**
 * @hidden
 */
const buildTreeItem = (dataItem, currentLevelIndex, parentIndex) => {
    if (!isPresent(dataItem)) {
        return null;
    }
    return {
        dataItem,
        index: buildTreeIndex(parentIndex, currentLevelIndex)
    };
};
/**
 * @hidden
 *
 * Retrieves all descendant nodes' lookups which are currently registered in the provided lookup item as a flat array.
 */
const fetchLoadedDescendants = (lookup, filterExpression) => {
    if (!isPresent(lookup) || lookup.children.length === 0) {
        return [];
    }
    let descendants = lookup.children;
    if (isPresent(filterExpression)) {
        descendants = descendants.filter(filterExpression);
    }
    descendants.forEach(child => descendants = descendants.concat(fetchLoadedDescendants(child, filterExpression)));
    return descendants;
};
/**
 * @hidden
 *
 * Compares two Seets to determine whether all unique elements in one, are present in the other.
 * Important:
 *  - it disregards the element order
 */
const sameValues = (as, bs) => {
    if (as.size !== bs.size) {
        return false;
    }
    return Array.from(as).every(v => bs.has(v));
};
/**
 * @hidden
 * Returns the size class based on the component and size input.
 */
const getSizeClass = (component, size) => {
    const SIZE_CLASSES = {
        'small': `k-${component}-sm`,
        'medium': `k-${component}-md`,
        'large': `k-${component}-lg`
    };
    return SIZE_CLASSES[size];
};

const safe = node => (node || {});
const safeChildren = node => (safe(node).children || []);
const lastVisibleNode = (nodes) => {
    if (!Array.isArray(nodes) || nodes.length === 0) {
        return null;
    }
    const nodesCount = nodes.length;
    const lastIndex = nodesCount - 1;
    for (let index = lastIndex; index >= 0; index -= 1) {
        const node = nodes[index];
        if (node.visible) {
            return node;
        }
    }
    return null;
};
/**
 * @hidden
 */
class NavigationModel {
    constructor() {
        this.ib = new IndexBuilderService();
        this.nodes = [];
    }
    firstVisibleNode() {
        return (this.nodes || []).find(node => node.visible);
    }
    lastVisibleNode() {
        let node = lastVisibleNode(this.nodes);
        while (isPresent(node) && safeChildren(node).length > 0) {
            const children = safeChildren(node);
            const lastVisibleChild = lastVisibleNode(children);
            if (!isPresent(lastVisibleChild)) {
                return node;
            }
            node = lastVisibleChild;
        }
        return node;
    }
    closestNode(index) {
        const { prev } = safe(this.findNode(index));
        const sibling = prev || this.firstVisibleNode();
        return safe(sibling).index === index ? this.visibleSibling(sibling, 1) : sibling;
    }
    firstFocusableNode() {
        return this.nodes.find((node) => {
            return !node.disabled && node.visible;
        });
    }
    findNode(index) {
        return this.find(index, this.nodes);
    }
    findParent(index) {
        const parentLevel = this.ib.level(index) - 1;
        return this.findNode(this.ib.indexForLevel(index, parentLevel));
    }
    findVisibleChild(index) {
        const node = this.findNode(index);
        const children = safeChildren(node);
        return children.find((child) => child.visible);
    }
    findVisiblePrev(item) {
        const index = item.index;
        const parent = this.findParent(index);
        const levelIndex = this.ib.lastLevelIndex(index);
        const prevNodes = this.container(parent).slice(0, levelIndex);
        const prevNodesHidden = prevNodes.every(node => !node.visible);
        if (levelIndex === 0 || prevNodesHidden) {
            return parent;
        }
        const currentNode = this.findNode(index);
        let prev = this.visibleSibling(currentNode, -1);
        if (prev) {
            let children = this.container(prev);
            while (children.length > 0 && children.some(node => node.visible)) {
                prev = lastVisibleNode(children);
                children = this.container(prev);
            }
        }
        return prev;
    }
    findVisibleNext(item) {
        const children = this.container(item);
        const hasVisibleChildren = children.some(child => child.visible);
        if (children.length === 0 || !hasVisibleChildren) {
            return this.visibleSibling(item, 1);
        }
        return children.find(child => child.visible);
    }
    registerItem(id, index, disabled, loadMoreButton = false, visible = true) {
        const children = [];
        const level = this.ib.level(index);
        const parent = this.findParent(index);
        if (parent || level === 1) {
            const node = { id, children, index, parent, disabled, loadMoreButton, visible };
            this.insert(node, parent);
        }
    }
    unregisterItem(id, index) {
        const node = this.find(index, this.nodes);
        if (!node || node.id !== id) {
            return;
        }
        const children = this.container(node.parent);
        children.splice(children.indexOf(node), 1);
    }
    childLevel(nodes) {
        const children = nodes.filter(node => isPresent(node));
        if (!children || !children.length) {
            return 1;
        }
        return this.ib.level(children[0].index);
    }
    container(node) {
        return node ? node.children : this.nodes;
    }
    find(index, nodes) {
        const childLevel = this.childLevel(nodes);
        const indexToMatch = this.ib.indexForLevel(index, childLevel);
        const isLeaf = childLevel === this.ib.level(index);
        const node = nodes.find(n => n && n.index === indexToMatch);
        if (!node) {
            return null;
        }
        return isLeaf ? node : this.find(index, node.children);
    }
    insert(node, parent) {
        const nodes = this.container(parent);
        nodes.splice(this.ib.lastLevelIndex(node.index), 0, node);
    }
    visibleSibling(node, offset) {
        if (!node) {
            return null;
        }
        const parent = this.findParent(node.index);
        const container = this.container(parent);
        let nextItemIndex = container.indexOf(node) + offset;
        let nextItem = container[nextItemIndex];
        while (isPresent(nextItem)) {
            if (nextItem.visible) {
                return nextItem;
            }
            nextItemIndex += offset;
            nextItem = container[nextItemIndex];
        }
        return this.visibleSibling(parent, offset);
    }
}

/**
 * @hidden
 */
let NavigationService = class NavigationService {
    constructor(localization) {
        this.localization = localization;
        this.expands = new Subject();
        this.moves = new Subject();
        this.checks = new Subject();
        this.selects = new Subject();
        this.loadMore = new Subject();
        this.navigable = true;
        this.actions = {
            [Keys.ArrowUp]: () => this.activate(this.model.findVisiblePrev(this.focusableItem), true),
            [Keys.ArrowDown]: () => this.activate(this.model.findVisibleNext(this.focusableItem), true),
            [Keys.ArrowLeft]: () => !this.isLoadMoreButton && (this.expand({
                expand: this.localization.rtl,
                intercept: this.localization.rtl ? this.moveToFirstVisibleChild : this.moveToParent
            })),
            [Keys.ArrowRight]: () => !this.isLoadMoreButton && (this.expand({
                expand: !this.localization.rtl,
                intercept: this.localization.rtl ? this.moveToParent : this.moveToFirstVisibleChild
            })),
            [Keys.Home]: () => this.activate(this.model.firstVisibleNode(), true),
            [Keys.End]: () => this.activate(this.model.lastVisibleNode(), true),
            [Keys.Enter]: () => this.handleEnter(),
            [Keys.Space]: () => this.handleSpace()
        };
        this.isFocused = false;
        this.shouldScroll = false;
        this._model = new NavigationModel();
        this.moveToFirstVisibleChild = this.moveToFirstVisibleChild.bind(this);
        this.moveToParent = this.moveToParent.bind(this);
    }
    get model() {
        return this._model;
    }
    set model(model) {
        this._model = model;
    }
    get activeIndex() {
        return nodeIndex(this.activeItem) || null;
    }
    get isActiveExpanded() {
        return this.activeItem && this.activeItem.children.length > 0;
    }
    get isLoadMoreButton() {
        return this.activeItem && this.activeItem.loadMoreButton;
    }
    get focusableItem() {
        return this.activeItem || this.model.firstFocusableNode();
    }
    activate(item, shouldScroll = false) {
        if (!this.navigable || !item || this.isActive(nodeIndex(item))) {
            return;
        }
        this.isFocused = true;
        this.activeItem = item || this.activeItem;
        this.shouldScroll = shouldScroll;
        this.notifyMove();
    }
    activateParent(index) {
        this.activate(this.model.findParent(index));
    }
    activateIndex(index) {
        if (!index) {
            return;
        }
        this.activate(this.model.findNode(index));
    }
    activateClosest(index) {
        if (!index || nodeIndex(this.focusableItem) !== index) {
            return;
        }
        this.activeItem = this.model.closestNode(index);
        this.notifyMove();
    }
    activateFocusable() {
        if (this.activeItem) {
            return;
        }
        this.activeItem = this.model.firstVisibleNode();
        this.notifyMove();
    }
    deactivate() {
        if (!this.navigable || !this.isFocused) {
            return;
        }
        this.isFocused = false;
        this.notifyMove();
    }
    checkIndex(index) {
        if (!this.isDisabled(index)) {
            this.checks.next(index);
        }
    }
    selectIndex(index) {
        if (!this.isDisabled(index)) {
            this.selects.next(index);
        }
    }
    notifyLoadMore(index) {
        if (!isPresent(index)) {
            return;
        }
        this.loadMore.next(index);
    }
    isActive(index) {
        if (!index) {
            return false;
        }
        return this.isFocused && this.activeIndex === index;
    }
    isFocusable(index) {
        return nodeIndex(this.focusableItem) === index;
    }
    isDisabled(index) {
        return this.model.findNode(index).disabled;
    }
    registerItem(id, index, disabled, loadMoreButton = false, visible = true) {
        const itemAtIndex = this.model.findNode(index);
        if (isPresent(itemAtIndex)) {
            this.model.unregisterItem(itemAtIndex.id, itemAtIndex.index);
            if (this.isActive(index)) {
                this.deactivate();
            }
        }
        this.model.registerItem(id, index, disabled, loadMoreButton, visible);
    }
    unregisterItem(id, index) {
        if (this.isActive(index)) {
            this.activateParent(index);
        }
        this.model.unregisterItem(id, index);
    }
    move(e) {
        if (!this.navigable) {
            return;
        }
        const moveAction = this.actions[e.keyCode];
        if (!moveAction) {
            return;
        }
        moveAction();
        e.preventDefault();
    }
    expand({ expand, intercept }) {
        const index = nodeIndex(this.activeItem);
        if (!index || intercept(index)) {
            return;
        }
        this.notifyExpand(expand);
    }
    moveToParent() {
        if (this.isActiveExpanded) {
            return false;
        }
        this.activate(this.model.findParent(nodeIndex(this.activeItem)));
        return true;
    }
    moveToFirstVisibleChild() {
        if (!this.isActiveExpanded) {
            return false;
        }
        this.activate(this.model.findVisibleChild(nodeIndex(this.activeItem)));
        return true;
    }
    notifyExpand(expand) {
        this.expands.next(this.navigationState(expand));
    }
    notifyMove() {
        this.moves.next(this.navigationState());
    }
    navigationState(expand = false) {
        return ({ expand, index: this.activeIndex, isFocused: this.isFocused, shouldScroll: this.shouldScroll });
    }
    handleEnter() {
        if (!this.navigable) {
            return;
        }
        if (this.isLoadMoreButton) {
            this.notifyLoadMore(this.activeIndex);
        }
        else {
            this.selectIndex(this.activeIndex);
        }
    }
    handleSpace() {
        if (!this.navigable) {
            return;
        }
        if (this.isLoadMoreButton) {
            this.notifyLoadMore(this.activeIndex);
        }
        else {
            this.checkIndex(this.activeIndex);
        }
    }
};
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(ɵngcc1.LocalizationService)); };
NavigationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: function (t) { return NavigationService.ɵfac(t); } });
NavigationService = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], NavigationService);

/**
 * @hidden
 */
let NodeChildrenService = class NodeChildrenService {
    /**
     * @hidden
     */
    constructor() {
        this.changes = new Subject();
    }
    childrenLoaded(item, children) {
        this.changes.next({ item, children });
    }
};
NodeChildrenService.ɵfac = function NodeChildrenService_Factory(t) { return new (t || NodeChildrenService)(); };
NodeChildrenService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NodeChildrenService, factory: function (t) { return NodeChildrenService.ɵfac(t); } });

/**
 * Represents the template for the TreeView nodes ([more information and example]({% slug nodetemplate_treeview %})).
 * The template helps to customize the content of the nodes. To define the node template, nest an `<ng-template>`
 * tag with the `kendoTreeViewNodeTemplate` directive inside a `<kendo-treeview>` tag.
 *
 *
 * The node data item and its hierarchical index are available as context variables:
 *
 * - `let-dataItem` (`any`) - available as implicit context variable
 * - `let-index="index"` (`string`)
 *
 *
 * @example
 * ```ts
 *
 *  import { Component } from '@angular/core';
 *  @Component({
 *      selector: 'my-app',
 *      template: `
 *      <kendo-treeview
 *          [nodes]="data"
 *          kendoTreeViewExpandable
 *
 *          kendoTreeViewHierarchyBinding
 *          childrenField="items">
 *        <ng-template kendoTreeViewNodeTemplate let-dataItem let-index="index">
 *          <span [style.fontWeight]="dataItem.items ? 'bolder': 'normal' ">{{ index }}: {{ dataItem.text }}</span>
 *        </ng-template>
 *      </kendo-treeview>
 *    `
 *  })
 *  export class AppComponent {
 *      public data: any[] = [
 *          {
 *              text: "Inbox",
 *              items: [{ text: "Read Mail" }]
 *          },
 *          {
 *              text: "Drafts"
 *          },
 *          {
 *              text: "Search Folders",
 *              items: [
 *                  { text: "Categorized Mail" },
 *                  { text: "Large Mail" },
 *                  { text: "Unread Mail"}
 *              ]
 *          },
 *          { text: "Settings" }
 *      ];
 *  }
 *
 * ```
 */
let NodeTemplateDirective = class NodeTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
NodeTemplateDirective.ɵfac = function NodeTemplateDirective_Factory(t) { return new (t || NodeTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
NodeTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NodeTemplateDirective, selectors: [["", "kendoTreeViewNodeTemplate", ""]] });
NodeTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], NodeTemplateDirective);

/**
 * Represents the template for the TreeView load more buttons.
 * To define a button template, nest an `<ng-template>`
 * tag with the `kendoTreeViewLoadMoreButtonTemplate` directive inside a `<kendo-treeview>` tag
 * ([see example]({% slug loadmorebutton_treeview %}#toc-button-template)).
 *
 * The hierarchical index of the load more button node is available as a context variable:
 *
 * - `let-index="index"` (`string`)
 */
let LoadMoreButtonTemplateDirective = class LoadMoreButtonTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
LoadMoreButtonTemplateDirective.ɵfac = function LoadMoreButtonTemplateDirective_Factory(t) { return new (t || LoadMoreButtonTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
LoadMoreButtonTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LoadMoreButtonTemplateDirective, selectors: [["", "kendoTreeViewLoadMoreButtonTemplate", ""]] });
LoadMoreButtonTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], LoadMoreButtonTemplateDirective);

/**
 * @hidden
 *
 * An injection token used by the data binding directives to interface with
 * the TreeView or the DropDownTree components.
 */
let DataBoundComponent = class DataBoundComponent {
};
DataBoundComponent.ɵfac = function DataBoundComponent_Factory(t) { return new (t || DataBoundComponent)(); };
DataBoundComponent.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DataBoundComponent, factory: function (t) { return DataBoundComponent.ɵfac(t); } });

/**
 * @hidden
 *
 * An injection token used by the expand-directive to interface with
 * the TreeView or the DropDownTree components.
 */
let ExpandableComponent = class ExpandableComponent {
};
ExpandableComponent.ɵfac = function ExpandableComponent_Factory(t) { return new (t || ExpandableComponent)(); };
ExpandableComponent.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ExpandableComponent, factory: function (t) { return ExpandableComponent.ɵfac(t); } });

/**
 * @hidden
 */
let SelectionService = class SelectionService {
    /**
     * @hidden
     */
    constructor() {
        this.changes = new Subject();
    }
    isFirstSelected(index) {
        return this.firstIndex === index;
    }
    setFirstSelected(index, selected) {
        if (this.firstIndex === index && selected === false) {
            this.firstIndex = null;
        }
        else if (!this.firstIndex && selected) {
            this.firstIndex = index;
        }
    }
    select(index, dataItem) {
        this.changes.next({ dataItem, index });
    }
};
SelectionService.ɵfac = function SelectionService_Factory(t) { return new (t || SelectionService)(); };
SelectionService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SelectionService, factory: function (t) { return SelectionService.ɵfac(t); } });

const INDEX_REGEX = /\d+$/;
/**
 * @hidden
 */
let TreeViewLookupService = class TreeViewLookupService {
    /**
     * @hidden
     */
    constructor() {
        this.map = new Map();
    }
    reset() {
        this.map.clear();
    }
    registerItem(item, parent) {
        const currentLookup = {
            children: [],
            item,
            parent: this.item(nodeIndex(parent))
        };
        this.map.set(item.index, currentLookup);
    }
    registerChildren(index, children) {
        const item = this.item(index);
        if (!item) {
            return;
        }
        item.children = children;
    }
    unregisterItem(index, dataItem) {
        const current = this.item(index);
        if (current && current.item.dataItem === dataItem) {
            this.map.delete(index);
            if (current.parent && current.parent.children) {
                current.parent.children = current.parent.children.filter(item => item.dataItem !== dataItem);
            }
        }
    }
    replaceItem(index, item, parent) {
        if (!item) {
            return;
        }
        this.unregisterItem(index, item.dataItem);
        this.registerItem(item, parent);
        this.addToParent(item, parent);
    }
    itemLookup(index) {
        const item = this.item(index);
        if (!item) {
            return null;
        }
        return {
            children: this.mapChildren(item.children),
            item: item.item,
            parent: item.parent
        };
    }
    hasItem(index) {
        return this.map.has(index);
    }
    item(index) {
        return this.map.get(index) || null;
    }
    addToParent(item, parent) {
        if (parent) {
            const parentItem = this.item(parent.index);
            const index = parseInt(INDEX_REGEX.exec(item.index)[0], 10);
            parentItem.children = parentItem.children || [];
            parentItem.children.splice(index, 0, item);
        }
    }
    mapChildren(children = []) {
        return children.map(c => {
            const { item, parent, children } = this.item(c.index);
            return {
                children: this.mapChildren(children),
                item,
                parent
            };
        });
    }
};
TreeViewLookupService.ɵfac = function TreeViewLookupService_Factory(t) { return new (t || TreeViewLookupService)(); };
TreeViewLookupService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TreeViewLookupService, factory: function (t) { return TreeViewLookupService.ɵfac(t); } });

const LOAD_MORE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/treeview/load-more-button/';
const providers = [
    ExpandStateService,
    IndexBuilderService,
    TreeViewLookupService,
    LoadingNotificationService,
    NodeChildrenService,
    NavigationService,
    SelectionService,
    DataChangeNotificationService,
    LocalizationService,
    {
        provide: L10N_PREFIX,
        useValue: 'kendo.treeview'
    },
    {
        provide: DataBoundComponent,
        useExisting: forwardRef(() => TreeViewComponent)
    },
    {
        provide: ExpandableComponent,
        useExisting: forwardRef(() => TreeViewComponent)
    }
];
/* tslint:disable:member-ordering */
/**
 * Represents the [Kendo UI TreeView component for Angular]({% slug overview_treeview %}).
 *
 * @example
 * {% meta height:450 %}
 * {% embed_file get-started/app.component.ts preview %}
 * {% embed_file get-started/app.module.ts %}
 * {% embed_file shared/main.ts %}
 * {% endmeta %}
 */
let TreeViewComponent = class TreeViewComponent {
    constructor(element, changeDetectorRef, expandService, navigationService, nodeChildrenService, selectionService, treeViewLookupService, ngZone, renderer, dataChangeNotification, localization) {
        this.element = element;
        this.changeDetectorRef = changeDetectorRef;
        this.expandService = expandService;
        this.navigationService = navigationService;
        this.nodeChildrenService = nodeChildrenService;
        this.selectionService = selectionService;
        this.treeViewLookupService = treeViewLookupService;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.dataChangeNotification = dataChangeNotification;
        this.localization = localization;
        this.classNames = true;
        this.role = 'tree';
        /**
         * The hint which is displayed when the component is empty.
         */
        this.filterInputPlaceholder = "";
        /** @hidden */
        this.fetchNodes = () => this.data;
        /**
         * Fires when the children of the expanded node are loaded.
         */
        this.childrenLoaded = new EventEmitter();
        /**
         * Fires when the user blurs the component.
         */
        this.onBlur = new EventEmitter();
        /**
         * Fires when the user focuses the component.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires when the user expands a TreeView node.
         */
        this.expand = new EventEmitter();
        /**
         * Fires when the user collapses a TreeView node.
         */
        this.collapse = new EventEmitter();
        /**
         * Fires just before the dragging of the node starts ([see example]({% slug draganddrop_treeview %}#toc-setup)). This event is preventable.
         * If you prevent the event default, no drag hint will be created and the subsequent drag-related events will not be fired.
         */
        this.nodeDragStart = new EventEmitter();
        /**
         * Fires when an item is being dragged ([see example]({% slug draganddrop_treeview %}#toc-setup)).
         */
        this.nodeDrag = new EventEmitter();
        /**
         * Emits when the built-in filtering mechanism in the data-binding directives updates the node's visibility.
         * Used for the built-in auto-expand functionalities of the component and available for custom implementations.
         */
        this.filterStateChange = new EventEmitter();
        /**
         * Fires on the target TreeView when a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
         * This event is preventable. If you prevent the event default (`event.preventDefualt()`) or invalidate its state (`event.setValid(false)`),
         * the `addItem` and `removeItem` events will not be triggered.
         *
         * Both operations cancel the default drop operation, but the indication to the user is different. `event.setValid(false)` indicates that the operation was
         * unsuccessful by animating the drag clue to its original position. `event.preventDefault()` simply removes the clue, as if it has been dropped successfully.
         * As a general rule, use `preventDefault` to manually handle the add and remove operations, and `setValid(false)` to indicate the operation was unsuccessful.
         */
        this.nodeDrop = new EventEmitter();
        /**
         * Fires on the source TreeView after the dragged item has been dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
         */
        this.nodeDragEnd = new EventEmitter();
        /**
         * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
         * Called on the TreeView where the item is dropped.
         */
        this.addItem = new EventEmitter();
        /**
         * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
         * Called on the TreeView from where the item is dragged.
         */
        this.removeItem = new EventEmitter();
        /**
         * Fires when the user selects a TreeView node checkbox
         * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).
         */
        this.checkedChange = new EventEmitter();
        /**
         * Fires when the user selects a TreeView node
         * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires when the value of the built-in filter input element changes.
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires when the user clicks a TreeView node.
         */
        this.nodeClick = new EventEmitter();
        /**
         * Fires when the user double clicks a TreeView node.
         */
        this.nodeDblClick = new EventEmitter();
        /**
         * A function that defines how to track node changes.
         * By default, the TreeView tracks the nodes by data item object reference.
         *
         * @example
         * ```ts
         *  @Component({
         *      selector: 'my-app',
         *      template: `
         *          <kendo-treeview
         *              [nodes]="data"
         *              textField="text"
         *              [trackBy]="trackBy"
         *          >
         *          </kendo-treeview>
         *      `
         *  })
         *  export class AppComponent {
         *      public data: any[] = [
         *          { text: "Furniture" },
         *          { text: "Decor" }
         *      ];
         *
         *      public trackBy(index: number, item: any): any {
         *          return item.text;
         *      }
         *  }
         * ```
         */
        this.trackBy = trackBy;
        /**
         * A function which determines if a specific node is disabled.
         */
        this.isDisabled = isDisabled;
        /**
         * A callback which determines whether a TreeView node should be rendered as hidden. The utility .k-display-none class is used to hide the nodes.
         * Useful for custom filtering implementations.
         */
        this.isVisible = isVisible;
        /**
         * Determines whether the TreeView keyboard navigable is enabled.
         */
        this.navigable = true;
        /**
         * A function which provides the child nodes for a given parent node
         * ([see example]({% slug databinding_treeview %})).
         */
        this.children = () => of([]);
        /**
         * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.
         * @default true
         */
        this.loadOnDemand = true;
        /**
         * Renders the built-in input element for filtering the TreeView.
         * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the TreeView manually]({% slug filtering_treeview %}#toc-manual-filtering).
         * A built-in filtering implementation is available to use with the [`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %}) and [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %}) directives.
         */
        this.filterable = false;
        /**
         * Sets an initial value of the built-in input element used for filtering.
         */
        this.filter = '';
        this.checkboxes = false;
        this.expandIcons = false;
        this.selectable = false;
        this.touchActions = true;
        this.isActive = false;
        this.data = new BehaviorSubject([]);
        this._animate = true;
        this._size = 'medium';
        this.subscriptions = new Subscription();
        this.domSubscriptions = [];
        validatePackage(packageMetadata);
    }
    /** @hidden */
    get direction() {
        return this.localization.rtl ? 'rtl' : 'ltr';
    }
    /**
     * Determines whether the content animation is enabled.
     */
    set animate(value) {
        this._animate = value;
    }
    get animate() {
        return !this._animate;
    }
    /**
     * @hidden
     *
     * Defines the template for each node.
     * Takes precedence over nested templates in the TreeView tag.
     */
    set nodeTemplateRef(template) {
        this._nodeTemplateRef = template;
    }
    get nodeTemplateRef() {
        return this._nodeTemplateRef || this.nodeTemplateQuery;
    }
    /**
     * @hidden
     *
     * Defines the template for each load-more button.
     * Takes precedence over nested templates in the TreeView tag.
     */
    set loadMoreButtonTemplateRef(template) {
        this._loadMoreButtonTemplateRef = template;
    }
    get loadMoreButtonTemplateRef() {
        return this._loadMoreButtonTemplateRef || this.loadMoreButtonTemplateQuery;
    }
    /**
     * The nodes which will be displayed by the TreeView
     * ([see example]({% slug databinding_treeview %})).
     */
    set nodes(value) {
        this.data.next(value || []);
        this.dataChangeNotification.notify();
    }
    get nodes() {
        return this.data.value;
    }
    /**
     * A function which determines if a specific node has child nodes
     * ([see example]({% slug databinding_treeview %})).
     */
    get hasChildren() {
        return this._hasChildren || hasChildren;
    }
    set hasChildren(callback) {
        this._hasChildren = callback;
        this.expandIcons = Boolean(this._isExpanded && this._hasChildren);
    }
    /**
     * A function which determines if a specific node is checked
     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).
     */
    get isChecked() {
        return this._isChecked || isChecked;
    }
    set isChecked(callback) {
        this._isChecked = callback;
        this.checkboxes = Boolean(this._isChecked);
    }
    /**
     * A function which determines if a specific node is expanded.
     */
    get isExpanded() {
        return this._isExpanded || isExpanded;
    }
    set isExpanded(callback) {
        this._isExpanded = callback;
        this.expandIcons = Boolean(this._isExpanded && this._hasChildren);
    }
    /**
     * A function which determines if a specific node is selected
     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).
     */
    get isSelected() {
        return this._isSelected || isSelected;
    }
    set isSelected(callback) {
        this._isSelected = callback;
        this.selectable = Boolean(this._isSelected);
    }
    /**
     * Sets the size of the component.
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (default)
     * * `'large'`
     * * `null`
     *
     */
    set size(size) {
        this.renderer.removeClass(this.element.nativeElement, getSizeClass('treeview', this.size));
        if (size) {
            this.renderer.addClass(this.element.nativeElement, getSizeClass('treeview', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    ngOnChanges(changes) {
        this.navigationService.navigable = Boolean(this.navigable);
        // TODO: should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (anyChanged(['nodes', 'children', 'hasChildren', 'loadOnDemand'], changes, false) && !this.loadOnDemand) {
            this.preloadChildNodes();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.domSubscriptions.forEach(subscription => subscription());
    }
    ngOnInit() {
        this.subscriptions.add(this.nodeChildrenService
            .changes
            .subscribe((x) => this.childrenLoaded.emit(x)));
        this.subscriptions.add(this.expandService.changes
            .subscribe(({ index, dataItem, expand }) => expand
            ? this.expand.emit({ index, dataItem })
            : this.collapse.emit({ index, dataItem })));
        this.subscriptions.add(this.navigationService.checks
            .subscribe((x) => this.checkedChange.emit(this.treeViewLookupService.itemLookup(x))));
        this.subscriptions.add(this.selectionService.changes
            .subscribe((x) => {
            if (hasObservers(this.selectionChange)) {
                this.ngZone.run(() => {
                    this.selectionChange.emit(x);
                });
            }
        }));
        if (this.element) {
            this.ngZone.runOutsideAngular(() => {
                this.attachDomHandlers();
            });
        }
        if (this.size) {
            this.renderer.addClass(this.element.nativeElement, getSizeClass('treeview', this.size));
        }
    }
    /**
     * Blurs the focused TreeView item.
     */
    blur() {
        if (!isDocumentAvailable()) {
            return;
        }
        const target = focusableNode(this.element);
        if (document.activeElement === target) {
            target.blur();
        }
    }
    /**
     * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     *
     *  @Component({
     *      selector: 'my-app',
     *      template: `
     *      <button (click)="treeview.focus('1')">Focuses the second node</button>
     *      <kendo-treeview
     *          #treeview
     *          [nodes]="data"
     *          textField="text"
     *      >
     *      </kendo-treeview>
     *  `
     *  })
     *  export class AppComponent {
     *      public data: any[] = [
     *          { text: "Furniture" },
     *          { text: "Decor" }
     *      ];
     *  }
     * ```
     */
    focus(index) {
        const focusIndex = index || nodeIndex(this.navigationService.focusableItem);
        this.navigationService.activateIndex(focusIndex);
        const target = focusableNode(this.element);
        if (target) {
            target.focus();
        }
    }
    /**
     * Based on the specified index, returns the TreeItemLookup node.
     *
     * @param index - The index of the node.
     * @returns {TreeItemLookup} - The item that was searched (looked up).
     */
    itemLookup(index) {
        return this.treeViewLookupService.itemLookup(index);
    }
    /**
     * Triggers the [`children`]({% slug api_treeview_treeviewcomponent %}#toc-children) function for every expanded node,
     * causing all rendered child nodes to be fetched again.
     */
    rebindChildren() {
        this.dataChangeNotification.notify();
    }
    /**
     * Triggers the `expand` event for the provided node and displays it's loading indicator.
     */
    expandNode(item, index) {
        this.expandService.expand(index, item);
    }
    /**
     * Triggers the `collapse` event for the provided node.
     */
    collapseNode(item, index) {
        this.expandService.collapse(index, item);
    }
    /**
     * Gets the current page size of the checked data item children collection
     * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).
     *
     * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to get its page size.
     *
     * @param dataItem {any} - The parent data item of the targeted collection.
     * @returns {number} - The page size of the checked data item children collection.
     */
    getNodePageSize(dataItem) {
        this.verifyLoadMoreService();
        return this.loadMoreService.getGroupSize(dataItem);
    }
    /**
     * Sets the page size of the targeted data item children collection
     * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).
     *
     * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to target its page size.
     *
     * @param dataItem {any} - The parent data item of the targeted collection.
     * @param pageSize {number} - The new page size.
     */
    setNodePageSize(dataItem, pageSize) {
        this.verifyLoadMoreService();
        this.loadMoreService.setGroupSize(dataItem, pageSize);
    }
    /**
     * @hidden
     *
     * Clears the current TreeViewLookupService node map and re-registers all nodes anew.
     * Child nodes are acquired through the provided `children` callback.
     */
    preloadChildNodes() {
        this.treeViewLookupService.reset();
        this.registerLookupItems(this.nodes);
    }
    attachDomHandlers() {
        const element = this.element.nativeElement;
        this.clickHandler = this.clickHandler.bind(this);
        this.domSubscriptions.push(this.renderer.listen(element, 'contextmenu', this.clickHandler), this.renderer.listen(element, 'click', this.clickHandler), this.renderer.listen(element, 'dblclick', this.clickHandler), this.renderer.listen(element, 'focusin', this.focusHandler.bind(this)), this.renderer.listen(element, 'focusout', this.blurHandler.bind(this)), this.renderer.listen(element, 'keydown', this.keydownHandler.bind(this)));
    }
    focusHandler(e) {
        let focusItem;
        if (match(e.target, '.k-treeview-item')) {
            focusItem = e.target;
        }
        else if (!isFocusable(e.target)) { // with compliments to IE
            focusItem = closestNode(e.target);
        }
        if (focusItem) {
            this.navigationService.activateIndex(nodeId(e.target));
            if (!this.isActive && hasObservers(this.onFocus)) {
                this.ngZone.run(() => {
                    this.onFocus.emit();
                });
            }
            this.isActive = true;
        }
    }
    blurHandler(e) {
        if (this.isActive && match(e.target, '.k-treeview-item') &&
            (!e.relatedTarget || !match(e.relatedTarget, '.k-treeview-item') || !hasParent(e.relatedTarget, this.element.nativeElement))) {
            this.navigationService.deactivate();
            this.isActive = false;
            if (hasObservers(this.onBlur)) {
                this.ngZone.run(() => {
                    this.onBlur.emit();
                });
            }
        }
    }
    clickHandler(e) {
        const target = e.target;
        if ((e.type === 'contextmenu' && !hasObservers(this.nodeClick)) ||
            (e.type === 'click' && !hasObservers(this.nodeClick) && !hasObservers(this.selectionChange) && !isLoadMoreButton(target)) ||
            (e.type === 'dblclick' && !hasObservers(this.nodeDblClick)) || isFocusable(target) ||
            (!isContent(target) && !isLoadMoreButton(target)) || !hasParent(target, this.element.nativeElement)) {
            return;
        }
        const index = nodeId(closestNode(target));
        // the disabled check is probably not needed due to the k-disabled styles
        if (!index || this.navigationService.isDisabled(index)) {
            return;
        }
        this.ngZone.run(() => {
            // record this value before emitting selectionChange (`this.navigationService.selectIndex`), as the treeview state may be changed on its emission
            const lookup = this.treeViewLookupService.itemLookup(index);
            if (e.type === 'click') {
                const loadMoreButton = this.navigationService.model.findNode(index).loadMoreButton;
                if (loadMoreButton) {
                    this.navigationService.notifyLoadMore(index);
                    return;
                }
                else {
                    this.navigationService.selectIndex(index);
                }
            }
            const emitter = e.type === 'dblclick' ? this.nodeDblClick : this.nodeClick;
            emitter.emit({
                item: lookup.item,
                originalEvent: e,
                type: e.type
            });
        });
    }
    keydownHandler(e) {
        if (this.isActive && this.navigable) {
            this.ngZone.run(() => {
                this.navigationService.move(e);
            });
        }
    }
    verifyLoadMoreService() {
        if (isDevMode() && !isPresent(this.loadMoreService)) {
            throw new Error(`To use the TreeView paging functionality, you need to assign the \`kendoTreeViewLoadMore\` directive. See ${LOAD_MORE_DOC_LINK}.`);
        }
    }
    registerLookupItems(data, parentItem = null) {
        if (!isPresent(data) || data.length === 0) {
            return;
        }
        const parentIndex = nodeIndex(parentItem);
        const treeItems = data.map((node, index) => buildTreeItem(node, index, parentIndex));
        if (isPresent(parentItem)) {
            this.treeViewLookupService.registerChildren(parentIndex, treeItems);
        }
        treeItems.forEach(item => {
            this.treeViewLookupService.registerItem(item, parentItem);
            if (this.hasChildren(item.dataItem)) {
                this.children(item.dataItem)
                    .subscribe(children => this.registerLookupItems(children, item));
            }
        });
    }
};
TreeViewComponent.ɵfac = function TreeViewComponent_Factory(t) { return new (t || TreeViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ExpandStateService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(NodeChildrenService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(TreeViewLookupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DataChangeNotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
TreeViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeViewComponent, selectors: [["kendo-treeview"]], contentQueries: function TreeViewComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NodeTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, LoadMoreButtonTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeTemplateQuery = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadMoreButtonTemplateQuery = _t.first);
    } }, viewQuery: function TreeViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.assetsContainer = _t.first);
    } }, hostVars: 5, hostBindings: function TreeViewComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("dir", ctx.direction);
        ɵngcc0.ɵɵsyntheticHostProperty("@.disabled", ctx.animate);
        ɵngcc0.ɵɵclassProp("k-treeview", ctx.classNames);
    } }, inputs: { filterInputPlaceholder: "filterInputPlaceholder", trackBy: "trackBy", isDisabled: "isDisabled", isVisible: "isVisible", navigable: "navigable", children: "children", loadOnDemand: "loadOnDemand", filterable: "filterable", filter: "filter", animate: "animate", nodeTemplateRef: ["nodeTemplate", "nodeTemplateRef"], loadMoreButtonTemplateRef: ["loadMoreButtonTemplate", "loadMoreButtonTemplateRef"], nodes: "nodes", hasChildren: "hasChildren", isChecked: "isChecked", isExpanded: "isExpanded", isSelected: "isSelected", size: "size", textField: "textField" }, outputs: { childrenLoaded: "childrenLoaded", onBlur: "blur", onFocus: "focus", expand: "expand", collapse: "collapse", nodeDragStart: "nodeDragStart", nodeDrag: "nodeDrag", filterStateChange: "filterStateChange", nodeDrop: "nodeDrop", nodeDragEnd: "nodeDragEnd", addItem: "addItem", removeItem: "removeItem", checkedChange: "checkedChange", selectionChange: "selectionChange", filterChange: "filterChange", nodeClick: "nodeClick", nodeDblClick: "nodeDblClick" }, exportAs: ["kendoTreeView"], features: [ɵngcc0.ɵɵProvidersFeature(providers), ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 20, consts: [["class", "k-treeview-filter", 4, "ngIf"], ["kendoTreeViewGroup", "", "role", "group", 1, "k-treeview-lines", 3, "size", "loadOnDemand", "checkboxes", "expandIcons", "selectable", "touchActions", "children", "hasChildren", "isChecked", "isDisabled", "isExpanded", "isSelected", "isVisible", "nodeTemplateRef", "loadMoreButtonTemplateRef", "textField", "nodes", "loadMoreService", "trackBy"], ["assetsContainer", ""], [1, "k-treeview-filter"], [3, "size", "value", "clearButton", "placeholder", "valueChange"], ["kendoTextBoxPrefixTemplate", ""], [1, "k-input-icon", "k-icon", "k-i-search"]], template: function TreeViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeViewComponent_span_0_Template, 3, 4, "span", 0);
        ɵngcc0.ɵɵelement(1, "ul", 1);
        ɵngcc0.ɵɵelementContainer(2, null, 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.filterable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("size", ctx.size)("loadOnDemand", ctx.loadOnDemand)("checkboxes", ctx.checkboxes)("expandIcons", ctx.expandIcons)("selectable", ctx.selectable)("touchActions", ctx.touchActions)("children", ctx.children)("hasChildren", ctx.hasChildren)("isChecked", ctx.isChecked)("isDisabled", ctx.isDisabled)("isExpanded", ctx.isExpanded)("isSelected", ctx.isSelected)("isVisible", ctx.isVisible)("nodeTemplateRef", ctx.nodeTemplateRef == null ? null : ctx.nodeTemplateRef.templateRef)("loadMoreButtonTemplateRef", ctx.loadMoreButtonTemplateRef == null ? null : ctx.loadMoreButtonTemplateRef.templateRef)("textField", ctx.textField)("nodes", ctx.fetchNodes)("loadMoreService", ctx.loadMoreService)("trackBy", ctx.trackBy);
    } }, directives: function () { return [ɵngcc2.NgIf, ɵngcc3.TextBoxComponent, ɵngcc3.TextBoxPrefixTemplateDirective, TreeViewGroupComponent]; }, encapsulation: 2 });
__decorate([
    HostBinding("class.k-treeview"),
    __metadata("design:type", Boolean)
], TreeViewComponent.prototype, "classNames", void 0);
__decorate([
    HostBinding("attr.role"),
    __metadata("design:type", String)
], TreeViewComponent.prototype, "role", void 0);
__decorate([
    HostBinding("attr.dir"),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], TreeViewComponent.prototype, "direction", null);
__decorate([
    ViewChild('assetsContainer', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], TreeViewComponent.prototype, "assetsContainer", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewComponent.prototype, "filterInputPlaceholder", void 0);
__decorate([
    Input(),
    HostBinding('@.disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TreeViewComponent.prototype, "animate", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "childrenLoaded", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "onBlur", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "onFocus", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "expand", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "collapse", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeDragStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeDrag", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "filterStateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeDrop", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeDragEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "addItem", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "removeItem", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "checkedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "selectionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "filterChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TreeViewComponent.prototype, "nodeDblClick", void 0);
__decorate([
    ContentChild(NodeTemplateDirective, { static: false }),
    __metadata("design:type", NodeTemplateDirective)
], TreeViewComponent.prototype, "nodeTemplateQuery", void 0);
__decorate([
    Input('nodeTemplate'),
    __metadata("design:type", NodeTemplateDirective),
    __metadata("design:paramtypes", [NodeTemplateDirective])
], TreeViewComponent.prototype, "nodeTemplateRef", null);
__decorate([
    ContentChild(LoadMoreButtonTemplateDirective, { static: false }),
    __metadata("design:type", LoadMoreButtonTemplateDirective)
], TreeViewComponent.prototype, "loadMoreButtonTemplateQuery", void 0);
__decorate([
    Input('loadMoreButtonTemplate'),
    __metadata("design:type", LoadMoreButtonTemplateDirective),
    __metadata("design:paramtypes", [LoadMoreButtonTemplateDirective])
], TreeViewComponent.prototype, "loadMoreButtonTemplateRef", null);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewComponent.prototype, "trackBy", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], TreeViewComponent.prototype, "nodes", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewComponent.prototype, "textField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], TreeViewComponent.prototype, "hasChildren", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], TreeViewComponent.prototype, "isChecked", null);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewComponent.prototype, "isDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], TreeViewComponent.prototype, "isExpanded", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], TreeViewComponent.prototype, "isSelected", null);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewComponent.prototype, "isVisible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewComponent.prototype, "navigable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewComponent.prototype, "children", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewComponent.prototype, "loadOnDemand", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewComponent.prototype, "filterable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewComponent.prototype, "filter", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TreeViewComponent.prototype, "size", null);
TreeViewComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef,
        ExpandStateService,
        NavigationService,
        NodeChildrenService,
        SelectionService,
        TreeViewLookupService,
        NgZone,
        Renderer2,
        DataChangeNotificationService,
        LocalizationService])
], TreeViewComponent);

/**
 * @hidden
 */
let TreeViewGroupComponent = class TreeViewGroupComponent {
    constructor(expandService, loadingService, indexBuilder, treeViewLookupService, navigationService, nodeChildrenService, dataChangeNotification, changeDetectorRef) {
        this.expandService = expandService;
        this.loadingService = loadingService;
        this.indexBuilder = indexBuilder;
        this.treeViewLookupService = treeViewLookupService;
        this.navigationService = navigationService;
        this.nodeChildrenService = nodeChildrenService;
        this.dataChangeNotification = dataChangeNotification;
        this.changeDetectorRef = changeDetectorRef;
        this.kGroupClass = true;
        this.role = 'group';
        this.loadOnDemand = true;
        this.textField = "";
        this.size = 'medium';
        this.initialNodesLoaded = false;
        this.loadingMoreNodes = false;
        this._data = [];
        this.singleRecordSubscriptions = new Subscription();
        this.isChecked = () => 'none';
        this.isDisabled = () => false;
        this.isExpanded = () => false;
        this.isVisible = () => true;
        this.isSelected = () => false;
        this.children = () => of([]);
        this.hasChildren = () => false;
    }
    get moreNodesAvailable() {
        if (!isPresent(this.loadMoreService) || this.data.length === 0) {
            return false;
        }
        return this.pageSize < this.totalNodesCount;
    }
    get pageSize() {
        if (!isPresent(this.loadMoreService)) {
            return null;
        }
        return this.loadMoreService.getGroupSize(this.parentDataItem);
    }
    set pageSize(pageSize) {
        this.loadMoreService.setGroupSize(this.parentDataItem, pageSize);
    }
    get data() {
        if (isPresent(this.pageSize)) {
            const normalizedSizeValue = this.pageSize > 0 ? this.pageSize : 0;
            return this._data.slice(0, normalizedSizeValue);
        }
        return this._data;
    }
    set data(data) {
        this._data = data;
        this.registerLoadedNodes(this.data);
    }
    get loadMoreButtonIndex() {
        if (!this.loadMoreService) {
            return null;
        }
        return this.nodeIndex(this.data.length);
    }
    /**
     * Represents the total number of nodes for the current level.
     */
    get totalNodesCount() {
        if (!this.loadMoreService) {
            return this.data.length;
        }
        return this.loadMoreService.getTotalNodesCount(this.parentDataItem, this._data.length);
    }
    get hasTemplate() {
        return isPresent(this.nodeTemplateRef);
    }
    expandNode(index, dataItem, expand) {
        if (expand) {
            this.expandService.expand(index, dataItem);
        }
        else {
            this.expandService.collapse(index, dataItem);
        }
    }
    checkNode(index) {
        this.navigationService.checkIndex(index);
        this.navigationService.activateIndex(index);
    }
    nodeIndex(index) {
        return this.indexBuilder.nodeIndex(index.toString(), this.parentIndex);
    }
    nodeText(dataItem) {
        const textField = isArray(this.textField) ? this.textField[0] : this.textField;
        return getter(textField)(dataItem);
    }
    ngOnDestroy() {
        if (isPresent(this.nodesSubscription)) {
            this.nodesSubscription.unsubscribe();
        }
        if (isPresent(this.loadMoreNodesSubscription)) {
            this.loadMoreNodesSubscription.unsubscribe();
        }
        this.singleRecordSubscriptions.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToNodesChange();
        this.singleRecordSubscriptions.add(this.dataChangeNotification
            .changes
            .subscribe(this.subscribeToNodesChange.bind(this)));
        this.singleRecordSubscriptions.add(this.navigationService.loadMore
            .pipe(filter(index => index === this.loadMoreButtonIndex))
            .subscribe(this.loadMoreNodes.bind(this)));
    }
    ngOnChanges(changes) {
        if (changes.parentIndex && this.loadOnDemand) {
            this.setNodeChildren(this.mapToTreeItem(this.data));
        }
    }
    fetchChildren(node, index) {
        return this.children(node)
            .pipe(catchError(() => {
            this.loadingService.notifyLoaded(index);
            return EMPTY;
        }), tap(() => this.loadingService.notifyLoaded(index)));
    }
    get nextFields() {
        if (isArray(this.textField)) {
            return this.textField.length > 1 ? this.textField.slice(1) : this.textField;
        }
        return [this.textField];
    }
    loadMoreNodes() {
        if (isPresent(this.loadMoreService.loadMoreNodes)) {
            this.fetchMoreNodes();
        }
        else {
            this.loadMoreLocalNodes();
        }
    }
    loadMoreLocalNodes() {
        const initialLoadMoreButtonIndex = this.loadMoreButtonIndex;
        this.pageSize += this.loadMoreService.getInitialPageSize(this.parentDataItem);
        this.registerLoadedNodes(this.data);
        // forces the new items to be registered before the focus is changed
        this.changeDetectorRef.detectChanges();
        this.reselectItemAt(initialLoadMoreButtonIndex);
    }
    fetchMoreNodes() {
        if (this.loadingMoreNodes) {
            return;
        }
        this.loadingMoreNodes = true;
        if (isPresent(this.loadMoreNodesSubscription)) {
            this.loadMoreNodesSubscription.unsubscribe();
        }
        this.loadMoreNodesSubscription = this.loadMoreService
            .loadMoreNodes({
            dataItem: this.parentDataItem,
            skip: this.data.length,
            take: this.loadMoreService.getInitialPageSize(this.parentDataItem)
        })
            .pipe(finalize(() => this.loadingMoreNodes = false))
            .subscribe(items => {
            if (!(Array.isArray(items) && items.length > 0)) {
                return;
            }
            const initialLoadMoreButtonIndex = this.loadMoreButtonIndex;
            this.pageSize += items.length;
            this.data = this.data.concat(items);
            if (this.navigationService.isActive(initialLoadMoreButtonIndex)) {
                // forces the new items to be registered before the focus is changed
                this.changeDetectorRef.detectChanges();
                this.reselectItemAt(initialLoadMoreButtonIndex);
            }
        });
    }
    setNodeChildren(children) {
        this.treeViewLookupService.registerChildren(this.parentIndex, children);
    }
    mapToTreeItem(data) {
        if (!this.parentIndex) {
            return [];
        }
        return data.map((dataItem, idx) => ({ dataItem, index: this.nodeIndex(idx) }));
    }
    emitChildrenLoaded(children) {
        if (!this.parentIndex) {
            return;
        }
        // ignores the registered load-more button
        const contentChildren = children.filter(item => item.dataItem);
        this.nodeChildrenService.childrenLoaded({ dataItem: this.parentDataItem, index: this.parentIndex }, contentChildren);
    }
    subscribeToNodesChange() {
        if (this.nodesSubscription) {
            this.nodesSubscription.unsubscribe();
        }
        this.nodesSubscription = this.nodes(this.parentDataItem, this.parentIndex)
            .subscribe(data => {
            this.data = data;
            this.initialNodesLoaded = true;
        });
    }
    reselectItemAt(index) {
        if (!isPresent(index)) {
            return;
        }
        // make sure the old index is cleared first
        this.navigationService.deactivate();
        this.navigationService.activateIndex(index);
    }
    registerLoadedNodes(nodes = []) {
        const mappedChildren = this.mapToTreeItem(nodes);
        if (this.loadOnDemand) {
            this.setNodeChildren(mappedChildren);
        }
        this.emitChildrenLoaded(mappedChildren);
    }
};
TreeViewGroupComponent.ɵfac = function TreeViewGroupComponent_Factory(t) { return new (t || TreeViewGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ExpandStateService), ɵngcc0.ɵɵdirectiveInject(LoadingNotificationService), ɵngcc0.ɵɵdirectiveInject(IndexBuilderService), ɵngcc0.ɵɵdirectiveInject(TreeViewLookupService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(NodeChildrenService), ɵngcc0.ɵɵdirectiveInject(DataChangeNotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TreeViewGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeViewGroupComponent, selectors: [["", "kendoTreeViewGroup", ""]], hostVars: 3, hostBindings: function TreeViewGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("k-treeview-group", ctx.kGroupClass);
    } }, inputs: { loadOnDemand: "loadOnDemand", textField: "textField", size: "size", isChecked: "isChecked", isDisabled: "isDisabled", isExpanded: "isExpanded", isVisible: "isVisible", isSelected: "isSelected", children: "children", hasChildren: "hasChildren", checkboxes: "checkboxes", expandIcons: "expandIcons", disabled: "disabled", selectable: "selectable", touchActions: "touchActions", trackBy: "trackBy", nodes: "nodes", parentDataItem: "parentDataItem", parentIndex: "parentIndex", nodeTemplateRef: "nodeTemplateRef", loadMoreButtonTemplateRef: "loadMoreButtonTemplateRef", loadMoreService: "loadMoreService" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c1, decls: 2, vars: 3, consts: [["class", "k-treeview-item", "kendoTreeViewItem", "", 3, "k-display-none", "dataItem", "index", "parentDataItem", "parentIndex", "loadOnDemand", "checkable", "isChecked", "isDisabled", "isVisible", "expandable", "isExpanded", "selectable", "isSelected", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "k-treeview-item", "kendoTreeViewItem", "", "role", "button", 3, "k-treeview-load-more-checkboxes-container", "selectable", "checkable", "expandable", "index", "parentDataItem", "parentIndex", 4, "ngIf"], ["kendoTreeViewItem", "", 1, "k-treeview-item", 3, "dataItem", "index", "parentDataItem", "parentIndex", "loadOnDemand", "checkable", "isChecked", "isDisabled", "isVisible", "expandable", "isExpanded", "selectable", "isSelected"], [1, "k-treeview-mid"], ["class", "k-treeview-toggle", 3, "kendoTreeViewLoading", "click", 4, "ngIf"], ["tabindex", "-1", 3, "size", "node", "index", "isChecked", "checkStateChange", 4, "ngIf"], ["kendoTreeViewItemContent", "", 1, "k-treeview-leaf", 3, "dataItem", "index", "initialSelection", "isSelected"], [1, "k-treeview-leaf-text"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["kendoTreeViewGroup", "", "role", "group", 3, "nodes", "loadOnDemand", "checkboxes", "expandIcons", "selectable", "touchActions", "children", "hasChildren", "isChecked", "isDisabled", "disabled", "isExpanded", "isSelected", "isVisible", "nodeTemplateRef", "loadMoreButtonTemplateRef", "parentIndex", "parentDataItem", "textField", "loadMoreService", "trackBy", 4, "ngIf"], [1, "k-treeview-toggle", 3, "kendoTreeViewLoading", "click"], [1, "k-icon"], ["tabindex", "-1", 3, "size", "node", "index", "isChecked", "checkStateChange"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["kendoTreeViewGroup", "", "role", "group", 3, "nodes", "loadOnDemand", "checkboxes", "expandIcons", "selectable", "touchActions", "children", "hasChildren", "isChecked", "isDisabled", "disabled", "isExpanded", "isSelected", "isVisible", "nodeTemplateRef", "loadMoreButtonTemplateRef", "parentIndex", "parentDataItem", "textField", "loadMoreService", "trackBy"], ["kendoTreeViewItem", "", "role", "button", 1, "k-treeview-item", 3, "selectable", "checkable", "expandable", "index", "parentDataItem", "parentIndex"], ["class", "k-icon k-i-loading k-i-expand", 4, "ngIf"], ["kendoTreeViewItemContent", "", 1, "k-treeview-leaf", "k-treeview-load-more-button", 3, "index"], [4, "ngIf"], [1, "k-icon", "k-i-loading", "k-i-expand"]], template: function TreeViewGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeViewGroupComponent_li_0_Template, 10, 29, "li", 0);
        ɵngcc0.ɵɵtemplate(1, TreeViewGroupComponent_li_1_Template, 7, 14, "li", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data)("ngForTrackBy", ctx.trackBy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.initialNodesLoaded && ctx.moreNodesAvailable);
    } }, directives: function () { return [ɵngcc2.NgForOf, TreeViewItemDirective, ɵngcc2.NgIf, LoadingIndicatorDirective, CheckBoxComponent, TreeViewItemContentDirective, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgSwitchDefault, TreeViewGroupComponent]; }, encapsulation: 2, data: { animation: [
            trigger('toggle', [
                transition('void => *', [
                    style({ height: 0 }),
                    animate('0.1s ease-in', style({ height: "*" }))
                ]),
                transition('* => void', [
                    style({ height: "*" }),
                    animate('0.1s ease-in', style({ height: 0 }))
                ])
            ])
        ] } });
__decorate([
    HostBinding("class.k-treeview-group"),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "kGroupClass", void 0);
__decorate([
    HostBinding("attr.role"),
    __metadata("design:type", String)
], TreeViewGroupComponent.prototype, "role", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "checkboxes", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "expandIcons", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "selectable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "touchActions", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewGroupComponent.prototype, "loadOnDemand", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "trackBy", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "nodes", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewGroupComponent.prototype, "textField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewGroupComponent.prototype, "parentDataItem", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewGroupComponent.prototype, "parentIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TreeViewGroupComponent.prototype, "nodeTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TreeViewGroupComponent.prototype, "loadMoreButtonTemplateRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewGroupComponent.prototype, "loadMoreService", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewGroupComponent.prototype, "size", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "isChecked", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "isDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "isExpanded", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "isVisible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "isSelected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "children", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewGroupComponent.prototype, "hasChildren", void 0);
TreeViewGroupComponent = __decorate([ __metadata("design:paramtypes", [ExpandStateService,
        LoadingNotificationService,
        IndexBuilderService,
        TreeViewLookupService,
        NavigationService,
        NodeChildrenService,
        DataChangeNotificationService,
        ChangeDetectorRef])
], TreeViewGroupComponent);

const indexChecked = (keys, index) => keys.filter(k => k === index).length > 0;
const matchKey = index => k => {
    if (index === k) {
        return true;
    }
    if (!k.split) {
        return false;
    }
    return k.split('_').reduce(({ key, result }, part) => {
        key += part;
        if (index === key || result) {
            return { result: true };
        }
        key += "_";
        return { key, result: false };
    }, { key: "", result: false }).result;
};
/**
 * A directive which manages the in-memory checked state of the TreeView node
 * ([see example]({% slug checkboxes_treeview %})).
 */
let CheckDirective = class CheckDirective {
    constructor(treeView, zone) {
        this.treeView = treeView;
        this.zone = zone;
        /**
         * Fires when the `checkedKeys` collection was updated.
         */
        this.checkedKeysChange = new EventEmitter();
        this.subscriptions = new Subscription();
        this.checkActions = {
            'multiple': (e) => this.checkMultiple(e),
            'single': (e) => this.checkSingle(e)
        };
        /**
         * Reflectes the internal `checkedKeys` state.
         */
        this.state = new Set();
        this.subscriptions.add(this.treeView.checkedChange
            .subscribe((e) => this.check(e)));
        let expandedItems = [];
        this.subscriptions.add(this.treeView.childrenLoaded
            .pipe(filter(() => this.options.checkChildren && this.treeView.loadOnDemand), tap(item => expandedItems.push(item)), switchMap(() => this.zone.onStable.pipe(take(1))))
            .subscribe(() => this.addCheckedItemsChildren(expandedItems)));
        this.treeView.isChecked = this.isItemChecked.bind(this);
    }
    /**
     * @hidden
     */
    set isChecked(value) {
        this.treeView.isChecked = value;
    }
    get options() {
        const defaultOptions = {
            checkChildren: true,
            checkParents: true,
            enabled: true,
            mode: "multiple"
        };
        if (!isPresent(this.checkable) || typeof this.checkable === 'string') {
            return defaultOptions;
        }
        const checkSettings = isBoolean(this.checkable)
            ? { enabled: this.checkable }
            : this.checkable;
        return Object.assign(defaultOptions, checkSettings);
    }
    ngOnChanges(changes) {
        if (changes.checkable) {
            this.treeView.checkboxes = this.options.enabled;
            this.toggleCheckOnClick();
        }
        if (isChanged('checkedKeys', changes, false) && changes.checkedKeys.currentValue !== this.lastChange) {
            this.state = new Set(changes.checkedKeys.currentValue);
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.unsubscribeClick();
    }
    isItemChecked(dataItem, index) {
        if (!this.checkKey) {
            return this.isIndexChecked(index);
        }
        const hasKey = this.state.has(this.itemKey({ dataItem, index }));
        return hasKey ? 'checked' : 'none';
    }
    isIndexChecked(index) {
        const checkedKeys = Array.from(this.state).filter(matchKey(index));
        if (indexChecked(checkedKeys, index)) {
            return 'checked';
        }
        const { mode, checkParents } = this.options;
        if (mode === 'multiple' && checkParents && checkedKeys.length) {
            return 'indeterminate';
        }
        return 'none';
    }
    itemKey(item) {
        if (!isPresent(this.checkKey)) {
            return item.index;
        }
        if (typeof this.checkKey === "string" && isPresent(item.dataItem)) {
            return item.dataItem[this.checkKey];
        }
        if (typeof this.checkKey === "function") {
            return this.checkKey(item);
        }
    }
    check(e) {
        const { enabled, mode } = this.options;
        const performSelection = this.checkActions[mode] || noop;
        if (!enabled) {
            return;
        }
        performSelection(e);
    }
    checkSingle(node) {
        const key = this.itemKey(node.item);
        const hasKey = this.state.has(key);
        this.state.clear();
        if (!hasKey) {
            this.state.add(key);
        }
        this.notify();
    }
    checkMultiple(node) {
        this.checkNode(node);
        if (this.options.checkParents) {
            this.checkParents(node.parent);
        }
        this.notify();
    }
    toggleCheckOnClick() {
        this.unsubscribeClick();
        if (this.options.checkOnClick) {
            this.clickSubscription = this.treeView.nodeClick.subscribe(args => {
                if (args.type === 'click') {
                    const lookup = this.treeView.itemLookup(args.item.index);
                    this.check(lookup);
                }
            });
        }
    }
    unsubscribeClick() {
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
            this.clickSubscription = null;
        }
    }
    checkNode(node) {
        if (!isPresent(node.item.dataItem) || this.treeView.isDisabled(node.item.dataItem, node.item.index)) {
            return;
        }
        const currentKey = this.itemKey(node.item);
        if (!isPresent(currentKey)) {
            return;
        }
        const pendingCheck = [currentKey];
        if (this.options.checkChildren) {
            const descendants = fetchLoadedDescendants(node, ({ item }) => this.treeView.isVisible(item.dataItem, item.index) &&
                !this.treeView.isDisabled(item.dataItem, item.index))
                .map(({ item }) => this.itemKey(item));
            pendingCheck.push(...descendants);
        }
        const shouldCheck = !this.state.has(currentKey);
        pendingCheck.forEach(key => {
            if (shouldCheck) {
                this.state.add(key);
            }
            else {
                this.state.delete(key);
            }
        });
    }
    checkParents(parent) {
        if (!isPresent(parent)) {
            return;
        }
        let currentParent = parent;
        while (currentParent) {
            const parentKey = this.itemKey(currentParent.item);
            const allChildrenSelected = currentParent.children.every(item => this.state.has(this.itemKey(item)));
            if (allChildrenSelected) {
                this.state.add(parentKey);
            }
            else {
                this.state.delete(parentKey);
            }
            currentParent = currentParent.parent;
        }
    }
    notify() {
        this.lastChange = Array.from(this.state);
        this.checkedKeysChange.emit(this.lastChange);
    }
    addCheckedItemsChildren(lookups) {
        if (!isPresent(lookups) || lookups.length === 0) {
            return;
        }
        const initiallyCheckedItemsCount = this.state.size;
        lookups.forEach(lookup => {
            const itemKey = this.itemKey(lookup.item);
            if (!this.state.has(itemKey)) {
                return;
            }
            lookup.children.forEach(item => {
                // ensure both the parent item and each child node is enabled
                if (!this.treeView.isDisabled(lookup.item.dataItem, lookup.item.index) &&
                    !this.treeView.isDisabled(item.dataItem, item.index)) {
                    this.state.add(this.itemKey(item));
                }
            });
        });
        const hasNewlyCheckedItems = initiallyCheckedItemsCount !== this.state.size;
        if (hasNewlyCheckedItems) {
            this.zone.run(() => this.notify());
        }
    }
};
CheckDirective.ɵfac = function CheckDirective_Factory(t) { return new (t || CheckDirective)(ɵngcc0.ɵɵdirectiveInject(TreeViewComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
CheckDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CheckDirective, selectors: [["", "kendoTreeViewCheckable", ""]], inputs: { isChecked: "isChecked", checkKey: ["checkBy", "checkKey"], checkedKeys: "checkedKeys", checkable: ["kendoTreeViewCheckable", "checkable"] }, outputs: { checkedKeysChange: "checkedKeysChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], CheckDirective.prototype, "isChecked", null);
__decorate([
    Input("checkBy"),
    __metadata("design:type", Object)
], CheckDirective.prototype, "checkKey", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CheckDirective.prototype, "checkedKeys", void 0);
__decorate([
    Input('kendoTreeViewCheckable'),
    __metadata("design:type", Object)
], CheckDirective.prototype, "checkable", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CheckDirective.prototype, "checkedKeysChange", void 0);
CheckDirective = __decorate([ __metadata("design:paramtypes", [TreeViewComponent,
        NgZone])
], CheckDirective);

/**
 * A directive which manages the disabled in-memory state of the TreeView node
 * ([see example]({% slug disabledstate_treeview %})).
 */
let DisableDirective = class DisableDirective {
    constructor(treeView, cdr) {
        this.treeView = treeView;
        this.cdr = cdr;
        /**
         * Defines the collection that will store the disabled keys.
         */
        this.disabledKeys = [];
        this.treeView.isDisabled = (dataItem, index) => (this.disabledKeys.indexOf(this.itemKey({ dataItem, index })) > -1);
    }
    /**
     * @hidden
     */
    set isDisabled(value) {
        this.treeView.isDisabled = value;
    }
    ngOnChanges(changes = {}) {
        const { disabledKeys } = changes;
        if (disabledKeys && !disabledKeys.firstChange) {
            this.cdr.markForCheck();
        }
    }
    itemKey(e) {
        if (!this.disableKey) {
            return e.index;
        }
        if (typeof this.disableKey === "string") {
            return e.dataItem[this.disableKey];
        }
        if (typeof this.disableKey === "function") {
            return this.disableKey(e);
        }
    }
};
DisableDirective.ɵfac = function DisableDirective_Factory(t) { return new (t || DisableDirective)(ɵngcc0.ɵɵdirectiveInject(TreeViewComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DisableDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DisableDirective, selectors: [["", "kendoTreeViewDisable", ""]], inputs: { disabledKeys: "disabledKeys", isDisabled: "isDisabled", disableKey: ["kendoTreeViewDisable", "disableKey"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DisableDirective.prototype, "isDisabled", null);
__decorate([
    Input("kendoTreeViewDisable"),
    __metadata("design:type", Object)
], DisableDirective.prototype, "disableKey", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DisableDirective.prototype, "disabledKeys", void 0);
DisableDirective = __decorate([ __metadata("design:paramtypes", [TreeViewComponent,
        ChangeDetectorRef])
], DisableDirective);

const DEFAULT_FILTER_EXPAND_SETTINGS = {
    maxAutoExpandResults: -1,
    expandMatches: false,
    expandedOnClear: "none"
};
/**
 * A directive which manages the expanded state of the TreeView.
 * ([see example]({% slug expandedstate_treeview %})).
 */
let ExpandDirective = class ExpandDirective {
    constructor(component) {
        this.component = component;
        /**
         * Whether or not to auto-expand the nodes leading from the root node to each filter result.
         * To fine-tune this behavior, pass a [`FilterExpandSettings`]({% slug api_treeview_filterexpandsettings %}) object to this input.
         * @default false
         */
        this.expandOnFilter = false;
        /**
         * Fires when the `expandedKeys` collection was updated.
         */
        this.expandedKeysChange = new EventEmitter();
        this.subscriptions = new Subscription();
        /**
         * Reflectes the internal `expandedKeys` state.
         */
        this.state = new Set();
        this.originalExpandedKeys = new Set();
        this.isFiltered = false;
        /**
         * Fills array with the correct expand keys according to wrapper metadata.
         */
        this.updateExpandedNodes = (collection, node, autoExpandMatches) => {
            if (node.containsMatches || node.isMatch && autoExpandMatches && isArrayWithAtLeastOneItem(node.children)) {
                collection.push(this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(child => {
                    this.updateExpandedNodes(collection, child, autoExpandMatches);
                });
            }
        };
        /**
         * Fills array with the expand key of every node.
         */
        this.getEveryExpandKey = (collection, node) => {
            if (isArrayWithAtLeastOneItem(node.children)) {
                collection.push(this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(child => {
                    this.getEveryExpandKey(collection, child);
                });
            }
        };
        this.subscriptions.add(merge(this.component.expand.pipe(map(e => (Object.assign({ expand: true }, e)))), this.component.collapse.pipe(map(e => (Object.assign({ expand: false }, e))))).subscribe(this.toggleExpand.bind(this)));
        if (this.component.filterStateChange) {
            this.subscriptions.add(this.component.filterStateChange.subscribe(this.handleAutoExpand.bind(this)));
        }
        this.component.isExpanded = (dataItem, index) => this.state.has(this.itemKey({ dataItem, index }));
    }
    /**
     * @hidden
     */
    set isExpanded(value) {
        this.component.isExpanded = value;
    }
    get filterExpandSettings() {
        const settings = isBoolean(this.expandOnFilter) ? { enabled: this.expandOnFilter } : Object.assign({}, this.expandOnFilter, { enabled: true });
        return Object.assign({}, DEFAULT_FILTER_EXPAND_SETTINGS, settings);
    }
    ngOnChanges(changes) {
        if (isChanged('expandedKeys', changes, false) && changes.expandedKeys.currentValue !== this.lastChange) {
            this.state = new Set(changes.expandedKeys.currentValue);
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    itemKey(e) {
        if (this.expandKey) {
            if (typeof this.expandKey === "string") {
                return e.dataItem[this.expandKey];
            }
            if (typeof this.expandKey === "function") {
                return this.expandKey(e);
            }
        }
        return e.index;
    }
    toggleExpand({ index, dataItem, expand }) {
        const key = this.itemKey({ index, dataItem });
        const isExpanded = this.state.has(key);
        let notify = false;
        if (isExpanded && !expand) {
            this.state.delete(key);
            notify = true;
        }
        else if (!isExpanded && expand) {
            this.state.add(key);
            notify = true;
        }
        if (notify) {
            this.notify();
        }
    }
    handleAutoExpand({ nodes, matchCount, term }) {
        if (!this.filterExpandSettings.enabled) {
            return;
        }
        const { maxAutoExpandResults, expandMatches: autoExpandMatches, expandedOnClear } = this.filterExpandSettings;
        if (!this.isFiltered) {
            this.originalExpandedKeys = new Set(this.state);
        }
        const exitingFilteredState = this.isFiltered && !term;
        const maxExceeded = maxAutoExpandResults !== -1 && matchCount > maxAutoExpandResults;
        const exitAutoExpandedState = exitingFilteredState || maxExceeded;
        if (exitAutoExpandedState) {
            switch (expandedOnClear) {
                case "initial": {
                    if (!sameValues(this.state, this.originalExpandedKeys)) {
                        this.state = this.originalExpandedKeys;
                        this.notify();
                    }
                    break;
                }
                case "all": {
                    this.state = new Set(nodes.reduce((acc, rootNode) => {
                        this.getEveryExpandKey(acc, rootNode);
                        return acc;
                    }, []));
                    this.notify();
                    break;
                }
                case "unchanged": {
                    break;
                }
                case "none":
                default: {
                    if (this.state.size !== 0) {
                        this.state.clear();
                        this.notify();
                    }
                    break;
                }
            }
            this.isFiltered = false;
            return;
        }
        const indicesToExpand = new Set(nodes.reduce((acc, rootNode) => {
            this.updateExpandedNodes(acc, rootNode, autoExpandMatches);
            return acc;
        }, []));
        if (!sameValues(this.state, indicesToExpand)) {
            this.state = indicesToExpand;
            this.notify();
        }
        this.isFiltered = true;
    }
    notify() {
        this.lastChange = Array.from(this.state);
        this.expandedKeysChange.emit(this.lastChange);
    }
};
ExpandDirective.ɵfac = function ExpandDirective_Factory(t) { return new (t || ExpandDirective)(ɵngcc0.ɵɵdirectiveInject(ExpandableComponent)); };
ExpandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ExpandDirective, selectors: [["", "kendoTreeViewExpandable", ""]], inputs: { expandOnFilter: "expandOnFilter", isExpanded: "isExpanded", expandKey: ["expandBy", "expandKey"], expandedKeys: "expandedKeys" }, outputs: { expandedKeysChange: "expandedKeysChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], ExpandDirective.prototype, "isExpanded", null);
__decorate([
    Input("expandBy"),
    __metadata("design:type", Object)
], ExpandDirective.prototype, "expandKey", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ExpandDirective.prototype, "expandOnFilter", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ExpandDirective.prototype, "expandedKeysChange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ExpandDirective.prototype, "expandedKeys", void 0);
ExpandDirective = __decorate([ __metadata("design:paramtypes", [ExpandableComponent])
], ExpandDirective);

/**
 * A directive which manages the in-memory selection state of the TreeView node
 * ([see example]({% slug selection_treeview %})).
 */
let SelectDirective = class SelectDirective {
    constructor(treeView) {
        this.treeView = treeView;
        /**
         * Fires when the `selectedKeys` collection was updated.
         */
        this.selectedKeysChange = new EventEmitter();
        this.subscriptions = new Subscription();
        this.selectActions = {
            'multiple': (e) => this.selectMultiple(e),
            'single': (e) => this.selectSingle(e)
        };
        /**
         * Reflectes the internal `selectedKeys` state.
         */
        this.state = new Set();
        this.subscriptions.add(this.treeView.selectionChange.subscribe(this.select.bind(this)));
        this.treeView.isSelected = (dataItem, index) => (this.state.has(this.itemKey({ dataItem, index })));
    }
    /**
     * @hidden
     */
    set isSelected(value) {
        this.treeView.isSelected = value;
    }
    get getAriaMultiselectable() {
        return this.options.mode === 'multiple';
    }
    get options() {
        const defaultOptions = {
            enabled: true,
            mode: 'single'
        };
        if (!isPresent(this.selection) || typeof this.selection === 'string') {
            return defaultOptions;
        }
        const selectionSettings = isBoolean(this.selection) ? { enabled: this.selection } : this.selection;
        return Object.assign(defaultOptions, selectionSettings);
    }
    ngOnChanges(changes) {
        if (isChanged('selectedKeys', changes, false) && changes.selectedKeys.currentValue !== this.lastChange) {
            this.state = new Set(changes.selectedKeys.currentValue);
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    itemKey(e) {
        if (!this.selectKey) {
            return e.index;
        }
        if (typeof this.selectKey === 'string') {
            return e.dataItem[this.selectKey];
        }
        if (typeof this.selectKey === 'function') {
            return this.selectKey(e);
        }
    }
    select(e) {
        const { enabled, mode } = this.options;
        const performSelection = this.selectActions[mode] || noop;
        if (!enabled) {
            return;
        }
        performSelection(e);
    }
    selectSingle(node) {
        const key = this.itemKey(node);
        if (!this.state.has(key)) {
            this.state.clear();
            this.state.add(key);
            this.notify();
        }
    }
    selectMultiple(node) {
        const key = this.itemKey(node);
        const isSelected = this.state.has(key);
        if (!isPresent(key)) {
            return;
        }
        if (isSelected) {
            this.state.delete(key);
        }
        else {
            this.state.add(key);
        }
        this.notify();
    }
    notify() {
        this.lastChange = Array.from(this.state);
        this.selectedKeysChange.emit(this.lastChange);
    }
};
SelectDirective.ɵfac = function SelectDirective_Factory(t) { return new (t || SelectDirective)(ɵngcc0.ɵɵdirectiveInject(TreeViewComponent)); };
SelectDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SelectDirective, selectors: [["", "kendoTreeViewSelectable", ""]], hostVars: 1, hostBindings: function SelectDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-multiselectable", ctx.getAriaMultiselectable);
    } }, inputs: { isSelected: "isSelected", selectKey: ["selectBy", "selectKey"], selection: ["kendoTreeViewSelectable", "selection"], selectedKeys: "selectedKeys" }, outputs: { selectedKeysChange: "selectedKeysChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], SelectDirective.prototype, "isSelected", null);
__decorate([
    Input('selectBy'),
    __metadata("design:type", Object)
], SelectDirective.prototype, "selectKey", void 0);
__decorate([
    Input('kendoTreeViewSelectable'),
    __metadata("design:type", Object)
], SelectDirective.prototype, "selection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SelectDirective.prototype, "selectedKeys", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SelectDirective.prototype, "selectedKeysChange", void 0);
__decorate([
    HostBinding('attr.aria-multiselectable'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], SelectDirective.prototype, "getAriaMultiselectable", null);
SelectDirective = __decorate([ __metadata("design:paramtypes", [TreeViewComponent])
], SelectDirective);

/**
 * Describes the attempted drop action during dragging.
 * Passed as `action` value to the [`kendoTreeViewDragClueTemplate`]({% slug api_treeview_dragcluetemplatedirective %}) directive.
 * By default, this value defines the rendered icon in the drag clue.
 */
var DropAction;
(function (DropAction) {
    DropAction[DropAction["Add"] = 0] = "Add";
    DropAction[DropAction["InsertTop"] = 1] = "InsertTop";
    DropAction[DropAction["InsertBottom"] = 2] = "InsertBottom";
    DropAction[DropAction["InsertMiddle"] = 3] = "InsertMiddle";
    DropAction[DropAction["Invalid"] = 4] = "Invalid";
})(DropAction || (DropAction = {}));

/**
 * Describes where the dragged item is dropped relative to the drop target item.
 */
var DropPosition;
(function (DropPosition) {
    DropPosition[DropPosition["Over"] = 0] = "Over";
    DropPosition[DropPosition["Before"] = 1] = "Before";
    DropPosition[DropPosition["After"] = 2] = "After";
})(DropPosition || (DropPosition = {}));

/**
 * @hidden
 */
var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["Up"] = -1] = "Up";
    ScrollDirection[ScrollDirection["Down"] = 1] = "Down";
})(ScrollDirection || (ScrollDirection = {}));

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * Arguments for the TreeView [`nodeDrop`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrop) event.
 */
class TreeItemDropEvent extends PreventableEvent {
    /**
     * @hidden
     */
    constructor(initializer, originalEvent) {
        super();
        /**
         * @hidden
         */
        this.isValid = true;
        Object.assign(this, initializer);
        this.originalEvent = originalEvent;
    }
    /**
     * Specifies if the drop action should be marked as valid.
     * If set to `false`, the [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and
     * [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events will not be fired and the drag clue
     * will be animated back to the source item to indicate the action is marked as invalid.
     */
    setValid(isValid) {
        this.isValid = isValid;
    }
}

/**
 * Arguments for the TreeView [`nodeDragStart`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragstart) event.
 */
class TreeItemDragStartEvent extends PreventableEvent {
    /**
     * @hidden
     */
    constructor(initializer) {
        super();
        Object.assign(this, initializer);
    }
}

/**
 * Arguments for the TreeView [`nodeDrag`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrag) and
 * [`nodeDragEnd`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragend) events.
 */
class TreeItemDragEvent {
}

const ɵ0$3 = () => {
    if (!(isDocumentAvailable() && isPresent(document.body))) {
        return false;
    }
    const top = 10;
    const parent = document.createElement("div");
    parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
    parent.innerHTML = `<div style="position: fixed; top: ${top}px;">child</div>`;
    document.body.appendChild(parent);
    const isDifferent = parent.children[0].getBoundingClientRect().top !== top;
    document.body.removeChild(parent);
    return isDifferent;
};
/**
 * Checks if the browser supports relative stacking context.
 * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
 */
const hasRelativeStackingContext = memoize(ɵ0$3);
/**
 * Stores the result of the passed function's first invokation and returns it instead of invoking it again afterwards.
 */
function memoize(fn) {
    let result;
    let called = false;
    return (...args) => {
        if (called) {
            return result;
        }
        result = fn(...args);
        called = true;
        return result;
    };
}
/**
 * @hidden
 *
 * Gets the offset of the parent element if the latter has the `transform` CSS prop applied.
 * Transformed parents create new stacking context and the `fixed` children must be position based on the transformed parent.
 * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
 *
 * If no parent container is `transform`-ed the function will return `{ left: 0, top: 0 }`;
 */
const getContainerOffset = (element) => {
    if (!(element && hasRelativeStackingContext())) {
        return { left: 0, top: 0 };
    }
    let offsetParent = element.parentElement;
    while (offsetParent) {
        if (window.getComputedStyle(offsetParent).transform !== 'none') {
            break;
        }
        offsetParent = offsetParent.parentElement;
    }
    if (offsetParent) {
        const rect = offsetParent.getBoundingClientRect();
        return {
            left: rect.left - offsetParent.scrollLeft,
            top: rect.top - offsetParent.scrollTop
        };
    }
    return { left: 0, top: 0 };
};
/**
 * @hidden
 */
const getDropAction = (dropPosition, dropTarget) => {
    if (!(isPresent(dropPosition) && isPresent(dropTarget))) {
        return DropAction.Invalid;
    }
    switch (dropPosition) {
        case DropPosition.Over:
            return DropAction.Add;
        case DropPosition.Before:
            return isPresent(closestNode(dropTarget).previousElementSibling) ? DropAction.InsertMiddle : DropAction.InsertTop;
        case DropPosition.After:
            return isPresent(closestNode(dropTarget).nextElementSibling) ? DropAction.InsertMiddle : DropAction.InsertBottom;
        default:
            return DropAction.Invalid;
    }
};
/**
 * @hidden
 */
const getDropPosition = (draggedItem, target, clientY, targetTreeView, containerOffset) => {
    if (!(isPresent(draggedItem) && isPresent(target) && isPresent(targetTreeView) && isPresent(containerOffset))) {
        return;
    }
    // the .k-treeview-mid element starts just after the checkbox/expand arrow and stretches till the end of the treeview on the right
    const item = closestWithMatch(target, '.k-treeview-mid');
    if (!isPresent(item)) {
        return;
    }
    // the content element (.k-treeview-leaf:not(.k-treeview-load-more-button)) holds just the treeview item text
    const content = getContentElement(item);
    const targetChildOfDraggedItem = hasParent(item, closestNode(draggedItem));
    if (!isPresent(content) || (content === draggedItem) || targetChildOfDraggedItem) {
        return;
    }
    const itemViewPortCoords = content.getBoundingClientRect();
    /*
        if the user is hovering a treeview item, split the item height into four parts:
            - dropping into the top quarter should insert the dragged item before the drop target
            - dropping into the bottom quarter should insert the dragged item after the drop target
            - dropping into the second or third quarter should add the item as child node of the drop target

        if the user is NOT hovering a treeview item (he's dragging somewhere on the right), split the item height to just two parts:
            - dropping should insert before or after
    */
    const itemDivisionHeight = itemViewPortCoords.height / (isContent(target) ? 4 : 2);
    // clear any possible container offset created by parent elements with `transform` css property set
    const pointerPosition = clientY - containerOffset.top;
    const itemTop = itemViewPortCoords.top - containerOffset.top;
    if (pointerPosition < itemTop + itemDivisionHeight) {
        return DropPosition.Before;
    }
    if (pointerPosition >= itemTop + itemViewPortCoords.height - itemDivisionHeight) {
        return DropPosition.After;
    }
    return DropPosition.Over;
};
/**
 * @hidden
 */
const treeItemFromEventTarget = (treeView, dropTarget) => {
    if (!(isPresent(treeView) && isPresent(dropTarget))) {
        return null;
    }
    const node = closestNode(dropTarget);
    const index = nodeId(node);
    const lookup = treeView.itemLookup(index);
    if (!(isPresent(lookup) && isPresent(lookup.item.dataItem))) {
        return null;
    }
    return lookup;
};
/**
 * @hidden
 *
 * Emits `collapse` on the specified TreeView node if the latter is left empty after its last child node was dragged out.
 */
const collapseEmptyParent = (parent, parentNodes, treeview) => {
    if (isPresent(parent) && parentNodes.length === 0 && treeview.isExpanded(parent.item.dataItem, parent.item.index)) {
        treeview.collapseNode(parent.item.dataItem, parent.item.index);
    }
};
/**
 * @hidden
 *
 * Expands the node if it's dropped into and it's not yet expanded.
 */
const expandDropTarget = (dropTarget, treeView) => {
    if (!treeView.isExpanded(dropTarget.item.dataItem, dropTarget.item.index)) {
        treeView.expandNode(dropTarget.item.dataItem, dropTarget.item.index);
    }
};
/**
 * @hidden
 *
 * Extracts the event target from the viewport coords. Required for touch devices
 * where the `event.target` of a `pointermove` event is always the initially dragged item.
 */
const getDropTarget = (event) => {
    if (!(isDocumentAvailable() && isPresent(document.elementFromPoint))) {
        return event.target;
    }
    return document.elementFromPoint(event.clientX, event.clientY);
};
/**
 * @hidden
 *
 * Checks if the original index is before the new one and corrects the new one by decrementing the index for the level, where the original item stood.
 */
const updateMovedItemIndex = (newIndex, originalIndex) => {
    const movedItemNewIndexParts = newIndex.split('_');
    const originalItemIndexParts = originalIndex.split('_');
    // if the original item was moved from a deeper level, there's no need for index correction
    // e.g. 4_0_1 is moved to 5_0 => removing 4_0_1 will not cause 5_0 to be moved
    if (movedItemNewIndexParts.length < originalItemIndexParts.length) {
        return newIndex;
    }
    // check if the parent item paths are the same - index correction is not required when the original item path differs from the path of the moved item - they belong to different hierarchies
    // e.g. 4_1 is moved to 5_1 - the parent item paths are differen (4 compared to 5) => removing 4_1 will not cause 5_1 to be moved
    // e.g 4_1 is moved to 4_3 - the parent paths are the same (both 4) => removing 4_1 will cause 4_3 to be moved
    const originalItemParentPathLength = originalItemIndexParts.length - 1;
    const originalItemParentPath = originalItemIndexParts.slice(0, originalItemParentPathLength).join('_');
    const movedItemParentPath = movedItemNewIndexParts.slice(0, originalItemParentPathLength).join('_');
    // check if the the index of the level where the original item is taken from is greater than the one of the moved item
    // e.g. 4_5 is moved to 4_1 (comapre 5 and 1) => removing 4_5 will not cause 4_1 to be moved
    // e.g. 4_1 is moved to 4_5 (comapre 1 and 5) => removing 4_1 will cause 4_5 to be moved
    const originalItemIndexLevel = originalItemIndexParts.length - 1;
    const originalItemLevelIndex = Number(originalItemIndexParts[originalItemIndexLevel]);
    const movedItemLevelIndex = Number(movedItemNewIndexParts[originalItemIndexLevel]);
    if ((originalItemParentPath === movedItemParentPath) && (movedItemLevelIndex > originalItemLevelIndex)) {
        // if the removed item causes the dropped item to be moved a position up - decrement the index at that level
        movedItemNewIndexParts[originalItemIndexLevel] = String(movedItemLevelIndex - 1);
        return movedItemNewIndexParts.join('_');
    }
    return newIndex;
};
/**
 * @hidden
 */
const SCROLLBAR_REG_EXP = new RegExp('(auto|scroll)');
/**
 * @hidden
 *
 * Retrives the first scrollable element starting the search from the provided one, traversing to the top of the DOM tree.
 */
const getScrollableContainer = (node) => {
    while (isPresent(node) && node.nodeName !== 'HTML') {
        const hasOverflow = node.scrollHeight > node.clientHeight;
        const hasScrollbar = SCROLLBAR_REG_EXP.test(getComputedStyle(node).overflowY);
        if (hasOverflow && hasScrollbar) {
            return node;
        }
        node = node.parentNode;
    }
    return node;
};
/**
 * @hidden
 *
 * Checks if the top of the scrollable element is reached.
 * Floors the scrollTop value.
 */
const isTopReached = (element) => Math.floor(element.scrollTop) <= 0;
/**
 * @hidden
 *
 * Checks if the bottom of the scrollable element is reached.
 * Ceils the scrollTop value.
 */
const isBottomReached = (element) => Math.ceil(element.scrollTop) >= element.scrollHeight - element.clientHeight;
/**
 * @hidden
 *
 * Scrolls the element in the given direction by the provided step.
 *
 * If the targeted scroll incrementation doesn't yield any result due to device pixel ratio issues (https://github.com/dimitar-pechev/RenderingIndependentScrollOffsets#readme),
 * increments the step with 1px and again attempts to change the scrollTop of the element, until the content is actually scrolled.
 *
 * Cuts the operation short after 20 unsuccessful attempts to prevent infinite loops in possible corner-case scenarios.
 */
const scrollElementBy = (element, step, direction) => {
    if (!(isPresent(element) && isDocumentAvailable())) {
        return;
    }
    const initialScrollTop = element.scrollTop;
    let currentStep = step;
    let iterations = 0;
    while (initialScrollTop === element.scrollTop &&
        !(direction === ScrollDirection.Up && isTopReached(element)) &&
        !(direction === ScrollDirection.Down && isBottomReached(element)) &&
        iterations < 20 // as the bulgarian saying goes - to ties our underpants
    ) {
        element.scrollTop += (currentStep * direction);
        currentStep += 1;
        iterations += 1;
    }
};

/**
 * @hidden
 */
const copyPageSize = (treeview, source, target) => {
    if (!isPresent(treeview.loadMoreService)) {
        return;
    }
    const sourceGroupSize = treeview.getNodePageSize(source);
    treeview.setNodePageSize(target, sourceGroupSize);
};
/**
 * @hidden
 */
const incrementPageSize = (treeview, dataItem) => {
    if (!isPresent(treeview.loadMoreService)) {
        return;
    }
    const currentPageSize = treeview.getNodePageSize(dataItem);
    treeview.setNodePageSize(dataItem, currentPageSize + 1);
};
/**
 * @hidden
 */
const decrementPageSize = (treeview, dataItem) => {
    if (!isPresent(treeview.loadMoreService)) {
        return;
    }
    const currentPageSize = treeview.getNodePageSize(dataItem);
    treeview.setNodePageSize(dataItem, currentPageSize - 1);
};

/**
 * @hidden
 */
class HierarchyEditingService {
    constructor(hierarchyBinding) {
        this.hierarchyBinding = hierarchyBinding;
    }
    add({ sourceItem, destinationItem, dropPosition, sourceTree, destinationTree }) {
        // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position
        const clonedSourceDataItem = Object.assign({}, getDataItem(sourceItem));
        if (dropPosition === DropPosition.Over) {
            // expand the item that was dropped into
            expandDropTarget(destinationItem, destinationTree);
            const destinationChildren = this.childrenFor(getDataItem(destinationItem));
            // add the moved node just before the load more button if load more is enabled
            const targetIndex = isPresent(destinationTree.loadMoreService) ?
                Math.min(destinationTree.loadMoreService.getGroupSize(getDataItem(destinationItem)), destinationChildren.length) : // the page size might be greater than the actual children array length
                destinationChildren.length;
            destinationChildren.splice(targetIndex, 0, clonedSourceDataItem);
            setter(this.hierarchyBinding.childrenField)(getDataItem(destinationItem), destinationChildren);
            this.movedItemNewIndex = buildTreeIndex(destinationItem.item.index, targetIndex);
        }
        else {
            const destinationParentNodes = this.getParentNodes(destinationItem, destinationTree);
            const shiftIndex = dropPosition === DropPosition.After ? 1 : 0;
            const targetIndex = destinationParentNodes.indexOf(getDataItem(destinationItem)) + shiftIndex;
            destinationParentNodes.splice(targetIndex, 0, clonedSourceDataItem);
            const parentIndex = destinationItem.parent ? destinationItem.parent.item.index : null;
            this.movedItemNewIndex = buildTreeIndex(parentIndex, targetIndex);
        }
        // increment the parent page size => an item is moved into it
        const updatedParent = dropPosition === DropPosition.Over ? getDataItem(destinationItem) : getDataItem(destinationItem.parent);
        incrementPageSize(destinationTree, updatedParent);
        // the page sizes are stored by data-item reference => copy the old item ref page size to the new item reference
        copyPageSize(destinationTree, getDataItem(sourceItem), clonedSourceDataItem);
        // the source tree nodes are reloaded on `removeItem` - reload the destination tree nodes if the soruce and the destination tree are different
        if (sourceTree !== destinationTree && !destinationTree.loadOnDemand) {
            destinationTree.preloadChildNodes();
        }
        // if the source and destination trees are the same, focusing the moved item here will not have the desired effect
        // as the `remove` handler has not yet kicked-in to remove the item from its old position
        if (sourceTree !== destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            destinationTree.focus(this.movedItemNewIndex);
        }
    }
    remove({ sourceItem, sourceTree, destinationTree }) {
        const sourceParentNodes = this.getParentNodes(sourceItem, sourceTree);
        const sourceItemIndex = sourceParentNodes.indexOf(getDataItem(sourceItem));
        sourceParentNodes.splice(sourceItemIndex, 1);
        // emit collapse for the parent node if its last child node was spliced
        collapseEmptyParent(sourceItem.parent, sourceParentNodes, sourceTree);
        // decrement source item parent page size => an item has been removed from it
        decrementPageSize(sourceTree, getDataItem(sourceItem.parent));
        // reload the treeview nodes
        if (!sourceTree.loadOnDemand) {
            sourceTree.preloadChildNodes();
        }
        // if the source and destination trees are different we want to focus only the moved item in the destination tree
        if (sourceTree === destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            // after the source item is removed from its original position, the candidate index might have to be corrected
            const index = updateMovedItemIndex(this.movedItemNewIndex, sourceItem.item.index);
            destinationTree.focus(index);
        }
    }
    getParentNodes(node, treeView) {
        return isPresent(node.parent) ?
            this.childrenFor(getDataItem(node.parent)) :
            treeView.nodes;
    }
    childrenFor(dataItem) {
        return getter(this.hierarchyBinding.childrenField)(dataItem) || [];
    }
}

/**
 * @hidden
 */
let DragClueComponent = class DragClueComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.hostClasses = true;
        this.posistionStyle = 'fixed';
    }
    get statusIconClass() {
        switch (this.action) {
            case DropAction.Add: return 'k-i-plus';
            case DropAction.InsertTop: return 'k-i-insert-up';
            case DropAction.InsertBottom: return 'k-i-insert-down';
            case DropAction.InsertMiddle: return 'k-i-insert-middle';
            case DropAction.Invalid:
            default: return 'k-i-cancel';
        }
    }
    // exposed as a public method that can be called from outside as the component uses `OnPush` strategy
    detectChanges() {
        this.cdr.detectChanges();
    }
};
DragClueComponent.ɵfac = function DragClueComponent_Factory(t) { return new (t || DragClueComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DragClueComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DragClueComponent, selectors: [["kendo-treeview-drag-clue"]], hostVars: 6, hostBindings: function DragClueComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("position", ctx.posistionStyle);
        ɵngcc0.ɵɵclassProp("k-header", ctx.hostClasses)("k-drag-clue", ctx.hostClasses);
    } }, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function DragClueComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DragClueComponent_ng_container_0_Template, 4, 4, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, DragClueComponent_1_Template, 1, 7, null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.template);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
__decorate([
    HostBinding('class.k-header'),
    HostBinding('class.k-drag-clue'),
    __metadata("design:type", Boolean)
], DragClueComponent.prototype, "hostClasses", void 0);
__decorate([
    HostBinding('style.position'),
    __metadata("design:type", String)
], DragClueComponent.prototype, "posistionStyle", void 0);
DragClueComponent = __decorate([ __metadata("design:paramtypes", [ChangeDetectorRef])
], DragClueComponent);

/**
 * @hidden
 */
class DragAndDropAssetService {
    get componentRef() {
        if (!isPresent(this._componentRef)) {
            throw new Error('The `initalize` method must be called before calling other service methods.');
        }
        return this._componentRef;
    }
    set componentRef(componentRef) {
        this._componentRef = componentRef;
    }
    get element() {
        return this.componentRef.location.nativeElement;
    }
    ngOnDestroy() {
        if (!isPresent(this._componentRef)) {
            return;
        }
        this.element.parentElement.removeChild(this.element);
        this.componentRef.destroy();
        this.componentRef = null;
    }
    show() {
        this.element.style.display = '';
    }
    hide() {
        this.element.style.display = 'none';
    }
    move(left, top, offset = 0) {
        this.element.style.left = `${left + offset}px`;
        this.element.style.top = `${top + offset}px`;
    }
}
DragAndDropAssetService.ɵfac = function DragAndDropAssetService_Factory(t) { return new (t || DragAndDropAssetService)(); };
DragAndDropAssetService.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DragAndDropAssetService });

/**
 * @hidden
 */
const CLUE_OFFSET = 10;
/**
 * @hidden
 */
const RETURN_ANIMATION_DURATION = 200;
/**
 * @hidden
 */
let DragClueService = class DragClueService extends DragAndDropAssetService {
    constructor(componentFactoryResolver) {
        super();
        this.componentFactoryResolver = componentFactoryResolver;
    }
    initialize(container, template) {
        if (isPresent(this._componentRef)) {
            this.ngOnDestroy();
        }
        const clueComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DragClueComponent);
        this.componentRef = container.createComponent(clueComponentFactory);
        this.hide();
        this.componentRef.instance.template = template;
        this.componentRef.changeDetectorRef.detectChanges();
    }
    ngOnDestroy() {
        this.cancelReturnAnimation();
        this.cancelScroll();
        super.ngOnDestroy();
    }
    move(left, top) {
        super.move(left, top, CLUE_OFFSET);
    }
    animateDragClueToElementPosition(target) {
        if (!(isPresent(target) && isPresent(this.element.animate))) {
            this.hide();
            return;
        }
        const targetElementViewPortCoords = target.getBoundingClientRect();
        const clueElementViewPortCoords = this.element.getBoundingClientRect();
        this.returnAnimation = this.element.animate([
            { transform: 'translate(0, 0)' },
            { transform: `translate(${targetElementViewPortCoords.left - clueElementViewPortCoords.left}px, ${targetElementViewPortCoords.top - clueElementViewPortCoords.top}px)` }
        ], RETURN_ANIMATION_DURATION);
        this.returnAnimation.onfinish = () => this.hide();
    }
    cancelReturnAnimation() {
        if (!isPresent(this.returnAnimation)) {
            return;
        }
        this.returnAnimation.cancel();
        this.returnAnimation = null;
    }
    updateDragClueData(action, sourceItem, destinationItem) {
        const dragClue = this.componentRef.instance;
        if (action === dragClue.action && dataItemsEqual(sourceItem, dragClue.sourceItem) && dataItemsEqual(destinationItem, dragClue.destinationItem)) {
            return;
        }
        dragClue.action = action;
        dragClue.sourceItem = sourceItem;
        dragClue.destinationItem = destinationItem;
        dragClue.detectChanges();
    }
    updateText(text) {
        if (text === this.componentRef.instance.text) {
            return;
        }
        this.componentRef.instance.text = text;
        this.componentRef.instance.detectChanges();
    }
    /**
     * Triggers the first scrollable parent to scroll upwards or downwards.
     * Uses setInterval, so should be called outside the angular zone.
     */
    scrollIntoView({ step, interval }) {
        this.cancelScroll();
        const scrollableContainer = getScrollableContainer(this.element);
        if (!isPresent(scrollableContainer)) {
            return;
        }
        const containerRect = scrollableContainer.getBoundingClientRect();
        const clueRect = this.element.getBoundingClientRect();
        // if the beginning of the scrollable container is above the current viewport, fall-back to 0
        const firstVisibleClientTopPart = Math.max(containerRect.top, 0);
        // start scrolling up when the first visible item is dragged over
        const topLimit = firstVisibleClientTopPart + clueRect.height;
        // if the end of the scrollable container is beneath the current viewport, fall-back to its client height
        // add the distance from the start of the viewport to the beginning of the container to ensure scrolling bottom begins when the actual end of the container is reached
        const bottomLimit = firstVisibleClientTopPart + Math.min(containerRect.bottom, scrollableContainer.clientHeight);
        if (clueRect.top < topLimit) {
            this.scrollInterval = setInterval(() => scrollElementBy(scrollableContainer, step, ScrollDirection.Up), interval);
        }
        else if (clueRect.bottom > bottomLimit) {
            this.scrollInterval = setInterval(() => scrollElementBy(scrollableContainer, step, ScrollDirection.Down), interval);
        }
    }
    /**
     * Cancels out the on-going scroll animation, if present.
     */
    cancelScroll() {
        if (isPresent(this.scrollInterval)) {
            clearInterval(this.scrollInterval);
            this.scrollInterval = null;
        }
    }
};
DragClueService.ɵfac = function DragClueService_Factory(t) { return new (t || DragClueService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver)); };
DragClueService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DragClueService, factory: function (t) { return DragClueService.ɵfac(t); } });
DragClueService = __decorate([ __metadata("design:paramtypes", [ComponentFactoryResolver])
], DragClueService);

/**
 * @hidden
 */
let DropHintComponent = class DropHintComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hostClass = true;
        this.position = 'fixed';
        this.pointerEvents = 'none';
    }
    // exposed as a public method that can be called from outside as the component uses `OnPush` strategy
    detectChanges() {
        this.changeDetectorRef.detectChanges();
    }
};
DropHintComponent.ɵfac = function DropHintComponent_Factory(t) { return new (t || DropHintComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DropHintComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DropHintComponent, selectors: [["kendo-treeview-drop-hint"]], hostVars: 6, hostBindings: function DropHintComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("position", ctx.position)("pointer-events", ctx.pointerEvents);
        ɵngcc0.ɵɵclassProp("k-drop-hint-container", ctx.hostClass);
    } }, decls: 2, vars: 2, consts: [["class", "k-drop-hint k-drop-hint-h", 4, "ngIf"], [4, "ngIf"], [1, "k-drop-hint", "k-drop-hint-h"], [1, "k-drop-hint-start"], [1, "k-drop-hint-line"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function DropHintComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DropHintComponent_div_0_Template, 3, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DropHintComponent_1_Template, 1, 6, null, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.template);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
__decorate([
    HostBinding('class.k-drop-hint-container'),
    __metadata("design:type", Boolean)
], DropHintComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('style.position'),
    __metadata("design:type", String)
], DropHintComponent.prototype, "position", void 0);
__decorate([
    HostBinding('style.pointer-events'),
    __metadata("design:type", String)
], DropHintComponent.prototype, "pointerEvents", void 0);
DropHintComponent = __decorate([ __metadata("design:paramtypes", [ChangeDetectorRef])
], DropHintComponent);

/**
 * @hidden
 */
let DropHintService = class DropHintService extends DragAndDropAssetService {
    constructor(componentFactoryResolver) {
        super();
        this.componentFactoryResolver = componentFactoryResolver;
    }
    initialize(container, template) {
        if (isPresent(this._componentRef)) {
            this.ngOnDestroy();
        }
        const hintComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DropHintComponent);
        this.componentRef = container.createComponent(hintComponentFactory);
        this.hide();
        this.componentRef.instance.template = template;
        this.componentRef.changeDetectorRef.detectChanges();
    }
    updateDropHintData(action, sourceItem, destinationItem) {
        const dropHint = this.componentRef.instance;
        if (action === dropHint.action && dataItemsEqual(sourceItem, dropHint.sourceItem) && dataItemsEqual(destinationItem, dropHint.destinationItem)) {
            return;
        }
        dropHint.action = action;
        dropHint.sourceItem = sourceItem;
        dropHint.destinationItem = destinationItem;
        dropHint.detectChanges();
    }
};
DropHintService.ɵfac = function DropHintService_Factory(t) { return new (t || DropHintService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver)); };
DropHintService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DropHintService, factory: function (t) { return DropHintService.ɵfac(t); } });
DropHintService = __decorate([ __metadata("design:paramtypes", [ComponentFactoryResolver])
], DropHintService);

/**
 * Represents the template for the TreeView drag clue when an item is dragged. To define the clue template,
 * nest an `<ng-template>` tag with the `kendoTreeViewDragClueTemplate` directive inside a `<kendo-treeview>` tag
 * ([see example]({% slug draganddrop_treeview %}#toc-templates)).
 *
 *
 * The text, attempted drop action, source item and destination item are available as context variables in the template:
 *
 *
 * - `let-text="text"` (`string`)
 * - `let-action="action"` ([`DropAction`]({% slug api_treeview_dropaction %}))
 * - `let-sourceItem="sourceItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 * - `let-destinationItem="destinationItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 */
let DragClueTemplateDirective = class DragClueTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
DragClueTemplateDirective.ɵfac = function DragClueTemplateDirective_Factory(t) { return new (t || DragClueTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
DragClueTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DragClueTemplateDirective, selectors: [["", "kendoTreeViewDragClueTemplate", ""]] });
DragClueTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], DragClueTemplateDirective);

/**
 * Represents the template for the TreeView drop hint when an item is dragged. To define the hint template,
 * nest an `<ng-template>` tag with the `kendoTreeViewDropHintTemplate` directive inside a `<kendo-treeview>` tag
 * ([see example]({% slug draganddrop_treeview %}#toc-templates)).
 *
 * The attempted drop action, source item and destination item are available as context variables in the template:
 *
 * - `let-action="action"` ([`DropAction`]({% slug api_treeview_dropaction %}))
 * - `let-sourceItem="sourceItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 * - `let-destinationItem="destinationItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 */
let DropHintTemplateDirective = class DropHintTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
DropHintTemplateDirective.ɵfac = function DropHintTemplateDirective_Factory(t) { return new (t || DropHintTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
DropHintTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DropHintTemplateDirective, selectors: [["", "kendoTreeViewDropHintTemplate", ""]] });
DropHintTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], DropHintTemplateDirective);

const DEFAULT_SCROLL_SETTINGS = {
    enabled: true,
    step: 1,
    interval: 1
};
/**
 * A directive which enables the dragging and dropping items inside the current TreeView or between multiple linked TreeView component instances
 * ([see example]({% slug draganddrop_treeview %})).
 *
 * Triggers the [`nodeDragStart`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragstart),
 * [`nodeDrag`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrag),
 * [`nodeDrop`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrop),
 * [`nodeDragEnd`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragend),
 * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and
 * [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)
 * events when the corresponding actions occur on the respective TreeView instance.
 */
let DragAndDropDirective = class DragAndDropDirective {
    constructor(element, zone, treeview, dragClueService, dropHintService) {
        this.element = element;
        this.zone = zone;
        this.treeview = treeview;
        this.dragClueService = dragClueService;
        this.dropHintService = dropHintService;
        /**
         * Specifies whether the `removeItem` event will be fired after an item is dropped when the `ctrl` key is pressed.
         * If enabled, the `removeItem` event will not be fired on the source TreeView
         * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).
         *
         * @default false
         */
        this.allowCopy = false;
        /**
         * Specifes the TreeViewComponent instances into which dragged items from the current TreeViewComponent can be dropped
         * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).
         */
        this.dropZoneTreeViews = [];
        /**
         * Specifies the distance in pixels from the initial item pointerdown event, before the dragging is initiated.
         * The `nodeDragStart` and all consequent TreeView drag events will not be fired until the actual dragging begins.
         *
         * @default 5
         */
        this.startDragAfter = 5;
        /**
         * Controlls the auto-scrolling behavior during drag-and-drop ([see example]({% slug draganddrop_treeview %}#toc-auto-scrolling)).
         * Enbaled by default. To turn the auto-scrolling off, set this prop to `false`.
         *
         * By default, the scrolling will be performed by 1 pixel at every 1 millisecond, when the dragged item reaches the top or the bottom of the scrollable container.
         * The `step` and `interval` can be overridden by providing a `DragAndDropScrollSettings` object to this prop.
         *
         * @default true
         */
        this.autoScroll = true;
        /**
         * @hidden
         */
        this.userSelectStyle = 'none';
        /**
         * Describes the offset of the parent element if the latter has the `transform` CSS prop applied.
         * Transformed parents create new stacking context and the fixed children must be position based on the transformed parent.
         * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
         */
        this.containerOffset = { top: 0, left: 0 };
        this.treeview.touchActions = false;
    }
    get scrollSettings() {
        const userProvidedSettings = typeof this.autoScroll === 'boolean' ?
            { enabled: this.autoScroll } :
            this.autoScroll;
        return Object.assign({}, DEFAULT_SCROLL_SETTINGS, userProvidedSettings);
    }
    ngAfterContentInit() {
        this.initalizeDraggable();
        this.dragClueService.initialize(this.treeview.assetsContainer, this.dragClueTemplate && this.dragClueTemplate.templateRef);
        this.dropHintService.initialize(this.treeview.assetsContainer, this.dropHintTemplate && this.dropHintTemplate.templateRef);
    }
    ngOnDestroy() {
        this.draggable.destroy();
    }
    /**
     * @hidden
     */
    handlePress({ originalEvent }) {
        if (!isContent(originalEvent.target)) {
            return;
        }
        // store the drag target on press, show it only when it's actually dragged
        this.draggedItem = closestWithMatch(originalEvent.target, '.k-treeview-leaf');
        // record the current pointer down coords - copared to the `startDragAfter` value to calculate whether to initiate dragging
        this.pendingDragStartEvent = originalEvent;
    }
    /**
     * @hidden
     */
    handleDrag({ originalEvent, clientX, clientY }) {
        if (this.shouldInitiateDragStart({ clientX, clientY })) {
            this.initiateDragStart();
        }
        if (!isPresent(this.draggedItem) || isPresent(this.pendingDragStartEvent)) {
            return;
        }
        const dropTarget = getDropTarget(originalEvent);
        if (hasObservers(this.treeview.nodeDrag)) {
            this.zone.run(() => this.notifyDrag(originalEvent, dropTarget));
        }
        const targetTreeView = this.getTargetTreeView(dropTarget);
        const dropPosition = getDropPosition(this.draggedItem, dropTarget, clientY, targetTreeView, this.containerOffset);
        const dropHintAnchor = closestWithMatch(dropTarget, '.k-treeview-mid');
        const dropAction = getDropAction(dropPosition, dropTarget);
        const sourceItem = treeItemFromEventTarget(this.treeview, this.draggedItem);
        const destinationItem = treeItemFromEventTarget(targetTreeView, dropTarget);
        this.updateDropHintState(dropPosition, dropHintAnchor, dropAction, sourceItem, destinationItem);
        this.updateDragClueState(dropAction, clientX, clientY, sourceItem, destinationItem);
        if (this.scrollSettings.enabled) {
            this.dragClueService.scrollIntoView(this.scrollSettings);
        }
    }
    /**
     * @hidden
     */
    handleRelease({ originalEvent, clientY }) {
        if (this.scrollSettings.enabled) {
            this.dragClueService.cancelScroll();
        }
        if (!isPresent(this.draggedItem) || isPresent(this.pendingDragStartEvent)) {
            this.pendingDragStartEvent = null;
            this.draggedItem = null;
            return;
        }
        const dropTarget = getDropTarget(originalEvent);
        const sourceTree = this.treeview;
        const destinationTree = this.getTargetTreeView(dropTarget);
        const dropPosition = getDropPosition(this.draggedItem, dropTarget, clientY, this.getTargetTreeView(dropTarget), this.containerOffset);
        const sourceItem = treeItemFromEventTarget(sourceTree, this.draggedItem);
        const destinationItem = treeItemFromEventTarget(destinationTree, dropTarget);
        if (isPresent(destinationItem) && isPresent(dropPosition)) {
            this.zone.run(() => this.notifyDrop({ sourceItem, destinationItem, dropPosition, sourceTree, destinationTree }, originalEvent));
        }
        else {
            this.dragClueService.animateDragClueToElementPosition(this.draggedItem);
        }
        if (hasObservers(this.treeview.nodeDragEnd)) {
            this.zone.run(() => this.notifyDragEnd({ sourceItem, destinationItem, originalEvent }));
        }
        this.dropHintService.hide();
        this.draggedItem = null;
    }
    updateDropHintState(dropPosition, dropHintAnchor, dropAction, sourceItem, destinationItem) {
        if (!isPresent(dropHintAnchor) || dropPosition === DropPosition.Over || !isPresent(dropPosition)) {
            this.dropHintService.hide();
            return;
        }
        const anchorViewPortCoords = dropHintAnchor.getBoundingClientRect();
        const insertBefore = dropPosition === DropPosition.Before;
        const top = insertBefore ? anchorViewPortCoords.top : (anchorViewPortCoords.top + anchorViewPortCoords.height);
        this.dropHintService.updateDropHintData(dropAction, sourceItem, destinationItem);
        // clear any possible container offset created by parent elements with `transform` css property set
        this.dropHintService.move(anchorViewPortCoords.left - this.containerOffset.left, top - this.containerOffset.top);
        this.dropHintService.show();
    }
    updateDragClueState(dropAction, clientX, clientY, sourceItem, destinationItem) {
        // clear any possible container offset created by parent elements with `transform` css property set
        this.dragClueService.move(clientX - this.containerOffset.left, clientY - this.containerOffset.top);
        this.dragClueService.updateDragClueData(dropAction, sourceItem, destinationItem);
        this.dragClueService.show();
    }
    initalizeDraggable() {
        this.draggable = new Draggable({
            press: this.handlePress.bind(this),
            drag: this.handleDrag.bind(this),
            release: this.handleRelease.bind(this)
        });
        this.zone.runOutsideAngular(() => this.draggable.bindTo(this.element.nativeElement));
    }
    notifyDragStart(originalEvent, dropTarget) {
        const sourceItem = treeItemFromEventTarget(this.treeview, dropTarget);
        const event = new TreeItemDragStartEvent({ sourceItem, originalEvent });
        this.treeview.nodeDragStart.emit(event);
        return event;
    }
    notifyDrag(originalEvent, dropTarget) {
        const dragEvent = {
            sourceItem: treeItemFromEventTarget(this.treeview, this.draggedItem),
            destinationItem: treeItemFromEventTarget(this.getTargetTreeView(dropTarget), dropTarget),
            originalEvent
        };
        this.treeview.nodeDrag.emit(dragEvent);
    }
    notifyDrop(args, originalEvent) {
        const event = new TreeItemDropEvent(args, originalEvent);
        args.destinationTree.nodeDrop.emit(event);
        // disable the animations on drop and restore them afterwards (if they were initially turned on)
        this.disableAnimationsForNextTick(args.destinationTree);
        if (args.sourceTree !== args.destinationTree) {
            this.disableAnimationsForNextTick(args.sourceTree);
        }
        if (!event.isDefaultPrevented() && event.isValid) {
            this.dragClueService.hide();
            // order matters in a flat data binding scenario (first add, then remove)
            args.destinationTree.addItem.emit(args);
            if (!(originalEvent.ctrlKey && this.allowCopy)) {
                args.sourceTree.removeItem.emit(args);
            }
        }
        else if (event.isDefaultPrevented()) {
            // directly hide the clue if the default is prevented
            this.dragClueService.hide();
        }
        else if (!event.isValid) {
            // animate the clue back to the source item position if marked as invalid
            this.dragClueService.animateDragClueToElementPosition(this.draggedItem);
        }
    }
    notifyDragEnd(dragEndEvent) {
        this.treeview.nodeDragEnd.emit(dragEndEvent);
    }
    getTargetTreeView(dropTarget) {
        const treeViewTagName = this.treeview.element.nativeElement.tagName;
        const targetTreeView = closestWithMatch(dropTarget, treeViewTagName);
        return [this.treeview, ...this.dropZoneTreeViews].find(treeView => isPresent(treeView) && treeView.element.nativeElement === targetTreeView);
    }
    disableAnimationsForNextTick(treeView) {
        // the treeView.animate getter returns `true` when the animations are turned off
        // confusing, but seems on purpose (the `animate` prop sets the value of the @.disabled host-bound attribute)
        if (treeView.animate) {
            return;
        }
        treeView.animate = false;
        this.zone.runOutsideAngular(() => setTimeout(() => treeView.animate = true));
    }
    shouldInitiateDragStart(currentPointerCoords) {
        if (!isPresent(this.pendingDragStartEvent)) {
            return false;
        }
        const distanceFromPointerDown = Math.sqrt(Math.pow((this.pendingDragStartEvent.clientX - currentPointerCoords.clientX), 2) +
            Math.pow((this.pendingDragStartEvent.clientY - currentPointerCoords.clientY), 2));
        return distanceFromPointerDown >= this.startDragAfter;
    }
    initiateDragStart() {
        if (hasObservers(this.treeview.nodeDragStart)) {
            const dragStartEvent = this.zone.run(() => this.notifyDragStart(this.pendingDragStartEvent, getDropTarget(this.pendingDragStartEvent)));
            if (dragStartEvent.isDefaultPrevented()) {
                this.pendingDragStartEvent = null;
                this.draggedItem = null;
                return;
            }
        }
        this.dragClueService.cancelReturnAnimation();
        this.dragClueService.updateText(this.draggedItem.innerText);
        this.containerOffset = getContainerOffset(this.draggedItem);
        this.pendingDragStartEvent = null;
    }
};
DragAndDropDirective.ɵfac = function DragAndDropDirective_Factory(t) { return new (t || DragAndDropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TreeViewComponent), ɵngcc0.ɵɵdirectiveInject(DragClueService), ɵngcc0.ɵɵdirectiveInject(DropHintService)); };
DragAndDropDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DragAndDropDirective, selectors: [["", "kendoTreeViewDragAndDrop", ""]], contentQueries: function DragAndDropDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DragClueTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DropHintTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragClueTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropHintTemplate = _t.first);
    } }, hostVars: 8, hostBindings: function DragAndDropDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("user-select", ctx.userSelectStyle)("-ms-user-select", ctx.userSelectStyle)("-moz-user-select", ctx.userSelectStyle)("-webkit-user-select", ctx.userSelectStyle);
    } }, inputs: { allowCopy: "allowCopy", dropZoneTreeViews: "dropZoneTreeViews", startDragAfter: "startDragAfter", autoScroll: "autoScroll" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DragClueService,
            DropHintService
        ])] });
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DragAndDropDirective.prototype, "allowCopy", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DragAndDropDirective.prototype, "dropZoneTreeViews", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DragAndDropDirective.prototype, "startDragAfter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DragAndDropDirective.prototype, "autoScroll", void 0);
__decorate([
    ContentChild(DragClueTemplateDirective, { static: false }),
    __metadata("design:type", DragClueTemplateDirective)
], DragAndDropDirective.prototype, "dragClueTemplate", void 0);
__decorate([
    ContentChild(DropHintTemplateDirective, { static: false }),
    __metadata("design:type", DropHintTemplateDirective)
], DragAndDropDirective.prototype, "dropHintTemplate", void 0);
__decorate([
    HostBinding('style.user-select'),
    HostBinding('style.-ms-user-select'),
    HostBinding('style.-moz-user-select'),
    HostBinding('style.-webkit-user-select'),
    __metadata("design:type", String)
], DragAndDropDirective.prototype, "userSelectStyle", void 0);
DragAndDropDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
        NgZone,
        TreeViewComponent,
        DragClueService,
        DropHintService])
], DragAndDropDirective);

/**
 * @hidden
 */
const DEFAULT_FILTER_SETTINGS = {
    operator: 'contains',
    ignoreCase: true,
    mode: "lenient"
};

/**
 * @hidden
 */
class FilteringBase {
    constructor(component) {
        this.component = component;
        this.visibleNodes = new Set();
        this._filterSettings = DEFAULT_FILTER_SETTINGS;
    }
    /**
     * The settings which are applied when performing a filter on the component's data.
     */
    set filterSettings(settings) {
        this._filterSettings = Object.assign({}, DEFAULT_FILTER_SETTINGS, settings);
    }
    get filterSettings() {
        return this._filterSettings;
    }
    /**
     * Applies a filter and changes the visibility of the component's nodes accordingly.
     */
    set filter(term) {
        this.handleFilterChange(term);
    }
    /**
     * @hidden
     */
    handleFilterChange(term) {
        if (!this.filterData) {
            return;
        }
        this.resetNodesVisibility(this.filterData);
        if (term) {
            filterTree(this.filterData, term, this.filterSettings, this.component.textField);
        }
        this.updateVisibleNodes(this.filterData);
        if (isPresent(this.component.filterStateChange)) {
            this.component.filterStateChange.emit({
                nodes: this.filterData,
                matchCount: this.visibleNodes.size,
                term,
                filterSettings: this.filterSettings
            });
        }
    }
    updateVisibleNodes(items) {
        items.forEach((wrapper) => {
            if (wrapper.visible) {
                this.visibleNodes.add(wrapper.dataItem);
            }
            if (wrapper.children) {
                this.updateVisibleNodes(wrapper.children);
            }
        });
    }
    resetNodesVisibility(items) {
        this.visibleNodes.clear();
        items.forEach((wrapper) => {
            wrapper.visible = true;
            if (wrapper.children) {
                this.resetNodesVisibility(wrapper.children);
            }
        });
    }
}
FilteringBase.ɵfac = function FilteringBase_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
FilteringBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FilteringBase, inputs: { filterSettings: "filterSettings", filter: "filter" } });
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], FilteringBase.prototype, "filterSettings", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], FilteringBase.prototype, "filter", null);

const indexBuilder = new IndexBuilderService();
const mapToWrappers = (currentLevelNodes, childrenField, parent = null, parentIndex = '') => {
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map((node, idx) => {
        const index = indexBuilder.nodeIndex(idx.toString(), parentIndex);
        const wrapper = {
            dataItem: node,
            index,
            parent,
            visible: true
        };
        wrapper.children = mapToWrappers(getter(childrenField)(node), childrenField, wrapper, index);
        return wrapper;
    });
};
/**
 * A directive which encapsulates the retrieval of child nodes.
 */
let HierarchyBindingDirective = class HierarchyBindingDirective extends FilteringBase {
    constructor(component, dragAndDropDirective) {
        super(component);
        this.component = component;
        this.dragAndDropDirective = dragAndDropDirective;
        /**
         * @hidden
         */
        this.loadOnDemand = true;
        this.originalData = [];
        const shouldFilter = !isPresent(this.dragAndDropDirective);
        this.component.isVisible = shouldFilter ? (node) => this.visibleNodes.has(node) : isVisible;
    }
    /**
     * The field name which holds the data items of the child component.
     */
    set childrenField(value) {
        if (!value) {
            throw new Error("'childrenField' cannot be empty");
        }
        this._childrenField = value;
    }
    /**
     * The nodes which will be displayed by the TreeView.
     */
    set nodes(values) {
        this.originalData = values || [];
        this.filterData = mapToWrappers(values, this.childrenField) || [];
        this.updateVisibleNodes(this.filterData);
    }
    /**
     * @hidden
     * A callback which determines whether a TreeView node should be rendered as hidden.
     */
    set isVisible(fn) {
        this.component.isVisible = fn;
    }
    /**
     * The field name which holds the data items of the child component.
     */
    get childrenField() {
        return this._childrenField;
    }
    ngOnInit() {
        if (isPresent(this.childrenField)) {
            this.component.children = item => of(getter(this.childrenField)(item));
            this.component.hasChildren = item => {
                const children = getter(this.childrenField)(item);
                return Boolean(children && children.length);
            };
            this.component.editService = new HierarchyEditingService(this);
            this.component.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.component.filter) {
                this.handleFilterChange(this.component.filter);
            }
            if (!this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
                this.component.preloadChildNodes();
            }
        }
    }
    ngOnChanges(changes) {
        if (isChanged('childrenField', changes, false)) {
            this.nodes = this.originalData;
        }
        // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
            this.component.preloadChildNodes();
        }
    }
};
HierarchyBindingDirective.ɵfac = function HierarchyBindingDirective_Factory(t) { return new (t || HierarchyBindingDirective)(ɵngcc0.ɵɵdirectiveInject(DataBoundComponent), ɵngcc0.ɵɵdirectiveInject(DragAndDropDirective, 9)); };
HierarchyBindingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HierarchyBindingDirective, selectors: [["", "kendoTreeViewHierarchyBinding", ""]], inputs: { loadOnDemand: "loadOnDemand", childrenField: "childrenField", nodes: "nodes", isVisible: "isVisible" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], HierarchyBindingDirective.prototype, "childrenField", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], HierarchyBindingDirective.prototype, "nodes", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], HierarchyBindingDirective.prototype, "isVisible", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], HierarchyBindingDirective.prototype, "loadOnDemand", void 0);
HierarchyBindingDirective = __decorate([ __param(1, Optional()), __param(1, Host()),
    __metadata("design:paramtypes", [DataBoundComponent,
        DragAndDropDirective])
], HierarchyBindingDirective);

/**
 * @hidden
 */
let LoadingIndicatorDirective = class LoadingIndicatorDirective {
    constructor(expandService, loadingService, cd) {
        this.expandService = expandService;
        this.loadingService = loadingService;
        this.cd = cd;
        this._loading = false;
    }
    get loading() {
        return this._loading;
    }
    set loading(value) {
        this._loading = value;
        this.cd.markForCheck();
    }
    ngOnInit() {
        const loadingNotifications = this.loadingService
            .changes
            .pipe(filter(index => index === this.index));
        this.subscription = this.expandService
            .changes
            .pipe(filter(({ index }) => index === this.index), tap(({ expand }) => {
            if (!expand && this.loading) {
                this.loading = false;
            }
        }), filter(({ expand }) => expand), switchMap(x => of(x).pipe(delay(100), takeUntil(loadingNotifications))))
            .subscribe(() => this.loading = true);
        this.subscription.add(loadingNotifications.subscribe(() => this.loading = false));
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
};
LoadingIndicatorDirective.ɵfac = function LoadingIndicatorDirective_Factory(t) { return new (t || LoadingIndicatorDirective)(ɵngcc0.ɵɵdirectiveInject(ExpandStateService), ɵngcc0.ɵɵdirectiveInject(LoadingNotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
LoadingIndicatorDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LoadingIndicatorDirective, selectors: [["", "kendoTreeViewLoading", ""]], hostVars: 2, hostBindings: function LoadingIndicatorDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-i-loading", ctx.loading);
    } }, inputs: { index: ["kendoTreeViewLoading", "index"] } });
__decorate([
    HostBinding("class.k-i-loading"),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], LoadingIndicatorDirective.prototype, "loading", null);
__decorate([
    Input("kendoTreeViewLoading"),
    __metadata("design:type", String)
], LoadingIndicatorDirective.prototype, "index", void 0);
LoadingIndicatorDirective = __decorate([ __metadata("design:paramtypes", [ExpandStateService,
        LoadingNotificationService,
        ChangeDetectorRef])
], LoadingIndicatorDirective);

/**
 * @hidden
 * Performs the right-to-left function composition. Functions must have a unary.
 */
const compose = (...args) => (data) => args.reduceRight((acc, curr) => curr(acc), data);

/**
 * @hidden
 */
class FlatEditingService {
    constructor(flatBinding) {
        this.flatBinding = flatBinding;
    }
    add({ sourceItem, destinationItem, dropPosition, sourceTree, destinationTree }) {
        // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position
        const clonedSourceDataItem = Object.assign({}, getDataItem(sourceItem));
        if (dropPosition === DropPosition.Over) {
            // expand the item that was dropped into
            expandDropTarget(destinationItem, destinationTree);
            const destinationItemId = getter(this.flatBinding.idField)(getDataItem(destinationItem));
            setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemId);
            const lastChildNodeIndex = this.getLastVisibleChildNodeIndex(destinationTree, this.flatBinding.originalData, getDataItem(destinationItem));
            // insert after the last visible child
            const targetIndex = lastChildNodeIndex + 1;
            this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);
            // rebind the treeview data before searching for the focus target index
            this.rebindData();
            const focusTarget = this.fetchChildNodes(getDataItem(destinationItem), destinationTree).indexOf(clonedSourceDataItem);
            this.movedItemNewIndex = buildTreeIndex(destinationItem.item.index, focusTarget);
        }
        else {
            const shiftIndex = dropPosition === DropPosition.After ? 1 : 0;
            const targetIndex = this.flatBinding.originalData.indexOf(getDataItem(destinationItem)) + shiftIndex;
            this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);
            const destinationItemParentId = getter(this.flatBinding.parentIdField)(getDataItem(destinationItem));
            setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemParentId);
            // rebind the treeview data before searching for the focus target index
            this.rebindData();
            const parentIndex = destinationItem.parent ?
                destinationItem.parent.item.index :
                null;
            const parentContainer = destinationItem.parent ?
                this.fetchChildNodes(getDataItem(destinationItem.parent), destinationTree) :
                destinationTree.nodes;
            const focusTarget = parentContainer.indexOf(clonedSourceDataItem);
            this.movedItemNewIndex = buildTreeIndex(parentIndex, focusTarget);
        }
        if (sourceTree !== destinationTree) {
            this.addChildNodes(clonedSourceDataItem, sourceTree);
        }
        // increment the parent page size => an item is moved into it
        const updatedParent = dropPosition === DropPosition.Over ? getDataItem(destinationItem) : getDataItem(destinationItem.parent);
        incrementPageSize(destinationTree, updatedParent);
        // the page sizes are stored by data-item reference => copy the old item ref page size to the new item reference
        copyPageSize(destinationTree, getDataItem(sourceItem), clonedSourceDataItem);
        // the source tree nodes are reloaded on `removeItem` - reload the destination tree nodes if the soruce and the destination tree are different
        if (sourceTree !== destinationTree && !destinationTree.loadOnDemand) {
            destinationTree.preloadChildNodes();
        }
        // if the source and destination trees are the same, focusing the moved item here will not have the desired effect
        // as the `remove` handler has not yet kicked-in to remove the item from its old position
        if (sourceTree !== destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            destinationTree.focus(this.movedItemNewIndex);
        }
    }
    remove({ sourceItem, sourceTree, destinationTree }) {
        const sourceDataItem = getDataItem(sourceItem);
        const sourceItemIndex = this.flatBinding.originalData.indexOf(sourceDataItem);
        this.flatBinding.originalData.splice(sourceItemIndex, 1);
        if (sourceTree !== destinationTree) {
            this.removeChildNodes(sourceDataItem, sourceTree);
        }
        this.rebindData();
        // emit collapse for the parent node if its last child node was spliced
        const parentChildren = sourceItem.parent ? sourceItem.parent.children : [];
        collapseEmptyParent(sourceItem.parent, parentChildren, sourceTree);
        // decrement source item parent page size => an item has been removed from it
        decrementPageSize(sourceTree, getDataItem(sourceItem.parent));
        // reload the treeview nodes
        if (!sourceTree.loadOnDemand) {
            sourceTree.preloadChildNodes();
        }
        // if the source and destination trees are different we want to focus only the moved item in the destination tree
        if (sourceTree === destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            // after the source item is removed from its original position, the candidate index might have to be corrected
            const index = updateMovedItemIndex(this.movedItemNewIndex, sourceItem.item.index);
            destinationTree.focus(index);
        }
    }
    addChildNodes(dataItem, source) {
        const itemChildren = this.fetchAllDescendantNodes(dataItem, source);
        this.flatBinding.originalData.push(...itemChildren);
    }
    removeChildNodes(dataItem, source) {
        const sourceChildren = this.fetchAllDescendantNodes(dataItem, source);
        sourceChildren.forEach(item => {
            const index = this.flatBinding.originalData.indexOf(item);
            this.flatBinding.originalData.splice(index, 1);
        });
    }
    fetchAllDescendantNodes(node, treeview) {
        let nodes = this.fetchChildNodes(node, treeview);
        nodes.forEach(node => nodes = nodes.concat(this.fetchAllDescendantNodes(node, treeview) || []));
        return nodes;
    }
    fetchChildNodes(node, treeview) {
        if (!node) {
            return [];
        }
        let nodes = [];
        treeview
            .children(node)
            .pipe(take(1))
            .subscribe(children => nodes = nodes.concat(children || []));
        return nodes;
    }
    getLastVisibleChildNodeIndex(treeview, data, node) {
        if (!isPresent(treeview.loadMoreService) || !treeview.hasChildren(node)) {
            return data.length;
        }
        const visibleNodesCount = treeview.loadMoreService.getGroupSize(node);
        const visibleChildren = this.fetchChildNodes(node, treeview).slice(0, visibleNodesCount);
        const lastNode = visibleChildren[visibleChildren.length - 1];
        const lastNodeIndex = data.indexOf(lastNode);
        return lastNodeIndex;
    }
    rebindData() {
        this.flatBinding.nodes = this.flatBinding.originalData;
    }
}

const findChildren = (prop, nodes, value) => nodes.filter((x) => prop(x) === value);
const indexBuilder$1 = new IndexBuilderService();
const mapToTree = (currentLevelNodes, allNodes, parentIdField, idField, parent = null, parentIndex = '') => {
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map((node, idx) => {
        const index = indexBuilder$1.nodeIndex(idx.toString(), parentIndex);
        const wrapper = {
            dataItem: node,
            index,
            parent,
            visible: true
        };
        wrapper.children = mapToTree(findChildren(getter(parentIdField), allNodes || [], getter(idField)(node)), allNodes, parentIdField, idField, wrapper, index);
        return wrapper;
    });
};
/**
 * A directive which encapsulates the retrieval of the child nodes.
 */
let FlatDataBindingDirective = class FlatDataBindingDirective extends FilteringBase {
    constructor(component) {
        super(component);
        this.component = component;
        /**
         * @hidden
         */
        this.loadOnDemand = true;
        /**
         * @hidden
         */
        this.originalData = [];
        this.component.isVisible = (node) => this.visibleNodes.has(node);
    }
    /**
     * The nodes which will be displayed by the TreeView.
     */
    set nodes(values) {
        this.originalData = values || [];
        if (!isNullOrEmptyString(this.parentIdField)) {
            const prop = getter(this.parentIdField);
            this.component.nodes = this.originalData.filter(compose(isBlank, prop));
            this.filterData = mapToTree(this.component.nodes, this.originalData, this.parentIdField, this.idField);
            this.updateVisibleNodes(this.filterData);
        }
        else {
            this.component.nodes = this.originalData.slice(0);
        }
    }
    /**
     * @hidden
     * A callback which determines whether a TreeView node should be rendered as hidden.
     */
    set isVisible(fn) {
        this.component.isVisible = fn;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (isPresent(this.parentIdField) && isPresent(this.idField)) {
            const fetchChildren = (node) => findChildren(getter(this.parentIdField), this.originalData || [], getter(this.idField)(node));
            this.component.hasChildren = (node) => fetchChildren(node).length > 0;
            this.component.children = (node) => of(fetchChildren(node));
            this.component.editService = new FlatEditingService(this);
            this.component.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.component.filter) {
                this.handleFilterChange(this.component.filter);
            }
            if (!this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
                this.component.preloadChildNodes();
            }
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (isChanged('parentIdField', changes, false)) {
            this.nodes = this.originalData;
        }
        // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
            this.component.preloadChildNodes();
        }
    }
};
FlatDataBindingDirective.ɵfac = function FlatDataBindingDirective_Factory(t) { return new (t || FlatDataBindingDirective)(ɵngcc0.ɵɵdirectiveInject(DataBoundComponent)); };
FlatDataBindingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FlatDataBindingDirective, selectors: [["", "kendoTreeViewFlatDataBinding", ""]], inputs: { loadOnDemand: "loadOnDemand", nodes: "nodes", isVisible: "isVisible", parentIdField: "parentIdField", idField: "idField" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], FlatDataBindingDirective.prototype, "nodes", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], FlatDataBindingDirective.prototype, "parentIdField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FlatDataBindingDirective.prototype, "idField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FlatDataBindingDirective.prototype, "loadOnDemand", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], FlatDataBindingDirective.prototype, "isVisible", null);
FlatDataBindingDirective = __decorate([ __metadata("design:paramtypes", [DataBoundComponent])
], FlatDataBindingDirective);

const buildItem = (index, dataItem) => ({ dataItem, index });
let id = 0;
const TREE_ITEM_ROLE = 'treeitem';
const BUTTON_ROLE = 'button';
/**
 * @hidden
 *
 * A directive which manages the expanded state of the TreeView.
 */
let TreeViewItemDirective = class TreeViewItemDirective {
    constructor(element, expandService, navigationService, selectionService, lookupService, renderer, ib) {
        this.element = element;
        this.expandService = expandService;
        this.navigationService = navigationService;
        this.selectionService = selectionService;
        this.lookupService = lookupService;
        this.renderer = renderer;
        this.ib = ib;
        this.role = TREE_ITEM_ROLE;
        this.loadOnDemand = true;
        this.isDisabled = false;
        this.isVisible = true;
        this.ariaChecked = 'false';
        this.id = id++;
        this.isInitialized = false;
        this.subscriptions = [];
        this.subscribe();
    }
    set isChecked(checked) {
        if (checked === 'checked') {
            this.ariaChecked = 'true';
        }
        else if (checked === 'indeterminate') {
            this.ariaChecked = 'mixed';
        }
        else {
            this.ariaChecked = 'false';
        }
    }
    get isExpanded() {
        return this._isExpanded || false;
    }
    set isExpanded(isExpanded) {
        this._isExpanded = isExpanded;
    }
    get isSelected() {
        return this._isSelected || false;
    }
    set isSelected(isSelected) {
        this._isSelected = isSelected;
    }
    get isButton() {
        return this.role === BUTTON_ROLE;
    }
    get treeItem() {
        return buildItem(this.index, this.dataItem);
    }
    get parentTreeItem() {
        return this.parentDataItem ? buildItem(this.parentIndex, this.parentDataItem) : null;
    }
    ngOnInit() {
        if (this.loadOnDemand && !this.isButton) {
            this.lookupService.registerItem(this.treeItem, this.parentTreeItem);
        }
        this.registerNavigationItem();
        this.isInitialized = true;
        this.setAttribute('role', this.role);
        this.setAriaAttributes();
        this.setDisabledClass();
        this.updateTabIndex();
    }
    ngOnChanges(changes) {
        const { index, isDisabled } = changes;
        if (anyChanged(['index', 'checkable', 'isChecked', 'expandable', 'isExpanded', 'selectable', 'isSelected'], changes)) {
            this.setAriaAttributes();
        }
        if (isDisabled) {
            this.setDisabledClass();
        }
        if (this.loadOnDemand && !this.isButton) {
            this.moveLookupItem(changes);
        }
        this.moveNavigationItem(index);
        if (anyChanged(['isDisabled', 'isVisible'], changes)) {
            this.updateNodeAvailability();
        }
    }
    ngOnDestroy() {
        this.navigationService.unregisterItem(this.id, this.index);
        if (this.loadOnDemand && !this.isButton) {
            this.lookupService.unregisterItem(this.index, this.dataItem);
        }
        this.subscriptions = this.subscriptions.reduce((list, callback) => (callback.unsubscribe(), list), []);
    }
    subscribe() {
        this.subscriptions = [
            this.navigationService.moves
                .subscribe((navState) => {
                this.updateTabIndex();
                this.focusItem(navState.shouldScroll);
            }),
            this.navigationService.expands
                .pipe(filter(({ index }) => index === this.index && !this.isDisabled))
                .subscribe(({ expand }) => this.expand(expand))
        ];
    }
    registerNavigationItem() {
        this.navigationService.registerItem(this.id, this.index, this.isDisabled, this.isButton, this.isVisible);
        this.activateItem();
    }
    activateItem() {
        if (this.isDisabled) {
            return;
        }
        const navigationService = this.navigationService;
        const selectionService = this.selectionService;
        const index = this.index;
        selectionService.setFirstSelected(index, this.isSelected);
        if (!navigationService.isActive(index) && selectionService.isFirstSelected(index)) {
            navigationService.activateIndex(index);
        }
    }
    expand(shouldExpand) {
        this.expandService[shouldExpand ? 'expand' : 'collapse'](this.index, this.dataItem);
    }
    isFocusable() {
        return !this.isDisabled && this.navigationService.isFocusable(this.index);
    }
    focusItem(scrollIntoView = false) {
        if (this.isInitialized && this.navigationService.isActive(this.index)) {
            this.element.nativeElement.focus({ preventScroll: !scrollIntoView });
        }
    }
    moveLookupItem(changes = {}) {
        const { dataItem, index, parentDataItem, parentIndex } = changes;
        if ((index && index.firstChange) || //skip first change
            (!dataItem && !index && !parentDataItem && !parentIndex)) {
            return;
        }
        const oldIndex = (index || {}).previousValue || this.index;
        this.lookupService.replaceItem(oldIndex, this.treeItem, this.parentTreeItem);
    }
    moveNavigationItem(indexChange = {}) {
        const { currentValue, firstChange, previousValue } = indexChange;
        if (!firstChange && isPresent(currentValue) && isPresent(previousValue)) {
            this.navigationService.unregisterItem(this.id, previousValue);
            this.navigationService.registerItem(this.id, currentValue, this.isDisabled, this.isButton);
        }
    }
    updateNodeAvailability() {
        const service = this.navigationService;
        if (this.isDisabled || !this.isVisible) {
            service.activateClosest(this.index); // activate before unregister the item
        }
        else {
            service.activateFocusable();
        }
        service.unregisterItem(this.id, this.index);
        service.registerItem(this.id, this.index, this.isDisabled, this.isButton, this.isVisible);
    }
    setAriaAttributes() {
        this.setAttribute('aria-level', this.ib.level(this.index).toString());
        // don't render attributes when the component configuration doesn't allow the specified state
        this.setAttribute('aria-expanded', this.expandable ? this.isExpanded.toString() : null);
        this.setAttribute('aria-selected', this.selectable ? this.isSelected.toString() : null);
        this.setAttribute('aria-checked', this.checkable ? this.ariaChecked : null);
    }
    setDisabledClass() {
        this.setClass('k-disabled', this.isDisabled);
    }
    setClass(className, toggle) {
        const action = toggle ? 'addClass' : 'removeClass';
        this.renderer[action](this.element.nativeElement, className);
    }
    updateTabIndex() {
        this.setAttribute('tabIndex', this.isFocusable() ? '0' : '-1');
    }
    setAttribute(attr, value) {
        if (!isPresent(value)) {
            this.renderer.removeAttribute(this.element.nativeElement, attr);
            return;
        }
        this.renderer.setAttribute(this.element.nativeElement, attr, value);
    }
};
TreeViewItemDirective.ɵfac = function TreeViewItemDirective_Factory(t) { return new (t || TreeViewItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ExpandStateService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(TreeViewLookupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(IndexBuilderService)); };
TreeViewItemDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeViewItemDirective, selectors: [["", "kendoTreeViewItem", ""]], inputs: { role: "role", loadOnDemand: "loadOnDemand", isDisabled: "isDisabled", isVisible: "isVisible", isChecked: "isChecked", isExpanded: "isExpanded", isSelected: "isSelected", dataItem: "dataItem", index: "index", parentDataItem: "parentDataItem", parentIndex: "parentIndex", checkable: "checkable", selectable: "selectable", expandable: "expandable" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewItemDirective.prototype, "dataItem", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewItemDirective.prototype, "index", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewItemDirective.prototype, "parentDataItem", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewItemDirective.prototype, "parentIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewItemDirective.prototype, "role", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "loadOnDemand", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "checkable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "selectable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "expandable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TreeViewItemDirective.prototype, "isChecked", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "isDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemDirective.prototype, "isVisible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TreeViewItemDirective.prototype, "isExpanded", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TreeViewItemDirective.prototype, "isSelected", null);
TreeViewItemDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
        ExpandStateService,
        NavigationService,
        SelectionService,
        TreeViewLookupService,
        Renderer2,
        IndexBuilderService])
], TreeViewItemDirective);

/**
 * @hidden
 *
 * A directive which manages the expanded state of the TreeView.
 */
let TreeViewItemContentDirective = class TreeViewItemContentDirective {
    constructor(element, navigationService, selectionService, renderer) {
        this.element = element;
        this.navigationService = navigationService;
        this.selectionService = selectionService;
        this.renderer = renderer;
        this.initialSelection = false;
        this.isSelected = isSelected;
        this.subscriptions = new Subscription();
        this.subscriptions.add(this.navigationService.moves
            .subscribe(this.updateFocusClass.bind(this)));
        this.subscriptions.add(this.navigationService.selects
            .pipe(filter((index) => index === this.index))
            .subscribe((index) => this.selectionService.select(index, this.dataItem)));
        this.subscriptions.add(this.selectionService.changes
            .subscribe(() => {
            this.updateSelectionClass(this.isSelected(this.dataItem, this.index));
        }));
    }
    ngOnChanges(changes) {
        if (changes.initialSelection) {
            this.updateSelectionClass(this.initialSelection);
        }
        if (changes.index) {
            this.updateFocusClass();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    updateFocusClass() {
        this.render(this.navigationService.isActive(this.index), 'k-focus');
    }
    updateSelectionClass(selected) {
        this.render(selected, 'k-selected');
    }
    render(addClass, className) {
        const action = addClass ? 'addClass' : 'removeClass';
        this.renderer[action](this.element.nativeElement, className);
    }
};
TreeViewItemContentDirective.ɵfac = function TreeViewItemContentDirective_Factory(t) { return new (t || TreeViewItemContentDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
TreeViewItemContentDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeViewItemContentDirective, selectors: [["", "kendoTreeViewItemContent", ""]], inputs: { initialSelection: "initialSelection", isSelected: "isSelected", dataItem: "dataItem", index: "index" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeViewItemContentDirective.prototype, "dataItem", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeViewItemContentDirective.prototype, "index", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeViewItemContentDirective.prototype, "initialSelection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], TreeViewItemContentDirective.prototype, "isSelected", void 0);
TreeViewItemContentDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
        NavigationService,
        SelectionService,
        Renderer2])
], TreeViewItemContentDirective);

/**
 * @hidden
 *
 * Represents the CheckBox component of the Kendo UI TreeView for Angular.
 *
 */
let CheckBoxComponent = class CheckBoxComponent {
    constructor(element, renderer, changeDetector) {
        this.element = element;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        /**
         * Specifies the [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) of the component.
         */
        this.id = `_${guid()}`;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Specifies the size of the component.
         */
        this.size = 'medium';
        /**
         * Fires when the user changes the check state of the component.
         */
        this.checkStateChange = new EventEmitter();
        this.checkState = 'none';
    }
    //XXX: implement ComponentValueAccessor
    //XXX: focus/blur methods
    get classWrapper() { return true; }
    get indeterminate() {
        return this.checkState === 'indeterminate';
    }
    get checked() {
        return this.checkState === 'checked';
    }
    get checkBoxClasses() {
        return `k-checkbox ${this.size ? getSizeClass('checkbox', this.size) : ''} k-rounded-md`;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.element.nativeElement, "tabindex");
    }
    ngDoCheck() {
        this.checkState = this.isChecked(this.node, this.index);
    }
    handleChange(e) {
        const state = e.target.checked ? 'checked' : 'none';
        // update the View State so that Angular updates the input if the isChecked value is the same
        this.checkState = state;
        this.changeDetector.detectChanges();
        this.checkStateChange.emit(state);
    }
};
CheckBoxComponent.ɵfac = function CheckBoxComponent_Factory(t) { return new (t || CheckBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
CheckBoxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CheckBoxComponent, selectors: [["kendo-checkbox"]], hostVars: 2, hostBindings: function CheckBoxComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-checkbox-wrapper", ctx.classWrapper);
    } }, inputs: { id: "id", tabindex: "tabindex", size: "size", isChecked: "isChecked", node: "node", index: "index", labelText: "labelText" }, outputs: { checkStateChange: "checkStateChange" }, decls: 3, vars: 8, consts: [["type", "checkbox", 3, "id", "checked", "indeterminate", "tabindex", "change"], ["tabindex", "-1", 1, "k-checkbox-label", 3, "for"]], template: function CheckBoxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "input", 0);
        ɵngcc0.ɵɵlistener("change", function CheckBoxComponent_Template_input_change_0_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.checkBoxClasses);
        ɵngcc0.ɵɵproperty("id", ctx.id)("checked", ctx.checked)("indeterminate", ctx.indeterminate)("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("for", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.labelText);
    } }, encapsulation: 2 });
__decorate([
    HostBinding('class.k-checkbox-wrapper'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], CheckBoxComponent.prototype, "classWrapper", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckBoxComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CheckBoxComponent.prototype, "isChecked", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CheckBoxComponent.prototype, "node", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckBoxComponent.prototype, "index", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckBoxComponent.prototype, "labelText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], CheckBoxComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckBoxComponent.prototype, "size", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CheckBoxComponent.prototype, "checkStateChange", void 0);
CheckBoxComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ChangeDetectorRef])
], CheckBoxComponent);

const COMPONENT_DIRECTIVES = [
    CheckBoxComponent
];
/**
 * @hidden
 *
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the CheckBox component.
 */
let CheckBoxModule = class CheckBoxModule {
};
CheckBoxModule.ɵfac = function CheckBoxModule_Factory(t) { return new (t || CheckBoxModule)(); };
CheckBoxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CheckBoxModule });
CheckBoxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});

/**
 * A directive which enables the update of the initially provided data array during drag-and-drop.
 *
 * Either use this directive in combination with one of the data binding directives ([`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %})
 * or [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %})) which set their own edit handlers, or provide
 * your own [`editService`]({% slug api_treeview_editservice %}) to this directive. The latter subscribes to and calls the
 * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)
 * handlers when the corresponding events are triggered by the TreeView component.
 */
let DragAndDropEditingDirective = class DragAndDropEditingDirective {
    constructor(treeview) {
        this.treeview = treeview;
        this.subscriptions = new Subscription();
        this.subscriptions.add(this.treeview.addItem.subscribe(this.handleAdd.bind(this)));
        this.subscriptions.add(this.treeview.removeItem.subscribe(this.handleRemove.bind(this)));
    }
    /**
     * Specifies the handlers called on drag-and-drop [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem)
     * and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events.
     */
    set editService(service) {
        this.treeview.editService = service;
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    handleAdd(args) {
        if (!isPresent(this.treeview.editService)) {
            throw new Error('No `editService` provided. Either provide your own implementation or use this directive in combination with one of the data binding directives (`kendoTreeViewHierarchyBinding` or `kendoTreeViewFlatDataBinding`).');
        }
        this.treeview.editService.add(args);
    }
    handleRemove(args) {
        if (!isPresent(this.treeview.editService)) {
            throw new Error('No `editService` provided. Either provide your own implementation or use this directive in combination with one of the data binding directives (`kendoTreeViewHierarchyBinding` or `kendoTreeViewFlatDataBinding`).');
        }
        this.treeview.editService.remove(args);
    }
};
DragAndDropEditingDirective.ɵfac = function DragAndDropEditingDirective_Factory(t) { return new (t || DragAndDropEditingDirective)(ɵngcc0.ɵɵdirectiveInject(TreeViewComponent)); };
DragAndDropEditingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DragAndDropEditingDirective, selectors: [["", "kendoTreeViewDragAndDropEditing", ""]], inputs: { editService: "editService" } });
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DragAndDropEditingDirective.prototype, "editService", null);
DragAndDropEditingDirective = __decorate([ __metadata("design:paramtypes", [TreeViewComponent])
], DragAndDropEditingDirective);

const LOAD_MORE_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/treeview/load-more-button/';
/**
 * A directive that enables the display of only a limited amount of nodes per level
 * ([see example]({% slug loadmorebutton_treeview %})).
 */
let LoadMoreDirective = class LoadMoreDirective {
    constructor(treeview) {
        this.treeview = treeview;
        /**
         * Keeps track of the current page size of each node over expand/collapse cycles.
         */
        this.pageSizes = new Map();
        /**
         * Used as an identifier for the root page size as the root collection of nodes is not associated with a data item.
         */
        this.rootLevelId = guid();
        this.treeview.loadMoreService = {
            getInitialPageSize: this.getInitalPageSize.bind(this),
            getGroupSize: this.getGroupSize.bind(this),
            setGroupSize: this.setGroupSize.bind(this),
            getTotalNodesCount: this.getTotalNodesCount.bind(this)
        };
    }
    /**
     * Specifies the callback that will be called when the load more button is clicked.
     * Providing a function is only required when additional nodes are fetched on demand
     * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).
     */
    set loadMoreNodes(loadMoreNodes) {
        if (typeof loadMoreNodes === 'string') {
            return;
        }
        this.treeview.loadMoreService.loadMoreNodes = loadMoreNodes;
    }
    ngOnChanges() {
        this.verifySettings();
    }
    verifySettings() {
        if (!isDevMode()) {
            return;
        }
        if (!isPresent(this.pageSize)) {
            throw new Error(`To use the TreeView \`kendoTreeViewLoadMore\` directive, you need to assign a \`pageSize\` value. See ${LOAD_MORE_DOC_LINK$1}.`);
        }
        const loadMoreNodes = this.treeview.loadMoreService.loadMoreNodes;
        if (isPresent(loadMoreNodes) && typeof loadMoreNodes !== 'function') {
            throw new Error(`The passed value to the \`kendoTreeViewLoadMore\` directive must be a function that retrieves additional nodes. See ${LOAD_MORE_DOC_LINK$1}.`);
        }
        if (isPresent(loadMoreNodes) && !isPresent(this.totalField)) {
            throw new Error(`When a function to fetch additional nodes is provided to the \`kendoTreeViewLoadMore\` directive, the \`totalField\` and \`totalRootNodes\` values must also be provided. See ${LOAD_MORE_DOC_LINK$1}.`);
        }
    }
    getGroupSize(dataItem) {
        const itemKey = dataItem || this.rootLevelId;
        return this.pageSizes.has(itemKey) ? this.pageSizes.get(itemKey) : this.pageSize;
    }
    setGroupSize(dataItem, pageSize) {
        const itemKey = dataItem || this.rootLevelId;
        const normalizedSizeValue = pageSize > 0 ? pageSize : 0;
        this.pageSizes.set(itemKey, normalizedSizeValue);
    }
    getTotalNodesCount(dataItem, loadedNodesCount) {
        if (isPresent(dataItem) && isPresent(this.totalField)) {
            return dataItem[this.totalField];
        }
        else if (!isPresent(dataItem) && isPresent(this.totalRootNodes)) {
            return this.totalRootNodes;
        }
        else {
            return loadedNodesCount;
        }
    }
    getInitalPageSize() {
        return this.pageSize;
    }
};
LoadMoreDirective.ɵfac = function LoadMoreDirective_Factory(t) { return new (t || LoadMoreDirective)(ɵngcc0.ɵɵdirectiveInject(TreeViewComponent)); };
LoadMoreDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LoadMoreDirective, selectors: [["", "kendoTreeViewLoadMore", ""]], inputs: { loadMoreNodes: ["kendoTreeViewLoadMore", "loadMoreNodes"], pageSize: "pageSize", totalRootNodes: "totalRootNodes", totalField: "totalField" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input('kendoTreeViewLoadMore'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], LoadMoreDirective.prototype, "loadMoreNodes", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LoadMoreDirective.prototype, "pageSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LoadMoreDirective.prototype, "totalRootNodes", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LoadMoreDirective.prototype, "totalField", void 0);
LoadMoreDirective = __decorate([ __metadata("design:paramtypes", [TreeViewComponent])
], LoadMoreDirective);

const COMPONENT_DIRECTIVES$1 = [
    TreeViewComponent,
    TreeViewGroupComponent,
    TreeViewItemDirective,
    TreeViewItemContentDirective,
    NodeTemplateDirective,
    CheckDirective,
    DisableDirective,
    ExpandDirective,
    SelectDirective,
    HierarchyBindingDirective,
    LoadingIndicatorDirective,
    FlatDataBindingDirective,
    DragAndDropDirective,
    DragClueTemplateDirective,
    DragClueComponent,
    DropHintTemplateDirective,
    DropHintComponent,
    DragAndDropEditingDirective,
    LoadMoreDirective,
    LoadMoreButtonTemplateDirective
];
/**
 * @hidden
 */
let SharedModule = class SharedModule {
};
SharedModule.ɵfac = function SharedModule_Factory(t) { return new (t || SharedModule)(); };
SharedModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SharedModule });
SharedModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            CheckBoxModule,
            InputsModule
        ]] });

const EXPORTS = [
    TreeViewComponent,
    NodeTemplateDirective,
    CheckDirective,
    DisableDirective,
    ExpandDirective,
    SelectDirective,
    HierarchyBindingDirective,
    FlatDataBindingDirective,
    DragAndDropDirective,
    DragClueTemplateDirective,
    DropHintTemplateDirective,
    DragAndDropEditingDirective,
    LoadMoreDirective,
    LoadMoreButtonTemplateDirective
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the TreeView component.
 */
let TreeViewModule = class TreeViewModule {
};
TreeViewModule.ɵfac = function TreeViewModule_Factory(t) { return new (t || TreeViewModule)(); };
TreeViewModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TreeViewModule });
TreeViewModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[SharedModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExpandStateService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IndexBuilderService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingNotificationService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NodeChildrenService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NodeTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewNodeTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadMoreButtonTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewLoadMoreButtonTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataBoundComponent, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExpandableComponent, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectionService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewLookupService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.Default,
                exportAs: 'kendoTreeView',
                providers: providers,
                selector: 'kendo-treeview',
                template: `
        <span
            class="k-treeview-filter"
            *ngIf="filterable"
        >
            <kendo-textbox
                [size]="size"
                [value]="filter"
                [clearButton]="true"
                (valueChange)="filterChange.emit($event)"
                [placeholder]="filterInputPlaceholder"
            >
                <ng-template kendoTextBoxPrefixTemplate>
                    <span class="k-input-icon k-icon k-i-search"></span>
                </ng-template>
            </kendo-textbox>
        </span>
        <ul class="k-treeview-lines"
            kendoTreeViewGroup
            role="group"
            [size]="size"
            [loadOnDemand]="loadOnDemand"
            [checkboxes]="checkboxes"
            [expandIcons]="expandIcons"
            [selectable]="selectable"
            [touchActions]="touchActions"
            [children]="children"
            [hasChildren]="hasChildren"
            [isChecked]="isChecked"
            [isDisabled]="isDisabled"
            [isExpanded]="isExpanded"
            [isSelected]="isSelected"
            [isVisible]="isVisible"
            [nodeTemplateRef]="nodeTemplateRef?.templateRef"
            [loadMoreButtonTemplateRef]="loadMoreButtonTemplateRef?.templateRef"
            [textField]="textField"
            [nodes]="fetchNodes"
            [loadMoreService]="loadMoreService"
            [trackBy]="trackBy"
        >
        </ul>
        <ng-container #assetsContainer></ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ExpandStateService }, { type: NavigationService }, { type: NodeChildrenService }, { type: SelectionService }, { type: TreeViewLookupService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: DataChangeNotificationService }, { type: ɵngcc1.LocalizationService }]; }, { classNames: [{
            type: HostBinding,
            args: ["class.k-treeview"]
        }], role: [{
            type: HostBinding,
            args: ["attr.role"]
        }], filterInputPlaceholder: [{
            type: Input
        }], childrenLoaded: [{
            type: Output
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], expand: [{
            type: Output
        }], collapse: [{
            type: Output
        }], nodeDragStart: [{
            type: Output
        }], nodeDrag: [{
            type: Output
        }], filterStateChange: [{
            type: Output
        }], nodeDrop: [{
            type: Output
        }], nodeDragEnd: [{
            type: Output
        }], addItem: [{
            type: Output
        }], removeItem: [{
            type: Output
        }], checkedChange: [{
            type: Output
        }], selectionChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], nodeClick: [{
            type: Output
        }], nodeDblClick: [{
            type: Output
        }], trackBy: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], navigable: [{
            type: Input
        }], children: [{
            type: Input
        }], loadOnDemand: [{
            type: Input
        }], filterable: [{
            type: Input
        }], filter: [{
            type: Input
        }], direction: [{
            type: HostBinding,
            args: ["attr.dir"]
        }], animate: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['@.disabled']
        }], nodeTemplateRef: [{
            type: Input,
            args: ['nodeTemplate']
        }], loadMoreButtonTemplateRef: [{
            type: Input,
            args: ['loadMoreButtonTemplate']
        }], nodes: [{
            type: Input
        }], hasChildren: [{
            type: Input
        }], isChecked: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], size: [{
            type: Input
        }], assetsContainer: [{
            type: ViewChild,
            args: ['assetsContainer', { read: ViewContainerRef, static: true }]
        }], nodeTemplateQuery: [{
            type: ContentChild,
            args: [NodeTemplateDirective, { static: false }]
        }], loadMoreButtonTemplateQuery: [{
            type: ContentChild,
            args: [LoadMoreButtonTemplateDirective, { static: false }]
        }], textField: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewGroupComponent, [{
        type: Component,
        args: [{
                animations: [
                    trigger('toggle', [
                        transition('void => *', [
                            style({ height: 0 }),
                            animate('0.1s ease-in', style({ height: "*" }))
                        ]),
                        transition('* => void', [
                            style({ height: "*" }),
                            animate('0.1s ease-in', style({ height: 0 }))
                        ])
                    ])
                ],
                selector: '[kendoTreeViewGroup]',
                template: `
        <li
            *ngFor="let node of data; let index = index; trackBy: trackBy"
            class="k-treeview-item"
            [class.k-display-none]="!isVisible(node, nodeIndex(index))"
            kendoTreeViewItem
            [attr.aria-setsize]="totalNodesCount"
            [dataItem]="node"
            [index]="nodeIndex(index)"
            [parentDataItem]="parentDataItem"
            [parentIndex]="parentIndex"
            [loadOnDemand]="loadOnDemand"
            [checkable]="checkboxes"
            [isChecked]="isChecked(node, nodeIndex(index))"
            [isDisabled]="disabled || isDisabled(node, nodeIndex(index))"
            [isVisible]="isVisible(node, nodeIndex(index))"
            [expandable]="expandIcons && hasChildren(node)"
            [isExpanded]="isExpanded(node, nodeIndex(index))"
            [selectable]="selectable"
            [isSelected]="isSelected(node, nodeIndex(index))"
            [attr.data-treeindex]="nodeIndex(index)"
        >
            <div class="k-treeview-mid">
                <span
                    class="k-treeview-toggle"
                    [kendoTreeViewLoading]="nodeIndex(index)"
                    (click)="expandNode(nodeIndex(index), node, !isExpanded(node, nodeIndex(index)))"
                    *ngIf="expandIcons && hasChildren(node)"
                >
                    <span
                        class="k-icon"
                        [class.k-i-collapse]="isExpanded(node, nodeIndex(index))"
                        [class.k-i-expand]="!isExpanded(node, nodeIndex(index))"
                    >
                    </span>
                </span>
                <kendo-checkbox
                    *ngIf="checkboxes"
                    [size]="size"
                    [node]="node"
                    [index]="nodeIndex(index)"
                    [isChecked]="isChecked"
                    (checkStateChange)="checkNode(nodeIndex(index))"
                    tabindex="-1"
                ></kendo-checkbox>
                <span kendoTreeViewItemContent
                    [attr.data-treeindex]="nodeIndex(index)"
                    [dataItem]="node"
                    [index]="nodeIndex(index)"
                    [initialSelection]="isSelected(node, nodeIndex(index))"
                    [isSelected]="isSelected"
                    class="k-treeview-leaf"
                    [style.touch-action]="touchActions ? '' : 'none'"
                >
                    <span class="k-treeview-leaf-text">
                        <ng-container [ngSwitch]="hasTemplate">
                            <ng-container *ngSwitchCase="true">
                                <ng-template
                                    [ngTemplateOutlet]="nodeTemplateRef"
                                    [ngTemplateOutletContext]="{
                                        $implicit: node,
                                        index: nodeIndex(index)
                                    }"
                                >
                                </ng-template>
                            </ng-container>
                            <ng-container *ngSwitchDefault>
                                {{nodeText(node)}}
                            </ng-container>
                        </ng-container>
                    </span>
                </span>
            </div>
            <ul
                *ngIf="isExpanded(node, nodeIndex(index)) && hasChildren(node)"
                kendoTreeViewGroup
                role="group"
                [nodes]="fetchChildren"
                [loadOnDemand]="loadOnDemand"
                [checkboxes]="checkboxes"
                [expandIcons]="expandIcons"
                [selectable]="selectable"
                [touchActions]="touchActions"
                [children]="children"
                [hasChildren]="hasChildren"
                [isChecked]="isChecked"
                [isDisabled]="isDisabled"
                [disabled]="disabled || isDisabled(node, nodeIndex(index))"
                [isExpanded]="isExpanded"
                [isSelected]="isSelected"
                [isVisible]="isVisible"
                [nodeTemplateRef]="nodeTemplateRef"
                [loadMoreButtonTemplateRef]="loadMoreButtonTemplateRef"
                [parentIndex]="nodeIndex(index)"
                [parentDataItem]="node"
                [textField]="nextFields"
                [loadMoreService]="loadMoreService"
                [@toggle]="true"
                [trackBy]="trackBy"
            >
            </ul>
        </li>
        <li
            *ngIf="initialNodesLoaded && moreNodesAvailable"
            class="k-treeview-item"
            [class.k-treeview-load-more-checkboxes-container]="checkboxes"
            kendoTreeViewItem
            role="button"
            [selectable]="false"
            [checkable]="false"
            [expandable]="false"
            [index]="loadMoreButtonIndex"
            [parentDataItem]="parentDataItem"
            [parentIndex]="parentIndex"
            [attr.data-treeindex]="loadMoreButtonIndex"
        >
            <div class="k-treeview-mid">
                <span
                    *ngIf="loadingMoreNodes"
                    class="k-icon k-i-loading k-i-expand"
                >
                </span>
                <span
                    class="k-treeview-leaf k-treeview-load-more-button"
                    [attr.data-treeindex]="loadMoreButtonIndex"
                    kendoTreeViewItemContent
                    [index]="loadMoreButtonIndex"
                >
                    <span class="k-treeview-leaf-text">
                        <ng-template
                            *ngIf="loadMoreButtonTemplateRef"
                            [ngTemplateOutlet]="loadMoreButtonTemplateRef"
                            [ngTemplateOutletContext]="{
                                index: loadMoreButtonIndex
                            }"
                        >
                        </ng-template>
                        <ng-container *ngIf="!loadMoreButtonTemplateRef">
                            Load more
                        </ng-container>
                    </span>
                </span>
            </div>
        </li>
    `
            }]
    }], function () { return [{ type: ExpandStateService }, { type: LoadingNotificationService }, { type: IndexBuilderService }, { type: TreeViewLookupService }, { type: NavigationService }, { type: NodeChildrenService }, { type: DataChangeNotificationService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { kGroupClass: [{
            type: HostBinding,
            args: ["class.k-treeview-group"]
        }], role: [{
            type: HostBinding,
            args: ["attr.role"]
        }], loadOnDemand: [{
            type: Input
        }], textField: [{
            type: Input
        }], size: [{
            type: Input
        }], isChecked: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], children: [{
            type: Input
        }], hasChildren: [{
            type: Input
        }], checkboxes: [{
            type: Input
        }], expandIcons: [{
            type: Input
        }], disabled: [{
            type: Input
        }], selectable: [{
            type: Input
        }], touchActions: [{
            type: Input
        }], trackBy: [{
            type: Input
        }], nodes: [{
            type: Input
        }], parentDataItem: [{
            type: Input
        }], parentIndex: [{
            type: Input
        }], nodeTemplateRef: [{
            type: Input
        }], loadMoreButtonTemplateRef: [{
            type: Input
        }], loadMoreService: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewCheckable]' }]
    }], function () { return [{ type: TreeViewComponent }, { type: ɵngcc0.NgZone }]; }, { checkedKeysChange: [{
            type: Output
        }], isChecked: [{
            type: Input
        }], checkKey: [{
            type: Input,
            args: ["checkBy"]
        }], checkedKeys: [{
            type: Input
        }], checkable: [{
            type: Input,
            args: ['kendoTreeViewCheckable']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DisableDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewDisable]' }]
    }], function () { return [{ type: TreeViewComponent }, { type: ɵngcc0.ChangeDetectorRef }]; }, { disabledKeys: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], disableKey: [{
            type: Input,
            args: ["kendoTreeViewDisable"]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExpandDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewExpandable]' }]
    }], function () { return [{ type: ExpandableComponent }]; }, { expandOnFilter: [{
            type: Input
        }], expandedKeysChange: [{
            type: Output
        }], isExpanded: [{
            type: Input
        }], expandKey: [{
            type: Input,
            args: ["expandBy"]
        }], expandedKeys: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewSelectable]' }]
    }], function () { return [{ type: TreeViewComponent }]; }, { selectedKeysChange: [{
            type: Output
        }], isSelected: [{
            type: Input
        }], getAriaMultiselectable: [{
            type: HostBinding,
            args: ['attr.aria-multiselectable']
        }], selectKey: [{
            type: Input,
            args: ['selectBy']
        }], selection: [{
            type: Input,
            args: ['kendoTreeViewSelectable']
        }], selectedKeys: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragClueComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-treeview-drag-clue',
                template: `
        <ng-container *ngIf="!template">
            <span class="k-icon {{statusIconClass}} k-drag-status"></span>
            <span>{{text}}</span>
        </ng-container>

        <ng-template
            *ngIf="template"
            [ngTemplateOutlet]="template"
            [ngTemplateOutletContext]="{
                text: text,
                action: action,
                sourceItem: sourceItem,
                destinationItem: destinationItem
            }"
        >
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { hostClasses: [{
            type: HostBinding,
            args: ['class.k-header']
        }, {
            type: HostBinding,
            args: ['class.k-drag-clue']
        }], posistionStyle: [{
            type: HostBinding,
            args: ['style.position']
        }] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragClueService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropHintComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-treeview-drop-hint',
                template: `
        <div
            *ngIf="!template"
            class="k-drop-hint k-drop-hint-h"
        >
            <div class='k-drop-hint-start'></div>
            <div class='k-drop-hint-line'></div>
        </div>

        <ng-template
            *ngIf="template"
            [ngTemplateOutlet]="template"
            [ngTemplateOutletContext]="{
                action: action,
                sourceItem: sourceItem,
                destinationItem: destinationItem
            }"
        >
        <ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { hostClass: [{
            type: HostBinding,
            args: ['class.k-drop-hint-container']
        }], position: [{
            type: HostBinding,
            args: ['style.position']
        }], pointerEvents: [{
            type: HostBinding,
            args: ['style.pointer-events']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropHintService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragClueTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewDragClueTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropHintTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewDropHintTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragAndDropDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewDragAndDrop]',
                providers: [
                    DragClueService,
                    DropHintService
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: TreeViewComponent }, { type: DragClueService }, { type: DropHintService }]; }, { allowCopy: [{
            type: Input
        }], dropZoneTreeViews: [{
            type: Input
        }], startDragAfter: [{
            type: Input
        }], autoScroll: [{
            type: Input
        }], userSelectStyle: [{
            type: HostBinding,
            args: ['style.user-select']
        }, {
            type: HostBinding,
            args: ['style.-ms-user-select']
        }, {
            type: HostBinding,
            args: ['style.-moz-user-select']
        }, {
            type: HostBinding,
            args: ['style.-webkit-user-select']
        }], dragClueTemplate: [{
            type: ContentChild,
            args: [DragClueTemplateDirective, { static: false }]
        }], dropHintTemplate: [{
            type: ContentChild,
            args: [DropHintTemplateDirective, { static: false }]
        }] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HierarchyBindingDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewHierarchyBinding]' }]
    }], function () { return [{ type: DataBoundComponent }, { type: DragAndDropDirective, decorators: [{
                type: Optional
            }, {
                type: Host
            }] }]; }, { loadOnDemand: [{
            type: Input
        }], childrenField: [{
            type: Input
        }], nodes: [{
            type: Input
        }], isVisible: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingIndicatorDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewLoading]' }]
    }], function () { return [{ type: ExpandStateService }, { type: LoadingNotificationService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { loading: [{
            type: HostBinding,
            args: ["class.k-i-loading"]
        }], index: [{
            type: Input,
            args: ["kendoTreeViewLoading"]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatDataBindingDirective, [{
        type: Directive,
        args: [{ selector: "[kendoTreeViewFlatDataBinding]" }]
    }], function () { return [{ type: DataBoundComponent }]; }, { loadOnDemand: [{
            type: Input
        }], nodes: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], parentIdField: [{
            type: Input
        }], idField: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewItemDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewItem]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ExpandStateService }, { type: NavigationService }, { type: SelectionService }, { type: TreeViewLookupService }, { type: ɵngcc0.Renderer2 }, { type: IndexBuilderService }]; }, { role: [{
            type: Input
        }], loadOnDemand: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], isChecked: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], dataItem: [{
            type: Input
        }], index: [{
            type: Input
        }], parentDataItem: [{
            type: Input
        }], parentIndex: [{
            type: Input
        }], checkable: [{
            type: Input
        }], selectable: [{
            type: Input
        }], expandable: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewItemContentDirective, [{
        type: Directive,
        args: [{ selector: '[kendoTreeViewItemContent]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NavigationService }, { type: SelectionService }, { type: ɵngcc0.Renderer2 }]; }, { initialSelection: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], dataItem: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckBoxComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-checkbox',
                template: `
        <input
            type="checkbox"
            [class]="checkBoxClasses"
            [id]="id"
            [checked]="checked"
            [indeterminate]="indeterminate"
            [tabindex]="tabindex"
            (change)="handleChange($event)"
        />
        <label
            class="k-checkbox-label"
            tabindex="-1"
            [for]="id"
        >{{labelText}}</label>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { id: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], size: [{
            type: Input
        }], checkStateChange: [{
            type: Output
        }], classWrapper: [{
            type: HostBinding,
            args: ['class.k-checkbox-wrapper']
        }], isChecked: [{
            type: Input
        }], node: [{
            type: Input
        }], index: [{
            type: Input
        }], labelText: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES],
                exports: [COMPONENT_DIRECTIVES]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckBoxModule, { declarations: [CheckBoxComponent], exports: [CheckBoxComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragAndDropEditingDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewDragAndDropEditing]'
            }]
    }], function () { return [{ type: TreeViewComponent }]; }, { editService: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadMoreDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoTreeViewLoadMore]'
            }]
    }], function () { return [{ type: TreeViewComponent }]; }, { loadMoreNodes: [{
            type: Input,
            args: ['kendoTreeViewLoadMore']
        }], pageSize: [{
            type: Input
        }], totalRootNodes: [{
            type: Input
        }], totalField: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SharedModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES$1],
                exports: [COMPONENT_DIRECTIVES$1],
                imports: [
                    CommonModule,
                    CheckBoxModule,
                    InputsModule
                ],
                entryComponents: [
                    DragClueComponent,
                    DropHintComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SharedModule, { declarations: function () { return [TreeViewComponent, TreeViewGroupComponent, TreeViewItemDirective, TreeViewItemContentDirective, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, LoadingIndicatorDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DragClueComponent, DropHintTemplateDirective, DropHintComponent, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective]; }, imports: function () { return [CommonModule, CheckBoxModule, InputsModule]; }, exports: function () { return [TreeViewComponent, TreeViewGroupComponent, TreeViewItemDirective, TreeViewItemContentDirective, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, LoadingIndicatorDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DragClueComponent, DropHintTemplateDirective, DropHintComponent, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewModule, [{
        type: NgModule,
        args: [{
                exports: [EXPORTS],
                imports: [SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeViewModule, { imports: [SharedModule], exports: [TreeViewComponent, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DropHintTemplateDirective, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective] }); })();


/**
 * Generated bundle index. Do not edit.
 */

export { CheckBoxComponent, CheckBoxModule, DataChangeNotificationService, DragClueComponent, DragClueService, DropHintComponent, DropHintService, DragAndDropAssetService, PreventableEvent, ExpandStateService, FilteringBase, IndexBuilderService, LoadingIndicatorDirective, LoadingNotificationService, NavigationService, NodeChildrenService, SelectionService, SharedModule, TreeViewGroupComponent, TreeViewItemContentDirective, TreeViewItemDirective, TreeViewLookupService, TreeViewComponent, TreeViewModule, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, DataBoundComponent, ExpandableComponent, HierarchyBindingDirective, FlatDataBindingDirective, DragAndDropDirective, DragAndDropEditingDirective, DropHintTemplateDirective, DragClueTemplateDirective, DropAction, DropPosition, TreeItemDropEvent, TreeItemDragStartEvent, TreeItemDragEvent, LoadMoreDirective, LoadMoreButtonTemplateDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,