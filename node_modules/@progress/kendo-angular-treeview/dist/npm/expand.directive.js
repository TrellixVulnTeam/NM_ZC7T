/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var expandable_component_1 = require("./expandable-component");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var utils_1 = require("./utils");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var DEFAULT_FILTER_EXPAND_SETTINGS = {
    maxAutoExpandResults: -1,
    expandMatches: false,
    expandedOnClear: "none"
};
/**
 * A directive which manages the expanded state of the TreeView.
 * ([see example]({% slug expandedstate_treeview %})).
 */
var ExpandDirective = /** @class */ (function () {
    function ExpandDirective(component) {
        var _this = this;
        this.component = component;
        /**
         * Whether or not to auto-expand the nodes leading from the root node to each filter result.
         * To fine-tune this behavior, pass a [`FilterExpandSettings`]({% slug api_treeview_filterexpandsettings %}) object to this input.
         * @default false
         */
        this.expandOnFilter = false;
        /**
         * Fires when the `expandedKeys` collection was updated.
         */
        this.expandedKeysChange = new core_1.EventEmitter();
        this.subscriptions = new rxjs_1.Subscription();
        /**
         * Reflectes the internal `expandedKeys` state.
         */
        this.state = new Set();
        this.originalExpandedKeys = new Set();
        this.isFiltered = false;
        /**
         * Fills array with the correct expand keys according to wrapper metadata.
         */
        this.updateExpandedNodes = function (collection, node, autoExpandMatches) {
            if (node.containsMatches || node.isMatch && autoExpandMatches && utils_1.isArrayWithAtLeastOneItem(node.children)) {
                collection.push(_this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (utils_1.isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(function (child) {
                    _this.updateExpandedNodes(collection, child, autoExpandMatches);
                });
            }
        };
        /**
         * Fills array with the expand key of every node.
         */
        this.getEveryExpandKey = function (collection, node) {
            if (utils_1.isArrayWithAtLeastOneItem(node.children)) {
                collection.push(_this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (utils_1.isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(function (child) {
                    _this.getEveryExpandKey(collection, child);
                });
            }
        };
        this.subscriptions.add(rxjs_1.merge(this.component.expand.pipe(operators_1.map(function (e) { return (tslib_1.__assign({ expand: true }, e)); })), this.component.collapse.pipe(operators_1.map(function (e) { return (tslib_1.__assign({ expand: false }, e)); }))).subscribe(this.toggleExpand.bind(this)));
        if (this.component.filterStateChange) {
            this.subscriptions.add(this.component.filterStateChange.subscribe(this.handleAutoExpand.bind(this)));
        }
        this.component.isExpanded = function (dataItem, index) {
            return _this.state.has(_this.itemKey({ dataItem: dataItem, index: index }));
        };
    }
    Object.defineProperty(ExpandDirective.prototype, "isExpanded", {
        /**
         * @hidden
         */
        set: function (value) {
            this.component.isExpanded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpandDirective.prototype, "filterExpandSettings", {
        get: function () {
            var settings = utils_1.isBoolean(this.expandOnFilter) ? { enabled: this.expandOnFilter } : tslib_1.__assign({}, this.expandOnFilter, { enabled: true });
            return Object.assign({}, DEFAULT_FILTER_EXPAND_SETTINGS, settings);
        },
        enumerable: true,
        configurable: true
    });
    ExpandDirective.prototype.ngOnChanges = function (changes) {
        if (kendo_angular_common_1.isChanged('expandedKeys', changes, false) && changes.expandedKeys.currentValue !== this.lastChange) {
            this.state = new Set(changes.expandedKeys.currentValue);
        }
    };
    ExpandDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    ExpandDirective.prototype.itemKey = function (e) {
        if (this.expandKey) {
            if (typeof this.expandKey === "string") {
                return e.dataItem[this.expandKey];
            }
            if (typeof this.expandKey === "function") {
                return this.expandKey(e);
            }
        }
        return e.index;
    };
    ExpandDirective.prototype.toggleExpand = function (_a) {
        var index = _a.index, dataItem = _a.dataItem, expand = _a.expand;
        var key = this.itemKey({ index: index, dataItem: dataItem });
        var isExpanded = this.state.has(key);
        var notify = false;
        if (isExpanded && !expand) {
            this.state.delete(key);
            notify = true;
        }
        else if (!isExpanded && expand) {
            this.state.add(key);
            notify = true;
        }
        if (notify) {
            this.notify();
        }
    };
    ExpandDirective.prototype.handleAutoExpand = function (_a) {
        var _this = this;
        var nodes = _a.nodes, matchCount = _a.matchCount, term = _a.term;
        if (!this.filterExpandSettings.enabled) {
            return;
        }
        var _b = this.filterExpandSettings, maxAutoExpandResults = _b.maxAutoExpandResults, autoExpandMatches = _b.expandMatches, expandedOnClear = _b.expandedOnClear;
        if (!this.isFiltered) {
            this.originalExpandedKeys = new Set(this.state);
        }
        var exitingFilteredState = this.isFiltered && !term;
        var maxExceeded = maxAutoExpandResults !== -1 && matchCount > maxAutoExpandResults;
        var exitAutoExpandedState = exitingFilteredState || maxExceeded;
        if (exitAutoExpandedState) {
            switch (expandedOnClear) {
                case "initial": {
                    if (!utils_1.sameValues(this.state, this.originalExpandedKeys)) {
                        this.state = this.originalExpandedKeys;
                        this.notify();
                    }
                    break;
                }
                case "all": {
                    this.state = new Set(nodes.reduce(function (acc, rootNode) {
                        _this.getEveryExpandKey(acc, rootNode);
                        return acc;
                    }, []));
                    this.notify();
                    break;
                }
                case "unchanged": {
                    break;
                }
                case "none":
                default: {
                    if (this.state.size !== 0) {
                        this.state.clear();
                        this.notify();
                    }
                    break;
                }
            }
            this.isFiltered = false;
            return;
        }
        var indicesToExpand = new Set(nodes.reduce(function (acc, rootNode) {
            _this.updateExpandedNodes(acc, rootNode, autoExpandMatches);
            return acc;
        }, []));
        if (!utils_1.sameValues(this.state, indicesToExpand)) {
            this.state = indicesToExpand;
            this.notify();
        }
        this.isFiltered = true;
    };
    ExpandDirective.prototype.notify = function () {
        this.lastChange = Array.from(this.state);
        this.expandedKeysChange.emit(this.lastChange);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], ExpandDirective.prototype, "isExpanded", null);
    tslib_1.__decorate([
        core_1.Input("expandBy"),
        tslib_1.__metadata("design:type", Object)
    ], ExpandDirective.prototype, "expandKey", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ExpandDirective.prototype, "expandOnFilter", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ExpandDirective.prototype, "expandedKeysChange", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], ExpandDirective.prototype, "expandedKeys", void 0);
    ExpandDirective = tslib_1.__decorate([
        core_1.Directive({ selector: '[kendoTreeViewExpandable]' }),
        tslib_1.__metadata("design:paramtypes", [expandable_component_1.ExpandableComponent])
    ], ExpandDirective);
    return ExpandDirective;
}());
exports.ExpandDirective = ExpandDirective;
