/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
/* tslint:disable:no-null-keyword */
/* tslint:disable:no-bitwise */
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_common_1 = require("@progress/kendo-common");
var resolvedPromise = Promise.resolve(null);
/**
 * @hidden
 */
exports.isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
exports.tick = function (f) { return (resolvedPromise.then(f)); };
/**
 * @hidden
 */
function isDocumentNode(container) {
    return container.nodeType === 9;
}
/**
 * @hidden
 */
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    var matches = Element.prototype.matches ?
        function (el, sel) { return el.matches(sel); }
        : function (el, sel) { return el.msMatchesSelector(sel); };
    var node = element;
    while (node && !isDocumentNode(node)) {
        if (matches(node, selector)) {
            return node;
        }
        node = node.parentNode;
    }
}
exports.closest = closest;
/**
 * @hidden
 */
exports.replaceMessagePlaceholder = function (message, name, value) {
    return message.replace(new RegExp("{\\s*" + name + "\\s*}", 'g'), value);
};
/**
 * @hidden
 */
exports.SIZES = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
var ROUNDNESS = {
    small: 'sm',
    medium: 'md',
    large: 'lg',
    full: 'full'
};
/**
 * @hidden
 *
 * Returns the styling classes to be added and removed
 */
exports.getStylingClasses = function (componentType, stylingOption, previousValue, newValue) {
    switch (stylingOption) {
        case 'size':
            return {
                toRemove: "k-" + componentType + "-" + exports.SIZES[previousValue],
                toAdd: newValue ? "k-" + componentType + "-" + exports.SIZES[newValue] : null
            };
        case 'rounded':
            return {
                toRemove: "k-rounded-" + ROUNDNESS[previousValue],
                toAdd: newValue ? "k-rounded-" + ROUNDNESS[newValue] : null
            };
        case 'fillMode':
        case 'shape':
            return {
                toRemove: "k-" + componentType + "-" + previousValue,
                toAdd: newValue ? "k-" + componentType + "-" + newValue : null
            };
        default:
            break;
    }
};
/**
 * @hidden
 *
 * Returns the themeColor classes to be added and removed
 */
exports.getThemeColorClasses = function (componentType, prevFillMode, fillMode, previousValue, newValue) {
    return {
        toRemove: "k-" + componentType + "-" + prevFillMode + "-" + previousValue,
        toAdd: newValue ? "k-" + componentType + "-" + fillMode + "-" + newValue : null
    };
};
/**
 * @hidden
 *
 * Returns true if the used browser is Firefox.
 */
exports.isFirefox = function (userAgent) {
    var desktopBrowser = kendo_common_1.detectDesktopBrowser(userAgent);
    var mobileOS = kendo_common_1.detectMobileOS(userAgent);
    return (desktopBrowser && desktopBrowser.mozilla) || (mobileOS && mobileOS.browser === 'firefox');
};
