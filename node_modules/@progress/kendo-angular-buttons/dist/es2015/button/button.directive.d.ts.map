{"version":3,"file":"button.directive.d.ts","sources":["button.directive.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { SimpleChanges, ElementRef, EventEmitter, Renderer2 as Renderer, OnDestroy, NgZone, AfterViewInit } from '@angular/core';\nimport { KendoButtonService } from './button.service';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ButtonFillMode, ButtonRounded, ButtonShape, ButtonSize, ButtonThemeColor } from '../common/models';\n/**\n * Represents the Kendo UI Button component for Angular.\n */\nexport declare class ButtonDirective implements OnDestroy, AfterViewInit {\n    private service;\n    private ngZone;\n    /**\n     * Provides visual styling that indicates if the Button is active.\n     * By default, `toggleable` is set to `false`.\n     */\n    toggleable: boolean;\n    /**\n     * Backwards-compatible alias\n     *\n     * @hidden\n     */\n    /**\n    * @hidden\n    */\n    togglable: boolean;\n    /**\n     * Sets the selected state of the Button.\n     */\n    selected: boolean;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Defines the name for an existing icon in a Kendo UI theme.\n     * The icon is rendered inside the Button by a `span.k-icon` element.\n     */\n    icon: string;\n    /**\n     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;\n     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.\n     */\n    iconClass: string;\n    /**\n     * Defines a URL which is used for an `img` element inside the Button.\n     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.\n     */\n    imageUrl: string;\n    /**\n     * If set to `true`, it disables the Button.\n     */\n    disabled: boolean;\n    /**\n     * The size property specifies the padding of the Button\n     * ([see example]({% slug appearance_button %}#toc-size)).\n     *\n     * The possible values are:\n     * * `'small'`\n     * * `'medium'` (default)\n     * * `'large'`\n     * * `null`\n     */\n    size: ButtonSize;\n    /**\n     * The rounded property specifies the border radius of the Button\n     * ([see example]({% slug appearance_button %}#toc-rounded)).\n     *\n     * The possible values are:\n     * * `'small'`\n     * * `'medium'` (default)\n     * * `'large'`\n     * * `'full'`\n     * * `null`\n     */\n    rounded: ButtonRounded;\n    /**\n     * The fillMode property specifies the background and border styles of the Button\n     * ([see example]({% slug appearance_button %}#toc-fillMode)).\n     *\n     * The possible values are:\n     * * `'flat'`\n     * * `'solid'` (default)\n     * * `'outline'`\n     * * `'clear'`\n     * * `'link'`\n     * * `null`\n     */\n    fillMode: ButtonFillMode;\n    /**\n     * The Button allows you to specify predefined theme colors.\n     * The theme color will be applied as a background and border color while also amending the text color accordingly\n     * ([see example]({% slug appearance_button %}#toc-themeColor)).\n     *\n     * The possible values are:\n     * * `'base'` (default)\n     * * `'primary'`\n     * * `'secondary'`\n     * * `'tertiary'`\n     * * `'info'`\n     * * `'success'`\n     * * `'warning'`\n     * * `'error'`\n     * * `'dark'`\n     * * `'light`'\n     * * `'inverse'`\n     */\n    themeColor: ButtonThemeColor;\n    /**\n     * The shape property specifies if the Button will form a rectangle or square.\n     * ([see example]({% slug appearance_button %}#toc-shape)).\n     *\n     * The possible values are:\n     * * `'square'`\n     * * `'rectangle'` (default)\n     */\n    shape: ButtonShape;\n    /**\n     * @hidden\n     */\n    role: string;\n    /**\n     * Fires each time the selected state of a toggleable button is changed.\n     *\n     * The event argument is the new selected state (boolean).\n     */\n    selectedChange: EventEmitter<any>;\n    /**\n     * Fires each time the user clicks the button.\n     */\n    click: EventEmitter<any>;\n    element: HTMLElement;\n    renderer: Renderer;\n    isDisabled: boolean;\n    isIcon: boolean;\n    isIconClass: boolean;\n    imageNode: HTMLImageElement;\n    iconNode: HTMLElement;\n    iconSpanNode: HTMLElement;\n    private _size;\n    private _rounded;\n    private _shape;\n    private _fillMode;\n    private _themeColor;\n    private localizationChangeSubscription;\n    private _focused;\n    private direction;\n    private _selected;\n    private deferTimeout;\n    private domEvents;\n    isFocused: boolean;\n    readonly classButton: boolean;\n    readonly isToggleable: boolean;\n    readonly roleSetter: string;\n    readonly classDisabled: boolean;\n    readonly classActive: boolean;\n    readonly getDirection: string;\n    /**\n     * @hidden\n     */\n    onFocus(): void;\n    /**\n     * @hidden\n     */\n    onBlur(): void;\n    /**\n     * @hidden\n     */\n    primary: boolean;\n    /**\n     * @hidden\n     */\n    look: 'flat' | 'outline' | 'clear' | 'default';\n    constructor(element: ElementRef, renderer: Renderer, service: KendoButtonService, localization: LocalizationService, ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(change: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the Button component.\n     */\n    focus(): void;\n    /**\n     * Blurs the Button component.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    setAttribute(attribute: string, value: string): void;\n    /**\n     * @hidden\n     */\n    removeAttribute(attribute: string): void;\n    /**\n     * @hidden\n     *\n     * Internal setter that triggers selectedChange\n     */\n    setSelected(value: boolean): void;\n    private toggleAriaPressed;\n    private hasText;\n    private addImgIcon;\n    private addIcon;\n    private addTextSpan;\n    private prependChild;\n    private defer;\n    private iconSetter;\n    private removeImageNode;\n    private removeIconNode;\n    private updateIconNode;\n    private setIconTextClasses;\n    private toggleClass;\n    private _onButtonClick;\n    private handleClasses;\n    private handleThemeColor;\n}\n"]}