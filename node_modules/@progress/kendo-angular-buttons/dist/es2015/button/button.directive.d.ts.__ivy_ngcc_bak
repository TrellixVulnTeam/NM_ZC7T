/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChanges, ElementRef, EventEmitter, Renderer2 as Renderer, OnDestroy, NgZone, AfterViewInit } from '@angular/core';
import { KendoButtonService } from './button.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ButtonFillMode, ButtonRounded, ButtonShape, ButtonSize, ButtonThemeColor } from '../common/models';
/**
 * Represents the Kendo UI Button component for Angular.
 */
export declare class ButtonDirective implements OnDestroy, AfterViewInit {
    private service;
    private ngZone;
    /**
     * Provides visual styling that indicates if the Button is active.
     * By default, `toggleable` is set to `false`.
     */
    toggleable: boolean;
    /**
     * Backwards-compatible alias
     *
     * @hidden
     */
    /**
    * @hidden
    */
    togglable: boolean;
    /**
     * Sets the selected state of the Button.
     */
    selected: boolean;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    imageUrl: string;
    /**
     * If set to `true`, it disables the Button.
     */
    disabled: boolean;
    /**
     * The size property specifies the padding of the Button
     * ([see example]({% slug appearance_button %}#toc-size)).
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (default)
     * * `'large'`
     * * `null`
     */
    size: ButtonSize;
    /**
     * The rounded property specifies the border radius of the Button
     * ([see example]({% slug appearance_button %}#toc-rounded)).
     *
     * The possible values are:
     * * `'small'`
     * * `'medium'` (default)
     * * `'large'`
     * * `'full'`
     * * `null`
     */
    rounded: ButtonRounded;
    /**
     * The fillMode property specifies the background and border styles of the Button
     * ([see example]({% slug appearance_button %}#toc-fillMode)).
     *
     * The possible values are:
     * * `'flat'`
     * * `'solid'` (default)
     * * `'outline'`
     * * `'clear'`
     * * `'link'`
     * * `null`
     */
    fillMode: ButtonFillMode;
    /**
     * The Button allows you to specify predefined theme colors.
     * The theme color will be applied as a background and border color while also amending the text color accordingly
     * ([see example]({% slug appearance_button %}#toc-themeColor)).
     *
     * The possible values are:
     * * `'base'` (default)
     * * `'primary'`
     * * `'secondary'`
     * * `'tertiary'`
     * * `'info'`
     * * `'success'`
     * * `'warning'`
     * * `'error'`
     * * `'dark'`
     * * `'light`'
     * * `'inverse'`
     */
    themeColor: ButtonThemeColor;
    /**
     * The shape property specifies if the Button will form a rectangle or square.
     * ([see example]({% slug appearance_button %}#toc-shape)).
     *
     * The possible values are:
     * * `'square'`
     * * `'rectangle'` (default)
     */
    shape: ButtonShape;
    /**
     * @hidden
     */
    role: string;
    /**
     * Fires each time the selected state of a toggleable button is changed.
     *
     * The event argument is the new selected state (boolean).
     */
    selectedChange: EventEmitter<any>;
    /**
     * Fires each time the user clicks the button.
     */
    click: EventEmitter<any>;
    element: HTMLElement;
    renderer: Renderer;
    isDisabled: boolean;
    isIcon: boolean;
    isIconClass: boolean;
    imageNode: HTMLImageElement;
    iconNode: HTMLElement;
    iconSpanNode: HTMLElement;
    private _size;
    private _rounded;
    private _shape;
    private _fillMode;
    private _themeColor;
    private localizationChangeSubscription;
    private _focused;
    private direction;
    private _selected;
    private deferTimeout;
    private domEvents;
    isFocused: boolean;
    readonly classButton: boolean;
    readonly isToggleable: boolean;
    readonly roleSetter: string;
    readonly classDisabled: boolean;
    readonly classActive: boolean;
    readonly getDirection: string;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    onBlur(): void;
    /**
     * @hidden
     */
    primary: boolean;
    /**
     * @hidden
     */
    look: 'flat' | 'outline' | 'clear' | 'default';
    constructor(element: ElementRef, renderer: Renderer, service: KendoButtonService, localization: LocalizationService, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Button component.
     */
    focus(): void;
    /**
     * Blurs the Button component.
     */
    blur(): void;
    /**
     * @hidden
     */
    setAttribute(attribute: string, value: string): void;
    /**
     * @hidden
     */
    removeAttribute(attribute: string): void;
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value: boolean): void;
    private toggleAriaPressed;
    private hasText;
    private addImgIcon;
    private addIcon;
    private addTextSpan;
    private prependChild;
    private defer;
    private iconSetter;
    private removeImageNode;
    private removeIconNode;
    private updateIconNode;
    private setIconTextClasses;
    private toggleClass;
    private _onButtonClick;
    private handleClasses;
    private handleThemeColor;
}
