/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, EventEmitter, HostBinding, TemplateRef, Input, Output, ElementRef } from '@angular/core';
import { parseCSSClassNames } from '../common/util';
/**
 * Specifies the action buttons of the Dialog
 * ([see example]({% slug actionbuttons_dialog %})).
 */
let DialogActionsComponent = class DialogActionsComponent {
    constructor(el) {
        this.el = el;
        /**
         * Specifies the possible layout of the action buttons.
         */
        this.layout = 'stretched';
        /**
         * Fires when the user clicks an action button.
         */
        this.action = new EventEmitter();
        this.buttonGroupClassName = true;
    }
    get className() {
        return this.layout === 'stretched';
    }
    /**
     * @hidden
     */
    actionTemplate() {
        return this.actions instanceof TemplateRef;
    }
    /**
     * @hidden
     */
    onButtonClick(action, _e) {
        this.action.emit(action);
    }
    /**
     * @hidden
     */
    buttonClass(action) {
        let classes = ['k-button k-button-md k-rounded-md'];
        const fillMode = action.fillMode ? action.fillMode : 'solid';
        const themeColor = action.themeColor ? action.themeColor : 'base';
        const cssClasses = action.cssClass ? parseCSSClassNames(action.cssClass) : [];
        classes.push(`k-button-${fillMode} k-button-${fillMode}-${themeColor}`);
        if (cssClasses.length > 0) {
            classes = classes.concat(cssClasses);
        }
        return classes.join(' ');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DialogActionsComponent.prototype, "actions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DialogActionsComponent.prototype, "layout", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DialogActionsComponent.prototype, "action", void 0);
tslib_1.__decorate([
    HostBinding('class.k-dialog-buttongroup'),
    HostBinding('class.k-actions'),
    tslib_1.__metadata("design:type", Boolean)
], DialogActionsComponent.prototype, "buttonGroupClassName", void 0);
tslib_1.__decorate([
    HostBinding('class.k-actions-stretched'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DialogActionsComponent.prototype, "className", null);
DialogActionsComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-dialog-actions',
        template: `
        <ng-content *ngIf="!actions"></ng-content>
        <ng-container *ngIf="!actionTemplate()">
            <button
                type="button"
                [ngClass]="buttonClass(action)"
                (click)="onButtonClick(action, $event)"
                *ngFor="let action of actions"
                [attr.aria-label]="action.text"
            >
                {{ action.text }}
            </button>
        </ng-container>
        <ng-template [ngTemplateOutlet]="actions" *ngIf="actionTemplate()"></ng-template>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], DialogActionsComponent);
export { DialogActionsComponent };
