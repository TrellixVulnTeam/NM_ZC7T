/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var animations_1 = require("@angular/animations");
var dialog_actions_component_1 = require("./dialog-actions.component");
var dialog_titlebar_component_1 = require("./dialog-titlebar.component");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_licensing_1 = require("@progress/kendo-licensing");
var package_metadata_1 = require("../package-metadata");
var util_1 = require("../common/util");
var dialog_settings_1 = require("./dialog-settings");
var dialog_localization_service_1 = require("./../localization/dialog-localization.service");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
/**
 * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).
 */
var DialogComponent = /** @class */ (function () {
    function DialogComponent(wrapper, renderer, localization, cdr, ngZone) {
        var _this = this;
        this.wrapper = wrapper;
        this.renderer = renderer;
        this.cdr = cdr;
        this.ngZone = ngZone;
        /**
         * Specifies the layout of the action buttons in the Dialog.
         * This option is only applicable if the action buttons are specified through the `actions` options.
         *
         * @default 'stretched'
         */
        this.actionsLayout = 'stretched';
        /**
         * @hidden
         */
        this.titleId = null;
        /**
         * @hidden
         */
        this.contentId = null;
        /**
         * Fires when the user clicks an action button of the Dialog.
         * The event is fired only when the action buttons are specified through the `actions` options.
         */
        this.action = new core_1.EventEmitter();
        /**
         * Fires when the user clicks the **Close** button of the Dialog or the **ESC** key.
         */
        this.close = new core_1.EventEmitter();
        this.tabIndex = 0;
        this.subscriptions = [];
        this.domSubs = new rxjs_1.Subscription();
        kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.subscriptions.push(localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            return (_this.direction = rtl ? 'rtl' : 'ltr');
        }));
        this.titleId = this.generateTitleId();
        this.contentId = this.generateContentId();
    }
    Object.defineProperty(DialogComponent.prototype, "htmlAttributes", {
        get: function () {
            return this._htmlAttributes;
        },
        /**
         * @hidden
         */
        set: function (attributes) {
            util_1.setHTMLAttributes(attributes, this.renderer, this.wrapper.nativeElement);
            var el = this.wrapper.nativeElement;
            var dir = el.getAttribute('dir');
            var tIndex = el.getAttribute('tabindex');
            if (this.direction !== dir && dir) {
                this.direction = dir;
            }
            if (this.tabIndex !== tIndex && tIndex) {
                this.tabIndex = tIndex;
            }
            this._htmlAttributes = attributes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogComponent.prototype, "cssClass", {
        get: function () {
            return this._cssClass;
        },
        /**
         * @hidden
         */
        set: function (classes) {
            this.setServiceClasses(this._cssClass, classes);
            this._cssClass = classes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogComponent.prototype, "dir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    DialogComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.bubble('close', this.titlebarContent.first);
        this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-describedby', this.contentId);
        if (this.titlebarContent.first) {
            this.titlebarContent.first.id = this.titleId;
        }
        else {
            this.subscriptions.push(this.titlebarContent.changes.subscribe(function () {
                if (util_1.isPresent(_this.titlebarContent.first)) {
                    _this.titlebarContent.first.id = _this.titleId;
                    _this.ngZone.onStable.pipe(operators_1.take(1)).subscribe(function () {
                        _this.bubble('close', _this.titlebarContent.first);
                        _this.renderer.setAttribute(_this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', _this.titleId);
                    });
                }
            }));
        }
    };
    DialogComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.handleInitialFocus();
        this.bubble('close', this.titlebarView.first);
        this.bubble('action', this.actionsView);
        if (this.titlebarView.first || this.titlebarContent.first) {
            //Needed for Dialogs created via service
            this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
        }
        else {
            this.subscriptions.push(this.titlebarView.changes.subscribe(function () {
                if (util_1.isPresent(_this.titlebarView.first)) {
                    _this.titlebarView.first.id = _this.titleId;
                    _this.ngZone.onStable.pipe(operators_1.take(1)).subscribe(function () {
                        _this.bubble('close', _this.titlebarView.first);
                        _this.renderer.setAttribute(_this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', _this.titleId);
                    });
                }
            }));
        }
        this.initDomEvents();
    };
    DialogComponent.prototype.ngOnInit = function () {
        this.renderer.removeAttribute(this.wrapper.nativeElement, 'title');
        this.cdr.detectChanges();
    };
    DialogComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.subscriptions = [];
        if (this.domSubs) {
            this.domSubs.unsubscribe();
        }
    };
    /**
     * Focuses the wrapper of the Dialog component.
     */
    DialogComponent.prototype.focus = function () {
        var wrapper = this.wrapper.nativeElement;
        if (util_1.isPresent(wrapper)) {
            wrapper.focus();
        }
    };
    DialogComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.wrapper) {
            return;
        }
        this.ngZone.runOutsideAngular(function () {
            _this.domSubs.add(_this.renderer.listen(_this.wrapper.nativeElement, 'keydown', function (ev) {
                _this.onKeyDown(ev);
            }));
        });
    };
    DialogComponent.prototype.onKeyDown = function (event) {
        var _this = this;
        var target = event.target;
        var parent = target.parentElement;
        if (util_1.hasClasses(target, util_1.DIALOG_ELEMENTS_HANDLING_ESC_KEY) || util_1.hasClasses(parent, util_1.DIALOG_ELEMENTS_HANDLING_ESC_KEY)) {
            if (event.keyCode === util_1.Keys.esc) {
                this.ngZone.run(function () {
                    _this.close.emit(new dialog_settings_1.DialogCloseResult());
                });
            }
        }
        if (util_1.hasClasses(target, 'k-button') && util_1.hasClasses(parent, util_1.DIALOG_ELEMENTS_HANDLING_ARROWS) &&
            (event.keyCode === util_1.Keys.left || event.keyCode === util_1.Keys.right)) {
            this.ngZone.run(function () {
                _this.handleActionButtonFocus(parent, event.keyCode);
            });
        }
        if (event.keyCode === util_1.Keys.tab) {
            this.ngZone.run(function () {
                _this.keepFocusWithinComponent(target, event);
            });
        }
    };
    DialogComponent.prototype.setServiceClasses = function (prevValue, value) {
        var _this = this;
        var el = this.wrapper.nativeElement;
        if (prevValue) {
            util_1.parseCSSClassNames(prevValue).forEach(function (className) {
                _this.renderer.removeClass(el, className);
            });
        }
        if (value) {
            util_1.parseCSSClassNames(value).forEach(function (className) {
                _this.renderer.addClass(el, className);
            });
        }
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.handleInitialFocus = function () {
        var wrapper = this.wrapper.nativeElement;
        var primaryButton = this.findPrimary(wrapper);
        if (this.autoFocusedElement) {
            var initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);
            if (initiallyFocusedElement) {
                initiallyFocusedElement.focus();
            }
        }
        else if (this.shouldFocusPrimary(primaryButton)) {
            primaryButton.focus();
        }
        else {
            wrapper.focus();
        }
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.findPrimary = function (wrapper) {
        var actionBtns = wrapper.querySelectorAll('.k-actions .k-button');
        return util_1.findPrimaryButton(actionBtns);
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.handleActionButtonFocus = function (parent, key) {
        var focusableActionButtons = this.getAllFocusableChildren(parent);
        for (var i = 0; i < focusableActionButtons.length; i++) {
            var current = focusableActionButtons[i];
            if (current === document.activeElement) {
                if (key === util_1.Keys.left && i > 0) {
                    focusableActionButtons[i - 1].focus();
                    break;
                }
                if (key === util_1.Keys.right && i < focusableActionButtons.length - 1) {
                    focusableActionButtons[i + 1].focus();
                    break;
                }
            }
        }
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.keepFocusWithinComponent = function (target, event) {
        var wrapper = this.wrapper.nativeElement;
        var _a = this.getFirstAndLastFocusable(wrapper), firstFocusable = _a[0], lastFocusable = _a[1];
        var tabAfterLastFocusable = !event.shiftKey && target === lastFocusable;
        var shiftTabAfterFirstFocusable = event.shiftKey && target === firstFocusable;
        if (tabAfterLastFocusable) {
            event.preventDefault();
            firstFocusable.focus();
        }
        if (shiftTabAfterFirstFocusable) {
            event.preventDefault();
            lastFocusable.focus();
        }
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.shouldFocusPrimary = function (el) {
        return util_1.isPresent(el) && util_1.isFocusable(el);
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.getAllFocusableChildren = function (parent) {
        return parent.querySelectorAll(util_1.focusableSelector);
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.getFirstAndLastFocusable = function (parent) {
        var all = this.getAllFocusableChildren(parent);
        var firstFocusable = all.length > 0 ? all[0] : parent;
        var lastFocusable = all.length > 0 ? all[all.length - 1] : parent;
        return [firstFocusable, lastFocusable];
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.generateTitleId = function () {
        return 'kendo-dialog-title-' + Math.ceil(Math.random() * 1000000).toString();
    };
    /**
     * @hidden
     */
    DialogComponent.prototype.generateContentId = function () {
        return 'kendo-dialog-content-' + Math.ceil(Math.random() * 1000000).toString();
    };
    Object.defineProperty(DialogComponent.prototype, "wrapperClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogComponent.prototype, "styles", {
        get: function () {
            var styles = {};
            if (this.width) {
                styles.width = util_1.createValueWithUnit(this.width);
            }
            if (this.height) {
                styles.height = util_1.createValueWithUnit(this.height);
            }
            if (this.minWidth) {
                styles.minWidth = util_1.createValueWithUnit(this.minWidth);
            }
            if (this.maxWidth) {
                styles.maxWidth = util_1.createValueWithUnit(this.maxWidth);
            }
            if (this.minHeight) {
                styles.minHeight = util_1.createValueWithUnit(this.minHeight);
            }
            if (this.maxHeight) {
                styles.maxHeight = util_1.createValueWithUnit(this.maxHeight);
            }
            return styles;
        },
        enumerable: true,
        configurable: true
    });
    DialogComponent.prototype.bubble = function (eventName, component) {
        var _this = this;
        if (component) {
            var emit = function (e) { return _this[eventName].emit(e); };
            var s = component[eventName].subscribe(emit);
            this.subscriptions.push(s);
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], DialogComponent.prototype, "actions", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DialogComponent.prototype, "actionsLayout", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DialogComponent.prototype, "autoFocusedElement", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DialogComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "width", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "minWidth", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "maxWidth", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "height", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "minHeight", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DialogComponent.prototype, "maxHeight", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DialogComponent.prototype, "action", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DialogComponent.prototype, "close", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], DialogComponent.prototype, "dir", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.tabIndex'),
        tslib_1.__metadata("design:type", Number)
    ], DialogComponent.prototype, "tabIndex", void 0);
    tslib_1.__decorate([
        core_1.ContentChildren(dialog_titlebar_component_1.DialogTitleBarComponent, { descendants: false }),
        tslib_1.__metadata("design:type", core_1.QueryList)
    ], DialogComponent.prototype, "titlebarContent", void 0);
    tslib_1.__decorate([
        core_1.ViewChildren(dialog_titlebar_component_1.DialogTitleBarComponent),
        tslib_1.__metadata("design:type", core_1.QueryList)
    ], DialogComponent.prototype, "titlebarView", void 0);
    tslib_1.__decorate([
        core_1.ViewChild(dialog_actions_component_1.DialogActionsComponent, { static: false }),
        tslib_1.__metadata("design:type", dialog_actions_component_1.DialogActionsComponent)
    ], DialogComponent.prototype, "actionsView", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-dialog-wrapper'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], DialogComponent.prototype, "wrapperClass", null);
    DialogComponent = tslib_1.__decorate([
        core_1.Component({
            animations: [
                animations_1.trigger('overlayAppear', [
                    animations_1.state('in', animations_1.style({ opacity: 1 })),
                    animations_1.transition('void => *', [animations_1.style({ opacity: 0.1 }), animations_1.animate('.3s cubic-bezier(.2, .6, .4, 1)')])
                ]),
                animations_1.trigger('dialogSlideInAppear', [
                    animations_1.state('in', animations_1.style({ transform: 'translate(0, 0)' })),
                    animations_1.transition('void => *', [animations_1.style({ transform: 'translate(0, -10%)' }), animations_1.animate('.3s cubic-bezier(.2, 1, .2, 1)')])
                ])
            ],
            exportAs: 'kendoDialog',
            providers: [
                kendo_angular_l10n_1.LocalizationService,
                {
                    provide: dialog_localization_service_1.DIALOG_LOCALIZATION_SERVICE,
                    useExisting: kendo_angular_l10n_1.LocalizationService
                },
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.dialog'
                }
            ],
            selector: 'kendo-dialog',
            template: "\n        <ng-container\n            kendoDialogLocalizedMessages\n            i18n-closeTitle=\"kendo.dialog.closeTitle|The title of the close button\"\n            closeTitle=\"Close\"\n        >\n        <div class=\"k-overlay\" @overlayAppear></div>\n\n        <div class=\"k-window k-dialog\" role=\"dialog\" aria-modal=\"true\" [ngStyle]=\"styles\" @dialogSlideInAppear>\n            <kendo-dialog-titlebar *ngIf=\"title\" [closeTitle]=\"closeTitle\" [id]=\"titleId\">{{ title }}</kendo-dialog-titlebar>\n            <ng-content select=\"kendo-dialog-titlebar\" *ngIf=\"!title\"></ng-content>\n\n            <div [id]=\"contentId\" class=\"k-content k-window-content k-dialog-content\">\n                <ng-content *ngIf=\"!contentTemplate\"></ng-content>\n                <ng-template [ngTemplateOutlet]=\"contentTemplate\" *ngIf=\"contentTemplate\"></ng-template>\n            </div>\n\n            <ng-content select=\"kendo-dialog-actions\" *ngIf=\"!actions\"></ng-content>\n            <kendo-dialog-actions *ngIf=\"actions\" [actions]=\"actions\" [layout]=\"actionsLayout\"> </kendo-dialog-actions>\n        </div>\n    </ng-container>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef,
            core_1.Renderer2,
            kendo_angular_l10n_1.LocalizationService,
            core_1.ChangeDetectorRef,
            core_1.NgZone])
    ], DialogComponent);
    return DialogComponent;
}());
exports.DialogComponent = DialogComponent;
