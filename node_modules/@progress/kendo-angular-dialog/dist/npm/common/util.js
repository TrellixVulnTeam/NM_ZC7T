/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
/**
 * @hidden
 */
exports.isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
exports.isTruthy = function (value) { return !!value; };
var toClassList = function (classNames) { return String(classNames).trim().split(' '); };
var ɵ0 = toClassList;
exports.ɵ0 = ɵ0;
var focusableRegex = /^(?:a|input|select|textarea|button|object)$/i;
/**
 * @hidden
 */
var Keys;
(function (Keys) {
    Keys[Keys["esc"] = 27] = "esc";
    Keys[Keys["tab"] = 9] = "tab";
    Keys[Keys["enter"] = 13] = "enter";
    Keys[Keys["space"] = 32] = "space";
    Keys[Keys["ctrl"] = 17] = "ctrl";
    Keys[Keys["shift"] = 16] = "shift";
    Keys[Keys["left"] = 37] = "left";
    Keys[Keys["up"] = 38] = "up";
    Keys[Keys["right"] = 39] = "right";
    Keys[Keys["down"] = 40] = "down";
})(Keys = exports.Keys || (exports.Keys = {}));
/**
 * @hidden
 */
exports.DIALOG_ELEMENTS_HANDLING_ESC_KEY = 'k-dialog-wrapper k-dialog-buttongroup k-dialog-action';
/**
 * @hidden
 */
exports.DIALOG_ELEMENTS_HANDLING_ARROWS = 'k-dialog-buttongroup';
/**
 * @hidden
 */
exports.WINDOW_CLASSES = 'k-window';
/**
 * @hidden
 */
exports.hasClasses = function (element, classNames) {
    var namesList = toClassList(classNames);
    return Boolean(toClassList(element.className).find(function (className) { return namesList.indexOf(className) >= 0; }));
};
/**
 * @hidden
 */
exports.isVisible = function (element) {
    var rect = element.getBoundingClientRect();
    return !!(rect.width && rect.height) && window.getComputedStyle(element).visibility !== 'hidden';
};
/**
 * @hidden
 */
exports.isFocusable = function (element, checkVisibility) {
    if (checkVisibility === void 0) { checkVisibility = true; }
    if (element.tagName) {
        var tagName = element.tagName.toLowerCase();
        var tabIndex = element.getAttribute('tabIndex');
        var validTabIndex = tabIndex !== null && !isNaN(tabIndex) && tabIndex > -1;
        var focusable = false;
        if (focusableRegex.test(tagName)) {
            focusable = !element.disabled;
        }
        else {
            focusable = validTabIndex;
        }
        return focusable && (!checkVisibility || exports.isVisible(element));
    }
    return false;
};
/**
 * @hidden
 */
exports.setHTMLAttributes = function (attributes, renderer, element) {
    for (var attribute in attributes) {
        if (attribute) {
            renderer.setAttribute(element, attribute, attributes[attribute]);
        }
    }
};
/**
 * Receives CSS class declarations either as an object, string or array and returns an array of the class names.
 *
 * @hidden
 */
exports.parseCSSClassNames = function (value) {
    if (exports.isObject(value)) {
        return parseObjectClassNames(value);
    }
    if (exports.isString(value)) {
        return parseStringClassNames(value);
    }
    if (Array.isArray(value)) {
        return parseArrayClassNames(value);
    }
};
var parseObjectClassNames = function (value) {
    var classes = [];
    Object.keys(value).forEach(function (className) {
        var currentClassName = exports.splitStringToArray(className);
        if (value[className] && currentClassName[0]) {
            classes.push.apply(classes, currentClassName);
        }
    });
    return classes;
};
var ɵ1 = parseObjectClassNames;
exports.ɵ1 = ɵ1;
var parseStringClassNames = function (value) {
    var classes = [];
    var classesArray = exports.splitStringToArray(value);
    classesArray.forEach(function (className) {
        classes.push(className);
    });
    return classes;
};
var ɵ2 = parseStringClassNames;
exports.ɵ2 = ɵ2;
var parseArrayClassNames = function (value) {
    var classes = [];
    value.forEach(function (className) {
        var current = exports.splitStringToArray(className);
        if (current[0]) {
            classes.push.apply(classes, current);
        }
    });
    return classes;
};
var ɵ3 = parseArrayClassNames;
exports.ɵ3 = ɵ3;
/**
 * @hidden
 */
exports.focusableSelector = [
    'a[href]',
    'area[href]',
    'input:not([disabled])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'iframe',
    'object',
    'embed',
    '*[tabindex]',
    '*[contenteditable]'
].join(',');
/**
 * @hidden
 */
exports.preventDefault = function (_a) {
    var event = _a.originalEvent;
    event.stopPropagation();
    event.preventDefault();
};
/**
 * @hidden
 */
exports.isWindowAvailable = function () {
    return typeof window !== 'undefined';
};
/**
 * @hidden
 */
exports.preventOnDblClick = function (release) { return function (mouseDown) {
    return rxjs_1.of(mouseDown).pipe(operators_1.delay(150), operators_1.takeUntil(release));
}; };
/**
 * @hidden
 */
exports.RESIZE_DIRECTIONS = ['n', 'e', 's', 'w', 'se', 'sw', 'ne', 'nw'];
/**
 * @hidden
 */
exports.OFFSET_STYLES = ['top', 'left', 'width', 'height'];
/**
 * @hidden
 */
exports.isString = function (value) { return value instanceof String || typeof value === 'string'; };
/**
 * @hidden
 */
exports.isObject = function (value) { return exports.isPresent(value) && !Array.isArray(value) && typeof value === 'object'; };
/**
 * @hidden
 */
exports.isNumber = function (value) { return typeof value === 'number' && isFinite(value); };
/**
 * @hidden
 */
exports.createValueWithUnit = function (value) { return value + (exports.isNumber(value) ? 'px' : ''); };
/**
 * @hidden
 */
exports.splitStringToArray = function (value) { return value.trim().replace(/\s+/g, " ").split(' '); };
/**
 * @hidden
 */
exports.findPrimaryButton = function (buttons) {
    for (var i = buttons.length - 1; i >= 0; i--) {
        var classList = buttons[i].classList;
        for (var j = 0; j < classList.length; j++) {
            if (classList[j].endsWith('-primary')) {
                return buttons[i];
            }
        }
    }
};
