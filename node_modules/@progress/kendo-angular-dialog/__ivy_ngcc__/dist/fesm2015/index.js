/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, TemplateRef, Input, Output, HostBinding, Component, ElementRef, InjectionToken, Inject, Optional, NgZone, ContentChildren, QueryList, ViewChildren, ViewChild, Renderer2, ChangeDetectorRef, Injectable, isDevMode, ComponentFactoryResolver, Directive, Host, HostListener, ContentChild, ViewContainerRef, forwardRef, NgModule } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { Subscription, Subject, merge, of } from 'rxjs';
import { take, filter, map, share, tap, switchMap, takeUntil } from 'rxjs/operators';
import { LocalizationService, L10N_PREFIX, RTL, MessageService, ComponentMessages } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { DraggableDirective, isChanged, isDocumentAvailable, DraggableModule } from '@progress/kendo-angular-common';
import { offset, scrollPosition, positionWithScroll, getDocumentElement, getWindowViewPort } from '@progress/kendo-popup-common';
import { Button } from '@progress/kendo-angular-buttons';
import { CommonModule } from '@angular/common';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@progress/kendo-angular-l10n';
import * as ɵngcc3 from '@progress/kendo-angular-common';

function DialogActionsComponent_ng_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!actions"]);
} }
function DialogActionsComponent_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function DialogActionsComponent_ng_container_1_button_1_Template_button_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const action_r4 = restoredCtx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.onButtonClick(action_r4, $event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const action_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.buttonClass(action_r4));
    ɵngcc0.ɵɵattribute("aria-label", action_r4.text);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", action_r4.text, " ");
} }
function DialogActionsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DialogActionsComponent_ng_container_1_button_1_Template, 2, 3, "button", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.actions);
} }
function DialogActionsComponent_2_ng_template_0_Template(rf, ctx) { }
function DialogActionsComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DialogActionsComponent_2_ng_template_0_Template, 0, 0, "ng-template", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.actions);
} }
const _c0 = ["*"];
function DialogComponent_kendo_dialog_titlebar_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "kendo-dialog-titlebar", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("closeTitle", ctx_r0.closeTitle)("id", ctx_r0.titleId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
} }
function DialogComponent_ng_content_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!title"]);
} }
function DialogComponent_ng_content_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 1, ["*ngIf", "!contentTemplate"]);
} }
function DialogComponent_7_ng_template_0_Template(rf, ctx) { }
function DialogComponent_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DialogComponent_7_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.contentTemplate);
} }
function DialogComponent_ng_content_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngIf", "!actions"]);
} }
function DialogComponent_kendo_dialog_actions_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "kendo-dialog-actions", 9);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("actions", ctx_r5.actions)("layout", ctx_r5.actionsLayout);
} }
const _c5 = [[["kendo-dialog-titlebar"]], "*", [["kendo-dialog-actions"]]];
const _c6 = ["kendo-dialog-titlebar", "*", "kendo-dialog-actions"];
function WindowTitleBarComponent_ng_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!template"]);
} }
function WindowTitleBarComponent_1_ng_template_0_Template(rf, ctx) { }
const _c7 = function (a0) { return { "$implicit": a0 }; };
function WindowTitleBarComponent_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WindowTitleBarComponent_1_ng_template_0_Template, 0, 0, "ng-template", 1);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c7, ctx_r1.service));
} }
function WindowComponent_kendo_window_titlebar_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "kendo-window-titlebar", 5)(1, "div", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵelement(4, "button", 8)(5, "button", 9)(6, "button", 10)(7, "button", 11);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("template", ctx_r0.titleBarTemplate);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("title", ctx_r0.minimizeButtonTitle)("aria-label", ctx_r0.minimizeButtonTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("title", ctx_r0.maximizeButtonTitle)("aria-label", ctx_r0.maximizeButtonTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("title", ctx_r0.restoreButtonTitle)("aria-label", ctx_r0.restoreButtonTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("title", ctx_r0.closeButtonTitle)("aria-label", ctx_r0.closeButtonTitle);
} }
function WindowComponent_ng_content_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!showDefaultTitleBar"]);
} }
function WindowComponent_div_4_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 1, ["*ngIf", "!contentTemplate"]);
} }
function WindowComponent_div_4_2_ng_template_0_Template(rf, ctx) { }
function WindowComponent_div_4_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WindowComponent_div_4_2_ng_template_0_Template, 0, 0, "ng-template", 13);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.contentTemplate);
} }
function WindowComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, WindowComponent_div_4_ng_content_1_Template, 1, 0, "ng-content", 2);
    ɵngcc0.ɵɵtemplate(2, WindowComponent_div_4_2_Template, 1, 1, null, 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("hidden", ctx_r2.state === "minimized" && ctx_r2.keepContent);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.contentTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.contentTemplate);
} }
function WindowComponent_ng_template_5_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 15);
} if (rf & 2) {
    const dir_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("direction", dir_r8);
} }
function WindowComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, WindowComponent_ng_template_5_div_0_Template, 1, 1, "div", 14);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.resizeDirections);
} }
const _c16 = [[["kendo-window-titlebar"]], "*"];
const _c17 = ["kendo-window-titlebar", "*"];
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const isTruthy = (value) => !!value;
const toClassList = (classNames) => String(classNames).trim().split(' ');
const focusableRegex = /^(?:a|input|select|textarea|button|object)$/i;
/**
 * @hidden
 */
var Keys;
(function (Keys) {
    Keys[Keys["esc"] = 27] = "esc";
    Keys[Keys["tab"] = 9] = "tab";
    Keys[Keys["enter"] = 13] = "enter";
    Keys[Keys["space"] = 32] = "space";
    Keys[Keys["ctrl"] = 17] = "ctrl";
    Keys[Keys["shift"] = 16] = "shift";
    Keys[Keys["left"] = 37] = "left";
    Keys[Keys["up"] = 38] = "up";
    Keys[Keys["right"] = 39] = "right";
    Keys[Keys["down"] = 40] = "down";
})(Keys || (Keys = {}));
/**
 * @hidden
 */
const DIALOG_ELEMENTS_HANDLING_ESC_KEY = 'k-dialog-wrapper k-dialog-buttongroup k-dialog-action';
/**
 * @hidden
 */
const DIALOG_ELEMENTS_HANDLING_ARROWS = 'k-dialog-buttongroup';
/**
 * @hidden
 */
const WINDOW_CLASSES = 'k-window';
/**
 * @hidden
 */
const hasClasses = (element, classNames) => {
    const namesList = toClassList(classNames);
    return Boolean(toClassList(element.className).find((className) => namesList.indexOf(className) >= 0));
};
/**
 * @hidden
 */
const isVisible = (element) => {
    const rect = element.getBoundingClientRect();
    return !!(rect.width && rect.height) && window.getComputedStyle(element).visibility !== 'hidden';
};
/**
 * @hidden
 */
const isFocusable = (element, checkVisibility = true) => {
    if (element.tagName) {
        const tagName = element.tagName.toLowerCase();
        const tabIndex = element.getAttribute('tabIndex');
        const validTabIndex = tabIndex !== null && !isNaN(tabIndex) && tabIndex > -1;
        let focusable = false;
        if (focusableRegex.test(tagName)) {
            focusable = !element.disabled;
        }
        else {
            focusable = validTabIndex;
        }
        return focusable && (!checkVisibility || isVisible(element));
    }
    return false;
};
/**
 * @hidden
 */
const setHTMLAttributes = (attributes, renderer, element) => {
    for (const attribute in attributes) {
        if (attribute) {
            renderer.setAttribute(element, attribute, attributes[attribute]);
        }
    }
};
/**
 * Receives CSS class declarations either as an object, string or array and returns an array of the class names.
 *
 * @hidden
 */
const parseCSSClassNames = (value) => {
    if (isObject(value)) {
        return parseObjectClassNames(value);
    }
    if (isString(value)) {
        return parseStringClassNames(value);
    }
    if (Array.isArray(value)) {
        return parseArrayClassNames(value);
    }
};
const parseObjectClassNames = (value) => {
    const classes = [];
    Object.keys(value).forEach(className => {
        const currentClassName = splitStringToArray(className);
        if (value[className] && currentClassName[0]) {
            classes.push(...currentClassName);
        }
    });
    return classes;
};
const parseStringClassNames = (value) => {
    const classes = [];
    const classesArray = splitStringToArray(value);
    classesArray.forEach(className => {
        classes.push(className);
    });
    return classes;
};
const parseArrayClassNames = (value) => {
    const classes = [];
    value.forEach((className) => {
        const current = splitStringToArray(className);
        if (current[0]) {
            classes.push(...current);
        }
    });
    return classes;
};
/**
 * @hidden
 */
const focusableSelector = [
    'a[href]',
    'area[href]',
    'input:not([disabled])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'iframe',
    'object',
    'embed',
    '*[tabindex]',
    '*[contenteditable]'
].join(',');
/**
 * @hidden
 */
const preventDefault = ({ originalEvent: event }) => {
    event.stopPropagation();
    event.preventDefault();
};
/**
 * @hidden
 */
const RESIZE_DIRECTIONS = ['n', 'e', 's', 'w', 'se', 'sw', 'ne', 'nw'];
/**
 * @hidden
 */
const OFFSET_STYLES = ['top', 'left', 'width', 'height'];
/**
 * @hidden
 */
const isString = (value) => value instanceof String || typeof value === 'string';
/**
 * @hidden
 */
const isObject = (value) => isPresent(value) && !Array.isArray(value) && typeof value === 'object';
/**
 * @hidden
 */
const isNumber = (value) => typeof value === 'number' && isFinite(value);
/**
 * @hidden
 */
const createValueWithUnit = (value) => value + (isNumber(value) ? 'px' : '');
/**
 * @hidden
 */
const splitStringToArray = (value) => value.trim().replace(/\s+/g, " ").split(' ');
/**
 * @hidden
 */
const findPrimaryButton = (buttons) => {
    for (let i = buttons.length - 1; i >= 0; i--) {
        const classList = buttons[i].classList;
        for (let j = 0; j < classList.length; j++) {
            if (classList[j].endsWith('-primary')) {
                return buttons[i];
            }
        }
    }
};

/**
 * Specifies the action buttons of the Dialog
 * ([see example]({% slug actionbuttons_dialog %})).
 */
let DialogActionsComponent = class DialogActionsComponent {
    constructor(el) {
        this.el = el;
        /**
         * Specifies the possible layout of the action buttons.
         */
        this.layout = 'stretched';
        /**
         * Fires when the user clicks an action button.
         */
        this.action = new EventEmitter();
        this.buttonGroupClassName = true;
    }
    get className() {
        return this.layout === 'stretched';
    }
    /**
     * @hidden
     */
    actionTemplate() {
        return this.actions instanceof TemplateRef;
    }
    /**
     * @hidden
     */
    onButtonClick(action, _e) {
        this.action.emit(action);
    }
    /**
     * @hidden
     */
    buttonClass(action) {
        let classes = ['k-button k-button-md k-rounded-md'];
        const fillMode = action.fillMode ? action.fillMode : 'solid';
        const themeColor = action.themeColor ? action.themeColor : 'base';
        const cssClasses = action.cssClass ? parseCSSClassNames(action.cssClass) : [];
        classes.push(`k-button-${fillMode} k-button-${fillMode}-${themeColor}`);
        if (cssClasses.length > 0) {
            classes = classes.concat(cssClasses);
        }
        return classes.join(' ');
    }
};
DialogActionsComponent.ɵfac = function DialogActionsComponent_Factory(t) { return new (t || DialogActionsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DialogActionsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DialogActionsComponent, selectors: [["kendo-dialog-actions"]], hostVars: 6, hostBindings: function DialogActionsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-dialog-buttongroup", ctx.buttonGroupClassName)("k-actions", ctx.buttonGroupClassName)("k-actions-stretched", ctx.className);
    } }, inputs: { layout: "layout", actions: "actions" }, outputs: { action: "action" }, ngContentSelectors: _c0, decls: 3, vars: 3, consts: [[4, "ngIf"], ["type", "button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["type", "button", 3, "ngClass", "click"], [3, "ngTemplateOutlet"]], template: function DialogActionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, DialogActionsComponent_ng_content_0_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵtemplate(1, DialogActionsComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(2, DialogActionsComponent_2_Template, 1, 1, null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.actions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.actionTemplate());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionTemplate());
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgClass, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogActionsComponent.prototype, "actions", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogActionsComponent.prototype, "layout", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DialogActionsComponent.prototype, "action", void 0);
__decorate([
    HostBinding('class.k-dialog-buttongroup'),
    HostBinding('class.k-actions'),
    __metadata("design:type", Boolean)
], DialogActionsComponent.prototype, "buttonGroupClassName", void 0);
__decorate([
    HostBinding('class.k-actions-stretched'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialogActionsComponent.prototype, "className", null);
DialogActionsComponent = __decorate([ __metadata("design:paramtypes", [ElementRef])
], DialogActionsComponent);

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * @hidden
 */
const DIALOG_LOCALIZATION_SERVICE = new InjectionToken('Dialog LocalizationService');

/**
 * @hidden
 */
let TitleBarLocalizationService = class TitleBarLocalizationService extends LocalizationService {
    constructor(prefix, messageService, rtl, dialogLocalization) {
        super(prefix, messageService, rtl);
        this.dialogLocalization = dialogLocalization;
    }
    get(shortKey) {
        if (this.dialogLocalization) {
            return this.dialogLocalization.get(shortKey);
        }
        return super.get(shortKey);
    }
};
TitleBarLocalizationService.ɵfac = function TitleBarLocalizationService_Factory(t) { return new (t || TitleBarLocalizationService)(ɵngcc0.ɵɵinject(L10N_PREFIX), ɵngcc0.ɵɵinject(ɵngcc2.MessageService, 8), ɵngcc0.ɵɵinject(RTL, 8), ɵngcc0.ɵɵinject(DIALOG_LOCALIZATION_SERVICE, 8)); };
TitleBarLocalizationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TitleBarLocalizationService, factory: function (t) { return TitleBarLocalizationService.ɵfac(t); } });
TitleBarLocalizationService = __decorate([
    __param(0, Inject(L10N_PREFIX)),
    __param(1, Optional()),
    __param(2, Optional()), __param(2, Inject(RTL)),
    __param(3, Optional()), __param(3, Inject(DIALOG_LOCALIZATION_SERVICE)),
    __metadata("design:paramtypes", [String, MessageService, Boolean, LocalizationService])
], TitleBarLocalizationService);

/**
 * Represents the [Kendo UI DialogTitleBar component for Angular]({% slug api_dialog_dialogtitlebarcomponent %}).
 *
 * It is used as part of the Dialog content when the component is created dynamically by using an [Angular service]({% slug service_dialog %}).
 */
let DialogTitleBarComponent = class DialogTitleBarComponent {
    constructor(zone, hostElement, localizationService) {
        this.zone = zone;
        this.hostElement = hostElement;
        this.localizationService = localizationService;
        /**
         * Fires when the close button of the title-bar is clicked.
         */
        this.close = new EventEmitter();
    }
    get className() {
        return true;
    }
    get closeButtonTitle() {
        return this.closeTitle || this.localizationService.get('closeTitle');
    }
    ngAfterViewInit() {
        this.zone.onStable.pipe(take(1)).subscribe(() => {
            const element = this.hostElement.nativeElement.querySelector('.k-dialog-title');
            element.setAttribute('id', this.id);
        });
    }
    /**
     * @hidden
     */
    onCloseClick(e) {
        e.preventDefault();
        const eventArgs = new PreventableEvent();
        this.close.emit(eventArgs);
    }
};
DialogTitleBarComponent.ɵfac = function DialogTitleBarComponent_Factory(t) { return new (t || DialogTitleBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService, 8)); };
DialogTitleBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DialogTitleBarComponent, selectors: [["kendo-dialog-titlebar"]], hostVars: 4, hostBindings: function DialogTitleBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-window-titlebar", ctx.className)("k-dialog-titlebar", ctx.className);
    } }, inputs: { id: "id", closeTitle: "closeTitle" }, outputs: { close: "close" }, features: [ɵngcc0.ɵɵProvidersFeature([
            TitleBarLocalizationService,
            {
                provide: LocalizationService,
                useExisting: TitleBarLocalizationService
            },
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dialog'
            }
        ])], ngContentSelectors: _c0, decls: 6, vars: 2, consts: function () { let i18n_1; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the close button
         * @meaning kendo.dialog.closeTitle
         */
        const MSG_EXTERNAL_7499923323865444383$$DIST_FESM2015_INDEX_JS_2 = goog.getMsg("Close");
        i18n_1 = MSG_EXTERNAL_7499923323865444383$$DIST_FESM2015_INDEX_JS_2;
    }
    else {
        i18n_1 = $localize `:kendo.dialog.closeTitle|The title of the close button␟9b2bd34897f127e69e5f02f64692fca98a5a7572␟7499923323865444383:Close`;
    } return [["kendoDialogTitleBarLocalizedMessages", "", "closeTitle", i18n_1], [1, "k-window-title", "k-dialog-title"], [1, "k-window-actions", "k-dialog-actions"], ["role", "button", 1, "k-button", "k-button-md", "k-rounded-md", "k-button-flat", "k-button-flat-base", "k-icon-button", "k-window-action", "k-dialog-action", "k-dialog-close", 3, "click"], [1, "k-button-icon", "k-icon", "k-i-x"]]; }, template: function DialogTitleBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2)(4, "button", 3);
        ɵngcc0.ɵɵlistener("click", function DialogTitleBarComponent_Template_button_click_4_listener($event) { return ctx.onCloseClick($event); });
        ɵngcc0.ɵɵelement(5, "span", 4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵattribute("title", ctx.closeButtonTitle)("aria-label", ctx.closeButtonTitle);
    } }, directives: function () { return [LocalizedMessagesDirective]; }, encapsulation: 2 });
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DialogTitleBarComponent.prototype, "close", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogTitleBarComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogTitleBarComponent.prototype, "closeTitle", void 0);
__decorate([
    HostBinding('class.k-window-titlebar'),
    HostBinding('class.k-dialog-titlebar'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialogTitleBarComponent.prototype, "className", null);
DialogTitleBarComponent = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [NgZone, ElementRef, LocalizationService])
], DialogTitleBarComponent);

/**
 * @hidden
 */
const packageMetadata = {
    name: '@progress/kendo-angular-dialog',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1646217112,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * The settings for the Dialog actions when the Dialog is opened through `DialogService`
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
class DialogAction {
}
/**
 * Indicates that the **Close** button is clicked. Used when the results from
 * the Dialogs that are opened through `DialogService` are filtered
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
class DialogCloseResult {
}
/**
 * The settings that can be used when the Dialog is opened through `DialogService`.
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
class DialogSettings {
}
/**
 * Holds references to the object instance and published events of the Dialog.
 * Controls the Dialogs that were opened through the `DialogService`
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
class DialogRef {
}

/**
 * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).
 */
let DialogComponent = class DialogComponent {
    constructor(wrapper, renderer, localization, cdr, ngZone) {
        this.wrapper = wrapper;
        this.renderer = renderer;
        this.cdr = cdr;
        this.ngZone = ngZone;
        /**
         * Specifies the layout of the action buttons in the Dialog.
         * This option is only applicable if the action buttons are specified through the `actions` options.
         *
         * @default 'stretched'
         */
        this.actionsLayout = 'stretched';
        /**
         * @hidden
         */
        this.titleId = null;
        /**
         * @hidden
         */
        this.contentId = null;
        /**
         * Fires when the user clicks an action button of the Dialog.
         * The event is fired only when the action buttons are specified through the `actions` options.
         */
        this.action = new EventEmitter();
        /**
         * Fires when the user clicks the **Close** button of the Dialog or the **ESC** key.
         */
        this.close = new EventEmitter();
        this.tabIndex = 0;
        this.subscriptions = [];
        this.domSubs = new Subscription();
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.subscriptions.push(localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr')));
        this.titleId = this.generateTitleId();
        this.contentId = this.generateContentId();
    }
    /**
     * @hidden
     */
    set htmlAttributes(attributes) {
        setHTMLAttributes(attributes, this.renderer, this.wrapper.nativeElement);
        const el = this.wrapper.nativeElement;
        const dir = el.getAttribute('dir');
        const tIndex = el.getAttribute('tabindex');
        if (this.direction !== dir && dir) {
            this.direction = dir;
        }
        if (this.tabIndex !== tIndex && tIndex) {
            this.tabIndex = tIndex;
        }
        this._htmlAttributes = attributes;
    }
    get htmlAttributes() {
        return this._htmlAttributes;
    }
    /**
     * @hidden
     */
    set cssClass(classes) {
        this.setServiceClasses(this._cssClass, classes);
        this._cssClass = classes;
    }
    get cssClass() {
        return this._cssClass;
    }
    get dir() {
        return this.direction;
    }
    ngAfterContentInit() {
        this.bubble('close', this.titlebarContent.first);
        this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-describedby', this.contentId);
        if (this.titlebarContent.first) {
            this.titlebarContent.first.id = this.titleId;
        }
        else {
            this.subscriptions.push(this.titlebarContent.changes.subscribe(() => {
                if (isPresent(this.titlebarContent.first)) {
                    this.titlebarContent.first.id = this.titleId;
                    this.ngZone.onStable.pipe(take(1)).subscribe(() => {
                        this.bubble('close', this.titlebarContent.first);
                        this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
                    });
                }
            }));
        }
    }
    ngAfterViewInit() {
        this.handleInitialFocus();
        this.bubble('close', this.titlebarView.first);
        this.bubble('action', this.actionsView);
        if (this.titlebarView.first || this.titlebarContent.first) {
            //Needed for Dialogs created via service
            this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
        }
        else {
            this.subscriptions.push(this.titlebarView.changes.subscribe(() => {
                if (isPresent(this.titlebarView.first)) {
                    this.titlebarView.first.id = this.titleId;
                    this.ngZone.onStable.pipe(take(1)).subscribe(() => {
                        this.bubble('close', this.titlebarView.first);
                        this.renderer.setAttribute(this.wrapper.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);
                    });
                }
            }));
        }
        this.initDomEvents();
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.wrapper.nativeElement, 'title');
        this.cdr.detectChanges();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
        this.subscriptions = [];
        if (this.domSubs) {
            this.domSubs.unsubscribe();
        }
    }
    /**
     * Focuses the wrapper of the Dialog component.
     */
    focus() {
        const wrapper = this.wrapper.nativeElement;
        if (isPresent(wrapper)) {
            wrapper.focus();
        }
    }
    initDomEvents() {
        if (!this.wrapper) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.domSubs.add(this.renderer.listen(this.wrapper.nativeElement, 'keydown', (ev) => {
                this.onKeyDown(ev);
            }));
        });
    }
    onKeyDown(event) {
        const target = event.target;
        const parent = target.parentElement;
        if (hasClasses(target, DIALOG_ELEMENTS_HANDLING_ESC_KEY) || hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ESC_KEY)) {
            if (event.keyCode === Keys.esc) {
                this.ngZone.run(() => {
                    this.close.emit(new DialogCloseResult());
                });
            }
        }
        if (hasClasses(target, 'k-button') && hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ARROWS) &&
            (event.keyCode === Keys.left || event.keyCode === Keys.right)) {
            this.ngZone.run(() => {
                this.handleActionButtonFocus(parent, event.keyCode);
            });
        }
        if (event.keyCode === Keys.tab) {
            this.ngZone.run(() => {
                this.keepFocusWithinComponent(target, event);
            });
        }
    }
    setServiceClasses(prevValue, value) {
        const el = this.wrapper.nativeElement;
        if (prevValue) {
            parseCSSClassNames(prevValue).forEach(className => {
                this.renderer.removeClass(el, className);
            });
        }
        if (value) {
            parseCSSClassNames(value).forEach(className => {
                this.renderer.addClass(el, className);
            });
        }
    }
    /**
     * @hidden
     */
    handleInitialFocus() {
        const wrapper = this.wrapper.nativeElement;
        const primaryButton = this.findPrimary(wrapper);
        if (this.autoFocusedElement) {
            const initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);
            if (initiallyFocusedElement) {
                initiallyFocusedElement.focus();
            }
        }
        else if (this.shouldFocusPrimary(primaryButton)) {
            primaryButton.focus();
        }
        else {
            wrapper.focus();
        }
    }
    /**
     * @hidden
     */
    findPrimary(wrapper) {
        const actionBtns = wrapper.querySelectorAll('.k-actions .k-button');
        return findPrimaryButton(actionBtns);
    }
    /**
     * @hidden
     */
    handleActionButtonFocus(parent, key) {
        const focusableActionButtons = this.getAllFocusableChildren(parent);
        for (let i = 0; i < focusableActionButtons.length; i++) {
            const current = focusableActionButtons[i];
            if (current === document.activeElement) {
                if (key === Keys.left && i > 0) {
                    focusableActionButtons[i - 1].focus();
                    break;
                }
                if (key === Keys.right && i < focusableActionButtons.length - 1) {
                    focusableActionButtons[i + 1].focus();
                    break;
                }
            }
        }
    }
    /**
     * @hidden
     */
    keepFocusWithinComponent(target, event) {
        const wrapper = this.wrapper.nativeElement;
        const [firstFocusable, lastFocusable] = this.getFirstAndLastFocusable(wrapper);
        const tabAfterLastFocusable = !event.shiftKey && target === lastFocusable;
        const shiftTabAfterFirstFocusable = event.shiftKey && target === firstFocusable;
        if (tabAfterLastFocusable) {
            event.preventDefault();
            firstFocusable.focus();
        }
        if (shiftTabAfterFirstFocusable) {
            event.preventDefault();
            lastFocusable.focus();
        }
    }
    /**
     * @hidden
     */
    shouldFocusPrimary(el) {
        return isPresent(el) && isFocusable(el);
    }
    /**
     * @hidden
     */
    getAllFocusableChildren(parent) {
        return parent.querySelectorAll(focusableSelector);
    }
    /**
     * @hidden
     */
    getFirstAndLastFocusable(parent) {
        const all = this.getAllFocusableChildren(parent);
        const firstFocusable = all.length > 0 ? all[0] : parent;
        const lastFocusable = all.length > 0 ? all[all.length - 1] : parent;
        return [firstFocusable, lastFocusable];
    }
    /**
     * @hidden
     */
    generateTitleId() {
        return 'kendo-dialog-title-' + Math.ceil(Math.random() * 1000000).toString();
    }
    /**
     * @hidden
     */
    generateContentId() {
        return 'kendo-dialog-content-' + Math.ceil(Math.random() * 1000000).toString();
    }
    get wrapperClass() {
        return true;
    }
    get styles() {
        const styles = {};
        if (this.width) {
            styles.width = createValueWithUnit(this.width);
        }
        if (this.height) {
            styles.height = createValueWithUnit(this.height);
        }
        if (this.minWidth) {
            styles.minWidth = createValueWithUnit(this.minWidth);
        }
        if (this.maxWidth) {
            styles.maxWidth = createValueWithUnit(this.maxWidth);
        }
        if (this.minHeight) {
            styles.minHeight = createValueWithUnit(this.minHeight);
        }
        if (this.maxHeight) {
            styles.maxHeight = createValueWithUnit(this.maxHeight);
        }
        return styles;
    }
    bubble(eventName, component) {
        if (component) {
            const emit = e => this[eventName].emit(e);
            const s = component[eventName].subscribe(emit);
            this.subscriptions.push(s);
        }
    }
};
DialogComponent.ɵfac = function DialogComponent_Factory(t) { return new (t || DialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DialogComponent, selectors: [["kendo-dialog"]], contentQueries: function DialogComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DialogTitleBarComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titlebarContent = _t);
    } }, viewQuery: function DialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DialogActionsComponent, 5);
        ɵngcc0.ɵɵviewQuery(DialogTitleBarComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionsView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titlebarView = _t);
    } }, hostVars: 4, hostBindings: function DialogComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabIndex", ctx.tabIndex)("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-dialog-wrapper", ctx.wrapperClass);
    } }, inputs: { actionsLayout: "actionsLayout", actions: "actions", autoFocusedElement: "autoFocusedElement", title: "title", width: "width", minWidth: "minWidth", maxWidth: "maxWidth", height: "height", minHeight: "minHeight", maxHeight: "maxHeight" }, outputs: { action: "action", close: "close" }, exportAs: ["kendoDialog"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: DIALOG_LOCALIZATION_SERVICE,
                useExisting: LocalizationService
            },
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dialog'
            }
        ])], ngContentSelectors: _c6, decls: 10, vars: 10, consts: function () { let i18n_3; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the close button
         * @meaning kendo.dialog.closeTitle
         */
        const MSG_EXTERNAL_7499923323865444383$$DIST_FESM2015_INDEX_JS_4 = goog.getMsg("Close");
        i18n_3 = MSG_EXTERNAL_7499923323865444383$$DIST_FESM2015_INDEX_JS_4;
    }
    else {
        i18n_3 = $localize `:kendo.dialog.closeTitle|The title of the close button␟9b2bd34897f127e69e5f02f64692fca98a5a7572␟7499923323865444383:Close`;
    } return [["kendoDialogLocalizedMessages", "", "closeTitle", i18n_3], [1, "k-overlay"], ["role", "dialog", "aria-modal", "true", 1, "k-window", "k-dialog", 3, "ngStyle"], [3, "closeTitle", "id", 4, "ngIf"], [4, "ngIf"], [1, "k-content", "k-window-content", "k-dialog-content", 3, "id"], [3, "actions", "layout", 4, "ngIf"], [3, "closeTitle", "id"], [3, "ngTemplateOutlet"], [3, "actions", "layout"]]; }, template: function DialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c5);
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, DialogComponent_kendo_dialog_titlebar_3_Template, 2, 3, "kendo-dialog-titlebar", 3);
        ɵngcc0.ɵɵtemplate(4, DialogComponent_ng_content_4_Template, 1, 0, "ng-content", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, DialogComponent_ng_content_6_Template, 1, 0, "ng-content", 4);
        ɵngcc0.ɵɵtemplate(7, DialogComponent_7_Template, 1, 1, null, 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, DialogComponent_ng_content_8_Template, 1, 0, "ng-content", 4);
        ɵngcc0.ɵɵtemplate(9, DialogComponent_kendo_dialog_actions_9_Template, 1, 2, "kendo-dialog-actions", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@overlayAppear", undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ctx.styles)("@dialogSlideInAppear", undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.contentId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.contentTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.contentTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.actions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actions);
    } }, directives: function () { return [LocalizedMessagesDirective, ɵngcc1.NgStyle, ɵngcc1.NgIf, DialogTitleBarComponent, ɵngcc1.NgTemplateOutlet, DialogActionsComponent]; }, encapsulation: 2, data: { animation: [
            trigger('overlayAppear', [
                state('in', style({ opacity: 1 })),
                transition('void => *', [style({ opacity: 0.1 }), animate('.3s cubic-bezier(.2, .6, .4, 1)')])
            ]),
            trigger('dialogSlideInAppear', [
                state('in', style({ transform: 'translate(0, 0)' })),
                transition('void => *', [style({ transform: 'translate(0, -10%)' }), animate('.3s cubic-bezier(.2, 1, .2, 1)')])
            ])
        ] } });
__decorate([
    Input(),
    __metadata("design:type", Array)
], DialogComponent.prototype, "actions", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogComponent.prototype, "actionsLayout", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogComponent.prototype, "autoFocusedElement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DialogComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "minWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "maxWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "minHeight", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialogComponent.prototype, "maxHeight", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DialogComponent.prototype, "action", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DialogComponent.prototype, "close", void 0);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], DialogComponent.prototype, "dir", null);
__decorate([
    HostBinding('attr.tabIndex'),
    __metadata("design:type", Number)
], DialogComponent.prototype, "tabIndex", void 0);
__decorate([
    ContentChildren(DialogTitleBarComponent, { descendants: false }),
    __metadata("design:type", QueryList)
], DialogComponent.prototype, "titlebarContent", void 0);
__decorate([
    ViewChildren(DialogTitleBarComponent),
    __metadata("design:type", QueryList)
], DialogComponent.prototype, "titlebarView", void 0);
__decorate([
    ViewChild(DialogActionsComponent, { static: false }),
    __metadata("design:type", DialogActionsComponent)
], DialogComponent.prototype, "actionsView", void 0);
__decorate([
    HostBinding('class.k-dialog-wrapper'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialogComponent.prototype, "wrapperClass", null);
DialogComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        LocalizationService,
        ChangeDetectorRef,
        NgZone])
], DialogComponent);

/**
 * The base class  which will be extended by a component that is provided as content through `content`
 * ([see example]({% slug service_dialog %}#toc-passing-title-content-and-actions-as-a-single-component)).
 */
class DialogContentBase {
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        if (this.dialogTitleBar) {
            // when opening component inside dialog with service AND the component has defined its own titlebar
            this.dialogTitleBar.close.pipe(filter((e) => !e.isDefaultPrevented())).subscribe(() => {
                this.dialog.close();
            });
        }
        if (this.dialogActions) {
            if (this.dialogActions.actions) {
                this.dialogActions.action.subscribe(action => this.dialog.dialog.instance.action.emit(action));
            }
        }
    }
}
DialogContentBase.ɵfac = function DialogContentBase_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
DialogContentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DialogContentBase, viewQuery: function DialogContentBase_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DialogTitleBarComponent, 5);
        ɵngcc0.ɵɵviewQuery(DialogActionsComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dialogTitleBar = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dialogActions = _t.first);
    } } });
__decorate([
    ViewChild(DialogTitleBarComponent, { static: false }),
    __metadata("design:type", DialogTitleBarComponent)
], DialogContentBase.prototype, "dialogTitleBar", void 0);
__decorate([
    ViewChild(DialogActionsComponent, { static: false }),
    __metadata("design:type", DialogActionsComponent)
], DialogContentBase.prototype, "dialogActions", void 0);

var DialogContainerService_1;
/**
 * @hidden
 */
let DialogContainerService = DialogContainerService_1 = class DialogContainerService {
    set container(container) {
        DialogContainerService_1.container = container;
    }
    get container() {
        return DialogContainerService_1.container;
    }
};
DialogContainerService.ɵfac = function DialogContainerService_Factory(t) { return new (t || DialogContainerService)(); };
DialogContainerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DialogContainerService, factory: function (t) { return DialogContainerService.ɵfac(t); } });
DialogContainerService.container = null;

const isNotComponent = (component) => isString(component) || component instanceof TemplateRef;
class DialogInjector {
    constructor(getDialogRef, parentInjector) {
        this.getDialogRef = getDialogRef;
        this.parentInjector = parentInjector;
    }
    get(token, notFoundValue) {
        if (token === DialogRef) {
            return this.getDialogRef();
        }
        return this.parentInjector.get(token, notFoundValue);
    }
}
/**
 * A service for opening Dialog windows dynamically
 * ([see example]({% slug service_dialog %})).
 */
let DialogService = class DialogService {
    constructor(
    /**
     * @hidden
     */
    resolver, containerService) {
        this.resolver = resolver;
        this.containerService = containerService;
    }
    /**
     * Opens a Dialog window. Requires an element in the application that uses the
     * [`kendoDialogContainer`]({% slug api_dialog_dialogcontainerdirective %}) directive.
     * Created Dialogs will be mounted in the DOM directly after that element.
     *
     * @param {DialogAction} options - The options that define the Dialog.
     * @returns {DialogRef} - A reference to the Dialog object and the convenience properties.
     *
     * @example
     *
     * ```ts-no-run
     * _@Component({
     *   selector: 'my-app',
     *   template: `
     *     <button kendoButton (click)="open()">Harmless button</button>
     *     <div kendoDialogContainer></div>
     *   `
     * })
     * export class AppComponent {
     *     constructor( private dialogService: DialogService ) {}
     *
     *     public open() {
     *         var dialog = this.dialogService.open({
     *           title: "Please confirm",
     *           content: "Are you sure?",
     *           actions: [
     *             { text: "No" },
     *             { text: "Yes", themeColor: 'primary' }
     *           ]
     *         });
     *
     *         dialog.result.subscribe((result) => {
     *           if (result instanceof DialogCloseResult) {
     *             console.log("close");
     *           } else {
     *             console.log("action", result);
     *           }
     *         });
     *     }
     * }
     * ```
     *
     */
    open(options) {
        const factory = this.resolver.resolveComponentFactory(DialogComponent);
        const container = options.appendTo || this.containerService.container;
        if (!container) {
            throw new Error(`
Cannot attach dialog to the page.
Add an element that uses the kendoDialogContainer directive, or set the 'appendTo' property.
See https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service/.
          `);
        }
        // create DialogRef to (1) pass as result, (2) provide through injector
        const dialogRef = {
            close: () => {
                /* noop */
            },
            content: null,
            dialog: null,
            result: null
        };
        return this.initializeDialog(options.content, factory, container, dialogRef, options);
    }
    initializeDialog(component, factory, container, dialogRef, options) {
        const content = this.contentFrom(component, container, dialogRef);
        const dialog = container.createComponent(factory, undefined, undefined, content.nodes);
        dialogRef.dialog = dialog;
        dialog.changeDetectorRef.markForCheck();
        // copy @Input options to dialog instance
        this.applyOptions(dialog.instance, options);
        // create close handler and result stream
        const apiClose = new Subject();
        const close = (e) => {
            if (e instanceof PreventableEvent) {
                e = new DialogCloseResult();
            }
            apiClose.next(e || new DialogCloseResult());
            if (content.componentRef) {
                content.componentRef.destroy();
            }
            dialog.destroy();
        };
        const result = merge(apiClose, 
        // triggered when the titlebar or actions are defined in DialogSettings
        merge(dialog.instance.close, dialog.instance.action).pipe(map(e => (e instanceof PreventableEvent ? new DialogCloseResult() : e)), filter(e => {
            if (options.preventAction) {
                // add dialogRef only when using component
                const dialogRefParameter = isNotComponent(component) ? undefined : dialogRef;
                return !options.preventAction(e, dialogRefParameter);
            }
            return true;
        }))).pipe(take(1), 
        // Takes care for multiple subscriptions:
        // We subscribe internaly and the user may subscribe to get a close result - dialog.result.subscribe().
        // This causes multiple subscriptions to the same source and thus multiple emissions. share() solves that.
        share());
        result.subscribe(close);
        dialogRef.close = close;
        dialogRef.result = result;
        if (component && isDevMode()) {
            const hasContentTitle = content.nodes[0] && content.nodes[0].length > 0;
            const hasContentActions = content.nodes[2] && content.nodes[2].length > 0;
            const multipleTitles = options.title && hasContentTitle;
            const multipleActions = options.actions && hasContentActions;
            if (component.prototype instanceof DialogContentBase) {
                // content component extends DialogContentBase
                if (multipleTitles || multipleActions) {
                    console.warn(`
                    Multiple Title and/or Actions configurations detected.
                    When using a component as content, provide the title and actions either in the component's markup
                    or via the title and actions properties of the DialogSettings object, but not both.
                    See https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service/#toc-passing-title-content-and-actions-as-a-single-component'`);
                }
            }
            else {
                if (hasContentTitle || hasContentActions) {
                    console.warn(`
                    When Title and/or Actions markup is provided in content component's template,
                    the component needs to inherit the DialogContentBase class to ensure that close and result events are properly hooked.
                    See https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service/#toc-passing-title-content-and-actions-as-a-single-component'`);
                }
            }
        }
        return dialogRef;
    }
    applyOptions(instance, options) {
        instance.title = options.title;
        instance.actions = options.actions;
        instance.actionsLayout = options.actionsLayout || 'stretched';
        instance.width = options.width;
        instance.minWidth = options.minWidth;
        instance.maxWidth = options.maxWidth;
        instance.height = options.height;
        instance.minHeight = options.minHeight;
        instance.maxHeight = options.maxHeight;
        instance.autoFocusedElement = options.autoFocusedElement;
        instance.closeTitle = options.closeTitle;
        instance.cssClass = options.cssClass;
        instance.htmlAttributes = options.htmlAttributes;
        if (options.content instanceof TemplateRef) {
            instance.contentTemplate = options.content;
        }
    }
    contentFrom(content, container, dialogRef) {
        const renderer = container.injector.get(Renderer2);
        let nodes = [];
        let titleNodes = [];
        let actionNodes = [];
        let componentRef = null;
        if (typeof content === 'string') {
            nodes = [renderer.createText(content)];
        }
        else if (content && !(content instanceof TemplateRef)) {
            // Component
            const injector = new DialogInjector(() => dialogRef, container.injector);
            const factory = this.resolver.resolveComponentFactory(content);
            componentRef = container.createComponent(factory, undefined, injector);
            titleNodes = Array.from(componentRef.location.nativeElement.querySelectorAll('kendo-dialog-titlebar'));
            nodes = [componentRef.location.nativeElement];
            actionNodes = Array.from(componentRef.location.nativeElement.querySelectorAll('kendo-dialog-actions'));
            dialogRef.content = componentRef;
        }
        return {
            componentRef,
            nodes: [
                titleNodes,
                nodes,
                actionNodes // <ng-content select="kendo-dialog-actions">
            ]
        };
    }
};
DialogService.ɵfac = function DialogService_Factory(t) { return new (t || DialogService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(DialogContainerService)); };
DialogService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DialogService, factory: function (t) { return DialogService.ɵfac(t); } });
DialogService = __decorate([ __param(1, Inject(DialogContainerService)),
    __metadata("design:paramtypes", [ComponentFactoryResolver,
        DialogContainerService])
], DialogService);

/**
 * @hidden
 */
let newZIndex = 10002;
/**
 * @hidden
 */
const DEFAULT_OPTIONS = {
    draggable: true,
    height: null,
    left: null,
    minHeight: 100,
    minWidth: 120,
    position: 'absolute',
    resizable: true,
    state: 'default',
    top: null,
    width: null
};
/**
 * @hidden
 */
const createMoveStream = (el, ev) => mouseDown => {
    return el.kendoDrag
        .pipe(takeUntil(el.kendoRelease.pipe(tap(() => { ev.emit(); }))), map(({ pageX, pageY }) => ({
        originalX: mouseDown.pageX,
        originalY: mouseDown.pageY,
        pageX,
        pageY
    })));
};
/**
 * @hidden
 */
let DragResizeService = class DragResizeService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.close = new EventEmitter();
        this.focus = new EventEmitter();
        this.change = new EventEmitter();
        this.stateChange = new EventEmitter();
        this.dragStart = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this.resizeStart = new EventEmitter();
        this.resizeEnd = new EventEmitter();
        this.options = Object.assign({}, DEFAULT_OPTIONS);
        this.lastAction = null;
        this.subscriptions = new Subscription();
        this.dragSubscription = new Subscription();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        if (this.dragSubscription) {
            this.dragSubscription.unsubscribe();
        }
    }
    init(el) {
        const state$$1 = this.options.state;
        let options = this.options;
        this.window = el;
        if (state$$1 !== 'default') {
            this.restoreOptions = Object.assign({}, options);
        }
        if (state$$1 === 'minimized') {
            options.height = 0;
            options.minHeight = 0;
        }
        if (state$$1 === 'maximized') {
            options.position = 'fixed';
        }
    }
    onDrag(el) {
        this.subscriptions.add(this.ngZone.runOutsideAngular(() => {
            let startPosition;
            let dragStarted;
            this.dragSubscription = el.kendoPress
                .pipe(tap((ev) => {
                if (!ev.isTouch) {
                    preventDefault(ev);
                }
                this.focus.emit();
                startPosition = this.currentPosition();
                dragStarted = false;
            }), switchMap(createMoveStream(el, this.dragEnd)))
                .subscribe(({ pageX, pageY, originalX, originalY }) => {
                if (!dragStarted) {
                    this.ensureWidth();
                    this.dragStart.emit();
                    dragStarted = true;
                }
                this.handleDrag({
                    originalX, originalY,
                    pageX, pageY, startPosition
                });
            });
        }));
    }
    handleDrag({ originalX, originalY, pageX, pageY, startPosition }) {
        this.options.left = startPosition.x + pageX - originalX;
        this.options.top = startPosition.y + pageY - originalY;
        if (this.options.state === 'minimized' && isPresent(this.restoreOptions)) {
            this.restoreOptions.left = this.options.left;
            this.restoreOptions.top = this.options.top;
        }
        this.change.emit({
            left: startPosition.x + pageX - originalX,
            top: startPosition.y + pageY - originalY
        });
    }
    onResize(handle, direction) {
        this.subscriptions.add(this.ngZone.runOutsideAngular(() => {
            let startOffsetAndPosition;
            let resizeStarted = false;
            handle.kendoPress.pipe(tap((ev) => {
                preventDefault(ev);
                this.focus.emit();
                startOffsetAndPosition = this.currentOffsetAndPosition();
                resizeStarted = false;
            }), switchMap(createMoveStream(handle, this.resizeEnd)))
                .subscribe(({ pageX, pageY, originalX, originalY }) => {
                if (!resizeStarted) {
                    this.resizeStart.emit(direction);
                    resizeStarted = true;
                }
                let deltaX = pageX - originalX;
                let deltaY = pageY - originalY;
                this.handleResize(startOffsetAndPosition, direction, deltaX, deltaY);
            });
        }));
    }
    handleResize(initial, dir, deltaX, deltaY) {
        const old = this.options;
        let ev = {};
        if (dir.indexOf('e') >= 0) {
            const newWidth = initial.width + deltaX;
            if (newWidth !== old.width && newWidth >= old.minWidth) {
                ev.width = newWidth;
            }
        }
        if (dir.indexOf('n') >= 0) {
            const newHeight = initial.height - deltaY;
            const newTop = initial.y + deltaY;
            if (newHeight !== old.height && newHeight >= old.minHeight && newTop !== old.top) {
                ev.height = newHeight;
                ev.top = newTop;
            }
        }
        if (dir.indexOf('s') >= 0) {
            const newHeight = initial.height + deltaY;
            if (newHeight !== old.height && newHeight >= old.minHeight) {
                ev.height = newHeight;
            }
        }
        if (dir.indexOf('w') >= 0) {
            const newLeft = initial.x + deltaX;
            const newWidth = initial.width - deltaX;
            if (newWidth !== old.width && newWidth >= old.minWidth && newLeft !== old.left) {
                ev.width = newWidth;
                ev.left = newLeft;
            }
        }
        if (isPresent(ev.width) || isPresent(ev.height)) {
            OFFSET_STYLES.forEach((style$$1) => {
                if (isPresent(ev[style$$1])) {
                    this.options[style$$1] = ev[style$$1];
                }
            });
            this.change.emit(ev);
        }
    }
    restoreAction() {
        this.lastAction = 'restore';
        this.defaultState();
    }
    defaultState() {
        if (isPresent(this.restoreOptions)) {
            this.options = Object.assign({}, this.restoreOptions);
        }
        this.options.state = 'default';
        this.stateChange.emit('default');
    }
    storeOptions() {
        this.restoreOptions = Object.assign({}, this.options);
    }
    maximizeAction() {
        this.lastAction = 'maximize';
        this.maximizeState();
    }
    maximizeState() {
        this.storeOptions();
        const wnd = this.windowViewPort;
        this.options = Object.assign({}, this.options, {
            height: wnd.height,
            left: 0,
            position: 'fixed',
            state: 'maximized',
            top: 0,
            width: wnd.width
        });
        this.stateChange.emit('maximized');
    }
    minimizeAction() {
        this.lastAction = 'minimize';
        this.minimizeState();
    }
    minimizeState() {
        this.storeOptions();
        this.options = Object.assign({}, this.options, {
            height: null,
            minHeight: 0,
            state: 'minimized'
        });
        this.stateChange.emit('minimized');
    }
    /**
     * Handles manual changes of the 'state' property.
     * Required to distinguish them from action clicks.
     */
    applyManualState() {
        const state$$1 = this.options.state;
        switch (state$$1) {
            case 'default':
                this.clearHeight();
                this.defaultState();
                break;
            case 'maximized':
                this.clearHeight();
                this.maximizeState();
                break;
            case 'minimized':
                this.minimizeState();
                break;
            default:
                break;
        }
    }
    closeAction() {
        this.close.emit();
    }
    ensureWidth() {
        const windowOffset = offset(this.window.nativeElement);
        if (!isPresent(this.options.width)) {
            this.options.width = windowOffset.width;
            this.change.emit({ width: windowOffset.width });
        }
    }
    clearHeight() {
        if (this.options.height === 0) {
            delete this.options.height;
        }
        if (this.options.minHeight === 0) {
            delete this.options.minHeight;
        }
    }
    center() {
        if (this.options.state === 'maximized') {
            return;
        }
        let scroll = scrollPosition(this.window.nativeElement);
        let wnd = this.windowViewPort;
        let wrapper = offset(this.window.nativeElement);
        let ev = {};
        if (!isPresent(this.options.left)) {
            this.options.left = scroll.x + Math.max(0, (wnd.width - wrapper.width) / 2);
            ev.left = this.options.left;
        }
        if (!isPresent(this.options.top)) {
            this.options.top = scroll.y + Math.max(0, (wnd.height - wrapper.height) / 2);
            ev.top = this.options.top;
        }
        this.change.emit(ev);
    }
    currentOffsetAndPosition() {
        const o = this.options;
        const off = offset(this.window.nativeElement);
        return Object.assign({}, this.currentPosition(), {
            height: o.height ? o.height : off.height,
            width: o.width ? o.width : off.width
        });
    }
    currentPosition() {
        const o = this.options;
        if (!o.top || !o.left) {
            this.setPosition();
        }
        return {
            x: this.options.left,
            y: this.options.top
        };
    }
    setPosition() {
        const wrapper = positionWithScroll(this.window.nativeElement, getDocumentElement(this.window.nativeElement));
        this.options.left = wrapper.left;
        this.options.top = wrapper.top;
    }
    setRestoreOption(style$$1, value) {
        if (isPresent(this.restoreOptions)) {
            this.restoreOptions[style$$1] = value;
        }
    }
    get nextPossibleZIndex() {
        return newZIndex;
    }
    get nextZIndex() {
        return newZIndex++;
    }
    get windowViewPort() {
        return getWindowViewPort(this.window.nativeElement);
    }
};
DragResizeService.ɵfac = function DragResizeService_Factory(t) { return new (t || DragResizeService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
DragResizeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DragResizeService, factory: function (t) { return DragResizeService.ɵfac(t); } });
DragResizeService = __decorate([ __metadata("design:paramtypes", [NgZone])
], DragResizeService);

/**
 * @hidden
 */
let ResizeHandleDirective = class ResizeHandleDirective {
    constructor(draggable, el, renderer, service) {
        this.draggable = draggable;
        this.el = el;
        this.renderer = renderer;
        this.service = service;
        this.subscriptions = new Subscription();
    }
    get hostClass() {
        return true;
    }
    ngOnInit() {
        this.setDisplay();
        this.renderer.addClass(this.el.nativeElement, 'k-resize-' + this.direction);
        this.subscriptions.add(of(this.draggable).subscribe(handle => {
            this.service.onResize(handle, this.direction);
        }));
        this.subscriptions.add(this.service.resizeStart.subscribe((dir) => {
            if (dir !== this.direction) {
                this.setDisplay('none');
            }
        }));
        this.subscriptions.add(this.service.dragStart.subscribe(() => {
            this.setDisplay('none');
        }));
        this.subscriptions.add(merge(this.service.resizeEnd, this.service.dragEnd).subscribe(() => {
            this.setDisplay('block');
        }));
        this.subscriptions.add(this.service.stateChange.subscribe((state$$1) => {
            this.setDisplay(state$$1 === 'default' ? 'block' : 'none');
        }));
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    setDisplay(value = 'block') {
        this.renderer.setStyle(this.el.nativeElement, 'display', this.service.options.state === 'default' ? value : 'none');
    }
};
ResizeHandleDirective.ɵfac = function ResizeHandleDirective_Factory(t) { return new (t || ResizeHandleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DraggableDirective, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService)); };
ResizeHandleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ResizeHandleDirective, selectors: [["", "kendoWindowResizeHandle", ""]], hostVars: 2, hostBindings: function ResizeHandleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-resize-handle", ctx.hostClass);
    } }, inputs: { direction: "direction" } });
__decorate([
    Input(),
    __metadata("design:type", String)
], ResizeHandleDirective.prototype, "direction", void 0);
__decorate([
    HostBinding('class.k-resize-handle'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ResizeHandleDirective.prototype, "hostClass", null);
ResizeHandleDirective = __decorate([ __param(0, Host()),
    __metadata("design:paramtypes", [DraggableDirective,
        ElementRef,
        Renderer2,
        DragResizeService])
], ResizeHandleDirective);

let WindowTitleBarComponent = class WindowTitleBarComponent {
    constructor(el, service, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        this.service = service;
    }
    ngOnInit() {
        this.dragDirective = new DraggableDirective(this.el, this.ngZone);
        this.dragDirective.ngOnInit();
        if (this.isDraggable) {
            this.subscribeDrag();
        }
        this.subscribeStateChange();
    }
    ngOnDestroy() {
        this.dragDirective.ngOnDestroy();
        this.unsubscribeDrag();
        this.unsubscribeState();
    }
    /**
     * @hidden
     */
    subscribeDrag() {
        this.unsubscribeDrag();
        this.dragSubscription = of(this.dragDirective).subscribe(titleBar => {
            this.service.onDrag(titleBar);
        });
    }
    /**
     * @hidden
     */
    subscribeStateChange() {
        this.stateSubscription = this.service.stateChange.subscribe((state$$1) => {
            if (this.service.options.draggable) {
                if (state$$1 === 'maximized') {
                    this.unsubscribeDrag();
                }
                else {
                    this.subscribeDrag();
                }
            }
        });
    }
    /**
     * @hidden
     */
    unsubscribeDrag() {
        if (this.dragSubscription) {
            this.service.dragSubscription.unsubscribe();
            this.dragSubscription.unsubscribe();
            this.dragSubscription = null;
        }
    }
    /**
     * @hidden
     */
    unsubscribeState() {
        if (this.stateSubscription) {
            this.stateSubscription.unsubscribe();
            this.stateSubscription = null;
        }
    }
    get className() {
        return true;
    }
    get touchAction() {
        if (this.isDraggable) {
            return 'none';
        }
    }
    /**
     * @hidden
     */
    handle(ev) {
        const target = ev.target;
        const state$$1 = this.service.options.state;
        if (!hasClasses(target, 'k-icon') && !isFocusable(target, false) && this.service.options.resizable) {
            if (state$$1 === 'default') {
                this.service.maximizeAction();
            }
            else if (state$$1 === 'maximized') {
                this.service.restoreAction();
            }
        }
    }
    get isDraggable() {
        const options = this.service.options;
        return options.draggable && options.state !== 'maximized';
    }
};
WindowTitleBarComponent.ɵfac = function WindowTitleBarComponent_Factory(t) { return new (t || WindowTitleBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragResizeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
WindowTitleBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WindowTitleBarComponent, selectors: [["kendo-window-titlebar"]], hostVars: 6, hostBindings: function WindowTitleBarComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dblclick", function WindowTitleBarComponent_dblclick_HostBindingHandler($event) { return ctx.handle($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("touch-action", ctx.touchAction);
        ɵngcc0.ɵɵclassProp("k-window-titlebar", ctx.className)("k-dialog-titlebar", ctx.className);
    } }, inputs: { template: "template" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function WindowTitleBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, WindowTitleBarComponent_ng_content_0_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵtemplate(1, WindowTitleBarComponent_1_Template, 1, 4, null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.template);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], WindowTitleBarComponent.prototype, "template", void 0);
__decorate([
    HostBinding('class.k-window-titlebar'),
    HostBinding('class.k-dialog-titlebar'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], WindowTitleBarComponent.prototype, "className", null);
__decorate([
    HostBinding('style.touch-action'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowTitleBarComponent.prototype, "touchAction", null);
__decorate([
    HostListener('dblclick', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], WindowTitleBarComponent.prototype, "handle", null);
WindowTitleBarComponent = __decorate([ __metadata("design:paramtypes", [ElementRef, DragResizeService, NgZone])
], WindowTitleBarComponent);

/**
 * @hidden
 */
let NavigationService = class NavigationService {
    constructor(window, ngZone) {
        this.window = window;
        this.ngZone = ngZone;
    }
    process(ev) {
        const key = ev.keyCode;
        switch (key) {
            case Keys.up:
            case Keys.down:
            case Keys.left:
            case Keys.right: {
                ev.preventDefault();
                this.ngZone.run(() => {
                    this.handleArrow(key, ev);
                });
                break;
            }
            case Keys.esc:
                this.ngZone.run(() => {
                    this.handleEscape();
                });
                break;
            default:
                break;
        }
    }
    handleArrow(key, ev) {
        const options = this.window.options;
        if (ev.altKey) {
            this.handleStateChange(key, options.state);
            return;
        }
        if ((ev.ctrlKey || ev.metaKey) && options.state === 'default') {
            this.handleResize(key);
        }
        else {
            this.handleDrag(key);
        }
    }
    handleEscape() {
        this.window.closeAction();
    }
    handleDrag(key) {
        let options = this.window.options;
        if (!options.draggable) {
            return;
        }
        const offset$$1 = this.window.currentOffsetAndPosition();
        let restoreOptions = this.window.restoreOptions;
        let ev = {};
        let delta = 10;
        if (key === Keys.left || key === Keys.up) {
            delta *= -1;
        }
        switch (key) {
            case Keys.left:
            case Keys.right: {
                ev.left = offset$$1.x + delta;
                options.left = ev.left;
                break;
            }
            case Keys.up:
            case Keys.down: {
                ev.top = offset$$1.y + delta;
                options.top = ev.top;
                break;
            }
            default:
                break;
        }
        if (options.state === 'minimized' && isPresent(restoreOptions)) {
            restoreOptions.left = options.left;
            restoreOptions.top = options.top;
        }
        this.window.change.emit(ev);
    }
    handleResize(key) {
        const options = this.window.options;
        if (!options.resizable) {
            return;
        }
        const offset$$1 = this.window.currentOffsetAndPosition();
        let newWidth;
        let newHeight;
        let ev = {};
        let delta = 10;
        if (key === Keys.left || key === Keys.up) {
            delta *= -1;
        }
        switch (key) {
            case Keys.left:
            case Keys.right: {
                newWidth = offset$$1.width + delta;
                if (newWidth !== options.width && newWidth >= options.minWidth) {
                    ev.width = newWidth;
                }
                break;
            }
            case Keys.up:
            case Keys.down: {
                newHeight = offset$$1.height + delta;
                if (newHeight !== options.height && newHeight >= options.minHeight) {
                    ev.height = newHeight;
                }
                break;
            }
            default:
                break;
        }
        if (isPresent(ev.width) || isPresent(ev.height)) {
            OFFSET_STYLES.forEach((style$$1) => {
                if (isPresent(ev[style$$1])) {
                    this.window.options[style$$1] = ev[style$$1];
                }
            });
            this.window.change.emit(ev);
        }
    }
    handleStateChange(key, state$$1) {
        if ((state$$1 === 'minimized' && key === Keys.up) ||
            (state$$1 === 'maximized' && key === Keys.down)) {
            this.window.restoreAction();
            return;
        }
        if (state$$1 === 'default') {
            if (key === Keys.up) {
                this.window.maximizeAction();
            }
            else if (key === Keys.down) {
                this.window.minimizeAction();
            }
        }
    }
};
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(DragResizeService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
NavigationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: function (t) { return NavigationService.ɵfac(t); } });
NavigationService = __decorate([ __metadata("design:paramtypes", [DragResizeService,
        NgZone])
], NavigationService);

/**
 * Represents the [Kendo UI Window component for Angular]({% slug overview_window_dialogs %}).
 */
let WindowComponent = class WindowComponent {
    constructor(el, renderer, service, navigation, ngZone, localization) {
        this.el = el;
        this.renderer = renderer;
        this.service = service;
        this.navigation = navigation;
        this.ngZone = ngZone;
        this.localization = localization;
        /**
         * Specifies if the content of the component is persisted in the DOM when minimized.
         * @default false
         */
        this.keepContent = false;
        /**
         * Fires when the user starts to move the Window.
         */
        this.dragStart = new EventEmitter();
        /**
         * Fires when the Window was moved by the user.
         */
        this.dragEnd = new EventEmitter();
        /**
         * Fires when the user starts to resize the Window.
         */
        this.resizeStart = new EventEmitter();
        /**
         * Fires when the Window was resized by the user.
         */
        this.resizeEnd = new EventEmitter();
        /**
         * Fires when the user closes the Window.
         */
        this.close = new EventEmitter();
        /**
         * Fires when the `width` property of the component was updated. The event is triggered only after the resizing
         * has ended. The event data contains the new width. Allows a two-way binding of the `width` property.
         */
        this.widthChange = new EventEmitter();
        /**
         * Fires when the `height` property of the component was updated. The event is triggered only after the resizing
         * has ended. The event data contains the new height. Allows a two-way binding of the `height` property.
         */
        this.heightChange = new EventEmitter();
        /**
         * Fires when the `top` property of the component was updated. The event is triggered only after the dragging
         * and resizing have ended. The event data contains the new top offset. Allows a two-way binding of the `top` property.
         */
        this.topChange = new EventEmitter();
        /**
         * Fires when the `left` property of the component was updated. The event is triggered only after the dragging
         * and resizing have ended. The event data contains the new left offset. Allows a two-way binding of the `left` property.
         */
        this.leftChange = new EventEmitter();
        /**
         * Fires when the `state` property of the component was updated. The event data contains the new state. Allows a
         * two-way binding of the `state` property.
         */
        this.stateChange = new EventEmitter();
        /**
         * @hidden
         */
        this.messages = {};
        this.tabIndex = 0;
        this.draged = false;
        this.resized = false;
        this.windowSubscription = new Subscription();
        this.domSubs = new Subscription();
        validatePackage(packageMetadata);
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
        this.localizationChangeSubscription = this.localization.changes
            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
        this.resizeDirections = RESIZE_DIRECTIONS;
        this.subscribeEvents();
    }
    /**
     * Specifies whether the user will be able to drag the component.
     * @default true
     */
    set draggable(value) {
        this.options.draggable = value;
    }
    get draggable() {
        return this.options.draggable;
    }
    /**
     * Specifies whether the user will be able to resize the component.
     * @default true
     */
    set resizable(value) {
        this.options.resizable = value;
    }
    get resizable() {
        return this.options.resizable;
    }
    /**
     * @hidden
     */
    set cssClass(classes) {
        this.setServiceClasses(this._cssClass, classes);
        this._cssClass = classes;
    }
    get cssClass() {
        return this._cssClass;
    }
    /**
     * @hidden
     */
    set htmlAttributes(attributes) {
        setHTMLAttributes(attributes, this.renderer, this.el.nativeElement);
        const el = this.el.nativeElement;
        const dir = el.getAttribute('dir');
        const tIndex = el.getAttribute('tabindex');
        if (this.direction !== dir) {
            this.direction = dir;
        }
        if (this.tabIndex !== tIndex) {
            this.tabIndex = tIndex;
        }
        this._htmlAttributes = attributes;
    }
    get htmlAttributes() {
        return this._htmlAttributes;
    }
    /**
     * Specifies the initial state of the component.
     * If not specified, the value is set to `default`.
     *
     * The possible values are:
     * * `minimized`
     * * `maximized`
     * * `default`
     */
    set state(value) {
        this.options.state = value;
    }
    get state() {
        return this.options.state;
    }
    /**
     * Specifies the minimum width of the component.
     * The `minWidth` property has to be set in pixels.
     * @default 120
     */
    set minWidth(value) {
        this.setOption('minWidth', value);
    }
    get minWidth() {
        return this.options.minWidth;
    }
    /**
     * Specifies the minimum height of the Window.
     * The `minHeight` property has to be set in pixels.
     * @default 100
     */
    set minHeight(value) {
        this.setOption('minHeight', value);
    }
    get minHeight() {
        return this.options.minHeight;
    }
    /**
     * Specifies the width of the Window.
     * The `width` property has to be set in pixels.
     */
    set width(value) {
        this.setOption('width', value);
    }
    get width() {
        return this.options.width;
    }
    /**
     * Specifies the height of the Window.
     * The `height` property has to be set in pixels.
     */
    set height(value) {
        this.setOption('height', value);
    }
    get height() {
        return this.options.height;
    }
    /**
     * Specifies the initial top offset of the Window.
     * The `top` property has to be set in pixels.
     */
    set top(value) {
        this.setOption('top', value);
    }
    get top() {
        return this.options.top;
    }
    /**
     * Specifies the initial left offset of the Window.
     * Numeric values are treated as pixels.
     */
    set left(value) {
        this.setOption('left', value);
    }
    get left() {
        return this.options.left;
    }
    get closeButtonTitle() {
        if (this.messages && this.messages.closeTitle) {
            return this.messages.closeTitle;
        }
        return this.localization.get('closeTitle');
    }
    get restoreButtonTitle() {
        if (this.messages && this.messages.restoreTitle) {
            return this.messages.restoreTitle;
        }
        return this.localization.get('restoreTitle');
    }
    get maximizeButtonTitle() {
        if (this.messages && this.messages.maximizeTitle) {
            return this.messages.maximizeTitle;
        }
        return this.localization.get('maximizeTitle');
    }
    get minimizeButtonTitle() {
        if (this.messages && this.messages.minimizeTitle) {
            return this.messages.minimizeTitle;
        }
        return this.localization.get('minimizeTitle');
    }
    get hostClasses() {
        return true;
    }
    get dir() {
        return this.direction;
    }
    ngAfterViewInit() {
        this.setNextZIndex();
        this.handleInitialFocus();
        this.ngZone.runOutsideAngular(() => Promise.resolve(null).then(() => this.setInitialOffset()));
        this.initDomEvents();
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.el.nativeElement, 'title');
        this.service.init(this.el);
    }
    ngOnChanges(changes) {
        OFFSET_STYLES.forEach((style$$1) => {
            if (isChanged(style$$1, changes)) {
                this.setStyle(style$$1, this.options[style$$1]);
            }
        });
        if (isChanged('draggable', changes)) {
            const titleBar = isPresent(this.titleBarContent) ? this.titleBarContent : this.titleBarView;
            if (isTruthy(changes.draggable.currentValue)) {
                titleBar.subscribeDrag();
            }
            else {
                titleBar.unsubscribeDrag();
            }
        }
        if (isChanged('state', changes)) {
            if (isPresent(this.service.lastAction)) {
                this.service.lastAction = null;
            }
            else {
                this.service.applyManualState();
                this.updateAllOffset();
            }
        }
    }
    ngOnDestroy() {
        if (this.windowSubscription) {
            this.windowSubscription.unsubscribe();
        }
        if (this.domSubs) {
            this.domSubs.unsubscribe();
        }
        this.localizationChangeSubscription.unsubscribe();
    }
    /**
     * Focuses the wrapper of the Window component.
     */
    focus() {
        const wrapper = this.el.nativeElement;
        if (isPresent(wrapper)) {
            wrapper.focus();
        }
    }
    /**
     * Brings the current Window component on top of other Window components on the page.
     */
    bringToFront() {
        this.setNextZIndex();
    }
    /**
     * Manually updates the `width` or `height` option of the Window.
     * The required style will be applied to the Window wrapper element and the
     * corresponding property of the component instance will be updated.
     * This method is intended to be used for sizing dynamically created components using the
     * [`WindowService`]({% slug api_dialog_windowservice %})
     * @param {WindowDimensionSetting} dimension - The option that will be updated
     * @param {number} value - The value set in pixels
     */
    setDimension(dimension, value) {
        this.setOption(dimension, value);
        this.setStyle(dimension, value);
    }
    /**
     * Manually updates the `top` or `left` offset of the Window.
     * The required style will be applied to the Window wrapper element and the
     * corresponding property of the component instance will be updated.
     * This method is intended to be used for positioning dynamically created components using the
     * [`WindowService`]({% slug api_dialog_windowservice %})
     * @param {WindowOffsetSetting} offset - The option that will be updated
     * @param {number} value - The value set in pixels
     */
    setOffset(offset$$1, value) {
        this.setOption(offset$$1, value);
        this.setStyle(offset$$1, value);
    }
    get showDefaultTitleBar() {
        return !isPresent(this.titleBarContent);
    }
    get styleMinWidth() {
        return this.minWidth + 'px';
    }
    get styleMinHeight() {
        return this.minHeight + 'px';
    }
    get stylePosition() {
        return this.options.position;
    }
    get wrapperMaximizedClass() {
        return this.state === 'maximized';
    }
    get wrapperMinimizedClass() {
        return this.state === 'minimized';
    }
    /**
     * @hidden
     */
    onComponentFocus() {
        this.renderer.addClass(this.el.nativeElement, 'k-focus');
        this.setNextZIndex();
    }
    /**
     * @hidden
     */
    onComponentBlur() {
        this.renderer.removeClass(this.el.nativeElement, 'k-focus');
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.windowSubscription.add(this.service.focus.subscribe(() => {
            this.el.nativeElement.focus();
        }));
        this.windowSubscription.add(this.service.dragStart.subscribe(() => {
            this.draged = true;
            this.ngZone.run(() => {
                this.dragStart.emit();
            });
        }));
        this.windowSubscription.add(this.service.dragEnd.subscribe(() => {
            if (this.draged) {
                this.draged = false;
                this.ngZone.run(() => {
                    this.dragEnd.emit();
                });
            }
        }));
        this.windowSubscription.add(this.service.close.subscribe(() => {
            this.close.emit();
        }));
        this.windowSubscription.add(this.service.resizeStart.subscribe(() => {
            this.resized = true;
            this.ngZone.run(() => {
                this.resizeStart.emit();
            });
        }));
        this.windowSubscription.add(this.service.resizeEnd.subscribe(() => {
            if (this.resized) {
                this.resized = false;
                this.ngZone.run(() => {
                    this.resizeEnd.emit();
                });
            }
        }));
        this.windowSubscription.add(this.service.change.subscribe((ev) => {
            OFFSET_STYLES.forEach((style$$1) => {
                if (isPresent(ev[style$$1])) {
                    this.setStyle(style$$1, ev[style$$1]);
                    if (this.state !== 'maximized') {
                        const emitter = this[style$$1 + 'Change'];
                        if (emitter.observers.length) {
                            this.ngZone.run(() => {
                                emitter.emit(ev[style$$1]);
                            });
                        }
                    }
                }
            });
        }));
        this.windowSubscription.add(this.service.stateChange.subscribe((state$$1) => {
            if (isPresent(this.service.lastAction)) {
                this.updateAllOffset();
                this.stateChange.emit(state$$1);
            }
        }));
    }
    initDomEvents() {
        if (!this.el) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.domSubs.add(this.renderer.listen(this.el.nativeElement, 'keydown', (ev) => {
                this.onKeyDown(ev);
            }));
        });
    }
    onKeyDown(event) {
        if (hasClasses(event.target, WINDOW_CLASSES)) {
            this.navigation.process(event);
        }
    }
    setServiceClasses(prevValue, value) {
        const el = this.el.nativeElement;
        if (prevValue) {
            parseCSSClassNames(prevValue).forEach(className => {
                this.renderer.removeClass(el, className);
            });
        }
        if (value) {
            parseCSSClassNames(value).forEach(className => {
                this.renderer.addClass(el, className);
            });
        }
    }
    setNextZIndex() {
        const currentZIndex = this.el.nativeElement.style['z-index'];
        const nextPossibleZIndex = this.service.nextPossibleZIndex;
        if (!currentZIndex || (nextPossibleZIndex - currentZIndex > 1)) {
            this.renderer.setStyle(this.el.nativeElement, "z-index", this.service.nextZIndex);
        }
    }
    setInitialOffset() {
        if (this.state !== 'maximized') {
            this.updateAllOffset();
            if (!isPresent(this.left) || !isPresent(this.top)) {
                this.service.center();
            }
        }
        else {
            const viewPort = this.service.windowViewPort;
            this.setStyle('width', viewPort.width);
            this.setStyle('height', viewPort.height);
            this.setStyle('top', 0);
            this.setStyle('left', 0);
        }
    }
    updateAllOffset() {
        OFFSET_STYLES.forEach((style$$1) => {
            if (isPresent(this[style$$1])) {
                this.setStyle(style$$1, this[style$$1]);
            }
            else {
                this.removeStyle(style$$1);
            }
        });
    }
    setStyle(style$$1, value) {
        this.renderer.setStyle(this.el.nativeElement, style$$1, value + 'px');
    }
    removeStyle(style$$1) {
        this.renderer.removeStyle(this.el.nativeElement, style$$1);
    }
    get options() {
        return this.service.options;
    }
    setOption(style$$1, value) {
        if (typeof value !== 'number' && typeof value !== 'string') {
            return;
        }
        const parsedValue = (typeof value === 'number') ? value : parseInt(value, 10);
        this.options[style$$1] = parsedValue;
        this.service.setRestoreOption(style$$1, parsedValue);
    }
    handleInitialFocus() {
        const wrapper = this.el.nativeElement;
        if (this.autoFocusedElement) {
            const initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);
            if (initiallyFocusedElement) {
                initiallyFocusedElement.focus();
            }
        }
        else {
            this.focus();
        }
    }
};
WindowComponent.ɵfac = function WindowComponent_Factory(t) { return new (t || WindowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService)); };
WindowComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WindowComponent, selectors: [["kendo-window"]], contentQueries: function WindowComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, WindowTitleBarComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleBarContent = _t.first);
    } }, viewQuery: function WindowComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(WindowTitleBarComponent, 5);
        ɵngcc0.ɵɵviewQuery(ResizeHandleDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleBarView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.resizeHandles = _t);
    } }, hostVars: 14, hostBindings: function WindowComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function WindowComponent_focus_HostBindingHandler() { return ctx.onComponentFocus(); })("blur", function WindowComponent_blur_HostBindingHandler() { return ctx.onComponentBlur(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabIndex", ctx.tabIndex)("dir", ctx.dir);
        ɵngcc0.ɵɵstyleProp("min-width", ctx.styleMinWidth)("min-height", ctx.styleMinHeight)("position", ctx.stylePosition);
        ɵngcc0.ɵɵclassProp("k-window", ctx.hostClasses)("k-window-maximized", ctx.wrapperMaximizedClass)("k-window-minimized", ctx.wrapperMinimizedClass);
    } }, inputs: { keepContent: "keepContent", draggable: "draggable", resizable: "resizable", state: "state", minWidth: "minWidth", minHeight: "minHeight", width: "width", height: "height", top: "top", left: "left", autoFocusedElement: "autoFocusedElement", title: "title" }, outputs: { dragStart: "dragStart", dragEnd: "dragEnd", resizeStart: "resizeStart", resizeEnd: "resizeEnd", close: "close", widthChange: "widthChange", heightChange: "heightChange", topChange: "topChange", leftChange: "leftChange", stateChange: "stateChange" }, exportAs: ["kendoWindow"], features: [ɵngcc0.ɵɵProvidersFeature([
            DragResizeService,
            NavigationService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.window'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c17, decls: 6, vars: 4, consts: function () { let i18n_8; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the close button
         * @meaning kendo.window.closeTitle
         */
        const MSG_EXTERNAL_2849207436137160812$$DIST_FESM2015_INDEX_JS_9 = goog.getMsg("Close");
        i18n_8 = MSG_EXTERNAL_2849207436137160812$$DIST_FESM2015_INDEX_JS_9;
    }
    else {
        i18n_8 = $localize `:kendo.window.closeTitle|The title of the close button␟bb50cb526949482fc976fd868573ab283580ee69␟2849207436137160812:Close`;
    } let i18n_10; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the restore button
         * @meaning kendo.window.restoreTitle
         */
        const MSG_EXTERNAL_3443120027481340803$$DIST_FESM2015_INDEX_JS_11 = goog.getMsg("Restore");
        i18n_10 = MSG_EXTERNAL_3443120027481340803$$DIST_FESM2015_INDEX_JS_11;
    }
    else {
        i18n_10 = $localize `:kendo.window.restoreTitle|The title of the restore button␟9a9ce231f0396e40adcfa80bfa76e546e0085be0␟3443120027481340803:Restore`;
    } let i18n_12; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the maximize button
         * @meaning kendo.window.maximizeTitle
         */
        const MSG_EXTERNAL_7793415109119115257$$DIST_FESM2015_INDEX_JS_13 = goog.getMsg("Maximize");
        i18n_12 = MSG_EXTERNAL_7793415109119115257$$DIST_FESM2015_INDEX_JS_13;
    }
    else {
        i18n_12 = $localize `:kendo.window.maximizeTitle|The title of the maximize button␟42bc654ef8767c5df5277aa88941b94f8d373b4d␟7793415109119115257:Maximize`;
    } let i18n_14; if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
        /**
         * @desc The title of the minimize button
         * @meaning kendo.window.minimizeTitle
         */
        const MSG_EXTERNAL_7581084655285341827$$DIST_FESM2015_INDEX_JS_15 = goog.getMsg("Minimize");
        i18n_14 = MSG_EXTERNAL_7581084655285341827$$DIST_FESM2015_INDEX_JS_15;
    }
    else {
        i18n_14 = $localize `:kendo.window.minimizeTitle|The title of the minimize button␟7ca9f9b41a23760f7f74e91ee4c76d5a5f4a706c␟7581084655285341827:Minimize`;
    } return [["kendoWindowLocalizedMessages", "", "closeTitle", i18n_8, "restoreTitle", i18n_10, "maximizeTitle", i18n_12, "minimizeTitle", i18n_14], [3, "template", 4, "ngIf"], [4, "ngIf"], ["class", "k-content k-window-content", 3, "hidden", 4, "ngIf"], [3, "ngIf"], [3, "template"], [1, "k-window-title"], [1, "k-window-actions"], ["kendoWindowMinimizeAction", ""], ["kendoWindowMaximizeAction", ""], ["kendoWindowRestoreAction", ""], ["kendoWindowCloseAction", ""], [1, "k-content", "k-window-content", 3, "hidden"], [3, "ngTemplateOutlet"], ["kendoWindowResizeHandle", "", "kendoDraggable", "", 3, "direction", 4, "ngFor", "ngForOf"], ["kendoWindowResizeHandle", "", "kendoDraggable", "", 3, "direction"]]; }, template: function WindowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c16);
        ɵngcc0.ɵɵelementContainerStart(0, 0)(1);
        ɵngcc0.ɵɵtemplate(2, WindowComponent_kendo_window_titlebar_2_Template, 8, 10, "kendo-window-titlebar", 1);
        ɵngcc0.ɵɵtemplate(3, WindowComponent_ng_content_3_Template, 1, 0, "ng-content", 2);
        ɵngcc0.ɵɵtemplate(4, WindowComponent_div_4_Template, 3, 3, "div", 3);
        ɵngcc0.ɵɵtemplate(5, WindowComponent_ng_template_5_Template, 1, 1, "ng-template", 4);
        ɵngcc0.ɵɵelementContainerEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showDefaultTitleBar);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showDefaultTitleBar);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.state !== "minimized" || ctx.keepContent);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.resizable);
    } }, directives: function () { return [LocalizedMessagesDirective, ɵngcc1.NgIf, WindowTitleBarComponent, WindowMinimizeActionDirective, WindowMaximizeActionDirective, WindowRestoreActionDirective, WindowCloseActionDirective, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, ResizeHandleDirective, ɵngcc3.DraggableDirective]; }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], WindowComponent.prototype, "autoFocusedElement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], WindowComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], WindowComponent.prototype, "draggable", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], WindowComponent.prototype, "resizable", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], WindowComponent.prototype, "keepContent", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], WindowComponent.prototype, "state", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "minWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "minHeight", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "width", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "top", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WindowComponent.prototype, "left", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "dragStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "dragEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "resizeStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "resizeEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "close", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "widthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "topChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "leftChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], WindowComponent.prototype, "stateChange", void 0);
__decorate([
    HostBinding('attr.tabIndex'),
    __metadata("design:type", Number)
], WindowComponent.prototype, "tabIndex", void 0);
__decorate([
    HostBinding('class.k-window'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "hostClasses", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "dir", null);
__decorate([
    ViewChild(WindowTitleBarComponent, { static: false }),
    __metadata("design:type", WindowTitleBarComponent)
], WindowComponent.prototype, "titleBarView", void 0);
__decorate([
    ContentChild(WindowTitleBarComponent, { static: false }),
    __metadata("design:type", WindowTitleBarComponent)
], WindowComponent.prototype, "titleBarContent", void 0);
__decorate([
    ViewChildren(ResizeHandleDirective),
    __metadata("design:type", QueryList)
], WindowComponent.prototype, "resizeHandles", void 0);
__decorate([
    HostBinding('style.minWidth'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "styleMinWidth", null);
__decorate([
    HostBinding('style.minHeight'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "styleMinHeight", null);
__decorate([
    HostBinding('style.position'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "stylePosition", null);
__decorate([
    HostBinding('class.k-window-maximized'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "wrapperMaximizedClass", null);
__decorate([
    HostBinding('class.k-window-minimized'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], WindowComponent.prototype, "wrapperMinimizedClass", null);
__decorate([
    HostListener('focus'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowComponent.prototype, "onComponentFocus", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowComponent.prototype, "onComponentBlur", null);
WindowComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DragResizeService,
        NavigationService,
        NgZone,
        LocalizationService])
], WindowComponent);

let WindowMaximizeActionDirective = class WindowMaximizeActionDirective extends Button {
    constructor(el, renderer, _service, localization, ngZone) {
        super(el, renderer, null, localization, ngZone);
        this.buttonType = 'button';
        this.window = _service;
        this.fillMode = 'flat';
        this.icon = 'window-maximize';
    }
    /**
     * @hidden
     */
    onClick() {
        if (!this.isDisabled) {
            this.window.maximizeAction();
        }
    }
    get visible() {
        return this.window.options.state === 'default' ? 'inline-flex' : 'none';
    }
};
WindowMaximizeActionDirective.ɵfac = function WindowMaximizeActionDirective_Factory(t) { return new (t || WindowMaximizeActionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
WindowMaximizeActionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WindowMaximizeActionDirective, selectors: [["button", "kendoWindowMaximizeAction", ""]], hostVars: 3, hostBindings: function WindowMaximizeActionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WindowMaximizeActionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("type", ctx.buttonType);
        ɵngcc0.ɵɵstyleProp("display", ctx.visible);
    } }, inputs: { window: "window" }, exportAs: ["kendoWindowMaximizeAction"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.button'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], WindowMaximizeActionDirective.prototype, "window", void 0);
__decorate([
    HostBinding('attr.type'),
    __metadata("design:type", String)
], WindowMaximizeActionDirective.prototype, "buttonType", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowMaximizeActionDirective.prototype, "onClick", null);
__decorate([
    HostBinding('style.display'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowMaximizeActionDirective.prototype, "visible", null);
WindowMaximizeActionDirective = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DragResizeService,
        LocalizationService,
        NgZone])
], WindowMaximizeActionDirective);

let WindowMinimizeActionDirective = class WindowMinimizeActionDirective extends Button {
    constructor(el, renderer, _service, localization, ngZone) {
        super(el, renderer, null, localization, ngZone);
        this.buttonType = 'button';
        this.window = _service;
        this.fillMode = 'flat';
        this.icon = 'window-minimize';
    }
    /**
     * @hidden
     */
    onClick() {
        if (!this.isDisabled) {
            this.window.minimizeAction();
        }
    }
    get visible() {
        return this.window.options.state === 'default' ? 'inline-flex' : 'none';
    }
};
WindowMinimizeActionDirective.ɵfac = function WindowMinimizeActionDirective_Factory(t) { return new (t || WindowMinimizeActionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
WindowMinimizeActionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WindowMinimizeActionDirective, selectors: [["button", "kendoWindowMinimizeAction", ""]], hostVars: 3, hostBindings: function WindowMinimizeActionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WindowMinimizeActionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("type", ctx.buttonType);
        ɵngcc0.ɵɵstyleProp("display", ctx.visible);
    } }, inputs: { window: "window" }, exportAs: ["kendoWindowMinimizeAction"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.button'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], WindowMinimizeActionDirective.prototype, "window", void 0);
__decorate([
    HostBinding('attr.type'),
    __metadata("design:type", String)
], WindowMinimizeActionDirective.prototype, "buttonType", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowMinimizeActionDirective.prototype, "onClick", null);
__decorate([
    HostBinding('style.display'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowMinimizeActionDirective.prototype, "visible", null);
WindowMinimizeActionDirective = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DragResizeService,
        LocalizationService,
        NgZone])
], WindowMinimizeActionDirective);

let WindowCloseActionDirective = class WindowCloseActionDirective extends Button {
    constructor(el, renderer, _service, localization, ngZone) {
        super(el, renderer, null, localization, ngZone);
        this.buttonType = 'button';
        this.window = _service;
        this.fillMode = 'flat';
        this.icon = 'close';
    }
    /**
     * @hidden
     */
    onClick() {
        if (!this.isDisabled) {
            this.window.closeAction();
        }
    }
};
WindowCloseActionDirective.ɵfac = function WindowCloseActionDirective_Factory(t) { return new (t || WindowCloseActionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
WindowCloseActionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WindowCloseActionDirective, selectors: [["button", "kendoWindowCloseAction", ""]], hostVars: 1, hostBindings: function WindowCloseActionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WindowCloseActionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("type", ctx.buttonType);
    } }, inputs: { window: "window" }, exportAs: ["kendoWindowCloseAction"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.button'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], WindowCloseActionDirective.prototype, "window", void 0);
__decorate([
    HostBinding('attr.type'),
    __metadata("design:type", String)
], WindowCloseActionDirective.prototype, "buttonType", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowCloseActionDirective.prototype, "onClick", null);
WindowCloseActionDirective = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DragResizeService,
        LocalizationService,
        NgZone])
], WindowCloseActionDirective);

let WindowRestoreActionDirective = class WindowRestoreActionDirective extends Button {
    constructor(el, renderer, _service, localization, ngZone) {
        super(el, renderer, null, localization, ngZone);
        this.buttonType = 'button';
        this.window = _service;
        this.fillMode = 'flat';
        this.icon = 'window-restore';
    }
    /**
     * @hidden
     */
    onClick() {
        if (!this.isDisabled) {
            this.window.restoreAction();
        }
    }
    get visible() {
        return this.window.options.state === 'default' ? 'none' : 'inline-flex';
    }
};
WindowRestoreActionDirective.ɵfac = function WindowRestoreActionDirective_Factory(t) { return new (t || WindowRestoreActionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragResizeService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
WindowRestoreActionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WindowRestoreActionDirective, selectors: [["button", "kendoWindowRestoreAction", ""]], hostVars: 3, hostBindings: function WindowRestoreActionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WindowRestoreActionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("type", ctx.buttonType);
        ɵngcc0.ɵɵstyleProp("display", ctx.visible);
    } }, inputs: { window: "window" }, exportAs: ["kendoWindowRestoreAction"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.button'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], WindowRestoreActionDirective.prototype, "window", void 0);
__decorate([
    HostBinding('attr.type'),
    __metadata("design:type", String)
], WindowRestoreActionDirective.prototype, "buttonType", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WindowRestoreActionDirective.prototype, "onClick", null);
__decorate([
    HostBinding('style.display'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], WindowRestoreActionDirective.prototype, "visible", null);
WindowRestoreActionDirective = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DragResizeService,
        LocalizationService,
        NgZone])
], WindowRestoreActionDirective);

/**
 * The settings for the Window actions when the Window is opened through `WindowService`
 * ([see example]({% slug api_dialog_windowservice %}#toc-open)).
 */
class WindowSettings {
}
/**
 * Indicates that the **Close** button of a Window that is opened through `WindowService` is clicked.
 */
class WindowCloseResult {
}
/**
 * Holds references to the object instance of the Window.
 * Controls the Windows that were opened through `WindowService`
 * ([see example]({% slug api_dialog_windowservice %}#toc-open)).
 */
class WindowRef {
}

var WindowContainerService_1;
/**
 * @hidden
 */
let WindowContainerService = WindowContainerService_1 = class WindowContainerService {
    set container(container) {
        WindowContainerService_1.container = container;
    }
    get container() {
        return WindowContainerService_1.container;
    }
};
WindowContainerService.ɵfac = function WindowContainerService_Factory(t) { return new (t || WindowContainerService)(); };
WindowContainerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: WindowContainerService, factory: function (t) { return WindowContainerService.ɵfac(t); } });
WindowContainerService.container = null;

const isNotComponent$1 = (component) => isString(component) || component instanceof TemplateRef;
class WindowInjector {
    constructor(getWindowRef, parentInjector) {
        this.getWindowRef = getWindowRef;
        this.parentInjector = parentInjector;
    }
    get(token, notFoundValue) {
        if (token === WindowRef) {
            return this.getWindowRef();
        }
        return this.parentInjector.get(token, notFoundValue);
    }
}
/**
 * A service for opening Windows dynamically
 * ([see example]({% slug service_window %})).
 */
let WindowService = class WindowService {
    constructor(
    /**
     * @hidden
     */
    resolver, containerService) {
        this.resolver = resolver;
        this.containerService = containerService;
    }
    /**
     * Opens a Window component.
     *
     * @param {WindowSettings} settings - The settings that define the Window.
     * @returns {WindowRef} - A reference to the Window object.
     *
     * @example
     *
     * ```ts-no-run
     * _@Component({
     *   selector: 'my-app',
     *   template: `
     *     <button kendoButton (click)="open()">Open window</button>
     *     <div kendoWindowContainer></div>
     *   `
     * })
     * export class AppComponent {
     *     constructor( private windowService: WindowService ) {}
     *
     *     public open() {
     *         var window = this.windowService.open({
     *           title: "My window",
     *           content: "My content!"
     *         });
     *
     *         window.result.subscribe((result) => {
     *           if (result instanceof WindowCloseResult) {
     *             console.log("Window was closed");
     *           }
     *         });
     *     }
     * }
     * ```
     *
     */
    open(settings) {
        const factory = this.resolver.resolveComponentFactory(WindowComponent);
        const container = settings.appendTo || this.containerService.container;
        if (!container) {
            throw new Error(`Cannot attach window to the page.
                Add an element that uses the kendoWindowContainer directive, or set the 'appendTo' property.
                See https://www.telerik.com/kendo-angular-ui/components/dialogs/window/service/
            `);
        }
        const windowRef = {
            close: () => { },
            content: null,
            result: null,
            window: null
        };
        const content = this.contentFrom(settings.content, container, windowRef);
        const window = container.createComponent(factory, undefined, undefined, content.nodes);
        windowRef.window = window;
        this.applyOptions(window.instance, settings);
        const apiClose = new Subject();
        const close = (e) => {
            apiClose.next(e || new WindowCloseResult());
            if (content.componentRef) {
                content.componentRef.destroy();
            }
            window.destroy();
        };
        const result = merge(apiClose, window.instance.close.pipe(map(e => (e ? e : new WindowCloseResult())), filter((e) => {
            if (settings.preventClose) {
                // add windowRef only when using component
                const windowRefParameter = isNotComponent$1(settings.content) ? undefined : windowRef;
                return !settings.preventClose(e, windowRefParameter);
            }
            return true;
        }))).pipe(take(1), 
        // Takes care for multiple subscriptions:
        // We subscribe internally and the user may subscribe to get a close result - window.result.subscribe().
        // This causes multiple subscriptions to the same source and thus multiple emissions. share() solves that.
        share());
        result.subscribe(close);
        windowRef.close = close;
        windowRef.result = result;
        window.changeDetectorRef.markForCheck();
        return windowRef;
    }
    applyOptions(instance, options) {
        if (isPresent(options.htmlAttributes)) {
            instance.htmlAttributes = options.htmlAttributes;
        }
        if (isPresent(options.cssClass)) {
            instance.cssClass = options.cssClass;
        }
        if (isPresent(options.title)) {
            instance.title = options.title;
        }
        if (isPresent(options.keepContent)) {
            instance.keepContent = options.keepContent;
        }
        if (isPresent(options.width)) {
            instance.width = options.width;
        }
        if (isPresent(options.minWidth)) {
            instance.minWidth = options.minWidth;
        }
        if (isPresent(options.height)) {
            instance.height = options.height;
        }
        if (isPresent(options.minHeight)) {
            instance.minHeight = options.minHeight;
        }
        if (isPresent(options.left)) {
            instance.left = options.left;
        }
        if (isPresent(options.top)) {
            instance.top = options.top;
        }
        if (isPresent(options.draggable)) {
            instance.draggable = options.draggable;
        }
        if (isPresent(options.resizable)) {
            instance.resizable = options.resizable;
        }
        if (isPresent(options.messages && options.messages.closeTitle)) {
            instance.messages.closeTitle = options.messages.closeTitle;
        }
        if (isPresent(options.messages && options.messages.restoreTitle)) {
            instance.messages.restoreTitle = options.messages.restoreTitle;
        }
        if (isPresent(options.messages && options.messages.maximizeTitle)) {
            instance.messages.maximizeTitle = options.messages.maximizeTitle;
        }
        if (isPresent(options.messages && options.messages.minimizeTitle)) {
            instance.messages.minimizeTitle = options.messages.minimizeTitle;
        }
        if (isPresent(options.autoFocusedElement)) {
            instance.autoFocusedElement = options.autoFocusedElement;
        }
        if (isPresent(options.state)) {
            instance.state = options.state;
            if (options.state === 'minimized') {
                instance.keepContent = true;
            }
        }
        if (options.content instanceof TemplateRef) {
            instance.contentTemplate = options.content;
        }
        if (options.titleBarContent instanceof TemplateRef) {
            instance.titleBarTemplate = options.titleBarContent;
        }
    }
    contentFrom(content, container, windowRef) {
        const renderer = container.injector.get(Renderer2);
        let nodes = [];
        let componentRef = null;
        if (typeof content === 'string') {
            nodes = [renderer.createText(content)];
        }
        else if (content && !(content instanceof TemplateRef)) {
            const injector = new WindowInjector(() => windowRef, container.injector);
            const factory = this.resolver.resolveComponentFactory(content);
            componentRef = container.createComponent(factory, undefined, injector);
            nodes = [componentRef.location.nativeElement];
            windowRef.content = componentRef;
        }
        return {
            componentRef,
            nodes: [
                [],
                nodes // Content
            ]
        };
    }
};
WindowService.ɵfac = function WindowService_Factory(t) { return new (t || WindowService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(WindowContainerService)); };
WindowService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: WindowService, factory: function (t) { return WindowService.ɵfac(t); } });
WindowService = __decorate([ __param(1, Inject(WindowContainerService)),
    __metadata("design:paramtypes", [ComponentFactoryResolver,
        WindowContainerService])
], WindowService);

/**
 * Provides an insertion point for the Dialogs which are created through the
 * Dialog service ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 * Created Dialogs will be mounted after that element.
 *
 * @example
 * ```html-no-run
 * <div kendoDialogContainer></div>
 * ```
 */
let DialogContainerDirective = class DialogContainerDirective {
    constructor(container, service) {
        service.container = container;
    }
};
DialogContainerDirective.ɵfac = function DialogContainerDirective_Factory(t) { return new (t || DialogContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DialogContainerService)); };
DialogContainerDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DialogContainerDirective, selectors: [["", "kendoDialogContainer", ""]] });
DialogContainerDirective = __decorate([ __metadata("design:paramtypes", [ViewContainerRef,
        DialogContainerService])
], DialogContainerDirective);

/**
 * @hidden
 */
class Messages extends ComponentMessages {
}
Messages.ɵfac = /*@__PURE__*/ function () { let ɵMessages_BaseFactory; return function Messages_Factory(t) { return (ɵMessages_BaseFactory || (ɵMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Messages)))(t || Messages); }; }();
Messages.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: Messages, inputs: { closeTitle: "closeTitle", restoreTitle: "restoreTitle", maximizeTitle: "maximizeTitle", minimizeTitle: "minimizeTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "closeTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "restoreTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "maximizeTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], Messages.prototype, "minimizeTitle", void 0);

var LocalizedMessagesDirective_1;
/**
 * @hidden
 */
let LocalizedMessagesDirective = LocalizedMessagesDirective_1 = class LocalizedMessagesDirective extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
};
LocalizedMessagesDirective.ɵfac = function LocalizedMessagesDirective_Factory(t) { return new (t || LocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService)); };
LocalizedMessagesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective, selectors: [["", "kendoDialogLocalizedMessages", ""], ["", "kendoWindowLocalizedMessages", ""], ["", "kendoDialogTitleBarLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => LocalizedMessagesDirective_1)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
LocalizedMessagesDirective = LocalizedMessagesDirective_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], LocalizedMessagesDirective);

var CustomMessagesComponent_1;
/**
 * Custom component messages override default component messages
 * ([see example]({% slug globalization_dialogs %}#toc-localization)).
 */
let CustomMessagesComponent = CustomMessagesComponent_1 = class CustomMessagesComponent extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
};
CustomMessagesComponent.ɵfac = function CustomMessagesComponent_Factory(t) { return new (t || CustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocalizationService)); };
CustomMessagesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomMessagesComponent, selectors: [["kendo-dialog-messages"], ["kendo-window-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => CustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function CustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
CustomMessagesComponent = CustomMessagesComponent_1 = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], CustomMessagesComponent);

/**
 * @hidden
 */
const SHARED_DIRECTIVES = [
    DialogActionsComponent,
    CustomMessagesComponent,
    LocalizedMessagesDirective
];
/**
 * @hidden
 */
let SharedModule = class SharedModule {
};
SharedModule.ɵfac = function SharedModule_Factory(t) { return new (t || SharedModule)(); };
SharedModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SharedModule });
SharedModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule], CommonModule] });

/**
 * @hidden
 */
const DIALOG_DIRECTIVES = [
    DialogComponent,
    DialogTitleBarComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Dialog component that includes all Dialog components and directives.
 * Imports `DialogModule` into the [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity)
 * of your application or into any other sub-module that will use the Dialog component.
 *
 * @example
 * ```ts-no-run
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { DialogModule } from '@progress/kendo-angular-dialog';
 * import { AppComponent } from './app.component';
 *
 * _@NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, DialogModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
let DialogModule = class DialogModule {
};
DialogModule.ɵfac = function DialogModule_Factory(t) { return new (t || DialogModule)(); };
DialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DialogModule });
DialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [DialogContainerService, DialogService], imports: [[SharedModule]] });

/**
 * Provides an insertion point for the Windows which are created through the
 * Window service ([see example]({% slug api_dialog_windowservice %}#toc-open)).
 * Created Windows will be mounted after that element.
 *
 * @example
 * ```html-no-run
 * <div kendoWindowContainer></div>
 * ```
 */
let WindowContainerDirective = class WindowContainerDirective {
    constructor(container, service) {
        service.container = container;
    }
};
WindowContainerDirective.ɵfac = function WindowContainerDirective_Factory(t) { return new (t || WindowContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(WindowContainerService)); };
WindowContainerDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WindowContainerDirective, selectors: [["", "kendoWindowContainer", ""]] });
WindowContainerDirective = __decorate([ __metadata("design:paramtypes", [ViewContainerRef,
        WindowContainerService])
], WindowContainerDirective);

const WINDOW_DIRECTIVES = [
    ResizeHandleDirective,
    WindowComponent,
    WindowTitleBarComponent,
    WindowCloseActionDirective,
    WindowMinimizeActionDirective,
    WindowMaximizeActionDirective,
    WindowRestoreActionDirective
];
const ENTRY_COMPONENTS = [
    WindowComponent,
    WindowTitleBarComponent
];
const exportedModules = [
    WindowComponent,
    WindowCloseActionDirective,
    WindowMinimizeActionDirective,
    WindowMaximizeActionDirective,
    WindowRestoreActionDirective,
    WindowTitleBarComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Window component. Imports `WindowModule` into the
 * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity)
 * of your application or into any other sub-module that will use the Window component.
 *
 * @example
 * ```ts-no-run
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { WindowModule } from '@progress/kendo-angular-window';
 * import { AppComponent } from './app.component';
 *
 * _@NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, WindowModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
let WindowModule = class WindowModule {
};
WindowModule.ɵfac = function WindowModule_Factory(t) { return new (t || WindowModule)(); };
WindowModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: WindowModule });
WindowModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [WindowContainerService, WindowService], imports: [[SharedModule, DraggableModule]] });

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Dialogs components.
 *
 * @example
 *
 * ```ts-no-run
 * import { DialogsModule } from '@progress/kendo-angular-dialog';
 *
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { NgModule } from '@angular/core';
 *
 * import { AppComponent } from './app.component';
 *
 * _@NgModule({
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, DialogsModule],
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let DialogsModule = class DialogsModule {
};
DialogsModule.ɵfac = function DialogsModule_Factory(t) { return new (t || DialogsModule)(); };
DialogsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DialogsModule });
DialogsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [DialogModule, WindowModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogActionsComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-dialog-actions',
                template: `
        <ng-content *ngIf="!actions"></ng-content>
        <ng-container *ngIf="!actionTemplate()">
            <button
                type="button"
                [ngClass]="buttonClass(action)"
                (click)="onButtonClick(action, $event)"
                *ngFor="let action of actions"
                [attr.aria-label]="action.text"
            >
                {{ action.text }}
            </button>
        </ng-container>
        <ng-template [ngTemplateOutlet]="actions" *ngIf="actionTemplate()"></ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { layout: [{
            type: Input
        }], action: [{
            type: Output
        }], buttonGroupClassName: [{
            type: HostBinding,
            args: ['class.k-dialog-buttongroup']
        }, {
            type: HostBinding,
            args: ['class.k-actions']
        }], className: [{
            type: HostBinding,
            args: ['class.k-actions-stretched']
        }], actions: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogTitleBarComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-dialog-titlebar',
                providers: [
                    TitleBarLocalizationService,
                    {
                        provide: LocalizationService,
                        useExisting: TitleBarLocalizationService
                    },
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.dialog'
                    }
                ],
                template: `
         <ng-container
            kendoDialogTitleBarLocalizedMessages
            i18n-closeTitle="kendo.dialog.closeTitle|The title of the close button"
            closeTitle="Close"
        >
            <div class="k-window-title k-dialog-title">
                <ng-content></ng-content>
            </div>

            <div class="k-window-actions k-dialog-actions">
                <button
                    role="button"
                    [attr.title]="closeButtonTitle"
                    [attr.aria-label]="closeButtonTitle"
                    class="k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-window-action k-dialog-action k-dialog-close"
                    (click)="onCloseClick($event)"
                >
                    <span class="k-button-icon k-icon k-i-x"></span>
                </button>
            </div>
        </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.LocalizationService, decorators: [{
                type: Optional
            }] }]; }, { close: [{
            type: Output
        }], className: [{
            type: HostBinding,
            args: ['class.k-window-titlebar']
        }, {
            type: HostBinding,
            args: ['class.k-dialog-titlebar']
        }], id: [{
            type: Input
        }], closeTitle: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogComponent, [{
        type: Component,
        args: [{
                animations: [
                    trigger('overlayAppear', [
                        state('in', style({ opacity: 1 })),
                        transition('void => *', [style({ opacity: 0.1 }), animate('.3s cubic-bezier(.2, .6, .4, 1)')])
                    ]),
                    trigger('dialogSlideInAppear', [
                        state('in', style({ transform: 'translate(0, 0)' })),
                        transition('void => *', [style({ transform: 'translate(0, -10%)' }), animate('.3s cubic-bezier(.2, 1, .2, 1)')])
                    ])
                ],
                exportAs: 'kendoDialog',
                providers: [
                    LocalizationService,
                    {
                        provide: DIALOG_LOCALIZATION_SERVICE,
                        useExisting: LocalizationService
                    },
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.dialog'
                    }
                ],
                selector: 'kendo-dialog',
                template: `
        <ng-container
            kendoDialogLocalizedMessages
            i18n-closeTitle="kendo.dialog.closeTitle|The title of the close button"
            closeTitle="Close"
        >
        <div class="k-overlay" @overlayAppear></div>

        <div class="k-window k-dialog" role="dialog" aria-modal="true" [ngStyle]="styles" @dialogSlideInAppear>
            <kendo-dialog-titlebar *ngIf="title" [closeTitle]="closeTitle" [id]="titleId">{{ title }}</kendo-dialog-titlebar>
            <ng-content select="kendo-dialog-titlebar" *ngIf="!title"></ng-content>

            <div [id]="contentId" class="k-content k-window-content k-dialog-content">
                <ng-content *ngIf="!contentTemplate"></ng-content>
                <ng-template [ngTemplateOutlet]="contentTemplate" *ngIf="contentTemplate"></ng-template>
            </div>

            <ng-content select="kendo-dialog-actions" *ngIf="!actions"></ng-content>
            <kendo-dialog-actions *ngIf="actions" [actions]="actions" [layout]="actionsLayout"> </kendo-dialog-actions>
        </div>
    </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, { actionsLayout: [{
            type: Input
        }], action: [{
            type: Output
        }], close: [{
            type: Output
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabIndex']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], wrapperClass: [{
            type: HostBinding,
            args: ['class.k-dialog-wrapper']
        }], actions: [{
            type: Input
        }], autoFocusedElement: [{
            type: Input
        }], title: [{
            type: Input
        }], width: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], maxWidth: [{
            type: Input
        }], height: [{
            type: Input
        }], minHeight: [{
            type: Input
        }], maxHeight: [{
            type: Input
        }], titlebarContent: [{
            type: ContentChildren,
            args: [DialogTitleBarComponent, { descendants: false }]
        }], titlebarView: [{
            type: ViewChildren,
            args: [DialogTitleBarComponent]
        }], actionsView: [{
            type: ViewChild,
            args: [DialogActionsComponent, { static: false }]
        }] }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogContainerService, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: DialogContainerService, decorators: [{
                type: Inject,
                args: [DialogContainerService]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragResizeService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizeHandleDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoWindowResizeHandle]'
            }]
    }], function () { return [{ type: ɵngcc3.DraggableDirective, decorators: [{
                type: Host
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService }]; }, { hostClass: [{
            type: HostBinding,
            args: ['class.k-resize-handle']
        }], direction: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowTitleBarComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-window-titlebar',
                template: `
    <ng-content *ngIf="!template"></ng-content>
    <ng-template
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{'$implicit': service}" *ngIf="template">
    </ng-template>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragResizeService }, { type: ɵngcc0.NgZone }]; }, { className: [{
            type: HostBinding,
            args: ['class.k-window-titlebar']
        }, {
            type: HostBinding,
            args: ['class.k-dialog-titlebar']
        }], touchAction: [{
            type: HostBinding,
            args: ['style.touch-action']
        }], 
    /**
     * @hidden
     */
    handle: [{
            type: HostListener,
            args: ['dblclick', ['$event']]
        }], template: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return [{ type: DragResizeService }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoWindow',
                providers: [
                    DragResizeService,
                    NavigationService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.window'
                    }
                ],
                selector: 'kendo-window',
                template: `
        <ng-container kendoWindowLocalizedMessages
            i18n-closeTitle="kendo.window.closeTitle|The title of the close button"
            closeTitle="Close"

            i18n-restoreTitle="kendo.window.restoreTitle|The title of the restore button"
            restoreTitle="Restore"

            i18n-maximizeTitle="kendo.window.maximizeTitle|The title of the maximize button"
            maximizeTitle="Maximize"

            i18n-minimizeTitle="kendo.window.minimizeTitle|The title of the minimize button"
            minimizeTitle="Minimize"
        >
        <ng-container>

        <kendo-window-titlebar *ngIf="showDefaultTitleBar" [template]="titleBarTemplate">
            <div class="k-window-title">{{ title }}</div>
            <div class="k-window-actions">
                <button kendoWindowMinimizeAction  [attr.title]="minimizeButtonTitle" [attr.aria-label]="minimizeButtonTitle"></button>
                <button kendoWindowMaximizeAction [attr.title]="maximizeButtonTitle" [attr.aria-label]="maximizeButtonTitle"></button>
                <button kendoWindowRestoreAction [attr.title]="restoreButtonTitle" [attr.aria-label]="restoreButtonTitle"></button>
                <button kendoWindowCloseAction [attr.title]="closeButtonTitle" [attr.aria-label]="closeButtonTitle"></button>
            </div>
        </kendo-window-titlebar>
        <ng-content select="kendo-window-titlebar" *ngIf="!showDefaultTitleBar"></ng-content>

        <div *ngIf="state !== 'minimized' || keepContent"
            [hidden]="state === 'minimized' && keepContent"
            class="k-content k-window-content"
        >
            <ng-content *ngIf="!contentTemplate"></ng-content>
            <ng-template [ngTemplateOutlet]="contentTemplate" *ngIf="contentTemplate"></ng-template>
        </div>

        <ng-template [ngIf]='resizable'>
            <div *ngFor='let dir of resizeDirections'
                [direction]="dir"
                kendoWindowResizeHandle
                kendoDraggable>
            </div>
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService }, { type: NavigationService }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.LocalizationService }]; }, { keepContent: [{
            type: Input
        }], dragStart: [{
            type: Output
        }], dragEnd: [{
            type: Output
        }], resizeStart: [{
            type: Output
        }], resizeEnd: [{
            type: Output
        }], close: [{
            type: Output
        }], widthChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], topChange: [{
            type: Output
        }], leftChange: [{
            type: Output
        }], stateChange: [{
            type: Output
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabIndex']
        }], draggable: [{
            type: Input
        }], resizable: [{
            type: Input
        }], state: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], minHeight: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], top: [{
            type: Input
        }], left: [{
            type: Input
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-window']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], styleMinWidth: [{
            type: HostBinding,
            args: ['style.minWidth']
        }], styleMinHeight: [{
            type: HostBinding,
            args: ['style.minHeight']
        }], stylePosition: [{
            type: HostBinding,
            args: ['style.position']
        }], wrapperMaximizedClass: [{
            type: HostBinding,
            args: ['class.k-window-maximized']
        }], wrapperMinimizedClass: [{
            type: HostBinding,
            args: ['class.k-window-minimized']
        }], 
    /**
     * @hidden
     */
    onComponentFocus: [{
            type: HostListener,
            args: ['focus']
        }], 
    /**
     * @hidden
     */
    onComponentBlur: [{
            type: HostListener,
            args: ['blur']
        }], autoFocusedElement: [{
            type: Input
        }], title: [{
            type: Input
        }], titleBarView: [{
            type: ViewChild,
            args: [WindowTitleBarComponent, { static: false }]
        }], titleBarContent: [{
            type: ContentChild,
            args: [WindowTitleBarComponent, { static: false }]
        }], resizeHandles: [{
            type: ViewChildren,
            args: [ResizeHandleDirective]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowMaximizeActionDirective, [{
        type: Directive,
        args: [{
                exportAs: 'kendoWindowMaximizeAction',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.button'
                    }
                ],
                selector: 'button[kendoWindowMaximizeAction]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { buttonType: [{
            type: HostBinding,
            args: ['attr.type']
        }], window: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], visible: [{
            type: HostBinding,
            args: ['style.display']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowMinimizeActionDirective, [{
        type: Directive,
        args: [{
                exportAs: 'kendoWindowMinimizeAction',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.button'
                    }
                ],
                selector: 'button[kendoWindowMinimizeAction]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { buttonType: [{
            type: HostBinding,
            args: ['attr.type']
        }], window: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], visible: [{
            type: HostBinding,
            args: ['style.display']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowCloseActionDirective, [{
        type: Directive,
        args: [{
                exportAs: 'kendoWindowCloseAction',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.button'
                    }
                ],
                selector: 'button[kendoWindowCloseAction]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { buttonType: [{
            type: HostBinding,
            args: ['attr.type']
        }], window: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowRestoreActionDirective, [{
        type: Directive,
        args: [{
                exportAs: 'kendoWindowRestoreAction',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.button'
                    }
                ],
                selector: 'button[kendoWindowRestoreAction]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DragResizeService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { buttonType: [{
            type: HostBinding,
            args: ['attr.type']
        }], window: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], visible: [{
            type: HostBinding,
            args: ['style.display']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowContainerService, [{
        type: Injectable
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: WindowContainerService, decorators: [{
                type: Inject,
                args: [WindowContainerService]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDialogContainer]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: DialogContainerService }]; }, null); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => LocalizedMessagesDirective_1)
                    }
                ],
                selector: `
    [kendoDialogLocalizedMessages],
    [kendoWindowLocalizedMessages],
    [kendoDialogTitleBarLocalizedMessages]
  `
            }]
    }], function () { return [{ type: ɵngcc2.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => CustomMessagesComponent_1) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-dialog-messages, kendo-window-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc2.LocalizationService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SharedModule, [{
        type: NgModule,
        args: [{
                declarations: [SHARED_DIRECTIVES],
                exports: [SHARED_DIRECTIVES, CommonModule],
                imports: [CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SharedModule, { declarations: function () { return [DialogActionsComponent, CustomMessagesComponent, LocalizedMessagesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DialogActionsComponent, CustomMessagesComponent, LocalizedMessagesDirective, CommonModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogModule, [{
        type: NgModule,
        args: [{
                declarations: [DIALOG_DIRECTIVES, DialogContainerDirective],
                entryComponents: [DIALOG_DIRECTIVES],
                exports: [DIALOG_DIRECTIVES, SHARED_DIRECTIVES, DialogContainerDirective],
                imports: [SharedModule],
                providers: [DialogContainerService, DialogService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DialogModule, { declarations: [DialogComponent, DialogTitleBarComponent, DialogContainerDirective], imports: [SharedModule], exports: [DialogComponent, DialogTitleBarComponent, DialogActionsComponent, CustomMessagesComponent, LocalizedMessagesDirective, DialogContainerDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoWindowContainer]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: WindowContainerService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowModule, [{
        type: NgModule,
        args: [{
                declarations: [WINDOW_DIRECTIVES, WindowContainerDirective],
                entryComponents: [ENTRY_COMPONENTS],
                exports: [exportedModules, SHARED_DIRECTIVES, WindowContainerDirective],
                imports: [SharedModule, DraggableModule],
                providers: [WindowContainerService, WindowService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WindowModule, { declarations: function () { return [ResizeHandleDirective, WindowComponent, WindowTitleBarComponent, WindowCloseActionDirective, WindowMinimizeActionDirective, WindowMaximizeActionDirective, WindowRestoreActionDirective, WindowContainerDirective]; }, imports: function () { return [SharedModule, DraggableModule]; }, exports: function () { return [WindowComponent, WindowCloseActionDirective, WindowMinimizeActionDirective, WindowMaximizeActionDirective, WindowRestoreActionDirective, WindowTitleBarComponent, DialogActionsComponent, CustomMessagesComponent, LocalizedMessagesDirective, WindowContainerDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialogsModule, [{
        type: NgModule,
        args: [{
                exports: [DialogModule, WindowModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DialogsModule, { exports: [DialogModule, WindowModule] }); })();


/**
 * Generated bundle index. Do not edit.
 */

export { DIALOG_DIRECTIVES, DialogContainerDirective, DialogContainerService, CustomMessagesComponent, DIALOG_LOCALIZATION_SERVICE, LocalizedMessagesDirective, Messages, TitleBarLocalizationService, SHARED_DIRECTIVES, SharedModule, DragResizeService, NavigationService, WindowContainerDirective, WindowContainerService, ResizeHandleDirective, DialogComponent, DialogTitleBarComponent, DialogContentBase, DialogActionsComponent, DialogService, DialogCloseResult, DialogRef, DialogSettings, DialogAction, WindowComponent, WindowTitleBarComponent, WindowMaximizeActionDirective, WindowMinimizeActionDirective, WindowCloseActionDirective, WindowRestoreActionDirective, WindowSettings, WindowRef, WindowCloseResult, WindowService, DialogModule, WindowModule, DialogsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,