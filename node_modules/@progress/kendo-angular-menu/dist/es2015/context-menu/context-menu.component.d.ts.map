{"version":3,"file":"context-menu.component.d.ts","sources":["context-menu.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit, OnChanges, OnDestroy, EventEmitter, NgZone, Renderer2, TemplateRef, ElementRef, ViewContainerRef } from '@angular/core';\nimport { PopupService, Offset, Align, Collision, PopupAnimation } from '@progress/kendo-angular-popup';\nimport { MenuBase } from '../menu-base';\nimport { ContextMenuEvent } from './context-menu-event';\nimport { ContextMenuSelectEvent } from './context-menu-select-event';\nimport { ContextMenuPopupEvent } from './context-menu-popup-event';\nimport { ContextMenuService } from './context-menu.service';\nimport { ContextMenuTemplateDirective } from './context-menu-template.directive';\nimport { ContextMenuTargetContainerDirective } from './context-menu-target-container.directive';\n/**\n * Represents the [Kendo UI ContextMenu component for Angular]({% slug overview_contextmenu %}).\n *\n * @example\n * ```ts\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *    <div #target>\n *        Right-click to open Context menu</p>\n *    </div>\n *    <kendo-contextmenu [target]=\"target\" [items]=\"items\"> </kendo-contextmenu>\n *    `\n * })\n * class AppComponent {\n *    public items: any[] = [{ text: 'item1', items: [{ text: 'item1.1' }] }, { text: 'item2', disabled: true }];\n * }\n * ```\n */\nexport declare class ContextMenuComponent extends MenuBase implements OnInit, OnChanges, OnDestroy {\n    private popupService;\n    private service;\n    private ngZone;\n    private renderer;\n    /**\n     * Specifies the event on which the ContextMenu will open ([see example]({% slug showon_contextmenu %})).\n     * Accepts the name of a native DOM event. Defaults to `contextmenu` which opens the ContextMenu for the target element.\n     */\n    showOn: string;\n    /**\n     * Specifies the element for which the ContextMenu will open ([see example]({% slug target_contextmenu %}#toc-configuration)).\n     */\n    target: HTMLElement | ElementRef | ContextMenuTargetContainerDirective | string;\n    /**\n     * Specifies a CSS selector which filters the elements in the target for which the ContextMenu will open\n     * ([see example]({% slug target_contextmenu %}#toc-defining-specific-targets)).\n     */\n    filter: string;\n    /**\n     * Indicates that the ContextMenu will be aligned to the target or to the `filter` element (if specified).\n     */\n    alignToAnchor: boolean;\n    /**\n     * Specifies if the Menu will be vertically rendered ([see example]({% slug orientation_contextmenu %})).\n     * @default true\n     */\n    vertical: boolean;\n    /**\n     * Specifies the popup animation.\n     */\n    popupAnimate: boolean | PopupAnimation;\n    /**\n     * Specifies the pivot point of the popup.\n     */\n    popupAlign: Align;\n    /**\n     * Specifies the pivot point of the anchor. Applicable if `alignToAnchor` is `true`.\n     */\n    anchorAlign: Align;\n    /**\n     * Configures the collision behavior of the popup.\n     */\n    collision: Collision;\n    /**\n     * Defines the container to which the popup will be appended.\n     */\n    appendTo: ViewContainerRef;\n    /**\n     * Sets the value for the [`aria-label`](https://www.w3.org/TR/wai-aria-1.1/#aria-label) attribute of the ContextMenu.\n     */\n    ariaLabel: string;\n    /**\n     * Fires when the Menu is opened ([see example]({% slug target_contextmenu %}#toc-changing-items-for-specified-targets)).\n     */\n    popupOpen: EventEmitter<ContextMenuPopupEvent>;\n    /**\n     * Fires when the Menu is closed.\n     */\n    popupClose: EventEmitter<ContextMenuPopupEvent>;\n    /**\n     * Fires when a Menu item is selected.\n     */\n    select: EventEmitter<ContextMenuSelectEvent>;\n    /**\n     * Fires when a Menu item is opened.\n     */\n    open: EventEmitter<ContextMenuEvent>;\n    /**\n     * Fires when a Menu item is closed.\n     */\n    close: EventEmitter<ContextMenuEvent>;\n    /**\n     * @hidden\n     */\n    contentTemplate: ContextMenuTemplateDirective;\n    /**\n     * @hidden\n     */\n    defaultContentTemplate: TemplateRef<any>;\n    private closeSubscription;\n    private showSubscription;\n    private keydownSubscription;\n    private popupSubscriptions;\n    private popupRef;\n    private currentTarget;\n    private directiveTarget;\n    private activeTarget;\n    constructor(popupService: PopupService, service: ContextMenuService, ngZone: NgZone, renderer: Renderer2);\n    /**\n     * Hides the ContextMenu.\n     */\n    hide(): void;\n    /**\n     * Shows the ContextMenu for the specified target.\n     * @param target - The offset or the target element for which the ContextMenu will open.\n     */\n    show(target: Offset | HTMLElement | ElementRef): void;\n    ngOnChanges(changes: any): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    emitMenuEvent(name: string, args: any): void;\n    private bindShowHandler;\n    private showContextMenu;\n    private unbindShowHandler;\n    private targetElement;\n    private targetFilter;\n    private closePopup;\n    private removePopup;\n    private openPopup;\n    private createPopup;\n    private closeAndFocus;\n    private popupKeyDownHandler;\n    private popupAction;\n    private readonly currentTargetElement;\n}\n"]}