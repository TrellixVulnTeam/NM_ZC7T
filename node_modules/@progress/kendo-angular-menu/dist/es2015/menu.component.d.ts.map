{"version":3,"file":"menu.component.d.ts","sources":["menu.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, OnChanges, AfterViewChecked, NgZone, Renderer2, TemplateRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ItemsService } from './services/items.service';\nimport { ActionsService } from './services/actions.service';\nimport { NavigationService } from './services/navigation.service';\nimport { HoverService } from './services/hover.service';\nimport { MenuEvent } from './menu-event';\nimport { MenuSelectEvent } from './menu-select-event';\nimport { ContextMenuService } from './context-menu/context-menu.service';\nimport { MenuBase } from './menu-base';\n/**\n * Represents the [Kendo UI Menu component for Angular]({% slug overview_menu %}).\n *\n * @example\n * ```ts\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-menu [items]=\"items\">\n *        </kendo-menu>\n *    `\n * })\n * class AppComponent {\n *    public items: any[] = [{ text: 'item1', items: [{ text: 'item1.1' }] }, { text: 'item2', disabled: true }];\n * }\n * ```\n */\nexport declare class MenuComponent extends MenuBase implements OnChanges, AfterViewChecked {\n    private itemsService;\n    private hover;\n    private actions;\n    private navigation;\n    private localization;\n    private ngZone;\n    private renderer;\n    private contextService?;\n    /**\n     * @hidden\n     */\n    menuItemTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    menuItemLinkTemplate: TemplateRef<any>;\n    /**\n     * Fires when a Menu item is selected ([see example]({% slug routing_menu %})).\n     */\n    select: EventEmitter<MenuSelectEvent>;\n    /**\n     * Fires when a Menu item is opened.\n     */\n    open: EventEmitter<MenuEvent>;\n    /**\n     * Fires when a Menu item is closed.\n     */\n    close: EventEmitter<MenuEvent>;\n    /**\n     * @hidden\n     */\n    readonly ariaOrientation: string;\n    /**\n     * @hidden\n     */\n    readonly contextMenuClass: boolean;\n    readonly direction: boolean;\n    readonly rtl: boolean;\n    private closeClickSubscription;\n    private contextKeyDownSubscription;\n    constructor(itemsService: ItemsService, hover: HoverService, actions: ActionsService, navigation: NavigationService, localization: LocalizationService, ngZone: NgZone, renderer: Renderer2, contextService?: ContextMenuService);\n    /**\n     * Opens or closes the specified Menu items.\n     *\n     * @param open - A Boolean value which indicates if the items will be opened or closed.\n     * @param indices - One or more values which represent the hierarchical indices of the items that will be opened or closed.\n     */\n    toggle(open: boolean, ...indices: string[]): void;\n    /**\n     * @hidden\n     */\n    focus(index?: string): void;\n    ngOnChanges(changes: any): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    private attachCloseClick;\n    private unsubscribeClick;\n    private contextKeyDown;\n}\n"]}