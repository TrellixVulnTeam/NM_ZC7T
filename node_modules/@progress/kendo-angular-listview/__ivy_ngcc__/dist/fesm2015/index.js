/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __param } from 'tslib';
import { Injectable, Input, Directive, ElementRef, Renderer2, TemplateRef, Optional, EventEmitter, NgZone, HostBinding, ContentChild, ViewChild, ViewChildren, QueryList, Output, Component, ChangeDetectionStrategy, ViewContainerRef, HostListener, NgModule } from '@angular/core';
import { isDocumentAvailable, Keys, isChanged, hasObservers, EventsModule } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subject, Subscription } from 'rxjs';
import { FormGroup, FormControl } from '@angular/forms';
import { switchMap, take } from 'rxjs/operators';
import { PageSizeChangeEvent, PagerModule } from '@progress/kendo-angular-pager';
import { CommonModule } from '@angular/common';
import { Button } from '@progress/kendo-angular-buttons';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@progress/kendo-angular-common';
import * as ɵngcc3 from '@progress/kendo-angular-pager';
import * as ɵngcc4 from '@progress/kendo-angular-l10n';

const _c0 = ["contentContainer"];
function ListViewComponent_0_ng_template_0_Template(rf, ctx) { }
const _c1 = function () { return { pagerClass: "k-listview-pager k-listview-pager-top" }; };
function ListViewComponent_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListViewComponent_0_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r9 = ɵngcc0.ɵɵreference(11);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction0(2, _c1));
} }
function ListViewComponent_div_1_ng_template_1_Template(rf, ctx) { }
function ListViewComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtemplate(1, ListViewComponent_div_1_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.headerTemplate == null ? null : ctx_r1.headerTemplate.templateRef);
} }
function ListViewComponent_div_4_1_ng_template_0_Template(rf, ctx) { }
function ListViewComponent_div_4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListViewComponent_div_4_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r13.editTemplate == null ? null : ctx_r13.editTemplate.templateRef)("ngTemplateOutletContext", ctx_r13.editTemplateContext(-1));
} }
function ListViewComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, ListViewComponent_div_4_1_Template, 1, 2, null, 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("index", -1)("ngClass", ctx_r3.itemClass)("ngStyle", ctx_r3.itemStyle);
    ɵngcc0.ɵɵattribute("role", ctx_r3.listItemRole)("data-kendo-listview-item-index", -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.editTemplate);
} }
function ListViewComponent_div_5_ng_template_1_Template(rf, ctx) { }
function ListViewComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, ListViewComponent_div_5_ng_template_1_Template, 0, 0, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const index_r16 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("index", index_r16)("ngClass", ctx_r4.itemClass)("ngStyle", ctx_r4.itemStyle);
    ɵngcc0.ɵɵattribute("role", ctx_r4.listItemRole)("aria-posinset", ctx_r4.itemPosInSet(index_r16))("aria-setsize", ctx_r4.total)("data-kendo-listview-item-index", index_r16);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.isEdited(index_r16) ? ctx_r4.editTemplate == null ? null : ctx_r4.editTemplate.templateRef : ctx_r4.itemTemplate == null ? null : ctx_r4.itemTemplate.templateRef)("ngTemplateOutletContext", ctx_r4.isEdited(index_r16) ? ctx_r4.editTemplateContext(index_r16) : ctx_r4.templateContext(index_r16));
} }
function ListViewComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13)(1, "span", 14);
    ɵngcc0.ɵɵtext(2, "Loading");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "div", 15)(4, "div", 16);
    ɵngcc0.ɵɵelementEnd();
} }
function ListViewComponent_7_ng_template_0_Template(rf, ctx) { }
function ListViewComponent_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListViewComponent_7_ng_template_0_Template, 0, 0, "ng-template", 11);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r6.loaderTemplate.templateRef);
} }
function ListViewComponent_div_8_ng_template_1_Template(rf, ctx) { }
function ListViewComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, ListViewComponent_div_8_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.footerTemplate == null ? null : ctx_r7.footerTemplate.templateRef);
} }
function ListViewComponent_9_ng_template_0_Template(rf, ctx) { }
const _c2 = function () { return { pagerClass: "k-listview-pager" }; };
function ListViewComponent_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListViewComponent_9_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r9 = ɵngcc0.ɵɵreference(11);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction0(2, _c2));
} }
function ListViewComponent_ng_template_10_kendo_datapager_0_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-datapager", 19);
    ɵngcc0.ɵɵlistener("pageChange", function ListViewComponent_ng_template_10_kendo_datapager_0_Template_kendo_datapager_pageChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.handlePageChange($event); })("pageSizeChange", function ListViewComponent_ng_template_10_kendo_datapager_0_Template_kendo_datapager_pageSizeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.pageSizeChange.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const pagerClass_r23 = ɵngcc0.ɵɵnextContext().pagerClass;
    const ctx_r24 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(pagerClass_r23);
    ɵngcc0.ɵɵproperty("total", ctx_r24.total)("pageSize", ctx_r24.pageSize)("skip", ctx_r24.skip)("buttonCount", ctx_r24.pagerSettings.buttonCount)("info", ctx_r24.pagerSettings.info)("previousNext", ctx_r24.pagerSettings.previousNext)("type", ctx_r24.pagerSettings.type)("pageSizeValues", ctx_r24.pagerSettings.pageSizeValues);
} }
function ListViewComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListViewComponent_ng_template_10_kendo_datapager_0_Template, 1, 10, "kendo-datapager", 18);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.pageable);
} }
const _c3 = function (a0) { return { scroll: a0 }; };
const packageMetadata = {
    name: '@progress/kendo-angular-listview',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1646219074,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

const LISTVIEW_ITEM_SELECTOR = '.k-listview-item';
/**
 * @hidden
 */
const isPresent = (item) => item !== null && item !== undefined;
/**
 * @hidden
 *
 * Polyfill for `Element.matches`.
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
 */
const match = (element, selector) => {
    const matcher = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
    if (!isPresent(matcher)) {
        return false;
    }
    return matcher.call(element, selector);
};
/**
 * @hidden
 *
 * Checks if a target element has the `.k-listview-item` CSS class.
 */
const isListViewItem = (element) => {
    if (!isPresent(element)) {
        return false;
    }
    return match(element, LISTVIEW_ITEM_SELECTOR);
};
/**
 * @hidden
 *
 * Extracts and parses to a number the `data-kendo-listview-item-index` attribute value from the targeted element.
 */
const getListItemIndex = (item) => {
    if (!isPresent(item)) {
        return null;
    }
    return Number(item.getAttribute('data-kendo-listview-item-index'));
};
/**
 * @hidden
 *
 * Gets the new focus target from a blur event.
 * Queries both event.relatedTarget and document.activeElement for compatibility with IE.
 */
const relatedTarget = (event) => {
    if (!isPresent(event.relatedTarget) || !isDocumentAvailable()) {
        return null;
    }
    return event.relatedTarget || document.activeElement;
};
/**
 * @hidden
 *
 * If the given contender number is not defined or lower than the specified min - returns min, if its above the specified max - returns max.
 * If the number is in the given bounds, it is returned.
 */
const fitIntoRange = (contender, min, max) => {
    if (!isPresent(contender) || contender <= min) {
        return min;
    }
    else if (contender >= max) {
        return max;
    }
    else {
        return contender;
    }
};
/**
 * @hidden
 */
const closestWithMatch = (element, selector) => {
    let parent = element;
    while (parent !== null && parent.nodeType === 1) {
        if (match(parent, selector)) {
            return parent;
        }
        parent = parent.parentElement || parent.parentNode;
    }
    return null;
};
/**
 * @hidden
 *
 * Extracts and parses to a number the `data-kendo-listview-item-index` attribute value from the targeted element.
 */
const getClosestListItemIndex = (element) => {
    if (!isPresent(element)) {
        return null;
    }
    const closestListViewItem = closestWithMatch(element, LISTVIEW_ITEM_SELECTOR);
    return getListItemIndex(closestListViewItem);
};

/**
 * @hidden
 *
 * Provided per ListView instance. Keeps the availability, active index and focused state of the current ListView.
 * Emits `changes` when any of the aforementioned states changes.
 */
let NavigationService = class NavigationService {
    /**
     * @hidden
     *
     * Provided per ListView instance. Keeps the availability, active index and focused state of the current ListView.
     * Emits `changes` when any of the aforementioned states changes.
     */
    constructor() {
        /**
         * Emits every time a change in active index/focus/blur/navigation availability occurs.
         */
        this.changes = new Subject();
        /**
         * Specifies if a ListView item currently holds focus.
         */
        this.isFocused = false;
        /**
         * Keeps track of the index of the items that should be the current focus target (tabindex="0").
         * When set to `null`/`undefined`, the navigation is disabled and the items should not render a tabindex.
         */
        this.activeIndex = null;
    }
    /**
     * Sets or gets if the navigation is enabled.
     * When no activeIndex is present, the navigation is inferred as disabled.
     * Toggling the service availability clears the current active index or activates the first one.
     */
    get isEnabled() {
        return isPresent(this.activeIndex);
    }
    set isEnabled(enabled) {
        if (enabled) {
            this.activeIndex = 0;
        }
        else {
            this.activeIndex = null;
        }
        this.changes.next();
    }
    /**
     * Shows if the checked index should be the current available focus target (tabindex="0").
     */
    isActive(index) {
        return index === this.activeIndex;
    }
    handleKeyDown(event, totalItemsCount) {
        const { keyCode } = event;
        switch (keyCode) {
            case Keys.ArrowLeft:
            case Keys.ArrowUp:
                this.navigateToPrevious();
                break;
            case Keys.ArrowRight:
            case Keys.ArrowDown:
                this.navigateToNext(totalItemsCount);
                break;
            case Keys.Home:
                const firstIndex = 0;
                this.navigateTo(firstIndex);
                break;
            case Keys.End:
                const lastIndex = totalItemsCount - 1;
                this.navigateTo(lastIndex);
                break;
            default: return;
        }
        // the following line is executed only if the pressed key matches one of the listview hotkeys -
        // they `break`, while the `default` case `return`s
        event.preventDefault();
    }
    handleFocusIn(event) {
        const target = event.target;
        if (!isListViewItem(target)) {
            const listViewItemSelector = '.k-listview-item';
            const closestListViewItem = closestWithMatch(target, listViewItemSelector);
            const isListViewItemChild = isPresent(closestListViewItem);
            if (isListViewItemChild) {
                const itemIndex = getListItemIndex(closestListViewItem);
                this.setActiveIndex(itemIndex);
            }
            return;
        }
        const targetIndex = getListItemIndex(target);
        // don't emit if the no change in focused state has occurred and the targeted index is the same as the current activeIndex
        if (this.isFocused && targetIndex === this.activeIndex) {
            return;
        }
        this.activeIndex = targetIndex;
        this.isFocused = true;
        this.changes.next();
    }
    handleFocusOut(event) {
        // don't emit if the blurred item is not a listview item or if the new focus target is another listview item
        if (!isListViewItem(event.target) || isListViewItem(relatedTarget(event))) {
            return;
        }
        this.isFocused = false;
        this.changes.next();
    }
    /**
     * Sets the `activeIndex` and triggers changes without focusing the corresponding ListView item.
     */
    setActiveIndex(index) {
        if (!this.isEnabled) {
            return;
        }
        if (index === this.activeIndex) {
            return;
        }
        this.activeIndex = index;
        this.changes.next();
    }
    /**
     * Focuses item at the targeted index. If no index is passed, the current `activeIndex` is used.
     * The passed target index is normalized to fit the min/max available indices bounds.
     */
    focusIndex(index, totalItemsCount) {
        if (!this.isEnabled) {
            return;
        }
        const parsed = parseInt(index, 10);
        const firstIndex = 0;
        const lastIndex = totalItemsCount - 1;
        const targetIndex = isNaN(parsed) ? this.activeIndex : fitIntoRange(parsed, firstIndex, lastIndex);
        this.navigateTo(targetIndex);
    }
    navigateTo(index) {
        if (this.isFocused && this.activeIndex === index) {
            return;
        }
        this.isFocused = true;
        this.activeIndex = index;
        this.changes.next();
    }
    navigateToPrevious() {
        const previousIndex = Math.max(this.activeIndex - 1, 0);
        this.navigateTo(previousIndex);
    }
    navigateToNext(totalItemsCount) {
        const lastAvailableIndex = totalItemsCount - 1;
        const nextIndex = Math.min(this.activeIndex + 1, lastAvailableIndex);
        this.navigateTo(nextIndex);
    }
};
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(); };
NavigationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: function (t) { return NavigationService.ɵfac(t); } });

/**
 * @hidden
 */
let ListViewNavigableItemDirective = class ListViewNavigableItemDirective {
    constructor(hostElement, renderer, navigationService) {
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.navigationService = navigationService;
    }
    ngOnChanges() {
        this.updateNavigationState();
    }
    ngOnInit() {
        this.navigationSubscription = this.navigationService.changes
            .subscribe(this.updateNavigationState.bind(this));
    }
    ngOnDestroy() {
        if (isPresent(this.navigationSubscription)) {
            this.navigationSubscription.unsubscribe();
        }
    }
    updateNavigationState() {
        this.updateTabIndex();
        this.updateFocusedState();
    }
    updateFocusedState() {
        const shouldFocus = this.navigationService.isActive(this.index) && this.navigationService.isFocused;
        const focusedCssClass = 'k-state-focused';
        if (shouldFocus) {
            this.renderer.addClass(this.hostElement.nativeElement, focusedCssClass);
            this.hostElement.nativeElement.focus();
        }
        else {
            this.renderer.removeClass(this.hostElement.nativeElement, focusedCssClass);
        }
    }
    updateTabIndex() {
        if (!this.navigationService.isEnabled) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, 'tabindex');
        }
        else if (this.navigationService.isActive(this.index)) {
            this.renderer.setAttribute(this.hostElement.nativeElement, 'tabindex', '0');
        }
        else {
            this.renderer.setAttribute(this.hostElement.nativeElement, 'tabindex', '-1');
        }
    }
};
ListViewNavigableItemDirective.ɵfac = function ListViewNavigableItemDirective_Factory(t) { return new (t || ListViewNavigableItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NavigationService)); };
ListViewNavigableItemDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ListViewNavigableItemDirective, selectors: [["", "kendoListViewNavigableItem", ""]], inputs: { index: "index" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Number)
], ListViewNavigableItemDirective.prototype, "index", void 0);
ListViewNavigableItemDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NavigationService])
], ListViewNavigableItemDirective);

/**
 * Renders the list item content. To define an item template, nest an `<ng-template>` tag
 * with the `kendoListViewItemTemplate` directive inside the `<kendo-listview>` tag
 * [see example]({% slug templates_listview %}#toc-item-template).
 *
 * The following values are available as context variables:
 * - `let-dataItem="dataItem"` (`any`) - The current data item. Also available as implicit context variable.
 * - `let-index="index"` (`number`) - The current item index.
 * - `let-isFirst="isFirst"` (`boolean`) - Indicates whether the current data item will be rendered as the first item on the list.
 * - `let-isLast="isLast"` (`boolean`)- Indicates whether the current data item will be rendered as the last item on the list.
 */
let ItemTemplateDirective = class ItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
ItemTemplateDirective.ɵfac = function ItemTemplateDirective_Factory(t) { return new (t || ItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ItemTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ItemTemplateDirective, selectors: [["", "kendoListViewItemTemplate", ""]] });
ItemTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], ItemTemplateDirective);

/**
 * Renders the header content of the ListView. To define a header template, nest an `<ng-template>` tag
 * with the `kendoListViewHeaderTemplate` directive inside the `<kendo-listview>` tag
 * [see example]({% slug templates_listview %}#toc-header-template).
 */
let HeaderTemplateDirective = class HeaderTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
HeaderTemplateDirective.ɵfac = function HeaderTemplateDirective_Factory(t) { return new (t || HeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
HeaderTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderTemplateDirective, selectors: [["", "kendoListViewHeaderTemplate", ""]] });
HeaderTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], HeaderTemplateDirective);

/**
 * Renders the footer content of the ListView. To define a footer template, nest an `<ng-template>` tag
 * with the `kendoListViewFooterTemplate` directive inside the `<kendo-listview>` tag
 * [see example]({% slug templates_listview %}#toc-footer-template).
 */
let FooterTemplateDirective = class FooterTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
FooterTemplateDirective.ɵfac = function FooterTemplateDirective_Factory(t) { return new (t || FooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
FooterTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterTemplateDirective, selectors: [["", "kendoListViewFooterTemplate", ""]] });
FooterTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], FooterTemplateDirective);

/**
 * Overrides the default loader content of the ListView. To define a loader template, nest an `<ng-template>` tag
 * with the `kendoListViewLoaderTemplate` directive inside the `<kendo-listview>` tag
 * [see example]({% slug templates_listview %}#toc-loader-template).
 */
let LoaderTemplateDirective = class LoaderTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
LoaderTemplateDirective.ɵfac = function LoaderTemplateDirective_Factory(t) { return new (t || LoaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
LoaderTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LoaderTemplateDirective, selectors: [["", "kendoListViewLoaderTemplate", ""]] });
LoaderTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], LoaderTemplateDirective);

/**
 * Represents the edit template of the ListView ([see example]({% slug editing_template_forms_listview %})).
 * Helps to customize the content of the edited items. To define the template, nest an `<ng-template>`
 * tag with the `kendoListViewEditTemplate` directive inside a `<kendo-listview>` tag.
 *
 * The template context contains the following fields:
 * - `formGroup`&mdash;The current [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}).
 * If you use the ListView inside [Template-Driven Forms]({{ site.data.urls.angular['forms'] }}), it will be `undefined`.
 * - `itemIndex`&mdash;The current item index. If inside a new item, `itemIndex` is `-1`.
 * - `dataItem`&mdash;The current data item.
 * - `isNew`&mdash;The state of the current item.
 */
let EditTemplateDirective = class EditTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
EditTemplateDirective.ɵfac = function EditTemplateDirective_Factory(t) { return new (t || EditTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
EditTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EditTemplateDirective, selectors: [["", "kendoListViewEditTemplate", ""]] });
EditTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], EditTemplateDirective);

/**
 * @hidden
 */
const isEqual = (index) => (item) => item.index === index;
/**
 * @hidden
 */
const isNotEqual = (index) => (item) => item.index !== index;
/**
 * @hidden
 */
const isNewItem = (index) => index === -1 || index === undefined;
/**
 * @hidden
 */
let EditService = class EditService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.changes = new EventEmitter();
        this.editedIndices = [];
        this.changedSource = new Subject();
        this.changed = this.changedSource.asObservable().pipe(switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))));
    }
    editItem(index, group = undefined) {
        this.editedIndices.push({ index, group });
        this.onChanged();
    }
    addItem(group) {
        this.newItem = { group };
        this.onChanged();
    }
    isEditing() {
        return this.editedIndices.length > 0;
    }
    get hasNewItem() {
        return isPresent(this.newItem);
    }
    get newDataItem() {
        if (this.hasNewItem) {
            return this.newItem.group.value;
        }
        return {};
    }
    get newItemGroup() {
        if (this.hasNewItem) {
            return this.newItem.group;
        }
        return new FormGroup({});
    }
    editGroup(index) {
        return this.context(index).group;
    }
    close(index) {
        if (isNewItem(index)) {
            this.newItem = undefined;
            return;
        }
        this.editedIndices = this.editedIndices.filter(isNotEqual(index));
        this.onChanged();
    }
    context(index) {
        if (isNewItem(index)) {
            return this.newItem;
        }
        return this.findByIndex(index);
    }
    isEdited(index) {
        if (isNewItem(index) && isPresent(this.newItem)) {
            return true;
        }
        return isPresent(this.findByIndex(index));
    }
    hasEdited(index) {
        return isPresent(this.context(index));
    }
    beginEdit(itemIndex) {
        this.changes.emit({ action: 'edit', itemIndex });
    }
    beginAdd() {
        this.changes.emit({ action: 'add' });
    }
    endEdit(itemIndex) {
        const { group: formGroup } = this.context(itemIndex);
        this.changes.emit({ action: 'cancel', itemIndex, formGroup, isNew: isNewItem(itemIndex) });
    }
    save(itemIndex) {
        const { group: formGroup } = this.context(itemIndex);
        this.changes.emit({ action: 'save', itemIndex, formGroup, isNew: isNewItem(itemIndex) });
    }
    remove(itemIndex) {
        this.changes.emit({ action: 'remove', itemIndex });
    }
    findByIndex(index) {
        return this.editedIndices.find(isEqual(index));
    }
    onChanged() {
        this.ngZone.runOutsideAngular(() => {
            this.changedSource.next();
        });
    }
};
EditService.ɵfac = function EditService_Factory(t) { return new (t || EditService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
EditService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: EditService, factory: function (t) { return EditService.ɵfac(t); } });
EditService = __decorate([ __metadata("design:paramtypes", [NgZone])
], EditService);

const DEFAULT_PAGER_SETTINGS = {
    position: 'bottom',
    buttonCount: 5,
    info: true,
    previousNext: true,
    type: 'numeric',
    pageSizeValues: [5, 10, 20]
};
const createControl = (source) => (acc, key) => {
    acc[key] = new FormControl(source[key]);
    return acc;
};
/**
 * Represents the Kendo UI ListView component for Angular.
 */
let ListViewComponent = class ListViewComponent {
    constructor(ngZone, element, renderer, editService, navigationService) {
        this.ngZone = ngZone;
        this.element = element;
        this.renderer = renderer;
        this.editService = editService;
        this.navigationService = navigationService;
        /**
         * @hidden
         */
        this.className = true;
        /**
         * Specifies if the loading indicator of the ListView will be displayed
         * ([see example]({% slug paging_listview %}#toc-remote-binding)).
         */
        this.loading = false;
        /**
         * Specifies the content container `role` attribute
         * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
         * By default, the container `role` is set to `listbox`.
         */
        this.containerRole = 'listbox';
        /**
         * Specifies the list item `role` attribute
         * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
         * By default, the list item `role` is set to `option`.
         */
        this.listItemRole = 'option';
        /**
         * Fires when the user scrolls to the last record on the page
         * ([see endless scrolling example]({% slug scrollmodes_listview %}#toc-endless-scrolling)).
         */
        this.scrollBottom = new EventEmitter();
        /**
         * Fires when the page or the page size of the ListView is changed
         * ([see example]({% slug paging_listview %}#toc-remote-binding)).
         * You have to handle the event yourself and page the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * Fires when the page size of the ListView is changed. This event can be prevented (`$event.preventDefault()`).
         * If not prevented, the `pageChange` event will be fired subsequently.
         */
        this.pageSizeChange = new EventEmitter();
        /**
         * Fires when the user clicks the **Edit** command button to edit an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
         */
        this.edit = new EventEmitter();
        /**
         * Fires when the user clicks the **Cancel** command button to close an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-cancelling-editing)).
         */
        this.cancel = new EventEmitter();
        /**
         * Fires when the user clicks the **Save** command button to save changes in an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-saving-records)).
         */
        this.save = new EventEmitter();
        /**
         * Fires when the user clicks the **Remove** command button to remove an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-removing-records)).
         */
        this.remove = new EventEmitter();
        /**
         * Fires when the user clicks the **Add** command button to add a new item
         * ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
         */
        this.add = new EventEmitter();
        this._skip = 0;
        this._navigable = false;
        validatePackage(packageMetadata);
        this.attachEditHandlers();
    }
    /**
     * Specifies whether the keyboard navigation is enabled
     * ([see example]({% slug keyboard_navigation_listview %})).
     * By default, the navigation is disabled.
     */
    set navigable(navigable) {
        if (!navigable && isPresent(this.removeNavigationListeners)) {
            this.removeNavigationListeners();
            this.removeNavigationListeners = null;
            this.navigationService.isEnabled = false;
        }
        else if (navigable && !isPresent(this.removeNavigationListeners)) {
            this.addNavigationListeners();
            this.navigationService.isEnabled = true;
        }
        this._navigable = navigable;
    }
    get navigable() {
        return this._navigable;
    }
    /**
     * Defines the number of records to be skipped by the pager
     * ([more details]({% slug paging_listview %})).
     */
    set skip(skip) {
        const parsed = parseInt(skip, 10);
        const defaultSkipValue = 0;
        this._skip = !isNaN(parsed) ? parsed : defaultSkipValue;
    }
    get skip() {
        return this._skip;
    }
    /**
     * Configures whether the ListView will render a pager
     * ([more details]({% slug paging_listview %})).
     * Providing a boolean value will render a pager with the default settings.
     */
    set pageable(pageable) {
        this._pageable = pageable;
        this.pagerSettings = pageable ? Object.assign({}, DEFAULT_PAGER_SETTINGS, pageable) : null;
    }
    get pageable() {
        return this._pageable;
    }
    /**
     * @hidden
     *
     * Gets the data items passed to the ListView.
     * If a ListViewDataResult is passed, the data value is used. If an array is passed - it's directly used.
     */
    get items() {
        if (!isPresent(this.data)) {
            return [];
        }
        return Array.isArray(this.data) ? this.data : this.data.data;
    }
    /**
     * @hidden
     *
     * Gets the total number of records passed to the ListView.
     * If a ListViewDataResult is passed, the total value is used. If an array is passed - its length is used.
     */
    get total() {
        if (!isPresent(this.data)) {
            return 0;
        }
        return Array.isArray(this.data) ? this.data.length : this.data.total;
    }
    /**
     * @hidden
     */
    get containerTabindex() {
        // workaround for FF, where a scrollable container is focusable even without a tabindex and creates an unwanted tab stop
        // https://bugzilla.mozilla.org/show_bug.cgi?id=616594
        return this.navigable ? -1 : null;
    }
    /**
     * Gets the current active item index
     * ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)).
     * Returns `null` when the keyboard navigation is disabled.
     */
    get activeIndex() {
        return this.navigationService.activeIndex;
    }
    ngOnChanges(changes) {
        if (isChanged('height', changes, false)) {
            this.renderer.setStyle(this.element.nativeElement, 'height', `${this.height}px`);
        }
    }
    ngOnDestroy() {
        if (isPresent(this.editServiceSubscription)) {
            this.editServiceSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    templateContext(index) {
        return {
            "$implicit": this.items[index],
            "isLast": index === this.items.length - 1,
            "isFirst": index === 0,
            "dataItem": this.items[index],
            "index": index
        };
    }
    /**
     * @hidden
     */
    editTemplateContext(index) {
        const isNew = index === -1;
        const group = isNew ? this.editService.newItemGroup : this.editService.editGroup(index);
        return {
            "$implicit": group,
            "formGroup": group,
            "dataItem": isNew ? this.editService.newDataItem : this.items[index],
            "isNew": isNew,
            "index": index
        };
    }
    /**
     * Focuses the item at the specified index ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)):
     * - If no index is specified, the current active index will be focused.
     * - If the passed value is below `0`, the first item receives focus.
     * - If the passed value is above the last available index, the last item receives focus.
     *
     * > The index param is based on the logical structure of the ListView and does not correspond to the data item index -
     * > i.e. the index `0` corresponds to the first rendered list item. Paging is not taken into account.
     * > Also, for the focusing to work, the `navigable` prop must first be set to `true`.
     */
    focus(index) {
        const totalRenderedItems = this.listViewItems.length;
        this.navigationService.focusIndex(index, totalRenderedItems);
    }
    /**
     * Creates a new item editor ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
     *
     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes
     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.
     */
    addItem(group) {
        const isFormGroup = group instanceof FormGroup;
        if (!isFormGroup) {
            const fields = Object.keys(group).reduce(createControl(group), {});
            group = new FormGroup(fields);
        }
        this.editService.addItem(group);
    }
    /**
     * Switches the specified item to edit mode ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
     *
     * @param index - The item index that will be switched to edit mode.
     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})
     * that describes the edit form.
     */
    editItem(index, group) {
        this.editService.editItem(index, group);
    }
    /**
     * Closes the editor for a given item ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).
     *
     * @param {number} index - The item index that will be switched out of the edit mode. If no index is provided, it is assumed
     * that the new item editor will be closed.
     */
    closeItem(index) {
        this.editService.close(index);
    }
    /**
     * @hidden
     */
    isEdited(index) {
        return this.editService.isEdited(index);
    }
    /**
     * @hidden
     */
    handlePageChange(event) {
        this.scrollToContainerTop();
        const firstIndex = 0;
        this.navigationService.setActiveIndex(firstIndex);
        this.pageChange.emit(event);
    }
    /**
     * @hidden
     */
    handleContentScroll() {
        if (!hasObservers(this.scrollBottom)) {
            return;
        }
        const THRESHOLD = 2;
        const { scrollHeight, scrollTop, clientHeight } = this.contentContainer.nativeElement;
        const atBottom = scrollHeight - clientHeight - scrollTop <= THRESHOLD;
        if (atBottom) {
            this.ngZone.run(() => {
                const event = { sender: this };
                this.scrollBottom.emit(event);
            });
        }
    }
    /**
     * @hidden
     */
    itemPosInSet(index) {
        // adds 1 as the aria-posinset is not zero-based and the counting starts from 1
        return this.skip + index + 1;
    }
    scrollToContainerTop() {
        const container = this.contentContainer.nativeElement;
        container.scrollTop = 0;
        container.scrollLeft = 0;
    }
    addNavigationListeners() {
        this.ngZone.runOutsideAngular(() => {
            const removeKeydownListener = this.renderer.listen(this.contentContainer.nativeElement, 'keydown', event => this.navigationService.handleKeyDown(event, this.listViewItems.length));
            const removeFocusInListener = this.renderer.listen(this.contentContainer.nativeElement, 'focusin', event => this.navigationService.handleFocusIn(event));
            const removeFocusOutListener = this.renderer.listen(this.contentContainer.nativeElement, 'focusout', event => this.navigationService.handleFocusOut(event));
            this.removeNavigationListeners = () => {
                removeKeydownListener();
                removeFocusInListener();
                removeFocusOutListener();
            };
        });
    }
    attachEditHandlers() {
        if (!isPresent(this.editService)) {
            return;
        }
        this.editServiceSubscription = this.editService
            .changes.subscribe(this.emitCRUDEvent.bind(this));
    }
    emitCRUDEvent(args) {
        const { action, itemIndex, formGroup } = args;
        let dataItem = this.items[itemIndex];
        if (action !== 'add' && formGroup) {
            dataItem = formGroup.value;
        }
        Object.assign(args, {
            dataItem: dataItem,
            sender: this
        });
        this[action].emit(args);
    }
};
ListViewComponent.ɵfac = function ListViewComponent_Factory(t) { return new (t || ListViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(NavigationService)); };
ListViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListViewComponent, selectors: [["kendo-listview"]], contentQueries: function ListViewComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ItemTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, LoaderTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, EditTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loaderTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.editTemplate = _t.first);
    } }, viewQuery: function ListViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
        ɵngcc0.ɵɵviewQuery(ListViewNavigableItemDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listViewItems = _t);
    } }, hostVars: 8, hostBindings: function ListViewComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-widget", ctx.className)("k-listview", ctx.className)("k-listview-bordered", ctx.className)("k-d-flex", ctx.className);
    } }, inputs: { loading: "loading", containerRole: "containerRole", listItemRole: "listItemRole", navigable: "navigable", skip: "skip", pageable: "pageable", data: "data", containerStyle: "containerStyle", itemStyle: "itemStyle", containerClass: "containerClass", itemClass: "itemClass", containerLabel: "containerLabel", pageSize: "pageSize", height: "height" }, outputs: { scrollBottom: "scrollBottom", pageChange: "pageChange", pageSizeChange: "pageSizeChange", edit: "edit", cancel: "cancel", save: "save", remove: "remove", add: "add" }, exportAs: ["kendoListView"], features: [ɵngcc0.ɵɵProvidersFeature([
            EditService,
            NavigationService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.listview'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 12, vars: 17, consts: [[4, "ngIf"], ["class", "k-listview-header", 4, "ngIf"], [1, "k-listview-content", 3, "ngClass", "ngStyle", "kendoEventsOutsideAngular", "scope"], ["contentContainer", ""], ["class", "k-listview-item", "kendoListViewNavigableItem", "", 3, "index", "ngClass", "ngStyle", 4, "ngIf"], ["class", "k-listview-item", "kendoListViewNavigableItem", "", 3, "index", "ngClass", "ngStyle", 4, "ngFor", "ngForOf"], ["class", "k-loading-mask", 4, "ngIf"], ["class", "k-listview-footer", 4, "ngIf"], ["pagerTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "k-listview-header"], [3, "ngTemplateOutlet"], ["kendoListViewNavigableItem", "", 1, "k-listview-item", 3, "index", "ngClass", "ngStyle"], [1, "k-loading-mask"], [1, "k-loading-text"], [1, "k-loading-image"], [1, "k-loading-color"], [1, "k-listview-footer"], [3, "class", "total", "pageSize", "skip", "buttonCount", "info", "previousNext", "type", "pageSizeValues", "pageChange", "pageSizeChange", 4, "ngIf"], [3, "total", "pageSize", "skip", "buttonCount", "info", "previousNext", "type", "pageSizeValues", "pageChange", "pageSizeChange"]], template: function ListViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ListViewComponent_0_Template, 1, 3, null, 0);
        ɵngcc0.ɵɵtemplate(1, ListViewComponent_div_1_Template, 2, 1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2, 3);
        ɵngcc0.ɵɵtemplate(4, ListViewComponent_div_4_Template, 2, 6, "div", 4);
        ɵngcc0.ɵɵtemplate(5, ListViewComponent_div_5_Template, 2, 9, "div", 5);
        ɵngcc0.ɵɵtemplate(6, ListViewComponent_div_6_Template, 5, 0, "div", 6);
        ɵngcc0.ɵɵtemplate(7, ListViewComponent_7_Template, 1, 1, null, 0);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ListViewComponent_div_8_Template, 2, 1, "div", 7);
        ɵngcc0.ɵɵtemplate(9, ListViewComponent_9_Template, 1, 3, null, 0);
        ɵngcc0.ɵɵtemplate(10, ListViewComponent_ng_template_10_Template, 1, 1, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", (ctx.pagerSettings == null ? null : ctx.pagerSettings.position) !== "bottom");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.containerClass)("ngStyle", ctx.containerStyle)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(15, _c3, ctx.handleContentScroll))("scope", ctx);
        ɵngcc0.ɵɵattribute("tabindex", ctx.containerTabindex)("role", ctx.containerRole)("aria-label", ctx.containerLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.editService.hasNewItem);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading && !ctx.loaderTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading && ctx.loaderTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.footerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.pagerSettings == null ? null : ctx.pagerSettings.position) !== "top");
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc2.EventsOutsideAngularDirective, ListViewNavigableItemDirective, ɵngcc1.NgForOf, ɵngcc3.PagerComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-listview'),
    HostBinding('class.k-listview-bordered'),
    HostBinding('class.k-d-flex'),
    __metadata("design:type", Boolean)
], ListViewComponent.prototype, "className", void 0);
__decorate([
    ContentChild(ItemTemplateDirective, { static: false }),
    __metadata("design:type", ItemTemplateDirective)
], ListViewComponent.prototype, "itemTemplate", void 0);
__decorate([
    ContentChild(HeaderTemplateDirective, { static: false }),
    __metadata("design:type", HeaderTemplateDirective)
], ListViewComponent.prototype, "headerTemplate", void 0);
__decorate([
    ContentChild(FooterTemplateDirective, { static: false }),
    __metadata("design:type", FooterTemplateDirective)
], ListViewComponent.prototype, "footerTemplate", void 0);
__decorate([
    ContentChild(LoaderTemplateDirective, { static: false }),
    __metadata("design:type", LoaderTemplateDirective)
], ListViewComponent.prototype, "loaderTemplate", void 0);
__decorate([
    ViewChild('contentContainer', { static: true }),
    __metadata("design:type", ElementRef)
], ListViewComponent.prototype, "contentContainer", void 0);
__decorate([
    ContentChild(EditTemplateDirective, { static: false }),
    __metadata("design:type", EditTemplateDirective)
], ListViewComponent.prototype, "editTemplate", void 0);
__decorate([
    ViewChildren(ListViewNavigableItemDirective),
    __metadata("design:type", QueryList)
], ListViewComponent.prototype, "listViewItems", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ListViewComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ListViewComponent.prototype, "loading", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ListViewComponent.prototype, "containerStyle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ListViewComponent.prototype, "itemStyle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ListViewComponent.prototype, "containerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ListViewComponent.prototype, "itemClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ListViewComponent.prototype, "containerLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ListViewComponent.prototype, "containerRole", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ListViewComponent.prototype, "listItemRole", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ListViewComponent.prototype, "navigable", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ListViewComponent.prototype, "pageSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], ListViewComponent.prototype, "skip", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], ListViewComponent.prototype, "pageable", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ListViewComponent.prototype, "height", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "scrollBottom", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "pageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "pageSizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "edit", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "cancel", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "save", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "remove", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "add", void 0);
ListViewComponent = __decorate([ __metadata("design:paramtypes", [NgZone,
        ElementRef,
        Renderer2,
        EditService,
        NavigationService])
], ListViewComponent);

/**
 * A directive that encapsulates the in-memory handling of paging
 * ([see example]({% slug paging_listview %}#toc-binding-directive)).
 */
let DataBindingDirective = class DataBindingDirective {
    constructor(listView) {
        this.listView = listView;
        this.subscriptions = new Subscription();
    }
    /**
     * The array of data which will be used to populate the ListView.
     */
    set data(data) {
        this._data = data || [];
        this.updateListViewData();
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.subscriptions.add(this.listView.pageChange.subscribe(this.handlePageChange.bind(this)));
        this.subscriptions.add(this.listView.pageSizeChange.subscribe(this.handlePageSizeChange.bind(this)));
        this.updateListViewData();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    handlePageChange(event) {
        this.listView.skip = event.skip;
        this.listView.pageSize = event.take;
        this.updateListViewData();
    }
    handlePageSizeChange(event) {
        this.listView.pageSize = Number(event.newPageSize);
    }
    updateListViewData() {
        const from = this.listView.skip || 0;
        const to = from + (this.listView.pageSize || this.data.length);
        this.listView.data = {
            data: this.data.slice(from, to),
            total: this.data.length
        };
    }
};
DataBindingDirective.ɵfac = function DataBindingDirective_Factory(t) { return new (t || DataBindingDirective)(ɵngcc0.ɵɵdirectiveInject(ListViewComponent)); };
DataBindingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataBindingDirective, selectors: [["", "kendoListViewBinding", ""]], inputs: { data: ["kendoListViewBinding", "data"] } });
__decorate([
    Input('kendoListViewBinding'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataBindingDirective.prototype, "data", null);
DataBindingDirective = __decorate([ __metadata("design:paramtypes", [ListViewComponent])
], DataBindingDirective);

/**
 * The arguments of the [`pageSizeChange`]({% slug api_listview_listviewcomponent %}#toc-pagesizechange) event of the ListView
 * ([more details]({% slug paging_listview %}).
 */
class PageSizeChangeEvent$1 extends PageSizeChangeEvent {
}

/**
 * @hidden
 */
let TemplateContextDirective = class TemplateContextDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    set templateContext(context) {
        if (this.insertedViewRef) {
            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));
            this.insertedViewRef = undefined;
        }
        if (context.templateRef) {
            this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);
        }
    }
};
TemplateContextDirective.ɵfac = function TemplateContextDirective_Factory(t) { return new (t || TemplateContextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
TemplateContextDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TemplateContextDirective, selectors: [["", "templateContext", ""]], inputs: { templateContext: "templateContext" } });
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TemplateContextDirective.prototype, "templateContext", null);
TemplateContextDirective = __decorate([ __metadata("design:paramtypes", [ViewContainerRef])
], TemplateContextDirective);

/**
 * Represents the `edit` command of the ListView. You can apply this directive to any `button`
 * element inside a [`EditTemplateDirective`]({% slug api_listview_edittemplatedirective %}) template.
 * When an associated button with the directive is clicked, the
 * [`edit`]({% slug api_listview_listviewcomponent %}#toc-edit) event
 * is triggered ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate>
 *     <button kendoListViewEditCommand class="k-primary">Edit</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 *
 */
let EditCommandDirective = class EditCommandDirective extends Button {
    constructor(editService, element, renderer, localization, ngZone) {
        super(element, renderer, null, localization, ngZone);
        this.editService = editService;
        this.elementRef = element;
    }
    /**
     * @hidden
     */
    clickHandler(e) {
        e.preventDefault();
        const index = getClosestListItemIndex(this.elementRef.nativeElement);
        this.editService.beginEdit(index);
    }
};
EditCommandDirective.ɵfac = function EditCommandDirective_Factory(t) { return new (t || EditCommandDirective)(ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
EditCommandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EditCommandDirective, selectors: [["", "kendoListViewEditCommand", ""]], hostBindings: function EditCommandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function EditCommandDirective_click_HostBindingHandler($event) { return ctx.clickHandler($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], EditCommandDirective.prototype, "clickHandler", null);
EditCommandDirective = __decorate([ __metadata("design:paramtypes", [EditService,
        ElementRef,
        Renderer2,
        LocalizationService,
        NgZone])
], EditCommandDirective);

/**
 * Represents the `cancel` command of the ListView. You can apply this directive to any `button`
 * element inside a [`EditTemplateDirective`]({% slug api_listview_edittemplatedirective %}) template.
 * When an associated button with the directive is clicked, the
 * [`cancel`]({% slug api_listview_listviewcomponent %}#toc-cancel) event
 * is triggered ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate>
 *     <button kendoListViewCancelCommand>Cancel changes</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 *
 * You can control the content of the button based on the state of the item.
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate let-isNew="isNew">
 *     <button kendoListViewCancelCommand>{{isNew ? 'Discard' : 'Cancel changes'}}</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 */
let CancelCommandDirective = class CancelCommandDirective extends Button {
    constructor(editService, element, renderer, localization, ngZone) {
        super(element, renderer, null, localization, ngZone);
        this.editService = editService;
        this.elementRef = element;
    }
    /**
     * @hidden
     */
    clickHandler(e) {
        e.preventDefault();
        const index = getClosestListItemIndex(this.elementRef.nativeElement);
        if (this.editService.isEdited(index)) {
            this.editService.endEdit(index);
        }
    }
};
CancelCommandDirective.ɵfac = function CancelCommandDirective_Factory(t) { return new (t || CancelCommandDirective)(ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
CancelCommandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CancelCommandDirective, selectors: [["", "kendoListViewCancelCommand", ""]], hostBindings: function CancelCommandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CancelCommandDirective_click_HostBindingHandler($event) { return ctx.clickHandler($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], CancelCommandDirective.prototype, "clickHandler", null);
CancelCommandDirective = __decorate([ __metadata("design:paramtypes", [EditService,
        ElementRef,
        Renderer2,
        LocalizationService,
        NgZone])
], CancelCommandDirective);

/**
 * Represents the `save` command of the ListView. You can apply this directive to any `button`
 * element inside a [`EditTemplateDirective`]({% slug api_listview_edittemplatedirective %}) template.
 * When an associated button with the directive is clicked, the
 * [`save`]({% slug api_listview_listviewcomponent %}#toc-save) event
 * is triggered ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate>
 *     <button kendoListViewSaveCommand>Save changes</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 *
 * You can control the content of the button based on the state of the item.
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate let-isNew="isNew">
 *     <button kendoListViewSaveCommand>{{isNew ? 'Add' : 'Update'}}</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 */
let SaveCommandDirective = class SaveCommandDirective extends Button {
    constructor(editService, element, renderer, localization, ngZone) {
        super(element, renderer, null, localization, ngZone);
        this.editService = editService;
        this.elementRef = element;
    }
    /**
     * @hidden
     */
    clickHandler(e) {
        e.preventDefault();
        const index = getClosestListItemIndex(this.elementRef.nativeElement);
        if (this.editService.isEdited(index)) {
            this.editService.save(index);
        }
    }
};
SaveCommandDirective.ɵfac = function SaveCommandDirective_Factory(t) { return new (t || SaveCommandDirective)(ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
SaveCommandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SaveCommandDirective, selectors: [["", "kendoListViewSaveCommand", ""]], hostBindings: function SaveCommandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SaveCommandDirective_click_HostBindingHandler($event) { return ctx.clickHandler($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SaveCommandDirective.prototype, "clickHandler", null);
SaveCommandDirective = __decorate([ __metadata("design:paramtypes", [EditService,
        ElementRef,
        Renderer2,
        LocalizationService,
        NgZone])
], SaveCommandDirective);

/**
 * Represents the `remove` command of the ListView. You can apply this directive to any `button` element
 * inside a [`EditTemplateDirective`]({% slug api_listview_edittemplatedirective %}) template.
 * When an associated button with the directive is clicked, the
 * [`remove` event]({% slug api_listview_listviewcomponent %}#toc-remove)
 * is triggered ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate>
 *     <button kendoListViewRemoveCommand>Remove item</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 */
let RemoveCommandDirective = class RemoveCommandDirective extends Button {
    constructor(editService, element, renderer, localization, ngZone) {
        super(element, renderer, null, localization, ngZone);
        this.editService = editService;
        this.elementRef = element;
    }
    /**
     * @hidden
     */
    clickHandler(e) {
        e.preventDefault();
        const index = getClosestListItemIndex(this.elementRef.nativeElement);
        this.editService.remove(index);
    }
};
RemoveCommandDirective.ɵfac = function RemoveCommandDirective_Factory(t) { return new (t || RemoveCommandDirective)(ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
RemoveCommandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RemoveCommandDirective, selectors: [["", "kendoListViewRemoveCommand", ""]], hostBindings: function RemoveCommandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function RemoveCommandDirective_click_HostBindingHandler($event) { return ctx.clickHandler($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], RemoveCommandDirective.prototype, "clickHandler", null);
RemoveCommandDirective = __decorate([ __metadata("design:paramtypes", [EditService,
        ElementRef,
        Renderer2,
        LocalizationService,
        NgZone])
], RemoveCommandDirective);

/**
 * Represents the command for adding a new item to the ListView. You can apply this directive to any
 * `button` element inside a [`HeaderTemplate`]({% slug api_listview_headertemplatedirective %}).
 * When an associated button with the directive is clicked, the
 * [`add`]({% slug api_listview_listviewcomponent %}#toc-add) event is triggered
 * ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *    <ng-template kendoListViewHeaderTemplate>
 *       <button kendoListViewAddCommand>Add new</button>
 *    </ng-template>
 * </kendo-listview>
 * ```
 */
let AddCommandDirective = class AddCommandDirective extends Button {
    constructor(editService, element, renderer, localization, ngZone) {
        super(element, renderer, null, localization, ngZone);
        this.editService = editService;
    }
    /**
     * @hidden
     */
    clickHandler(e) {
        e.preventDefault();
        this.editService.beginAdd();
    }
};
AddCommandDirective.ɵfac = function AddCommandDirective_Factory(t) { return new (t || AddCommandDirective)(ɵngcc0.ɵɵdirectiveInject(EditService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
AddCommandDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: AddCommandDirective, selectors: [["", "kendoListViewAddCommand", ""]], hostBindings: function AddCommandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AddCommandDirective_click_HostBindingHandler($event) { return ctx.clickHandler($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AddCommandDirective.prototype, "clickHandler", null);
AddCommandDirective = __decorate([ __metadata("design:paramtypes", [EditService,
        ElementRef,
        Renderer2,
        LocalizationService,
        NgZone])
], AddCommandDirective);

const TEMPLATE_DIRECTIVES = [
    ItemTemplateDirective,
    HeaderTemplateDirective,
    FooterTemplateDirective,
    LoaderTemplateDirective
];
const BINDING_DIRECTIVES = [
    DataBindingDirective
];
const EDITING_DIRECTIVES = [
    EditTemplateDirective,
    EditCommandDirective,
    CancelCommandDirective,
    SaveCommandDirective,
    RemoveCommandDirective,
    AddCommandDirective
];
/**
 * The exported package module.
 *
 * The package exports:
 * - [`ListViewComponent`]({% slug api_listview_listviewcomponent %})&mdash;The ListView component class.
 * - [`ItemTemplateDirective`]({% slug api_listview_itemtemplatedirective %})&mdash;The item template directive.
 * - [`HeaderTemplateDirective`]({% slug api_listview_headertemplatedirective %})&mdash;The header template directive.
 * - [`FooterTemplateDirective`]({% slug api_listview_footertemplatedirective %})&mdash;The footer template directive.
 * - [`LoaderTemplateDirective`]({% slug api_listview_loadertemplatedirective %})&mdash;The loeader template directive.
 * - [`DataBindingDirective`]({% slug api_listview_databindingdirective %})&mdash;The data binding directive.
 * - [`EditTemplateDirective`]({% slug api_listview_editingdirective %}&mdash;The editing template directive.
 */
let ListViewModule = class ListViewModule {
};
ListViewModule.ɵfac = function ListViewModule_Factory(t) { return new (t || ListViewModule)(); };
ListViewModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ListViewModule });
ListViewModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            PagerModule,
            EventsModule
        ], CommonModule,
        EventsModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListViewNavigableItemDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewNavigableItem]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: NavigationService }]; }, { index: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewHeaderTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewFooterTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewLoaderTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EditTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewEditTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EditService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListViewComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendoListView',
                selector: 'kendo-listview',
                providers: [
                    EditService,
                    NavigationService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.listview'
                    }
                ],
                template: `
        <!-- top pager -->
        <ng-template
            *ngIf="pagerSettings?.position !== 'bottom'"
            [ngTemplateOutlet]="pagerTemplate"
            [ngTemplateOutletContext]="{ pagerClass: 'k-listview-pager k-listview-pager-top' }"
        >
        </ng-template>

        <!-- header -->
        <div
            *ngIf="headerTemplate"
            class="k-listview-header"
        >
            <ng-template
                [ngTemplateOutlet]="headerTemplate?.templateRef"
            >
            </ng-template>
        </div>

        <!-- content -->
        <div
            #contentContainer
            [attr.tabindex]="containerTabindex"
            class="k-listview-content"
            [ngClass]="containerClass"
            [ngStyle]="containerStyle"
            [kendoEventsOutsideAngular]="{
                scroll: handleContentScroll
            }"
            [scope]="this"
            [attr.role]="containerRole"
            [attr.aria-label]="containerLabel"
        >
            <!-- new item edit template -->
            <div
                *ngIf="editService.hasNewItem"
                class="k-listview-item"
                [attr.role]="listItemRole"
                kendoListViewNavigableItem
                [index]="-1"
                [attr.data-kendo-listview-item-index]="-1"
                [ngClass]="itemClass"
                [ngStyle]="itemStyle"
            >
                <ng-template
                    *ngIf="editTemplate"
                    [ngTemplateOutlet]="editTemplate?.templateRef"
                    [ngTemplateOutletContext]="editTemplateContext(-1)"
                >
                </ng-template>
            </div>

            <!-- items -->
            <div
                *ngFor="let dataItem of items; let index = index; let first = first; let last = last;"
                class="k-listview-item"
                [attr.role]="listItemRole"
                [attr.aria-posinset]="itemPosInSet(index)"
                [attr.aria-setsize]="total"
                kendoListViewNavigableItem
                [index]="index"
                [attr.data-kendo-listview-item-index]="index"
                [ngClass]="itemClass"
                [ngStyle]="itemStyle"
            >
                <ng-template
                    [ngTemplateOutlet]="isEdited(index) ? editTemplate?.templateRef : itemTemplate?.templateRef"
                    [ngTemplateOutletContext]="isEdited(index) ? editTemplateContext(index) : templateContext(index)"
                >
                </ng-template>
            </div>

            <!-- loading indicator -->
            <div
                *ngIf="loading && !loaderTemplate"
                class="k-loading-mask"
            >
                <!-- TODO: the k-loading-text is hidden with css but read by readers - review when implementing accessibility + possible localization case -->
                <span class="k-loading-text">Loading</span>
                <div class="k-loading-image"></div>
                <div class="k-loading-color"></div>
            </div>
            <ng-template
                *ngIf="loading && loaderTemplate"
                [ngTemplateOutlet]="loaderTemplate.templateRef"
            >
            </ng-template>
        </div>

        <!-- footer -->
        <div
            *ngIf="footerTemplate"
            class="k-listview-footer"
        >
            <ng-template
                [ngTemplateOutlet]="footerTemplate?.templateRef"
            >
            </ng-template>
        </div>

        <!-- bottom pager -->
        <ng-template
            *ngIf="pagerSettings?.position !== 'top'"
            [ngTemplateOutlet]="pagerTemplate"
            [ngTemplateOutletContext]="{ pagerClass: 'k-listview-pager' }"
        >
        </ng-template>

        <!-- pager template -->
        <ng-template #pagerTemplate let-pagerClass="pagerClass">
            <kendo-datapager
                *ngIf="pageable"
                [class]="pagerClass"
                [total]="total"
                [pageSize]="pageSize"
                [skip]="skip"
                [buttonCount]="pagerSettings.buttonCount"
                [info]="pagerSettings.info"
                [previousNext]="pagerSettings.previousNext"
                [type]="pagerSettings.type"
                [pageSizeValues]="pagerSettings.pageSizeValues"
                (pageChange)="handlePageChange($event)"
                (pageSizeChange)="pageSizeChange.emit($event)"
            >
            </kendo-datapager>
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: EditService }, { type: NavigationService }]; }, { className: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-listview']
        }, {
            type: HostBinding,
            args: ['class.k-listview-bordered']
        }, {
            type: HostBinding,
            args: ['class.k-d-flex']
        }], loading: [{
            type: Input
        }], containerRole: [{
            type: Input
        }], listItemRole: [{
            type: Input
        }], scrollBottom: [{
            type: Output
        }], pageChange: [{
            type: Output
        }], pageSizeChange: [{
            type: Output
        }], edit: [{
            type: Output
        }], cancel: [{
            type: Output
        }], save: [{
            type: Output
        }], remove: [{
            type: Output
        }], add: [{
            type: Output
        }], navigable: [{
            type: Input
        }], skip: [{
            type: Input
        }], pageable: [{
            type: Input
        }], itemTemplate: [{
            type: ContentChild,
            args: [ItemTemplateDirective, { static: false }]
        }], headerTemplate: [{
            type: ContentChild,
            args: [HeaderTemplateDirective, { static: false }]
        }], footerTemplate: [{
            type: ContentChild,
            args: [FooterTemplateDirective, { static: false }]
        }], loaderTemplate: [{
            type: ContentChild,
            args: [LoaderTemplateDirective, { static: false }]
        }], contentContainer: [{
            type: ViewChild,
            args: ['contentContainer', { static: true }]
        }], editTemplate: [{
            type: ContentChild,
            args: [EditTemplateDirective, { static: false }]
        }], listViewItems: [{
            type: ViewChildren,
            args: [ListViewNavigableItemDirective]
        }], data: [{
            type: Input
        }], containerStyle: [{
            type: Input
        }], itemStyle: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], itemClass: [{
            type: Input
        }], containerLabel: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], height: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataBindingDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewBinding]'
            }]
    }], function () { return [{ type: ListViewComponent }]; }, { data: [{
            type: Input,
            args: ['kendoListViewBinding']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TemplateContextDirective, [{
        type: Directive,
        args: [{
                selector: '[templateContext]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { templateContext: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EditCommandDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewEditCommand]'
            }]
    }], function () { return [{ type: EditService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    clickHandler: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CancelCommandDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewCancelCommand]'
            }]
    }], function () { return [{ type: EditService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    clickHandler: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SaveCommandDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewSaveCommand]'
            }]
    }], function () { return [{ type: EditService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    clickHandler: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RemoveCommandDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewRemoveCommand]'
            }]
    }], function () { return [{ type: EditService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    clickHandler: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddCommandDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoListViewAddCommand]'
            }]
    }], function () { return [{ type: EditService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc4.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    clickHandler: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListViewModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TEMPLATE_DIRECTIVES,
                    BINDING_DIRECTIVES,
                    EDITING_DIRECTIVES,
                    ListViewComponent,
                    TemplateContextDirective,
                    ListViewNavigableItemDirective
                ],
                exports: [
                    TEMPLATE_DIRECTIVES,
                    BINDING_DIRECTIVES,
                    EDITING_DIRECTIVES,
                    ListViewComponent,
                    CommonModule,
                    EventsModule
                ],
                imports: [
                    CommonModule,
                    PagerModule,
                    EventsModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListViewModule, { declarations: function () { return [ItemTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, LoaderTemplateDirective, DataBindingDirective, EditTemplateDirective, EditCommandDirective, CancelCommandDirective, SaveCommandDirective, RemoveCommandDirective, AddCommandDirective, ListViewComponent, TemplateContextDirective, ListViewNavigableItemDirective]; }, imports: function () { return [CommonModule,
        PagerModule,
        EventsModule]; }, exports: function () { return [ItemTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, LoaderTemplateDirective, DataBindingDirective, EditTemplateDirective, EditCommandDirective, CancelCommandDirective, SaveCommandDirective, RemoveCommandDirective, AddCommandDirective, ListViewComponent, CommonModule,
        EventsModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AddCommandDirective, CancelCommandDirective, EditCommandDirective, RemoveCommandDirective, SaveCommandDirective, EditService, ListViewNavigableItemDirective, NavigationService, TemplateContextDirective, ListViewComponent, ItemTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, LoaderTemplateDirective, DataBindingDirective, EditTemplateDirective, PageSizeChangeEvent$1 as PageSizeChangeEvent, ListViewModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,