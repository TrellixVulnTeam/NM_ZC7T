/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Injectable, EventEmitter, NgZone } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { isPresent } from '../utils';
import { Subject } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
/**
 * @hidden
 */
var isEqual = function (index) { return function (item) { return item.index === index; }; };
var ɵ0 = isEqual;
/**
 * @hidden
 */
var isNotEqual = function (index) { return function (item) { return item.index !== index; }; };
var ɵ1 = isNotEqual;
/**
 * @hidden
 */
var isNewItem = function (index) { return index === -1 || index === undefined; };
var ɵ2 = isNewItem;
/**
 * @hidden
 */
var EditService = /** @class */ (function () {
    function EditService(ngZone) {
        var _this = this;
        this.ngZone = ngZone;
        this.changes = new EventEmitter();
        this.editedIndices = [];
        this.changedSource = new Subject();
        this.changed = this.changedSource.asObservable().pipe(switchMap(function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); }));
    }
    EditService.prototype.editItem = function (index, group) {
        if (group === void 0) { group = undefined; }
        this.editedIndices.push({ index: index, group: group });
        this.onChanged();
    };
    EditService.prototype.addItem = function (group) {
        this.newItem = { group: group };
        this.onChanged();
    };
    EditService.prototype.isEditing = function () {
        return this.editedIndices.length > 0;
    };
    Object.defineProperty(EditService.prototype, "hasNewItem", {
        get: function () {
            return isPresent(this.newItem);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditService.prototype, "newDataItem", {
        get: function () {
            if (this.hasNewItem) {
                return this.newItem.group.value;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditService.prototype, "newItemGroup", {
        get: function () {
            if (this.hasNewItem) {
                return this.newItem.group;
            }
            return new FormGroup({});
        },
        enumerable: true,
        configurable: true
    });
    EditService.prototype.editGroup = function (index) {
        return this.context(index).group;
    };
    EditService.prototype.close = function (index) {
        if (isNewItem(index)) {
            this.newItem = undefined;
            return;
        }
        this.editedIndices = this.editedIndices.filter(isNotEqual(index));
        this.onChanged();
    };
    EditService.prototype.context = function (index) {
        if (isNewItem(index)) {
            return this.newItem;
        }
        return this.findByIndex(index);
    };
    EditService.prototype.isEdited = function (index) {
        if (isNewItem(index) && isPresent(this.newItem)) {
            return true;
        }
        return isPresent(this.findByIndex(index));
    };
    EditService.prototype.hasEdited = function (index) {
        return isPresent(this.context(index));
    };
    EditService.prototype.beginEdit = function (itemIndex) {
        this.changes.emit({ action: 'edit', itemIndex: itemIndex });
    };
    EditService.prototype.beginAdd = function () {
        this.changes.emit({ action: 'add' });
    };
    EditService.prototype.endEdit = function (itemIndex) {
        var formGroup = this.context(itemIndex).group;
        this.changes.emit({ action: 'cancel', itemIndex: itemIndex, formGroup: formGroup, isNew: isNewItem(itemIndex) });
    };
    EditService.prototype.save = function (itemIndex) {
        var formGroup = this.context(itemIndex).group;
        this.changes.emit({ action: 'save', itemIndex: itemIndex, formGroup: formGroup, isNew: isNewItem(itemIndex) });
    };
    EditService.prototype.remove = function (itemIndex) {
        this.changes.emit({ action: 'remove', itemIndex: itemIndex });
    };
    EditService.prototype.findByIndex = function (index) {
        return this.editedIndices.find(isEqual(index));
    };
    EditService.prototype.onChanged = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.changedSource.next();
        });
    };
    EditService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [NgZone])
    ], EditService);
    return EditService;
}());
export { EditService };
export { ɵ0, ɵ1, ɵ2 };
