/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import { NavigationService } from './navigation.service';
import { isPresent } from '../utils';
/**
 * @hidden
 */
var ListViewNavigableItemDirective = /** @class */ (function () {
    function ListViewNavigableItemDirective(hostElement, renderer, navigationService) {
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.navigationService = navigationService;
    }
    ListViewNavigableItemDirective.prototype.ngOnChanges = function () {
        this.updateNavigationState();
    };
    ListViewNavigableItemDirective.prototype.ngOnInit = function () {
        this.navigationSubscription = this.navigationService.changes
            .subscribe(this.updateNavigationState.bind(this));
    };
    ListViewNavigableItemDirective.prototype.ngOnDestroy = function () {
        if (isPresent(this.navigationSubscription)) {
            this.navigationSubscription.unsubscribe();
        }
    };
    ListViewNavigableItemDirective.prototype.updateNavigationState = function () {
        this.updateTabIndex();
        this.updateFocusedState();
    };
    ListViewNavigableItemDirective.prototype.updateFocusedState = function () {
        var shouldFocus = this.navigationService.isActive(this.index) && this.navigationService.isFocused;
        var focusedCssClass = 'k-state-focused';
        if (shouldFocus) {
            this.renderer.addClass(this.hostElement.nativeElement, focusedCssClass);
            this.hostElement.nativeElement.focus();
        }
        else {
            this.renderer.removeClass(this.hostElement.nativeElement, focusedCssClass);
        }
    };
    ListViewNavigableItemDirective.prototype.updateTabIndex = function () {
        if (!this.navigationService.isEnabled) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, 'tabindex');
        }
        else if (this.navigationService.isActive(this.index)) {
            this.renderer.setAttribute(this.hostElement.nativeElement, 'tabindex', '0');
        }
        else {
            this.renderer.setAttribute(this.hostElement.nativeElement, 'tabindex', '-1');
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], ListViewNavigableItemDirective.prototype, "index", void 0);
    ListViewNavigableItemDirective = tslib_1.__decorate([
        Directive({
            selector: '[kendoListViewNavigableItem]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NavigationService])
    ], ListViewNavigableItemDirective);
    return ListViewNavigableItemDirective;
}());
export { ListViewNavigableItemDirective };
