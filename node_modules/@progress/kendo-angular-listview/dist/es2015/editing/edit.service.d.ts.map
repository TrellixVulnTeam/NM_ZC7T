{"version":3,"file":"edit.service.d.ts","sources":["edit.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, NgZone } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\n/**\n * @hidden\n */\nexport declare type Entity = {\n    index: number;\n    group: any;\n};\n/**\n * @hidden\n */\nexport declare type CommandAction = 'edit' | 'remove' | 'cancel' | 'save' | 'add';\n/**\n * @hidden\n */\nexport declare type CommandEvent = {\n    action: CommandAction;\n    formGroup?: FormGroup;\n    isNew?: boolean;\n    itemIndex?: number;\n};\n/**\n * @hidden\n */\nexport declare class EditService {\n    ngZone: NgZone;\n    changes: EventEmitter<CommandEvent>;\n    changed: Observable<any>;\n    private editedIndices;\n    private newItem;\n    private changedSource;\n    constructor(ngZone: NgZone);\n    editItem(index: number, group?: any): void;\n    addItem(group: any): void;\n    isEditing(): boolean;\n    readonly hasNewItem: boolean;\n    readonly newDataItem: any;\n    readonly newItemGroup: FormGroup;\n    editGroup(index: number): any;\n    close(index?: number): void;\n    context(index?: number): Entity;\n    isEdited(index: number): boolean;\n    hasEdited(index: number): boolean;\n    beginEdit(itemIndex: number): void;\n    beginAdd(): void;\n    endEdit(itemIndex?: number): void;\n    save(itemIndex?: number): void;\n    remove(itemIndex: number): void;\n    private findByIndex;\n    private onChanged;\n}\n"]}