/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Injectable, EventEmitter, NgZone } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { isPresent } from '../utils';
import { Subject } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
/**
 * @hidden
 */
const isEqual = (index) => (item) => item.index === index;
const ɵ0 = isEqual;
/**
 * @hidden
 */
const isNotEqual = (index) => (item) => item.index !== index;
const ɵ1 = isNotEqual;
/**
 * @hidden
 */
const isNewItem = (index) => index === -1 || index === undefined;
const ɵ2 = isNewItem;
/**
 * @hidden
 */
let EditService = class EditService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.changes = new EventEmitter();
        this.editedIndices = [];
        this.changedSource = new Subject();
        this.changed = this.changedSource.asObservable().pipe(switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))));
    }
    editItem(index, group = undefined) {
        this.editedIndices.push({ index, group });
        this.onChanged();
    }
    addItem(group) {
        this.newItem = { group };
        this.onChanged();
    }
    isEditing() {
        return this.editedIndices.length > 0;
    }
    get hasNewItem() {
        return isPresent(this.newItem);
    }
    get newDataItem() {
        if (this.hasNewItem) {
            return this.newItem.group.value;
        }
        return {};
    }
    get newItemGroup() {
        if (this.hasNewItem) {
            return this.newItem.group;
        }
        return new FormGroup({});
    }
    editGroup(index) {
        return this.context(index).group;
    }
    close(index) {
        if (isNewItem(index)) {
            this.newItem = undefined;
            return;
        }
        this.editedIndices = this.editedIndices.filter(isNotEqual(index));
        this.onChanged();
    }
    context(index) {
        if (isNewItem(index)) {
            return this.newItem;
        }
        return this.findByIndex(index);
    }
    isEdited(index) {
        if (isNewItem(index) && isPresent(this.newItem)) {
            return true;
        }
        return isPresent(this.findByIndex(index));
    }
    hasEdited(index) {
        return isPresent(this.context(index));
    }
    beginEdit(itemIndex) {
        this.changes.emit({ action: 'edit', itemIndex });
    }
    beginAdd() {
        this.changes.emit({ action: 'add' });
    }
    endEdit(itemIndex) {
        const { group: formGroup } = this.context(itemIndex);
        this.changes.emit({ action: 'cancel', itemIndex, formGroup, isNew: isNewItem(itemIndex) });
    }
    save(itemIndex) {
        const { group: formGroup } = this.context(itemIndex);
        this.changes.emit({ action: 'save', itemIndex, formGroup, isNew: isNewItem(itemIndex) });
    }
    remove(itemIndex) {
        this.changes.emit({ action: 'remove', itemIndex });
    }
    findByIndex(index) {
        return this.editedIndices.find(isEqual(index));
    }
    onChanged() {
        this.ngZone.runOutsideAngular(() => {
            this.changedSource.next();
        });
    }
};
EditService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [NgZone])
], EditService);
export { EditService };
export { ɵ0, ɵ1, ɵ2 };
