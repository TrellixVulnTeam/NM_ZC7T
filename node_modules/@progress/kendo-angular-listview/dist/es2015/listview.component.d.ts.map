{"version":3,"file":"listview.component.d.ts","sources":["listview.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, NgZone, Renderer2, ElementRef, SimpleChanges, QueryList } from '@angular/core';\nimport { NavigationService } from './navigation/navigation.service';\nimport { ListViewNavigableItemDirective } from './navigation/listview-navigable-item.directive';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { LoaderTemplateDirective } from './templates/loader-template.directive';\nimport { ScrollBottomEvent } from './models/scroll-bottom-event';\nimport { PageChangeEvent } from './models/page-change-event';\nimport { PageSizeChangeEvent } from './models/page-size-change-event';\nimport { PagerSettings } from './models/pager-settings';\nimport { ListViewDataResult } from './models/listview-data-result';\nimport { EditTemplateDirective } from './editing/edit-template.directive';\nimport { EditService } from './editing/edit.service';\nimport { EditEvent } from \"./editing/events/edit-event-args.interface\";\nimport { RemoveEvent } from \"./editing/events/remove-event-args.interface\";\nimport { SaveEvent } from \"./editing/events/save-event-args.interface\";\nimport { CancelEvent } from \"./editing/events/cancel-event-args.interface\";\nimport { AddEvent } from \"./editing/events/add-event-args.interface\";\n/**\n * Represents the Kendo UI ListView component for Angular.\n */\nexport declare class ListViewComponent {\n    ngZone: NgZone;\n    element: ElementRef;\n    renderer: Renderer2;\n    editService: EditService;\n    private navigationService;\n    /**\n     * @hidden\n     */\n    className: boolean;\n    /**\n     * @hidden\n     */\n    itemTemplate: ItemTemplateDirective;\n    /**\n     * @hidden\n     */\n    headerTemplate: HeaderTemplateDirective;\n    /**\n     * @hidden\n     */\n    footerTemplate: FooterTemplateDirective;\n    /**\n     * @hidden\n     */\n    loaderTemplate: LoaderTemplateDirective;\n    /**\n     * @hidden\n     */\n    contentContainer: ElementRef<HTMLElement>;\n    /**\n     * @hidden\n     */\n    editTemplate: EditTemplateDirective;\n    /**\n     * @hidden\n     */\n    listViewItems: QueryList<ListViewNavigableItemDirective>;\n    /**\n     * The data collection that will be used to populate the ListView\n     * ([see data binding examples]({% slug paging_listview %})).\n     */\n    data: any[] | ListViewDataResult;\n    /**\n     * Specifies if the loading indicator of the ListView will be displayed\n     * ([see example]({% slug paging_listview %}#toc-remote-binding)).\n     */\n    loading: boolean;\n    /**\n     * The CSS styles that will be rendered on the content container element of the ListView.\n     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).\n     */\n    containerStyle: {\n        [key: string]: string;\n    };\n    /**\n     * The CSS styles that will be rendered on each item element wrapper of the ListView.\n     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).\n     */\n    itemStyle: {\n        [key: string]: string;\n    };\n    /**\n     * The CSS class that will be rendered on the content container element of the ListView.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    containerClass: string | string[] | Set<string> | {\n        [key: string]: boolean;\n    };\n    /**\n     * The CSS class that will be rendered on each item element wrapper of the ListView.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    itemClass: string | string[] | Set<string> | {\n        [key: string]: boolean;\n    };\n    /**\n     * Specifies the content container `aria-label` attribute\n     * ([see example]({% slug accessibility_listview %}#toc-accessible-names)).\n     */\n    containerLabel: string;\n    /**\n     * Specifies the content container `role` attribute\n     * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).\n     * By default, the container `role` is set to `listbox`.\n     */\n    containerRole: string;\n    /**\n     * Specifies the list item `role` attribute\n     * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).\n     * By default, the list item `role` is set to `option`.\n     */\n    listItemRole: string;\n    /**\n     * Specifies whether the keyboard navigation is enabled\n     * ([see example]({% slug keyboard_navigation_listview %})).\n     * By default, the navigation is disabled.\n     */\n    navigable: boolean;\n    /**\n     * Defines the page size used by the ListView pager\n     * ([more details]({% slug paging_listview %})).\n     */\n    pageSize: number;\n    /**\n     * Defines the number of records to be skipped by the pager\n     * ([more details]({% slug paging_listview %})).\n     */\n    skip: number;\n    /**\n     * Configures whether the ListView will render a pager\n     * ([more details]({% slug paging_listview %})).\n     * Providing a boolean value will render a pager with the default settings.\n     */\n    pageable: boolean | PagerSettings;\n    /**\n     * Defines the height (in pixels) of the ListView component.\n     * If the content height exceeds the component height, a vertical scrollbar will be rendered.\n     * To set the height of the ListView, you can also use `style.height`. The `style.height`\n     * option supports units such as `px`, `%`, `em`, `rem`, and others.\n     */\n    height: number;\n    /**\n     * Fires when the user scrolls to the last record on the page\n     * ([see endless scrolling example]({% slug scrollmodes_listview %}#toc-endless-scrolling)).\n     */\n    scrollBottom: EventEmitter<ScrollBottomEvent>;\n    /**\n     * Fires when the page or the page size of the ListView is changed\n     * ([see example]({% slug paging_listview %}#toc-remote-binding)).\n     * You have to handle the event yourself and page the data.\n     */\n    pageChange: EventEmitter<PageChangeEvent>;\n    /**\n     * Fires when the page size of the ListView is changed. This event can be prevented (`$event.preventDefault()`).\n     * If not prevented, the `pageChange` event will be fired subsequently.\n     */\n    pageSizeChange: EventEmitter<PageSizeChangeEvent>;\n    /**\n     * Fires when the user clicks the **Edit** command button to edit an item\n     * ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).\n     */\n    edit: EventEmitter<EditEvent>;\n    /**\n     * Fires when the user clicks the **Cancel** command button to close an item\n     * ([see example]({% slug editing_template_forms_listview %}#toc-cancelling-editing)).\n     */\n    cancel: EventEmitter<CancelEvent>;\n    /**\n     * Fires when the user clicks the **Save** command button to save changes in an item\n     * ([see example]({% slug editing_template_forms_listview %}#toc-saving-records)).\n     */\n    save: EventEmitter<SaveEvent>;\n    /**\n     * Fires when the user clicks the **Remove** command button to remove an item\n     * ([see example]({% slug editing_template_forms_listview %}#toc-removing-records)).\n     */\n    remove: EventEmitter<RemoveEvent>;\n    /**\n     * Fires when the user clicks the **Add** command button to add a new item\n     * ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).\n     */\n    add: EventEmitter<AddEvent>;\n    /**\n     * @hidden\n     */\n    pagerSettings: PagerSettings;\n    /**\n     * @hidden\n     *\n     * Gets the data items passed to the ListView.\n     * If a ListViewDataResult is passed, the data value is used. If an array is passed - it's directly used.\n     */\n    readonly items: any[];\n    /**\n     * @hidden\n     *\n     * Gets the total number of records passed to the ListView.\n     * If a ListViewDataResult is passed, the total value is used. If an array is passed - its length is used.\n     */\n    readonly total: number;\n    /**\n     * @hidden\n     */\n    readonly containerTabindex: number;\n    /**\n     * Gets the current active item index\n     * ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)).\n     * Returns `null` when the keyboard navigation is disabled.\n     */\n    readonly activeIndex: number;\n    private removeNavigationListeners;\n    private _skip;\n    private _navigable;\n    private _pageable;\n    private editServiceSubscription;\n    constructor(ngZone: NgZone, element: ElementRef, renderer: Renderer2, editService: EditService, navigationService: NavigationService);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    templateContext(index: number): any;\n    /**\n     * @hidden\n     */\n    editTemplateContext(index: number): any;\n    /**\n     * Focuses the item at the specified index ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)):\n     * - If no index is specified, the current active index will be focused.\n     * - If the passed value is below `0`, the first item receives focus.\n     * - If the passed value is above the last available index, the last item receives focus.\n     *\n     * > The index param is based on the logical structure of the ListView and does not correspond to the data item index -\n     * > i.e. the index `0` corresponds to the first rendered list item. Paging is not taken into account.\n     * > Also, for the focusing to work, the `navigable` prop must first be set to `true`.\n     */\n    focus(index?: number): void;\n    /**\n     * Creates a new item editor ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).\n     *\n     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes\n     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.\n     */\n    addItem(group: any): void;\n    /**\n     * Switches the specified item to edit mode ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).\n     *\n     * @param index - The item index that will be switched to edit mode.\n     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})\n     * that describes the edit form.\n     */\n    editItem(index: number, group?: any): void;\n    /**\n     * Closes the editor for a given item ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).\n     *\n     * @param {number} index - The item index that will be switched out of the edit mode. If no index is provided, it is assumed\n     * that the new item editor will be closed.\n     */\n    closeItem(index?: number): void;\n    /**\n     * @hidden\n     */\n    isEdited(index: number): boolean;\n    /**\n     * @hidden\n     */\n    handlePageChange(event: PageChangeEvent): void;\n    /**\n     * @hidden\n     */\n    handleContentScroll(): void;\n    /**\n     * @hidden\n     */\n    itemPosInSet(index: number): number;\n    private scrollToContainerTop;\n    private addNavigationListeners;\n    private attachEditHandlers;\n    private emitCRUDEvent;\n}\n"]}