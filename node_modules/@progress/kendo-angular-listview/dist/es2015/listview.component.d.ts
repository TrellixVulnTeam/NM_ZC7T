/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, NgZone, Renderer2, ElementRef, SimpleChanges, QueryList } from '@angular/core';
import { NavigationService } from './navigation/navigation.service';
import { ListViewNavigableItemDirective } from './navigation/listview-navigable-item.directive';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
import { LoaderTemplateDirective } from './templates/loader-template.directive';
import { ScrollBottomEvent } from './models/scroll-bottom-event';
import { PageChangeEvent } from './models/page-change-event';
import { PageSizeChangeEvent } from './models/page-size-change-event';
import { PagerSettings } from './models/pager-settings';
import { ListViewDataResult } from './models/listview-data-result';
import { EditTemplateDirective } from './editing/edit-template.directive';
import { EditService } from './editing/edit.service';
import { EditEvent } from "./editing/events/edit-event-args.interface";
import { RemoveEvent } from "./editing/events/remove-event-args.interface";
import { SaveEvent } from "./editing/events/save-event-args.interface";
import { CancelEvent } from "./editing/events/cancel-event-args.interface";
import { AddEvent } from "./editing/events/add-event-args.interface";
/**
 * Represents the Kendo UI ListView component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ListViewComponent {
    ngZone: NgZone;
    element: ElementRef;
    renderer: Renderer2;
    editService: EditService;
    private navigationService;
    /**
     * @hidden
     */
    className: boolean;
    /**
     * @hidden
     */
    itemTemplate: ItemTemplateDirective;
    /**
     * @hidden
     */
    headerTemplate: HeaderTemplateDirective;
    /**
     * @hidden
     */
    footerTemplate: FooterTemplateDirective;
    /**
     * @hidden
     */
    loaderTemplate: LoaderTemplateDirective;
    /**
     * @hidden
     */
    contentContainer: ElementRef<HTMLElement>;
    /**
     * @hidden
     */
    editTemplate: EditTemplateDirective;
    /**
     * @hidden
     */
    listViewItems: QueryList<ListViewNavigableItemDirective>;
    /**
     * The data collection that will be used to populate the ListView
     * ([see data binding examples]({% slug paging_listview %})).
     */
    data: any[] | ListViewDataResult;
    /**
     * Specifies if the loading indicator of the ListView will be displayed
     * ([see example]({% slug paging_listview %}#toc-remote-binding)).
     */
    loading: boolean;
    /**
     * The CSS styles that will be rendered on the content container element of the ListView.
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    containerStyle: {
        [key: string]: string;
    };
    /**
     * The CSS styles that will be rendered on each item element wrapper of the ListView.
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    itemStyle: {
        [key: string]: string;
    };
    /**
     * The CSS class that will be rendered on the content container element of the ListView.
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    containerClass: string | string[] | Set<string> | {
        [key: string]: boolean;
    };
    /**
     * The CSS class that will be rendered on each item element wrapper of the ListView.
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    itemClass: string | string[] | Set<string> | {
        [key: string]: boolean;
    };
    /**
     * Specifies the content container `aria-label` attribute
     * ([see example]({% slug accessibility_listview %}#toc-accessible-names)).
     */
    containerLabel: string;
    /**
     * Specifies the content container `role` attribute
     * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
     * By default, the container `role` is set to `listbox`.
     */
    containerRole: string;
    /**
     * Specifies the list item `role` attribute
     * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
     * By default, the list item `role` is set to `option`.
     */
    listItemRole: string;
    /**
     * Specifies whether the keyboard navigation is enabled
     * ([see example]({% slug keyboard_navigation_listview %})).
     * By default, the navigation is disabled.
     */
    navigable: boolean;
    /**
     * Defines the page size used by the ListView pager
     * ([more details]({% slug paging_listview %})).
     */
    pageSize: number;
    /**
     * Defines the number of records to be skipped by the pager
     * ([more details]({% slug paging_listview %})).
     */
    skip: number;
    /**
     * Configures whether the ListView will render a pager
     * ([more details]({% slug paging_listview %})).
     * Providing a boolean value will render a pager with the default settings.
     */
    pageable: boolean | PagerSettings;
    /**
     * Defines the height (in pixels) of the ListView component.
     * If the content height exceeds the component height, a vertical scrollbar will be rendered.
     * To set the height of the ListView, you can also use `style.height`. The `style.height`
     * option supports units such as `px`, `%`, `em`, `rem`, and others.
     */
    height: number;
    /**
     * Fires when the user scrolls to the last record on the page
     * ([see endless scrolling example]({% slug scrollmodes_listview %}#toc-endless-scrolling)).
     */
    scrollBottom: EventEmitter<ScrollBottomEvent>;
    /**
     * Fires when the page or the page size of the ListView is changed
     * ([see example]({% slug paging_listview %}#toc-remote-binding)).
     * You have to handle the event yourself and page the data.
     */
    pageChange: EventEmitter<PageChangeEvent>;
    /**
     * Fires when the page size of the ListView is changed. This event can be prevented (`$event.preventDefault()`).
     * If not prevented, the `pageChange` event will be fired subsequently.
     */
    pageSizeChange: EventEmitter<PageSizeChangeEvent>;
    /**
     * Fires when the user clicks the **Edit** command button to edit an item
     * ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
     */
    edit: EventEmitter<EditEvent>;
    /**
     * Fires when the user clicks the **Cancel** command button to close an item
     * ([see example]({% slug editing_template_forms_listview %}#toc-cancelling-editing)).
     */
    cancel: EventEmitter<CancelEvent>;
    /**
     * Fires when the user clicks the **Save** command button to save changes in an item
     * ([see example]({% slug editing_template_forms_listview %}#toc-saving-records)).
     */
    save: EventEmitter<SaveEvent>;
    /**
     * Fires when the user clicks the **Remove** command button to remove an item
     * ([see example]({% slug editing_template_forms_listview %}#toc-removing-records)).
     */
    remove: EventEmitter<RemoveEvent>;
    /**
     * Fires when the user clicks the **Add** command button to add a new item
     * ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
     */
    add: EventEmitter<AddEvent>;
    /**
     * @hidden
     */
    pagerSettings: PagerSettings;
    /**
     * @hidden
     *
     * Gets the data items passed to the ListView.
     * If a ListViewDataResult is passed, the data value is used. If an array is passed - it's directly used.
     */
    readonly items: any[];
    /**
     * @hidden
     *
     * Gets the total number of records passed to the ListView.
     * If a ListViewDataResult is passed, the total value is used. If an array is passed - its length is used.
     */
    readonly total: number;
    /**
     * @hidden
     */
    readonly containerTabindex: number;
    /**
     * Gets the current active item index
     * ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)).
     * Returns `null` when the keyboard navigation is disabled.
     */
    readonly activeIndex: number;
    private removeNavigationListeners;
    private _skip;
    private _navigable;
    private _pageable;
    private editServiceSubscription;
    constructor(ngZone: NgZone, element: ElementRef, renderer: Renderer2, editService: EditService, navigationService: NavigationService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    templateContext(index: number): any;
    /**
     * @hidden
     */
    editTemplateContext(index: number): any;
    /**
     * Focuses the item at the specified index ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)):
     * - If no index is specified, the current active index will be focused.
     * - If the passed value is below `0`, the first item receives focus.
     * - If the passed value is above the last available index, the last item receives focus.
     *
     * > The index param is based on the logical structure of the ListView and does not correspond to the data item index -
     * > i.e. the index `0` corresponds to the first rendered list item. Paging is not taken into account.
     * > Also, for the focusing to work, the `navigable` prop must first be set to `true`.
     */
    focus(index?: number): void;
    /**
     * Creates a new item editor ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
     *
     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes
     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.
     */
    addItem(group: any): void;
    /**
     * Switches the specified item to edit mode ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
     *
     * @param index - The item index that will be switched to edit mode.
     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})
     * that describes the edit form.
     */
    editItem(index: number, group?: any): void;
    /**
     * Closes the editor for a given item ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).
     *
     * @param {number} index - The item index that will be switched out of the edit mode. If no index is provided, it is assumed
     * that the new item editor will be closed.
     */
    closeItem(index?: number): void;
    /**
     * @hidden
     */
    isEdited(index: number): boolean;
    /**
     * @hidden
     */
    handlePageChange(event: PageChangeEvent): void;
    /**
     * @hidden
     */
    handleContentScroll(): void;
    /**
     * @hidden
     */
    itemPosInSet(index: number): number;
    private scrollToContainerTop;
    private addNavigationListeners;
    private attachEditHandlers;
    private emitCRUDEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ListViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ListViewComponent, "kendo-listview", ["kendoListView"], { "loading": "loading"; "containerRole": "containerRole"; "listItemRole": "listItemRole"; "navigable": "navigable"; "skip": "skip"; "pageable": "pageable"; "data": "data"; "containerStyle": "containerStyle"; "itemStyle": "itemStyle"; "containerClass": "containerClass"; "itemClass": "itemClass"; "containerLabel": "containerLabel"; "pageSize": "pageSize"; "height": "height"; }, { "scrollBottom": "scrollBottom"; "pageChange": "pageChange"; "pageSizeChange": "pageSizeChange"; "edit": "edit"; "cancel": "cancel"; "save": "save"; "remove": "remove"; "add": "add"; }, ["itemTemplate", "headerTemplate", "footerTemplate", "loaderTemplate", "editTemplate"], never>;
}

//# sourceMappingURL=listview.component.d.ts.map