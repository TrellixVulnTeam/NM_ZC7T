/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, ContentChild, ChangeDetectionStrategy, EventEmitter, NgZone, Renderer2, ElementRef, ViewChild, ViewChildren, QueryList } from '@angular/core';
import { hasObservers, isChanged } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { NavigationService } from './navigation/navigation.service';
import { ListViewNavigableItemDirective } from './navigation/listview-navigable-item.directive';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
import { LoaderTemplateDirective } from './templates/loader-template.directive';
import { EditTemplateDirective } from './editing/edit-template.directive';
import { EditService } from './editing/edit.service';
import { isPresent } from './utils';
import { FormGroup, FormControl } from '@angular/forms';
const DEFAULT_PAGER_SETTINGS = {
    position: 'bottom',
    buttonCount: 5,
    info: true,
    previousNext: true,
    type: 'numeric',
    pageSizeValues: [5, 10, 20]
};
const createControl = (source) => (acc, key) => {
    acc[key] = new FormControl(source[key]);
    return acc;
};
const ɵ0 = createControl;
/**
 * Represents the Kendo UI ListView component for Angular.
 */
let ListViewComponent = class ListViewComponent {
    constructor(ngZone, element, renderer, editService, navigationService) {
        this.ngZone = ngZone;
        this.element = element;
        this.renderer = renderer;
        this.editService = editService;
        this.navigationService = navigationService;
        /**
         * @hidden
         */
        this.className = true;
        /**
         * Specifies if the loading indicator of the ListView will be displayed
         * ([see example]({% slug paging_listview %}#toc-remote-binding)).
         */
        this.loading = false;
        /**
         * Specifies the content container `role` attribute
         * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
         * By default, the container `role` is set to `listbox`.
         */
        this.containerRole = 'listbox';
        /**
         * Specifies the list item `role` attribute
         * ([more details]({% slug accessibility_listview %}#toc-wai-aria-support)).
         * By default, the list item `role` is set to `option`.
         */
        this.listItemRole = 'option';
        /**
         * Fires when the user scrolls to the last record on the page
         * ([see endless scrolling example]({% slug scrollmodes_listview %}#toc-endless-scrolling)).
         */
        this.scrollBottom = new EventEmitter();
        /**
         * Fires when the page or the page size of the ListView is changed
         * ([see example]({% slug paging_listview %}#toc-remote-binding)).
         * You have to handle the event yourself and page the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * Fires when the page size of the ListView is changed. This event can be prevented (`$event.preventDefault()`).
         * If not prevented, the `pageChange` event will be fired subsequently.
         */
        this.pageSizeChange = new EventEmitter();
        /**
         * Fires when the user clicks the **Edit** command button to edit an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
         */
        this.edit = new EventEmitter();
        /**
         * Fires when the user clicks the **Cancel** command button to close an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-cancelling-editing)).
         */
        this.cancel = new EventEmitter();
        /**
         * Fires when the user clicks the **Save** command button to save changes in an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-saving-records)).
         */
        this.save = new EventEmitter();
        /**
         * Fires when the user clicks the **Remove** command button to remove an item
         * ([see example]({% slug editing_template_forms_listview %}#toc-removing-records)).
         */
        this.remove = new EventEmitter();
        /**
         * Fires when the user clicks the **Add** command button to add a new item
         * ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
         */
        this.add = new EventEmitter();
        this._skip = 0;
        this._navigable = false;
        validatePackage(packageMetadata);
        this.attachEditHandlers();
    }
    /**
     * Specifies whether the keyboard navigation is enabled
     * ([see example]({% slug keyboard_navigation_listview %})).
     * By default, the navigation is disabled.
     */
    set navigable(navigable) {
        if (!navigable && isPresent(this.removeNavigationListeners)) {
            this.removeNavigationListeners();
            this.removeNavigationListeners = null;
            this.navigationService.isEnabled = false;
        }
        else if (navigable && !isPresent(this.removeNavigationListeners)) {
            this.addNavigationListeners();
            this.navigationService.isEnabled = true;
        }
        this._navigable = navigable;
    }
    get navigable() {
        return this._navigable;
    }
    /**
     * Defines the number of records to be skipped by the pager
     * ([more details]({% slug paging_listview %})).
     */
    set skip(skip) {
        const parsed = parseInt(skip, 10);
        const defaultSkipValue = 0;
        this._skip = !isNaN(parsed) ? parsed : defaultSkipValue;
    }
    get skip() {
        return this._skip;
    }
    /**
     * Configures whether the ListView will render a pager
     * ([more details]({% slug paging_listview %})).
     * Providing a boolean value will render a pager with the default settings.
     */
    set pageable(pageable) {
        this._pageable = pageable;
        this.pagerSettings = pageable ? Object.assign({}, DEFAULT_PAGER_SETTINGS, pageable) : null;
    }
    get pageable() {
        return this._pageable;
    }
    /**
     * @hidden
     *
     * Gets the data items passed to the ListView.
     * If a ListViewDataResult is passed, the data value is used. If an array is passed - it's directly used.
     */
    get items() {
        if (!isPresent(this.data)) {
            return [];
        }
        return Array.isArray(this.data) ? this.data : this.data.data;
    }
    /**
     * @hidden
     *
     * Gets the total number of records passed to the ListView.
     * If a ListViewDataResult is passed, the total value is used. If an array is passed - its length is used.
     */
    get total() {
        if (!isPresent(this.data)) {
            return 0;
        }
        return Array.isArray(this.data) ? this.data.length : this.data.total;
    }
    /**
     * @hidden
     */
    get containerTabindex() {
        // workaround for FF, where a scrollable container is focusable even without a tabindex and creates an unwanted tab stop
        // https://bugzilla.mozilla.org/show_bug.cgi?id=616594
        return this.navigable ? -1 : null;
    }
    /**
     * Gets the current active item index
     * ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)).
     * Returns `null` when the keyboard navigation is disabled.
     */
    get activeIndex() {
        return this.navigationService.activeIndex;
    }
    ngOnChanges(changes) {
        if (isChanged('height', changes, false)) {
            this.renderer.setStyle(this.element.nativeElement, 'height', `${this.height}px`);
        }
    }
    ngOnDestroy() {
        if (isPresent(this.editServiceSubscription)) {
            this.editServiceSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    templateContext(index) {
        return {
            "$implicit": this.items[index],
            "isLast": index === this.items.length - 1,
            "isFirst": index === 0,
            "dataItem": this.items[index],
            "index": index
        };
    }
    /**
     * @hidden
     */
    editTemplateContext(index) {
        const isNew = index === -1;
        const group = isNew ? this.editService.newItemGroup : this.editService.editGroup(index);
        return {
            "$implicit": group,
            "formGroup": group,
            "dataItem": isNew ? this.editService.newDataItem : this.items[index],
            "isNew": isNew,
            "index": index
        };
    }
    /**
     * Focuses the item at the specified index ([see example]({% slug keyboard_navigation_listview %}#toc-controlling-the-focus)):
     * - If no index is specified, the current active index will be focused.
     * - If the passed value is below `0`, the first item receives focus.
     * - If the passed value is above the last available index, the last item receives focus.
     *
     * > The index param is based on the logical structure of the ListView and does not correspond to the data item index -
     * > i.e. the index `0` corresponds to the first rendered list item. Paging is not taken into account.
     * > Also, for the focusing to work, the `navigable` prop must first be set to `true`.
     */
    focus(index) {
        const totalRenderedItems = this.listViewItems.length;
        this.navigationService.focusIndex(index, totalRenderedItems);
    }
    /**
     * Creates a new item editor ([see example]({% slug editing_template_forms_listview %}#toc-adding-records)).
     *
     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes
     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.
     */
    addItem(group) {
        const isFormGroup = group instanceof FormGroup;
        if (!isFormGroup) {
            const fields = Object.keys(group).reduce(createControl(group), {});
            group = new FormGroup(fields);
        }
        this.editService.addItem(group);
    }
    /**
     * Switches the specified item to edit mode ([see example]({% slug editing_template_forms_listview %}#toc-editing-records)).
     *
     * @param index - The item index that will be switched to edit mode.
     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})
     * that describes the edit form.
     */
    editItem(index, group) {
        this.editService.editItem(index, group);
    }
    /**
     * Closes the editor for a given item ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).
     *
     * @param {number} index - The item index that will be switched out of the edit mode. If no index is provided, it is assumed
     * that the new item editor will be closed.
     */
    closeItem(index) {
        this.editService.close(index);
    }
    /**
     * @hidden
     */
    isEdited(index) {
        return this.editService.isEdited(index);
    }
    /**
     * @hidden
     */
    handlePageChange(event) {
        this.scrollToContainerTop();
        const firstIndex = 0;
        this.navigationService.setActiveIndex(firstIndex);
        this.pageChange.emit(event);
    }
    /**
     * @hidden
     */
    handleContentScroll() {
        if (!hasObservers(this.scrollBottom)) {
            return;
        }
        const THRESHOLD = 2;
        const { scrollHeight, scrollTop, clientHeight } = this.contentContainer.nativeElement;
        const atBottom = scrollHeight - clientHeight - scrollTop <= THRESHOLD;
        if (atBottom) {
            this.ngZone.run(() => {
                const event = { sender: this };
                this.scrollBottom.emit(event);
            });
        }
    }
    /**
     * @hidden
     */
    itemPosInSet(index) {
        // adds 1 as the aria-posinset is not zero-based and the counting starts from 1
        return this.skip + index + 1;
    }
    scrollToContainerTop() {
        const container = this.contentContainer.nativeElement;
        container.scrollTop = 0;
        container.scrollLeft = 0;
    }
    addNavigationListeners() {
        this.ngZone.runOutsideAngular(() => {
            const removeKeydownListener = this.renderer.listen(this.contentContainer.nativeElement, 'keydown', event => this.navigationService.handleKeyDown(event, this.listViewItems.length));
            const removeFocusInListener = this.renderer.listen(this.contentContainer.nativeElement, 'focusin', event => this.navigationService.handleFocusIn(event));
            const removeFocusOutListener = this.renderer.listen(this.contentContainer.nativeElement, 'focusout', event => this.navigationService.handleFocusOut(event));
            this.removeNavigationListeners = () => {
                removeKeydownListener();
                removeFocusInListener();
                removeFocusOutListener();
            };
        });
    }
    attachEditHandlers() {
        if (!isPresent(this.editService)) {
            return;
        }
        this.editServiceSubscription = this.editService
            .changes.subscribe(this.emitCRUDEvent.bind(this));
    }
    emitCRUDEvent(args) {
        const { action, itemIndex, formGroup } = args;
        let dataItem = this.items[itemIndex];
        if (action !== 'add' && formGroup) {
            dataItem = formGroup.value;
        }
        Object.assign(args, {
            dataItem: dataItem,
            sender: this
        });
        this[action].emit(args);
    }
};
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-listview'),
    HostBinding('class.k-listview-bordered'),
    HostBinding('class.k-d-flex'),
    tslib_1.__metadata("design:type", Boolean)
], ListViewComponent.prototype, "className", void 0);
tslib_1.__decorate([
    ContentChild(ItemTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", ItemTemplateDirective)
], ListViewComponent.prototype, "itemTemplate", void 0);
tslib_1.__decorate([
    ContentChild(HeaderTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", HeaderTemplateDirective)
], ListViewComponent.prototype, "headerTemplate", void 0);
tslib_1.__decorate([
    ContentChild(FooterTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", FooterTemplateDirective)
], ListViewComponent.prototype, "footerTemplate", void 0);
tslib_1.__decorate([
    ContentChild(LoaderTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", LoaderTemplateDirective)
], ListViewComponent.prototype, "loaderTemplate", void 0);
tslib_1.__decorate([
    ViewChild('contentContainer', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], ListViewComponent.prototype, "contentContainer", void 0);
tslib_1.__decorate([
    ContentChild(EditTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", EditTemplateDirective)
], ListViewComponent.prototype, "editTemplate", void 0);
tslib_1.__decorate([
    ViewChildren(ListViewNavigableItemDirective),
    tslib_1.__metadata("design:type", QueryList)
], ListViewComponent.prototype, "listViewItems", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ListViewComponent.prototype, "data", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ListViewComponent.prototype, "loading", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ListViewComponent.prototype, "containerStyle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ListViewComponent.prototype, "itemStyle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ListViewComponent.prototype, "containerClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ListViewComponent.prototype, "itemClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ListViewComponent.prototype, "containerLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ListViewComponent.prototype, "containerRole", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ListViewComponent.prototype, "listItemRole", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ListViewComponent.prototype, "navigable", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ListViewComponent.prototype, "pageSize", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], ListViewComponent.prototype, "skip", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ListViewComponent.prototype, "pageable", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ListViewComponent.prototype, "height", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "scrollBottom", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "pageChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "pageSizeChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "edit", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "cancel", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "save", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "remove", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ListViewComponent.prototype, "add", void 0);
ListViewComponent = tslib_1.__decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        exportAs: 'kendoListView',
        selector: 'kendo-listview',
        providers: [
            EditService,
            NavigationService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.listview'
            }
        ],
        template: `
        <!-- top pager -->
        <ng-template
            *ngIf="pagerSettings?.position !== 'bottom'"
            [ngTemplateOutlet]="pagerTemplate"
            [ngTemplateOutletContext]="{ pagerClass: 'k-listview-pager k-listview-pager-top' }"
        >
        </ng-template>

        <!-- header -->
        <div
            *ngIf="headerTemplate"
            class="k-listview-header"
        >
            <ng-template
                [ngTemplateOutlet]="headerTemplate?.templateRef"
            >
            </ng-template>
        </div>

        <!-- content -->
        <div
            #contentContainer
            [attr.tabindex]="containerTabindex"
            class="k-listview-content"
            [ngClass]="containerClass"
            [ngStyle]="containerStyle"
            [kendoEventsOutsideAngular]="{
                scroll: handleContentScroll
            }"
            [scope]="this"
            [attr.role]="containerRole"
            [attr.aria-label]="containerLabel"
        >
            <!-- new item edit template -->
            <div
                *ngIf="editService.hasNewItem"
                class="k-listview-item"
                [attr.role]="listItemRole"
                kendoListViewNavigableItem
                [index]="-1"
                [attr.data-kendo-listview-item-index]="-1"
                [ngClass]="itemClass"
                [ngStyle]="itemStyle"
            >
                <ng-template
                    *ngIf="editTemplate"
                    [ngTemplateOutlet]="editTemplate?.templateRef"
                    [ngTemplateOutletContext]="editTemplateContext(-1)"
                >
                </ng-template>
            </div>

            <!-- items -->
            <div
                *ngFor="let dataItem of items; let index = index; let first = first; let last = last;"
                class="k-listview-item"
                [attr.role]="listItemRole"
                [attr.aria-posinset]="itemPosInSet(index)"
                [attr.aria-setsize]="total"
                kendoListViewNavigableItem
                [index]="index"
                [attr.data-kendo-listview-item-index]="index"
                [ngClass]="itemClass"
                [ngStyle]="itemStyle"
            >
                <ng-template
                    [ngTemplateOutlet]="isEdited(index) ? editTemplate?.templateRef : itemTemplate?.templateRef"
                    [ngTemplateOutletContext]="isEdited(index) ? editTemplateContext(index) : templateContext(index)"
                >
                </ng-template>
            </div>

            <!-- loading indicator -->
            <div
                *ngIf="loading && !loaderTemplate"
                class="k-loading-mask"
            >
                <!-- TODO: the k-loading-text is hidden with css but read by readers - review when implementing accessibility + possible localization case -->
                <span class="k-loading-text">Loading</span>
                <div class="k-loading-image"></div>
                <div class="k-loading-color"></div>
            </div>
            <ng-template
                *ngIf="loading && loaderTemplate"
                [ngTemplateOutlet]="loaderTemplate.templateRef"
            >
            </ng-template>
        </div>

        <!-- footer -->
        <div
            *ngIf="footerTemplate"
            class="k-listview-footer"
        >
            <ng-template
                [ngTemplateOutlet]="footerTemplate?.templateRef"
            >
            </ng-template>
        </div>

        <!-- bottom pager -->
        <ng-template
            *ngIf="pagerSettings?.position !== 'top'"
            [ngTemplateOutlet]="pagerTemplate"
            [ngTemplateOutletContext]="{ pagerClass: 'k-listview-pager' }"
        >
        </ng-template>

        <!-- pager template -->
        <ng-template #pagerTemplate let-pagerClass="pagerClass">
            <kendo-datapager
                *ngIf="pageable"
                [class]="pagerClass"
                [total]="total"
                [pageSize]="pageSize"
                [skip]="skip"
                [buttonCount]="pagerSettings.buttonCount"
                [info]="pagerSettings.info"
                [previousNext]="pagerSettings.previousNext"
                [type]="pagerSettings.type"
                [pageSizeValues]="pagerSettings.pageSizeValues"
                (pageChange)="handlePageChange($event)"
                (pageSizeChange)="pageSizeChange.emit($event)"
            >
            </kendo-datapager>
        </ng-template>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [NgZone,
        ElementRef,
        Renderer2,
        EditService,
        NavigationService])
], ListViewComponent);
export { ListViewComponent };
export { ɵ0 };
