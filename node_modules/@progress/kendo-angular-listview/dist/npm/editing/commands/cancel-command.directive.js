/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_angular_buttons_1 = require("@progress/kendo-angular-buttons");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var edit_service_1 = require("../edit.service");
var utils_1 = require("../../utils");
/**
 * Represents the `cancel` command of the ListView. You can apply this directive to any `button`
 * element inside a [`EditTemplateDirective`]({% slug api_listview_edittemplatedirective %}) template.
 * When an associated button with the directive is clicked, the
 * [`cancel`]({% slug api_listview_listviewcomponent %}#toc-cancel) event
 * is triggered ([see example]({% slug editing_listview %})).
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate>
 *     <button kendoListViewCancelCommand>Cancel changes</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 *
 * You can control the content of the button based on the state of the item.
 *
 * @example
 * ```html-no-run
 * <kendo-listview>
 *   <ng-template kendoListViewEditTemplate let-isNew="isNew">
 *     <button kendoListViewCancelCommand>{{isNew ? 'Discard' : 'Cancel changes'}}</button>
 *   </ng-template>
 * </kendo-listview>
 * ```
 */
var CancelCommandDirective = /** @class */ (function (_super) {
    tslib_1.__extends(CancelCommandDirective, _super);
    function CancelCommandDirective(editService, element, renderer, localization, ngZone) {
        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;
        _this.editService = editService;
        _this.elementRef = element;
        return _this;
    }
    /**
     * @hidden
     */
    CancelCommandDirective.prototype.clickHandler = function (e) {
        e.preventDefault();
        var index = utils_1.getClosestListItemIndex(this.elementRef.nativeElement);
        if (this.editService.isEdited(index)) {
            this.editService.endEdit(index);
        }
    };
    tslib_1.__decorate([
        core_1.HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CancelCommandDirective.prototype, "clickHandler", null);
    CancelCommandDirective = tslib_1.__decorate([
        core_1.Directive({
            selector: '[kendoListViewCancelCommand]'
        }),
        tslib_1.__metadata("design:paramtypes", [edit_service_1.EditService,
            core_1.ElementRef,
            core_1.Renderer2,
            kendo_angular_l10n_1.LocalizationService,
            core_1.NgZone])
    ], CancelCommandDirective);
    return CancelCommandDirective;
}(kendo_angular_buttons_1.Button));
exports.CancelCommandDirective = CancelCommandDirective;
