/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __param, __metadata } from 'tslib';
import { Directive, Optional, TemplateRef, Input, Component, ContentChild, ElementRef, NgModule } from '@angular/core';
import { drawDOM, exportPDF } from '@progress/kendo-drawing';
import { saveAs } from '@progress/kendo-file-saver';
import { validatePackage } from '@progress/kendo-licensing';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
const packageMetadata = {
    name: '@progress/kendo-angular-pdf-export',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1646219273,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

let PDFExportTemplateDirective = class PDFExportTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
PDFExportTemplateDirective.ɵfac = function PDFExportTemplateDirective_Factory(t) { return new (t || PDFExportTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
PDFExportTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PDFExportTemplateDirective, selectors: [["", "kendoPDFTemplate", ""]] });
PDFExportTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], PDFExportTemplateDirective);

const FIELDS = ['bottom', 'left', 'right', 'top'];
/**
 * Represents the Kendo UI PDFMargin component for Angular.
 */
let PDFExportMarginComponent = class PDFExportMarginComponent {
    /**
     * @hidden
     */
    get options() {
        const options = {};
        for (let idx = 0; idx < FIELDS.length; idx++) {
            const field = FIELDS[idx];
            const value = this[field];
            if (typeof value !== 'undefined') {
                options[field] = value;
            }
        }
        return options;
    }
};
PDFExportMarginComponent.ɵfac = function PDFExportMarginComponent_Factory(t) { return new (t || PDFExportMarginComponent)(); };
PDFExportMarginComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PDFExportMarginComponent, selectors: [["kendo-pdf-export-margin"]], inputs: { left: "left", top: "top", right: "right", bottom: "bottom" }, decls: 0, vars: 0, template: function PDFExportMarginComponent_Template(rf, ctx) { }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportMarginComponent.prototype, "left", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportMarginComponent.prototype, "top", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportMarginComponent.prototype, "right", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportMarginComponent.prototype, "bottom", void 0);

/**
 * @hidden
 */
const compileTemplate = (templateRef) => {
    const context = {};
    let embeddedView = templateRef.createEmbeddedView(context);
    const result = (data) => {
        Object.assign(context, data);
        embeddedView.detectChanges();
        const templateWrap = document.createElement('span');
        embeddedView.rootNodes.forEach((rootNode) => {
            templateWrap.appendChild(rootNode.cloneNode(true));
        });
        return templateWrap;
    };
    result.destroy = () => {
        embeddedView.destroy();
        embeddedView = null;
    };
    return result;
};

/**
 * Represents the [Kendo UI PDF Export component for Angular]({% slug overview_pdfexport %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <div class="example-config">
 *       <button kendoButton (click)="pdf.saveAs('document.pdf')">
 *         Save As PDF...
 *       </button>
 *     </div>
 *
 *     <kendo-pdf-export #pdf paperSize="A4" margin="2cm">
 *       Content goes here
 *     </kendo-pdf-export>
 *   `
 * })
 * export class AppComponent {
 * }
 * ```
 */
let PDFExportComponent = class PDFExportComponent {
    constructor(element) {
        this.element = element;
        /**
         * The creator of the PDF document.
         * @default "Kendo UI PDF Generator"
         */
        this.creator = 'Kendo UI PDF Generator';
        /**
         * Specifies the name of the exported PDF file.
         * @default "Export.pdf"
         */
        this.fileName = 'export.pdf';
        validatePackage(packageMetadata);
    }
    get drawMargin() {
        const marginComponent = this.marginComponent;
        let margin = this.margin;
        if (marginComponent) {
            margin = Object.assign(margin || {}, marginComponent.options);
        }
        return margin;
    }
    /**
     * Saves the content as a PDF file with the specified name.
     * @param fileName - The name of the exported file.
     */
    saveAs(fileName = this.fileName) {
        this.save(this.element.nativeElement, fileName);
    }
    /**
     * Exports the content as a `Group` for further processing.
     *
     * @return - The root group of the exported scene.
     */
    export() {
        return this.exportElement(this.element.nativeElement);
    }
    save(element, fileName) {
        this.exportElement(element)
            .then(group => this.exportGroup(group, this.pdfOptions()))
            .then(dataUri => this.saveDataUri(dataUri, fileName, this.saveOptions()));
    }
    exportElement(element) {
        const promise = this.drawElement(element, this.drawOptions());
        const cleanup = this.cleanup.bind(this);
        promise.then(cleanup, cleanup);
        return promise;
    }
    cleanup() {
        if (this.pageTemplate) {
            this.pageTemplate.destroy();
            delete this.pageTemplate;
        }
    }
    drawOptions() {
        if (this.pageTemplateDirective) {
            this.pageTemplate = compileTemplate(this.pageTemplateDirective.templateRef);
        }
        return {
            avoidLinks: this.avoidLinks,
            forcePageBreak: this.forcePageBreak,
            keepTogether: this.keepTogether,
            margin: this.drawMargin,
            paperSize: this.paperSize,
            landscape: this.landscape,
            repeatHeaders: this.repeatHeaders,
            scale: this.scale,
            template: this.pageTemplate
        };
    }
    pdfOptions() {
        return {
            autoPrint: this.autoPrint,
            author: this.author,
            creator: this.creator,
            date: this.date,
            imgDPI: this.imageResolution,
            keywords: this.keywords,
            landscape: this.landscape,
            margin: this.drawMargin,
            multiPage: true,
            paperSize: this.paperSize,
            producer: this.producer,
            subject: this.subject,
            title: this.title
        };
    }
    saveOptions() {
        return {
            forceProxy: this.forceProxy,
            proxyData: this.proxyData,
            proxyTarget: this.proxyTarget,
            proxyURL: this.proxyURL
        };
    }
    drawElement(element, options) {
        return drawDOM(element, options);
    }
    exportGroup(group, options) {
        return exportPDF(group, options);
    }
    saveDataUri(dataUri, fileName, options) {
        saveAs(dataUri, fileName, options);
    }
};
PDFExportComponent.ɵfac = function PDFExportComponent_Factory(t) { return new (t || PDFExportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
PDFExportComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PDFExportComponent, selectors: [["kendo-pdf-export"]], contentQueries: function PDFExportComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, PDFExportTemplateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, PDFExportMarginComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pageTemplateDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.marginComponent = _t.first);
    } }, inputs: { creator: "creator", fileName: "fileName", autoPrint: "autoPrint", author: "author", avoidLinks: "avoidLinks", forcePageBreak: "forcePageBreak", keepTogether: "keepTogether", date: "date", imageResolution: "imageResolution", forceProxy: "forceProxy", keywords: "keywords", landscape: "landscape", margin: "margin", paperSize: "paperSize", repeatHeaders: "repeatHeaders", scale: "scale", proxyData: "proxyData", proxyURL: "proxyURL", proxyTarget: "proxyTarget", producer: "producer", subject: "subject", title: "title" }, ngContentSelectors: _c0, decls: 2, vars: 0, template: function PDFExportComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PDFExportComponent.prototype, "autoPrint", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "author", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportComponent.prototype, "avoidLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "forcePageBreak", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "keepTogether", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "creator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], PDFExportComponent.prototype, "date", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], PDFExportComponent.prototype, "imageResolution", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "fileName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PDFExportComponent.prototype, "forceProxy", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "keywords", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PDFExportComponent.prototype, "landscape", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportComponent.prototype, "margin", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportComponent.prototype, "paperSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PDFExportComponent.prototype, "repeatHeaders", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], PDFExportComponent.prototype, "scale", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], PDFExportComponent.prototype, "proxyData", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "proxyURL", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "proxyTarget", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "producer", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "subject", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PDFExportComponent.prototype, "title", void 0);
__decorate([
    ContentChild(PDFExportTemplateDirective, { static: false }),
    __metadata("design:type", PDFExportTemplateDirective)
], PDFExportComponent.prototype, "pageTemplateDirective", void 0);
__decorate([
    ContentChild(PDFExportMarginComponent, { static: false }),
    __metadata("design:type", PDFExportMarginComponent)
], PDFExportComponent.prototype, "marginComponent", void 0);
PDFExportComponent = __decorate([ __metadata("design:paramtypes", [ElementRef])
], PDFExportComponent);

const COMPONENT_DIRECTIVES = [
    PDFExportComponent,
    PDFExportMarginComponent,
    PDFExportTemplateDirective
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the PDF Export directive.
 */
let PDFExportModule = class PDFExportModule {
};
PDFExportModule.ɵfac = function PDFExportModule_Factory(t) { return new (t || PDFExportModule)(); };
PDFExportModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: PDFExportModule });
PDFExportModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PDFExportTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoPDFTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PDFExportMarginComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-pdf-export-margin',
                template: ``
            }]
    }], null, { left: [{
            type: Input
        }], top: [{
            type: Input
        }], right: [{
            type: Input
        }], bottom: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PDFExportComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-pdf-export',
                template: `<div><ng-content></ng-content></div>`
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { creator: [{
            type: Input
        }], fileName: [{
            type: Input
        }], autoPrint: [{
            type: Input
        }], author: [{
            type: Input
        }], avoidLinks: [{
            type: Input
        }], forcePageBreak: [{
            type: Input
        }], keepTogether: [{
            type: Input
        }], date: [{
            type: Input
        }], imageResolution: [{
            type: Input
        }], forceProxy: [{
            type: Input
        }], keywords: [{
            type: Input
        }], landscape: [{
            type: Input
        }], margin: [{
            type: Input
        }], paperSize: [{
            type: Input
        }], repeatHeaders: [{
            type: Input
        }], scale: [{
            type: Input
        }], proxyData: [{
            type: Input
        }], proxyURL: [{
            type: Input
        }], proxyTarget: [{
            type: Input
        }], producer: [{
            type: Input
        }], subject: [{
            type: Input
        }], title: [{
            type: Input
        }], pageTemplateDirective: [{
            type: ContentChild,
            args: [PDFExportTemplateDirective, { static: false }]
        }], marginComponent: [{
            type: ContentChild,
            args: [PDFExportMarginComponent, { static: false }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PDFExportModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES],
                exports: [COMPONENT_DIRECTIVES]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PDFExportModule, { declarations: [PDFExportComponent, PDFExportMarginComponent, PDFExportTemplateDirective], exports: [PDFExportComponent, PDFExportMarginComponent, PDFExportTemplateDirective] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { PDFExportComponent, PDFExportModule, PDFExportMarginComponent, PDFExportTemplateDirective, compileTemplate };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,