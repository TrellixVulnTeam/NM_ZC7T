/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { TagTemplateDirective } from '../common/templates/tag-template.directive';
import { GroupTagTemplateDirective } from '../common/templates/group-tag-template.directive';
import { getSizeClass, getter, isPresent } from '../common/util';
/**
 * @hidden
 */
let TagListComponent = class TagListComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.rounded = 'medium';
        this.fillMode = 'solid';
        /**
         * A collection with the disabled tags' indices.
         */
        this.disabledIndices = new Set();
        this.removeTag = new EventEmitter();
        this.hostClasses = true;
        this._size = 'medium';
    }
    set size(size) {
        this.renderer.removeClass(this.hostElement.nativeElement, getSizeClass('chip-list', this.size));
        if (size) {
            this.renderer.addClass(this.hostElement.nativeElement, getSizeClass('chip-list', size));
        }
        this._size = size;
    }
    get size() {
        return this._size;
    }
    get hostId() {
        return this.id;
    }
    tagProp(tag, prop, index) {
        const propField = prop && this.getPropField(tag, prop, index);
        return getter(tag, propField);
    }
    isTagDisabled(tag, positionIndex) {
        if (this.isGroupTag(tag)) {
            /** The `positionIndex` is used to determine after how many single tags is the group tag displayed =>
             * => it is used to increment the indices inside the group tag so that we determine the actual position index
             * of each group tag item as they appear in the `value` (important to check against `disabledIndices`)
             * e.g. `disabledIndices = [0, 1]` && `tags = ['Small', ['Medium', 'Large']]` => without the incrementation with
             * `positionIndex`, the group tag would yield [0, 1] as indices, while it should yield [1, 2]
             */
            return tag.every((_tag, index) => this.disabledIndices.has(index + positionIndex));
        }
        return this.disabledIndices.has(positionIndex);
    }
    deleteTag(event, tag, index) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.disabled && event.which === 1) {
            this.removeTag.emit({ tag, index });
        }
    }
    itemId(tag, index) {
        if (tag) { //because of custom values
            return this.tagPrefix + "-" + this.tagProp(tag, this.valueField, index);
        }
    }
    isGroupTag(tag) {
        return tag instanceof Array;
    }
    tagAriaHidden(index) {
        return isPresent(this.focused) && this.focused !== index;
    }
    getPropField(tag, prop, index) {
        // Needed for MultiSelectTree value binding (Heterogeneous Data)
        const fieldsCount = prop.length - 1;
        if (typeof prop === 'string') {
            return prop;
        }
        else if (this.valueDepth) {
            const depth = this.valueDepth[index];
            return fieldsCount < depth ? prop[fieldsCount] : prop[depth];
        }
        else {
            return prop.find(item => item in tag);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagListComponent.prototype, "tags", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagListComponent.prototype, "textField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "valueField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagListComponent.prototype, "valueDepth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], TagListComponent.prototype, "focused", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TagTemplateDirective)
], TagListComponent.prototype, "template", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", GroupTagTemplateDirective)
], TagListComponent.prototype, "groupTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagListComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "tagPrefix", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "id", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], TagListComponent.prototype, "size", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "rounded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagListComponent.prototype, "fillMode", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Set)
], TagListComponent.prototype, "disabledIndices", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TagListComponent.prototype, "removeTag", void 0);
tslib_1.__decorate([
    HostBinding('class.k-input-values'),
    HostBinding('class.k-chip-list'),
    HostBinding('class.k-selection-multiple'),
    tslib_1.__metadata("design:type", Boolean)
], TagListComponent.prototype, "hostClasses", void 0);
tslib_1.__decorate([
    HostBinding('attr.id'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], TagListComponent.prototype, "hostId", null);
TagListComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-taglist',
        template: `
        <div
            *ngFor="let tag of tags; let index = index;"
            [attr.id]="itemId(tag, index)"
            [attr.aria-hidden]="tagAriaHidden(index)"
            class="k-chip"
            [ngClass]="{
                'k-focus': index === focused,
                'k-disabled': isTagDisabled(tag, index),
                'k-chip-sm': size === 'small',
                'k-chip-md': size === 'medium',
                'k-chip-lg': size === 'large',
                'k-rounded-sm': rounded === 'small',
                'k-rounded-md': rounded === 'medium',
                'k-rounded-lg': rounded === 'large',
                'k-rounded-full': rounded === 'full',
                'k-chip-solid k-chip-solid-base': fillMode === 'solid',
                'k-chip-flat k-chip-flat-base': fillMode === 'flat',
                'k-chip-outline k-chip-outline-base': fillMode === 'outline'
            }"
        >
            <span class="k-chip-content">
                <ng-template *ngIf="isGroupTag(tag); then groupTag else singleTag"></ng-template>
                <ng-template #groupTag>
                    <span class="k-chip-label k-text-ellipsis">
                        <ng-template *ngIf="groupTemplate"
                            [templateContext]="{
                            templateRef: groupTemplate.templateRef,
                            $implicit: tag
                        }">
                        </ng-template>
                        <ng-template [ngIf]="!groupTemplate">{{ tag.length }} {{ tag.length === 1 ? 'item' : 'items' }} selected</ng-template>
                    </span>
                </ng-template>
                <ng-template #singleTag>
                    <span class="k-chip-label k-text-ellipsis">
                        <ng-template *ngIf="template"
                            [templateContext]="{
                            templateRef: template.templateRef,
                            $implicit: tag
                        }">
                        </ng-template>
                        <ng-template [ngIf]="!template">{{ tagProp(tag, textField, index) }}</ng-template>
                    </span>
                </ng-template>
            </span>

            <span class="k-chip-actions">
                <span aria-label="delete" [attr.aria-hidden]="index !== focused" class="k-chip-action k-chip-remove-action">
                    <span class="k-icon k-i-x-circle" (mousedown)="deleteTag($event, tag, index)">
                    </span>
                </span>
            </span>
        </div>
        <ng-content></ng-content>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef])
], TagListComponent);
export { TagListComponent };
