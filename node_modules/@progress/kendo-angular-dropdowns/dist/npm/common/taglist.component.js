/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var tag_template_directive_1 = require("../common/templates/tag-template.directive");
var group_tag_template_directive_1 = require("../common/templates/group-tag-template.directive");
var util_1 = require("../common/util");
/**
 * @hidden
 */
var TagListComponent = /** @class */ (function () {
    function TagListComponent(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.rounded = 'medium';
        this.fillMode = 'solid';
        /**
         * A collection with the disabled tags' indices.
         */
        this.disabledIndices = new Set();
        this.removeTag = new core_1.EventEmitter();
        this.hostClasses = true;
        this._size = 'medium';
    }
    Object.defineProperty(TagListComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (size) {
            this.renderer.removeClass(this.hostElement.nativeElement, util_1.getSizeClass('chip-list', this.size));
            if (size) {
                this.renderer.addClass(this.hostElement.nativeElement, util_1.getSizeClass('chip-list', size));
            }
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagListComponent.prototype, "hostId", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    TagListComponent.prototype.tagProp = function (tag, prop, index) {
        var propField = prop && this.getPropField(tag, prop, index);
        return util_1.getter(tag, propField);
    };
    TagListComponent.prototype.isTagDisabled = function (tag, positionIndex) {
        var _this = this;
        if (this.isGroupTag(tag)) {
            /** The `positionIndex` is used to determine after how many single tags is the group tag displayed =>
             * => it is used to increment the indices inside the group tag so that we determine the actual position index
             * of each group tag item as they appear in the `value` (important to check against `disabledIndices`)
             * e.g. `disabledIndices = [0, 1]` && `tags = ['Small', ['Medium', 'Large']]` => without the incrementation with
             * `positionIndex`, the group tag would yield [0, 1] as indices, while it should yield [1, 2]
             */
            return tag.every(function (_tag, index) { return _this.disabledIndices.has(index + positionIndex); });
        }
        return this.disabledIndices.has(positionIndex);
    };
    TagListComponent.prototype.deleteTag = function (event, tag, index) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.disabled && event.which === 1) {
            this.removeTag.emit({ tag: tag, index: index });
        }
    };
    TagListComponent.prototype.itemId = function (tag, index) {
        if (tag) { //because of custom values
            return this.tagPrefix + "-" + this.tagProp(tag, this.valueField, index);
        }
    };
    TagListComponent.prototype.isGroupTag = function (tag) {
        return tag instanceof Array;
    };
    TagListComponent.prototype.tagAriaHidden = function (index) {
        return util_1.isPresent(this.focused) && this.focused !== index;
    };
    TagListComponent.prototype.getPropField = function (tag, prop, index) {
        // Needed for MultiSelectTree value binding (Heterogeneous Data)
        var fieldsCount = prop.length - 1;
        if (typeof prop === 'string') {
            return prop;
        }
        else if (this.valueDepth) {
            var depth = this.valueDepth[index];
            return fieldsCount < depth ? prop[fieldsCount] : prop[depth];
        }
        else {
            return prop.find(function (item) { return item in tag; });
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], TagListComponent.prototype, "tags", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TagListComponent.prototype, "textField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TagListComponent.prototype, "valueField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], TagListComponent.prototype, "valueDepth", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], TagListComponent.prototype, "focused", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", tag_template_directive_1.TagTemplateDirective)
    ], TagListComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", group_tag_template_directive_1.GroupTagTemplateDirective)
    ], TagListComponent.prototype, "groupTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TagListComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TagListComponent.prototype, "tagPrefix", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TagListComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], TagListComponent.prototype, "size", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TagListComponent.prototype, "rounded", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TagListComponent.prototype, "fillMode", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Set)
    ], TagListComponent.prototype, "disabledIndices", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], TagListComponent.prototype, "removeTag", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-input-values'),
        core_1.HostBinding('class.k-chip-list'),
        core_1.HostBinding('class.k-selection-multiple'),
        tslib_1.__metadata("design:type", Boolean)
    ], TagListComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.id'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], TagListComponent.prototype, "hostId", null);
    TagListComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'kendo-taglist',
            template: "\n        <div\n            *ngFor=\"let tag of tags; let index = index;\"\n            [attr.id]=\"itemId(tag, index)\"\n            [attr.aria-hidden]=\"tagAriaHidden(index)\"\n            class=\"k-chip\"\n            [ngClass]=\"{\n                'k-focus': index === focused,\n                'k-disabled': isTagDisabled(tag, index),\n                'k-chip-sm': size === 'small',\n                'k-chip-md': size === 'medium',\n                'k-chip-lg': size === 'large',\n                'k-rounded-sm': rounded === 'small',\n                'k-rounded-md': rounded === 'medium',\n                'k-rounded-lg': rounded === 'large',\n                'k-rounded-full': rounded === 'full',\n                'k-chip-solid k-chip-solid-base': fillMode === 'solid',\n                'k-chip-flat k-chip-flat-base': fillMode === 'flat',\n                'k-chip-outline k-chip-outline-base': fillMode === 'outline'\n            }\"\n        >\n            <span class=\"k-chip-content\">\n                <ng-template *ngIf=\"isGroupTag(tag); then groupTag else singleTag\"></ng-template>\n                <ng-template #groupTag>\n                    <span class=\"k-chip-label k-text-ellipsis\">\n                        <ng-template *ngIf=\"groupTemplate\"\n                            [templateContext]=\"{\n                            templateRef: groupTemplate.templateRef,\n                            $implicit: tag\n                        }\">\n                        </ng-template>\n                        <ng-template [ngIf]=\"!groupTemplate\">{{ tag.length }} {{ tag.length === 1 ? 'item' : 'items' }} selected</ng-template>\n                    </span>\n                </ng-template>\n                <ng-template #singleTag>\n                    <span class=\"k-chip-label k-text-ellipsis\">\n                        <ng-template *ngIf=\"template\"\n                            [templateContext]=\"{\n                            templateRef: template.templateRef,\n                            $implicit: tag\n                        }\">\n                        </ng-template>\n                        <ng-template [ngIf]=\"!template\">{{ tagProp(tag, textField, index) }}</ng-template>\n                    </span>\n                </ng-template>\n            </span>\n\n            <span class=\"k-chip-actions\">\n                <span aria-label=\"delete\" [attr.aria-hidden]=\"index !== focused\" class=\"k-chip-action k-chip-remove-action\">\n                    <span class=\"k-icon k-i-x-circle\" (mousedown)=\"deleteTag($event, tag, index)\">\n                    </span>\n                </span>\n            </span>\n        </div>\n        <ng-content></ng-content>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.Renderer2,
            core_1.ElementRef])
    ], TagListComponent);
    return TagListComponent;
}());
exports.TagListComponent = TagListComponent;
