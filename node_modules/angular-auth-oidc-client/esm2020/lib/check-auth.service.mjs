import { Injectable } from '@angular/core';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./iframe/check-session.service";
import * as i2 from "./utils/url/current-url.service";
import * as i3 from "./iframe/silent-renew.service";
import * as i4 from "./user-data/user.service";
import * as i5 from "./logging/logger.service";
import * as i6 from "./config/provider/config.provider";
import * as i7 from "./auth-state/auth-state.service";
import * as i8 from "./callback/callback.service";
import * as i9 from "./callback/refresh-session.service";
import * as i10 from "./callback/periodically-token-check.service";
import * as i11 from "./login/popup/popup.service";
import * as i12 from "./auto-login/auto-login.service";
import * as i13 from "./storage/storage-persistence.service";
export class CheckAuthService {
    constructor(checkSessionService, currentUrlService, silentRenewService, userService, loggerService, configurationProvider, authStateService, callbackService, refreshSessionService, periodicallyTokenCheckService, popupService, autoLoginService, storagePersistenceService) {
        this.checkSessionService = checkSessionService;
        this.currentUrlService = currentUrlService;
        this.silentRenewService = silentRenewService;
        this.userService = userService;
        this.loggerService = loggerService;
        this.configurationProvider = configurationProvider;
        this.authStateService = authStateService;
        this.callbackService = callbackService;
        this.refreshSessionService = refreshSessionService;
        this.periodicallyTokenCheckService = periodicallyTokenCheckService;
        this.popupService = popupService;
        this.autoLoginService = autoLoginService;
        this.storagePersistenceService = storagePersistenceService;
    }
    checkAuth(passedConfigId, url) {
        if (this.currentUrlService.currentUrlHasStateParam()) {
            const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();
            const config = this.getConfigurationWithUrlState(stateParamFromUrl);
            if (!config) {
                return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));
            }
            return this.checkAuthWithConfig(config, url);
        }
        if (!!passedConfigId) {
            const config = this.configurationProvider.getOpenIDConfiguration(passedConfigId);
            return this.checkAuthWithConfig(config, url);
        }
        const onlyExistingConfig = this.configurationProvider.getOpenIDConfiguration();
        return this.checkAuthWithConfig(onlyExistingConfig, url);
    }
    checkAuthMultiple(passedConfigId, url) {
        if (this.currentUrlService.currentUrlHasStateParam()) {
            const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();
            const config = this.getConfigurationWithUrlState(stateParamFromUrl);
            if (!config) {
                return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));
            }
            return this.composeMultipleLoginResults(config, url);
        }
        if (!!passedConfigId) {
            const config = this.configurationProvider.getOpenIDConfiguration(passedConfigId);
            if (!config) {
                return throwError(() => new Error(`could not find matching config for id ${passedConfigId}`));
            }
            return this.composeMultipleLoginResults(config, url);
        }
        const allConfigs = this.configurationProvider.getAllConfigurations();
        const allChecks$ = allConfigs.map((x) => this.checkAuthWithConfig(x, url));
        return forkJoin(allChecks$);
    }
    checkAuthIncludingServer(configId) {
        const config = this.configurationProvider.getOpenIDConfiguration(configId);
        return this.checkAuthWithConfig(config).pipe(switchMap((loginResponse) => {
            const { isAuthenticated } = loginResponse;
            if (isAuthenticated) {
                return of(loginResponse);
            }
            return this.refreshSessionService.forceRefreshSession(configId).pipe(tap((loginResponseAfterRefreshSession) => {
                if (loginResponseAfterRefreshSession?.isAuthenticated) {
                    this.startCheckSessionAndValidation(configId);
                }
            }));
        }));
    }
    checkAuthWithConfig(config, url) {
        const { configId, authority } = config;
        if (!this.configurationProvider.hasAtLeastOneConfig()) {
            const errorMessage = 'Please provide at least one configuration before setting up the module';
            this.loggerService.logError(configId, errorMessage);
            return of({ isAuthenticated: false, errorMessage, userData: null, idToken: null, accessToken: null, configId });
        }
        const currentUrl = url || this.currentUrlService.getCurrentUrl();
        this.loggerService.logDebug(configId, `Working with config '${configId}' using ${authority}`);
        if (this.popupService.isCurrentlyInPopup()) {
            this.popupService.sendMessageToMainWindow(currentUrl);
            return of(null);
        }
        const isCallback = this.callbackService.isCallback(currentUrl);
        this.loggerService.logDebug(configId, 'currentUrl to check auth with: ', currentUrl);
        const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl, configId) : of(null);
        return callback$.pipe(map(() => {
            const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);
            if (isAuthenticated) {
                this.startCheckSessionAndValidation(configId);
                if (!isCallback) {
                    this.authStateService.setAuthenticatedAndFireEvent();
                    this.userService.publishUserDataIfExists(configId);
                }
            }
            this.loggerService.logDebug(configId, 'checkAuth completed - firing events now. isAuthenticated: ' + isAuthenticated);
            return {
                isAuthenticated,
                userData: this.userService.getUserDataFromStore(configId),
                accessToken: this.authStateService.getAccessToken(configId),
                idToken: this.authStateService.getIdToken(configId),
                configId,
            };
        }), tap(({ isAuthenticated }) => {
            if (isAuthenticated) {
                this.autoLoginService.checkSavedRedirectRouteAndNavigate(configId);
            }
        }), catchError(({ message }) => {
            this.loggerService.logError(configId, message);
            return of({ isAuthenticated: false, errorMessage: message, userData: null, idToken: null, accessToken: null, configId });
        }));
    }
    startCheckSessionAndValidation(configId) {
        if (this.checkSessionService.isCheckSessionConfigured(configId)) {
            this.checkSessionService.start(configId);
        }
        this.periodicallyTokenCheckService.startTokenValidationPeriodically();
        if (this.silentRenewService.isSilentRenewConfigured(configId)) {
            this.silentRenewService.getOrCreateIframe(configId);
        }
    }
    getConfigurationWithUrlState(stateFromUrl) {
        const allConfigs = this.configurationProvider.getAllConfigurations();
        for (const config of allConfigs) {
            const storedState = this.storagePersistenceService.read('authStateControl', config.configId);
            if (storedState === stateFromUrl) {
                return config;
            }
        }
        return null;
    }
    composeMultipleLoginResults(activeConfig, url) {
        const allOtherConfigs = this.configurationProvider.getAllConfigurations().filter((x) => x.configId !== activeConfig.configId);
        const currentConfigResult = this.checkAuthWithConfig(activeConfig, url);
        const allOtherConfigResults = allOtherConfigs.map((config) => {
            const { redirectUrl } = config;
            return this.checkAuthWithConfig(config, redirectUrl);
        });
        return forkJoin([currentConfigResult, ...allOtherConfigResults]);
    }
}
CheckAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CheckAuthService, deps: [{ token: i1.CheckSessionService }, { token: i2.CurrentUrlService }, { token: i3.SilentRenewService }, { token: i4.UserService }, { token: i5.LoggerService }, { token: i6.ConfigurationProvider }, { token: i7.AuthStateService }, { token: i8.CallbackService }, { token: i9.RefreshSessionService }, { token: i10.PeriodicallyTokenCheckService }, { token: i11.PopUpService }, { token: i12.AutoLoginService }, { token: i13.StoragePersistenceService }], target: i0.ɵɵFactoryTarget.Injectable });
CheckAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CheckAuthService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CheckAuthService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CheckSessionService }, { type: i2.CurrentUrlService }, { type: i3.SilentRenewService }, { type: i4.UserService }, { type: i5.LoggerService }, { type: i6.ConfigurationProvider }, { type: i7.AuthStateService }, { type: i8.CallbackService }, { type: i9.RefreshSessionService }, { type: i10.PeriodicallyTokenCheckService }, { type: i11.PopUpService }, { type: i12.AutoLoginService }, { type: i13.StoragePersistenceService }]; } });
//# sourceMappingURL=data:application/json;base64,