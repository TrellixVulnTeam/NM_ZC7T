import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import { ValidationResult } from '../../validation/validation-result';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
import * as i2 from "../../config/provider/config.provider";
import * as i3 from "../../auth-state/auth-state.service";
import * as i4 from "../flows-data.service";
import * as i5 from "../signin-key-data.service";
import * as i6 from "../../storage/storage-persistence.service";
import * as i7 from "../reset-auth-data.service";
const JWT_KEYS = 'jwtKeys';
export class HistoryJwtKeysCallbackHandlerService {
    constructor(loggerService, configurationProvider, authStateService, flowsDataService, signInKeyDataService, storagePersistenceService, resetAuthDataService) {
        this.loggerService = loggerService;
        this.configurationProvider = configurationProvider;
        this.authStateService = authStateService;
        this.flowsDataService = flowsDataService;
        this.signInKeyDataService = signInKeyDataService;
        this.storagePersistenceService = storagePersistenceService;
        this.resetAuthDataService = resetAuthDataService;
    }
    // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token
    callbackHistoryAndResetJwtKeys(callbackContext, configId) {
        this.storagePersistenceService.write('authnResult', callbackContext.authResult, configId);
        if (this.historyCleanUpTurnedOn(configId) && !callbackContext.isRenewProcess) {
            this.resetBrowserHistory();
        }
        else {
            this.loggerService.logDebug(configId, 'history clean up inactive');
        }
        if (callbackContext.authResult.error) {
            const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;
            this.loggerService.logDebug(configId, errorMessage);
            this.resetAuthDataService.resetAuthorizationData(configId);
            this.flowsDataService.setNonce('', configId);
            this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);
            return throwError(() => new Error(errorMessage));
        }
        this.loggerService.logDebug(configId, `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.
      AuthCallback created, begin token validation`);
        return this.signInKeyDataService.getSigningKeys(configId).pipe(tap((jwtKeys) => this.storeSigningKeys(jwtKeys, configId)), catchError((err) => {
            // fallback: try to load jwtKeys from storage
            const storedJwtKeys = this.readSigningKeys(configId);
            if (!!storedJwtKeys) {
                this.loggerService.logWarning(configId, `Failed to retrieve signing keys, fallback to stored keys`);
                return of(storedJwtKeys);
            }
            return throwError(() => new Error(err));
        }), switchMap((jwtKeys) => {
            if (jwtKeys) {
                callbackContext.jwtKeys = jwtKeys;
                return of(callbackContext);
            }
            const errorMessage = `Failed to retrieve signing key`;
            this.loggerService.logWarning(configId, errorMessage);
            return throwError(() => new Error(errorMessage));
        }), catchError((err) => {
            const errorMessage = `Failed to retrieve signing key with error: ${err}`;
            this.loggerService.logWarning(configId, errorMessage);
            return throwError(() => new Error(errorMessage));
        }));
    }
    handleResultErrorFromCallback(result, isRenewProcess) {
        let validationResult = ValidationResult.SecureTokenServerError;
        if (result.error === 'login_required') {
            validationResult = ValidationResult.LoginRequired;
        }
        this.authStateService.updateAndPublishAuthState({
            isAuthenticated: false,
            validationResult,
            isRenewProcess,
        });
    }
    historyCleanUpTurnedOn(configId) {
        const { historyCleanupOff } = this.configurationProvider.getOpenIDConfiguration(configId);
        return !historyCleanupOff;
    }
    resetBrowserHistory() {
        window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);
    }
    storeSigningKeys(jwtKeys, configId) {
        this.storagePersistenceService.write(JWT_KEYS, jwtKeys, configId);
    }
    readSigningKeys(configId) {
        return this.storagePersistenceService.read(JWT_KEYS, configId);
    }
}
HistoryJwtKeysCallbackHandlerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService, deps: [{ token: i1.LoggerService }, { token: i2.ConfigurationProvider }, { token: i3.AuthStateService }, { token: i4.FlowsDataService }, { token: i5.SigninKeyDataService }, { token: i6.StoragePersistenceService }, { token: i7.ResetAuthDataService }], target: i0.ɵɵFactoryTarget.Injectable });
HistoryJwtKeysCallbackHandlerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.ConfigurationProvider }, { type: i3.AuthStateService }, { type: i4.FlowsDataService }, { type: i5.SigninKeyDataService }, { type: i6.StoragePersistenceService }, { type: i7.ResetAuthDataService }]; } });
//# sourceMappingURL=data:application/json;base64,