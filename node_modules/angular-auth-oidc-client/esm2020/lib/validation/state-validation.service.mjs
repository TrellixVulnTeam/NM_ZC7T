import { Injectable } from '@angular/core';
import { StateValidationResult } from './state-validation-result';
import { ValidationResult } from './validation-result';
import { of } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage-persistence.service";
import * as i2 from "./token-validation.service";
import * as i3 from "../utils/tokenHelper/token-helper.service";
import * as i4 from "../logging/logger.service";
import * as i5 from "../config/provider/config.provider";
import * as i6 from "../utils/equality/equality.service";
import * as i7 from "../utils/flowHelper/flow-helper.service";
export class StateValidationService {
    constructor(storagePersistenceService, tokenValidationService, tokenHelperService, loggerService, configurationProvider, equalityService, flowHelper) {
        this.storagePersistenceService = storagePersistenceService;
        this.tokenValidationService = tokenValidationService;
        this.tokenHelperService = tokenHelperService;
        this.loggerService = loggerService;
        this.configurationProvider = configurationProvider;
        this.equalityService = equalityService;
        this.flowHelper = flowHelper;
    }
    getValidatedStateResult(callbackContext, configId) {
        if (!callbackContext || callbackContext.authResult.error) {
            return of(new StateValidationResult('', '', false, {}));
        }
        return this.validateState(callbackContext, configId);
    }
    validateState(callbackContext, configId) {
        const toReturn = new StateValidationResult();
        const authStateControl = this.storagePersistenceService.read('authStateControl', configId);
        if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl, configId)) {
            this.loggerService.logWarning(configId, 'authCallback incorrect state');
            toReturn.state = ValidationResult.StatesDoNotMatch;
            this.handleUnsuccessfulValidation(configId);
            return of(toReturn);
        }
        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configId);
        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configId);
        if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {
            toReturn.accessToken = callbackContext.authResult.access_token;
        }
        if (callbackContext.authResult.id_token) {
            const { clientId, issValidationOff, maxIdTokenIatOffsetAllowedInSeconds, disableIatOffsetValidation, ignoreNonceAfterRefresh } = this.configurationProvider.getOpenIDConfiguration(configId);
            toReturn.idToken = callbackContext.authResult.id_token;
            toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false, configId);
            return this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys, configId).pipe(mergeMap((isSignatureIdTokenValid) => {
                if (!isSignatureIdTokenValid) {
                    this.loggerService.logDebug(configId, 'authCallback Signature validation failed id_token');
                    toReturn.state = ValidationResult.SignatureFailed;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                const authNonce = this.storagePersistenceService.read('authNonce', configId);
                if (!this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh, configId)) {
                    this.loggerService.logWarning(configId, 'authCallback incorrect nonce, did you call the checkAuth() method multiple times?');
                    toReturn.state = ValidationResult.IncorrectNonce;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken, configId)) {
                    this.loggerService.logDebug(configId, 'authCallback Validation, one of the REQUIRED properties missing from id_token');
                    toReturn.state = ValidationResult.RequiredPropertyMissing;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateIdTokenIatMaxOffset(toReturn.decodedIdToken, maxIdTokenIatOffsetAllowedInSeconds, disableIatOffsetValidation, configId)) {
                    this.loggerService.logWarning(configId, 'authCallback Validation, iat rejected id_token was issued too far away from the current time');
                    toReturn.state = ValidationResult.MaxOffsetExpired;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
                if (authWellKnownEndPoints) {
                    if (issValidationOff) {
                        this.loggerService.logDebug(configId, 'iss validation is turned off, this is not recommended!');
                    }
                    else if (!issValidationOff &&
                        !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer, configId)) {
                        this.loggerService.logWarning(configId, 'authCallback incorrect iss does not match authWellKnownEndpoints issuer');
                        toReturn.state = ValidationResult.IssDoesNotMatchIssuer;
                        this.handleUnsuccessfulValidation(configId);
                        return of(toReturn);
                    }
                }
                else {
                    this.loggerService.logWarning(configId, 'authWellKnownEndpoints is undefined');
                    toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId, configId)) {
                    this.loggerService.logWarning(configId, 'authCallback incorrect aud');
                    toReturn.state = ValidationResult.IncorrectAud;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {
                    this.loggerService.logWarning(configId, 'authCallback missing azp');
                    toReturn.state = ValidationResult.IncorrectAzp;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {
                    this.loggerService.logWarning(configId, 'authCallback incorrect azp');
                    toReturn.state = ValidationResult.IncorrectAzp;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken, configId)) {
                    this.loggerService.logWarning(configId, 'authCallback pre, post id_token claims do not match in refresh');
                    toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken, configId)) {
                    this.loggerService.logWarning(configId, 'authCallback id token expired');
                    toReturn.state = ValidationResult.TokenExpired;
                    this.handleUnsuccessfulValidation(configId);
                    return of(toReturn);
                }
                return this.validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configId, callbackContext);
            }));
        }
        else {
            this.loggerService.logDebug(configId, 'No id_token found, skipping id_token validation');
        }
        return this.validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configId, callbackContext);
    }
    validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configId, callbackContext) {
        // flow id_token
        if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {
            toReturn.authResponseIsValid = true;
            toReturn.state = ValidationResult.Ok;
            this.handleSuccessfulValidation(configId);
            this.handleUnsuccessfulValidation(configId);
            return of(toReturn);
        }
        // only do check if id_token returned, no always the case when using refresh tokens
        if (callbackContext.authResult.id_token) {
            const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false, configId);
            if (isCurrentFlowCodeFlow && !toReturn.decodedIdToken.at_hash) {
                this.loggerService.logDebug(configId, 'Code Flow active, and no at_hash in the id_token, skipping check!');
            }
            else {
                return this.tokenValidationService
                    .validateIdTokenAtHash(toReturn.accessToken, toReturn.decodedIdToken.at_hash, idTokenHeader.alg, // 'RS256'
                configId)
                    .pipe(map((valid) => {
                    if (!valid || !toReturn.accessToken) {
                        this.loggerService.logWarning(configId, 'authCallback incorrect at_hash');
                        toReturn.state = ValidationResult.IncorrectAtHash;
                        this.handleUnsuccessfulValidation(configId);
                        return toReturn;
                    }
                    else {
                        toReturn.authResponseIsValid = true;
                        toReturn.state = ValidationResult.Ok;
                        this.handleSuccessfulValidation(configId);
                        return toReturn;
                    }
                }));
            }
        }
        toReturn.authResponseIsValid = true;
        toReturn.state = ValidationResult.Ok;
        this.handleSuccessfulValidation(configId);
        return of(toReturn);
    }
    isIdTokenAfterRefreshTokenRequestValid(callbackContext, newIdToken, configId) {
        const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!useRefreshToken) {
            return true;
        }
        if (!callbackContext.existingIdToken) {
            return true;
        }
        const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false, configId);
        // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3
        // except that it might not contain an id_token.
        // If an ID Token is returned as a result of a token refresh request, the following requirements apply:
        // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,
        if (decodedIdToken.iss !== newIdToken.iss) {
            this.loggerService.logDebug(configId, `iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);
            return false;
        }
        // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;
        //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and
        // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.
        if (decodedIdToken.azp !== newIdToken.azp) {
            this.loggerService.logDebug(configId, `azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);
            return false;
        }
        // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,
        if (decodedIdToken.sub !== newIdToken.sub) {
            this.loggerService.logDebug(configId, `sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);
            return false;
        }
        // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,
        if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {
            this.loggerService.logDebug(configId, `aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);
            return false;
        }
        if (disableRefreshIdTokenAuthTimeValidation) {
            return true;
        }
        // its iat Claim MUST represent the time that the new ID Token is issued,
        // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication
        // - not the time that the new ID token is issued,
        if (decodedIdToken.auth_time !== newIdToken.auth_time) {
            this.loggerService.logDebug(configId, `auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);
            return false;
        }
        return true;
    }
    handleSuccessfulValidation(configId) {
        const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration(configId);
        this.storagePersistenceService.write('authNonce', null, configId);
        if (autoCleanStateAfterAuthentication) {
            this.storagePersistenceService.write('authStateControl', '', configId);
        }
        this.loggerService.logDebug(configId, 'authCallback token(s) validated, continue');
    }
    handleUnsuccessfulValidation(configId) {
        const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration(configId);
        this.storagePersistenceService.write('authNonce', null, configId);
        if (autoCleanStateAfterAuthentication) {
            this.storagePersistenceService.write('authStateControl', '', configId);
        }
        this.loggerService.logDebug(configId, 'authCallback token(s) invalid');
    }
}
StateValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StateValidationService, deps: [{ token: i1.StoragePersistenceService }, { token: i2.TokenValidationService }, { token: i3.TokenHelperService }, { token: i4.LoggerService }, { token: i5.ConfigurationProvider }, { token: i6.EqualityService }, { token: i7.FlowHelper }], target: i0.ɵɵFactoryTarget.Injectable });
StateValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StateValidationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StateValidationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StoragePersistenceService }, { type: i2.TokenValidationService }, { type: i3.TokenHelperService }, { type: i4.LoggerService }, { type: i5.ConfigurationProvider }, { type: i6.EqualityService }, { type: i7.FlowHelper }]; } });
//# sourceMappingURL=data:application/json;base64,