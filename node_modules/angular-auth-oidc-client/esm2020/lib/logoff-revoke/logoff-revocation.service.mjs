import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, retry, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../api/data.service";
import * as i2 from "../storage/storage-persistence.service";
import * as i3 from "../logging/logger.service";
import * as i4 from "../utils/url/url.service";
import * as i5 from "../iframe/check-session.service";
import * as i6 from "../flows/reset-auth-data.service";
import * as i7 from "../utils/redirect/redirect.service";
import * as i8 from "../config/provider/config.provider";
export class LogoffRevocationService {
    constructor(dataService, storagePersistenceService, loggerService, urlService, checkSessionService, resetAuthDataService, redirectService, configurationProvider) {
        this.dataService = dataService;
        this.storagePersistenceService = storagePersistenceService;
        this.loggerService = loggerService;
        this.urlService = urlService;
        this.checkSessionService = checkSessionService;
        this.resetAuthDataService = resetAuthDataService;
        this.redirectService = redirectService;
        this.configurationProvider = configurationProvider;
    }
    // Logs out on the server and the local client.
    // If the server state has changed, check session, then only a local logout.
    logoff(configId, authOptions) {
        const { urlHandler, customParams } = authOptions || {};
        this.loggerService.logDebug(configId, 'logoff, remove auth ');
        const endSessionUrl = this.getEndSessionUrl(configId, customParams);
        this.resetAuthDataService.resetAuthorizationData(configId);
        if (!endSessionUrl) {
            this.loggerService.logDebug(configId, 'only local login cleaned up, no end_session_endpoint');
            return;
        }
        if (this.checkSessionService.serverStateChanged(configId)) {
            this.loggerService.logDebug(configId, 'only local login cleaned up, server session has changed');
        }
        else if (urlHandler) {
            urlHandler(endSessionUrl);
        }
        else {
            this.redirectService.redirectTo(endSessionUrl);
        }
    }
    logoffLocal(configId) {
        this.resetAuthDataService.resetAuthorizationData(configId);
        this.checkSessionService.stop();
    }
    logoffLocalMultiple() {
        const allConfigs = this.configurationProvider.getAllConfigurations();
        allConfigs.forEach(({ configId }) => this.logoffLocal(configId));
    }
    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist
    // only the access token is revoked. Then the logout run.
    logoffAndRevokeTokens(configId, authOptions) {
        const { revocationEndpoint } = this.storagePersistenceService.read('authWellKnownEndPoints', configId) || {};
        if (!revocationEndpoint) {
            this.loggerService.logDebug(configId, 'revocation endpoint not supported');
            this.logoff(configId, authOptions);
        }
        if (this.storagePersistenceService.getRefreshToken(configId)) {
            return this.revokeRefreshToken(configId).pipe(switchMap((result) => this.revokeAccessToken(configId, result)), catchError((error) => {
                const errorMessage = `revoke token failed`;
                this.loggerService.logError(configId, errorMessage, error);
                return throwError(() => new Error(errorMessage));
            }), tap(() => this.logoff(configId, authOptions)));
        }
        else {
            return this.revokeAccessToken(configId).pipe(catchError((error) => {
                const errorMessage = `revoke accessToken failed`;
                this.loggerService.logError(configId, errorMessage, error);
                return throwError(() => new Error(errorMessage));
            }), tap(() => this.logoff(configId, authOptions)));
        }
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an access token on the STS. If no token is provided, then the token from
    // the storage is revoked. You can pass any token to revoke. This makes it possible to
    // manage your own tokens. The is a public API.
    revokeAccessToken(configId, accessToken) {
        const accessTok = accessToken || this.storagePersistenceService.getAccessToken(configId);
        const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok, configId);
        return this.sendRevokeRequest(configId, body);
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeRefreshToken(configId, refreshToken) {
        const refreshTok = refreshToken || this.storagePersistenceService.getRefreshToken(configId);
        const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok, configId);
        return this.sendRevokeRequest(configId, body);
    }
    getEndSessionUrl(configId, customParams) {
        const idToken = this.storagePersistenceService.getIdToken(configId);
        const { customParamsEndSessionRequest } = this.configurationProvider.getOpenIDConfiguration();
        const mergedParams = { ...customParamsEndSessionRequest, ...customParams };
        return this.urlService.createEndSessionUrl(idToken, configId, mergedParams);
    }
    sendRevokeRequest(configId, body) {
        const url = this.urlService.getRevocationEndpointUrl(configId);
        let headers = new HttpHeaders();
        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');
        return this.dataService.post(url, body, configId, headers).pipe(retry(2), switchMap((response) => {
            this.loggerService.logDebug(configId, 'revocation endpoint post response: ', response);
            return of(response);
        }), catchError((error) => {
            const errorMessage = `Revocation request failed`;
            this.loggerService.logError(configId, errorMessage, error);
            return throwError(() => new Error(errorMessage));
        }));
    }
}
LogoffRevocationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LogoffRevocationService, deps: [{ token: i1.DataService }, { token: i2.StoragePersistenceService }, { token: i3.LoggerService }, { token: i4.UrlService }, { token: i5.CheckSessionService }, { token: i6.ResetAuthDataService }, { token: i7.RedirectService }, { token: i8.ConfigurationProvider }], target: i0.ɵɵFactoryTarget.Injectable });
LogoffRevocationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LogoffRevocationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LogoffRevocationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.StoragePersistenceService }, { type: i3.LoggerService }, { type: i4.UrlService }, { type: i5.CheckSessionService }, { type: i6.ResetAuthDataService }, { type: i7.RedirectService }, { type: i8.ConfigurationProvider }]; } });
//# sourceMappingURL=data:application/json;base64,