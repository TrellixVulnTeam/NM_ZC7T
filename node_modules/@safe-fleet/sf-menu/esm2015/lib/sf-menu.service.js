import { BehaviorSubject, Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { MenuConfig } from './models/menu-config';
import { MenuEventType } from './models/menu-events';
import { filter } from 'rxjs/operators';
export class SfMenuService {
    constructor(router) {
        this.router = router;
        this.SMALL_RESOLUTION = 768;
        this.menuCollapse$ = new BehaviorSubject(false);
        this.events$ = new Subject();
        this.menuConfig$ = new BehaviorSubject(undefined);
        // store nodes to expand on navigation end
        this.nodesToExpand = [];
        this.themes = ['light', 'dark'];
        // theming
        this.setBaseColors();
        this.currentTheme = new BehaviorSubject(this.themes[0]);
        this.storedTheme = localStorage.getItem('theme');
        if (!this.storedTheme) {
            this.storedTheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? this.themes[1] : this.themes[0];
        }
        this.setMenuConfig(new MenuConfig());
        this.router.events.pipe(filter((e) => e instanceof NavigationEnd)).subscribe((e) => {
            var _a, _b;
            this.nodesToExpand.length = 0;
            (_b = (_a = this.menuConfig) === null || _a === void 0 ? void 0 : _a.routes) === null || _b === void 0 ? void 0 : _b.forEach((r) => this.setCurrentRouteActive(r, e.urlAfterRedirects));
        });
    }
    get colors() {
        return this.menuConfig.menuIgnoresTheme || this.menuConfig.denyChangeTheme ? this.noThemeColors : this.themeColors;
    }
    setMenuConfig(cfg) {
        this.menuConfig = cfg || new MenuConfig();
        this.menuConfig$.next(this.menuConfig);
        this.setTheme(this.storedTheme);
    }
    setBaseColors() {
        const notheme = {};
        const theme = {};
        const root = getComputedStyle(document.querySelector(':root'));
        ['blue', 'gray', 'green', 'red', 'orange', 'purple', 'teal', 'yellow'].forEach((col) => {
            for (let i = 1; i < 10; i++) {
                notheme[`${col}${i * 100}`] = root.getPropertyValue(`--clr-${col}-${1000 - i * 100}`);
                theme[`${col}${i * 100}`] = `var(--clr-${col}-${i * 100})`;
            }
        });
        this.noThemeColors = notheme;
        this.themeColors = theme;
    }
    routeClicked(item, evt) {
        evt.stopPropagation();
        this.events$.next({
            type: MenuEventType.RouteClick,
            value: item
        });
        if (item.items) {
            item.expanded = !item.expanded;
            return;
        }
        if (item.routePath) {
            if (!this.menuConfig.routeClickPreventCollapse) {
                this.collapseAllItems(this.menuConfig.routes);
            }
            this.router.navigate([item.routePath]);
            return;
        }
        if (item.routeHref) {
            if (!this.menuConfig.routeClickPreventCollapse) {
                this.collapseAllItems(this.menuConfig.routes);
            }
            if (item.newTab) {
                window.open(item.routeHref);
                return;
            }
            if (item.newWindow) {
                let top;
                let left;
                let width;
                let height;
                if (item.newWindowWidth > 200 && item.newWindowHeight > 100) {
                    width = item.newWindowWidth;
                    height = item.newWindowHeight;
                    left = window.screenLeft + window.outerWidth / 2 - width / 2;
                    top = window.screenTop + window.outerHeight / 2 - height / 2;
                }
                else {
                    height = window.outerHeight;
                    width = window.outerWidth;
                    left = window.screenLeft;
                    top = window.screenTop;
                }
                window.open(item.routeHref, item.id, `top=${top},left=${left},height=${height},width=${width},resizable=1,scrollbars=1`);
            }
        }
        if (window.innerWidth <= this.SMALL_RESOLUTION && !this.menuCollapse$.value) {
            this.menuCollapse$.next(!this.menuCollapse$.value);
        }
    }
    setCurrentRouteActive(route, url) {
        var _a, _b;
        route.active = !((_a = route.items) === null || _a === void 0 ? void 0 : _a.length) && `/${route.routePath}` === url;
        if (route.active) {
            this.nodesToExpand.forEach((n) => (n.expanded = true));
        }
        this.nodesToExpand.push(route);
        (_b = route.items) === null || _b === void 0 ? void 0 : _b.forEach((ch) => this.setCurrentRouteActive(ch, url));
        this.nodesToExpand.pop();
    }
    // theming
    setTheme(theme) {
        if (this.menuConfig.denyChangeTheme || this.themes.indexOf(theme) < 0) {
            theme = this.themes[0];
        }
        this.currentTheme.next(theme);
        localStorage.setItem('theme', theme);
        this.themes.forEach((t) => document.querySelector('html').classList.toggle(t, t === theme));
    }
    collapseAllItems(routes) {
        if (routes) {
            routes.forEach((route) => {
                route.expanded = false;
                if (route.items) {
                    this.collapseAllItems(route.items);
                }
            });
        }
    }
}
SfMenuService.decorators = [
    { type: Injectable }
];
SfMenuService.ctorParameters = () => [
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2YtbWVudS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc2YtbWVudS9zcmMvbGliL3NmLW1lbnUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBYSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEMsTUFBTSxPQUFPLGFBQWE7SUF5QnhCLFlBQTZCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBeEIzQyxxQkFBZ0IsR0FBRyxHQUFHLENBQUM7UUFFdkIsa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUVwRCxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQWEsQ0FBQztRQUduQyxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFhLFNBQVMsQ0FBQyxDQUFDO1FBU3pELDBDQUEwQztRQUNsQyxrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUluQixXQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFJakMsVUFBVTtRQUNWLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMs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QUMsS0FBSyxDQUFDLENBQUM7aUJBQ3BDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OztZQWpKRixVQUFVOzs7WUFQYSxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IE1lbnVDb25maWcgfSBmcm9tICcuL21vZGVscy9tZW51LWNvbmZpZyc7XG5pbXBvcnQgeyBNZW51RXZlbnQsIE1lbnVFdmVudFR5cGUgfSBmcm9tICcuL21vZGVscy9tZW51LWV2ZW50cyc7XG5pbXBvcnQgeyBNZW51SXRlbSB9IGZyb20gJy4vbW9kZWxzL21lbnUtaXRlbSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZk1lbnVTZXJ2aWNlIHtcbiAgU01BTExfUkVTT0xVVElPTiA9IDc2ODtcblxuICBtZW51Q29sbGFwc2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG5cbiAgZXZlbnRzJCA9IG5ldyBTdWJqZWN0PE1lbnVFdmVudD4oKTtcblxuICBtZW51Q29uZmlnOiBNZW51Q29uZmlnO1xuICBtZW51Q29uZmlnJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TWVudUNvbmZpZz4odW5kZWZpbmVkKTtcblxuICBub1RoZW1lQ29sb3JzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICB0aGVtZUNvbG9yczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICBnZXQgY29sb3JzKCkge1xuICAgIHJldHVybiB0aGlzLm1lbnVDb25maWcubWVudUlnbm9yZXNUaGVtZSB8fCB0aGlzLm1lbnVDb25maWcuZGVueUNoYW5nZVRoZW1lID8gdGhpcy5ub1RoZW1lQ29sb3JzIDogdGhpcy50aGVtZUNvbG9ycztcbiAgfVxuXG4gIC8vIHN0b3JlIG5vZGVzIHRvIGV4cGFuZCBvbiBuYXZpZ2F0aW9uIGVuZFxuICBwcml2YXRlIG5vZGVzVG9FeHBhbmQgPSBbXTtcblxuICAvLyB0aGVtaW5nXG4gIGN1cnJlbnRUaGVtZTogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz47XG4gIHByaXZhdGUgdGhlbWVzID0gWydsaWdodCcsICdkYXJrJ107XG4gIHN0b3JlZFRoZW1lOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByb3V0ZXI6IFJvdXRlcikge1xuICAgIC8vIHRoZW1pbmdcbiAgICB0aGlzLnNldEJhc2VDb2xvcnMoKTtcbiAgICB0aGlzLmN1cnJlbnRUaGVtZSA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy50aGVtZXNbMF0pO1xuICAgIHRoaXMuc3RvcmVkVGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcbiAgICBpZiAoIXRoaXMuc3RvcmVkVGhlbWUpIHtcbiAgICAgIHRoaXMuc3RvcmVkVGhlbWUgPSB3aW5kb3cubWF0Y2hNZWRpYSAmJiB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpLm1hdGNoZXMgPyB0aGlzLnRoZW1lc1sxXSA6IHRoaXMudGhlbWVzWzBdO1xuICAgIH1cbiAgICB0aGlzLnNldE1lbnVDb25maWcobmV3IE1lbnVDb25maWcoKSk7XG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnBpcGUoZmlsdGVyKChlKSA9PiBlIGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpLnN1YnNjcmliZSgoZTogTmF2aWdhdGlvbkVuZCkgPT4ge1xuICAgICAgdGhpcy5ub2Rlc1RvRXhwYW5kLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1lbnVDb25maWc/LnJvdXRlcz8uZm9yRWFjaCgocjogTWVudUl0ZW0pID0+IHRoaXMuc2V0Q3VycmVudFJvdXRlQWN0aXZlKHIsIGUudXJsQWZ0ZXJSZWRpcmVjdHMpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldE1lbnVDb25maWcoY2ZnOiBNZW51Q29uZmlnKSB7XG4gICAgdGhpcy5tZW51Q29uZmlnID0gY2ZnIHx8IG5ldyBNZW51Q29uZmlnKCk7XG4gICAgdGhpcy5tZW51Q29uZmlnJC5uZXh0KHRoaXMubWVudUNvbmZpZyk7XG4gICAgdGhpcy5zZXRUaGVtZSh0aGlzLnN0b3JlZFRoZW1lKTtcbiAgfVxuXG4gIHNldEJhc2VDb2xvcnMoKSB7XG4gICAgY29uc3Qgbm90aGVtZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgIGNvbnN0IHRoZW1lOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgY29uc3Qgcm9vdCA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignOnJvb3QnKSk7XG4gICAgWydibHVlJywgJ2dyYXknLCAnZ3JlZW4nLCAncmVkJywgJ29yYW5nZScsICdwdXJwbGUnLCAndGVhbCcsICd5ZWxsb3cnXS5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBub3RoZW1lW2Ake2NvbH0ke2kgKiAxMDB9YF0gPSByb290LmdldFByb3BlcnR5VmFsdWUoYC0tY2xyLSR7Y29sfS0kezEwMDAgLSBpICogMTAwfWApO1xuICAgICAgICB0aGVtZVtgJHtjb2x9JHtpICogMTAwfWBdID0gYHZhcigtLWNsci0ke2NvbH0tJHtpICogMTAwfSlgO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMubm9UaGVtZUNvbG9ycyA9IG5vdGhlbWU7XG4gICAgdGhpcy50aGVtZUNvbG9ycyA9IHRoZW1lO1xuICB9XG5cbiAgcm91dGVDbGlja2VkKGl0ZW06IE1lbnVJdGVtLCBldnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLmV2ZW50cyQubmV4dCh7XG4gICAgICB0eXBlOiBNZW51RXZlbnRUeXBlLlJvdXRlQ2xpY2ssXG4gICAgICB2YWx1ZTogaXRlbVxuICAgIH0gYXMgTWVudUV2ZW50KTtcbiAgICBpZiAoaXRlbS5pdGVtcykge1xuICAgICAgaXRlbS5leHBhbmRlZCA9ICFpdGVtLmV4cGFuZGVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpdGVtLnJvdXRlUGF0aCkge1xuICAgICAgaWYgKCF0aGlzLm1lbnVDb25maWcucm91dGVDbGlja1ByZXZlbnRDb2xsYXBzZSkge1xuICAgICAgICB0aGlzLmNvbGxhcHNlQWxsSXRlbXModGhpcy5tZW51Q29uZmlnLnJvdXRlcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbaXRlbS5yb3V0ZVBhdGhdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5yb3V0ZUhyZWYpIHtcbiAgICAgIGlmICghdGhpcy5tZW51Q29uZmlnLnJvdXRlQ2xpY2tQcmV2ZW50Q29sbGFwc2UpIHtcbiAgICAgICAgdGhpcy5jb2xsYXBzZUFsbEl0ZW1zKHRoaXMubWVudUNvbmZpZy5yb3V0ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0ubmV3VGFiKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGl0ZW0ucm91dGVIcmVmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbS5uZXdXaW5kb3cpIHtcbiAgICAgICAgbGV0IHRvcDogbnVtYmVyO1xuICAgICAgICBsZXQgbGVmdDogbnVtYmVyO1xuICAgICAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgbGV0IGhlaWdodDogbnVtYmVyO1xuXG4gICAgICAgIGlmIChpdGVtLm5ld1dpbmRvd1dpZHRoID4gMjAwICYmIGl0ZW0ubmV3V2luZG93SGVpZ2h0ID4gMTAwKSB7XG4gICAgICAgICAgd2lkdGggPSBpdGVtLm5ld1dpbmRvd1dpZHRoO1xuICAgICAgICAgIGhlaWdodCA9IGl0ZW0ubmV3V2luZG93SGVpZ2h0O1xuICAgICAgICAgIGxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCArIHdpbmRvdy5vdXRlcldpZHRoIC8gMiAtIHdpZHRoIC8gMjtcbiAgICAgICAgICB0b3AgPSB3aW5kb3cuc2NyZWVuVG9wICsgd2luZG93Lm91dGVySGVpZ2h0IC8gMiAtIGhlaWdodCAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVpZ2h0ID0gd2luZG93Lm91dGVySGVpZ2h0O1xuICAgICAgICAgIHdpZHRoID0gd2luZG93Lm91dGVyV2lkdGg7XG4gICAgICAgICAgbGVmdCA9IHdpbmRvdy5zY3JlZW5MZWZ0O1xuICAgICAgICAgIHRvcCA9IHdpbmRvdy5zY3JlZW5Ub3A7XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cub3BlbihpdGVtLnJvdXRlSHJlZiwgaXRlbS5pZCwgYHRvcD0ke3RvcH0sbGVmdD0ke2xlZnR9LGhlaWdodD0ke2hlaWdodH0sd2lkdGg9JHt3aWR0aH0scmVzaXphYmxlPTEsc2Nyb2xsYmFycz0xYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSB0aGlzLlNNQUxMX1JFU09MVVRJT04gJiYgIXRoaXMubWVudUNvbGxhcHNlJC52YWx1ZSkge1xuICAgICAgdGhpcy5tZW51Q29sbGFwc2UkLm5leHQoIXRoaXMubWVudUNvbGxhcHNlJC52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDdXJyZW50Um91dGVBY3RpdmUocm91dGU6IE1lbnVJdGVtLCB1cmw6IHN0cmluZykge1xuICAgIHJvdXRlLmFjdGl2ZSA9ICFyb3V0ZS5pdGVtcz8ubGVuZ3RoICYmIGAvJHtyb3V0ZS5yb3V0ZVBhdGh9YCA9PT0gdXJsO1xuICAgIGlmIChyb3V0ZS5hY3RpdmUpIHtcbiAgICAgIHRoaXMubm9kZXNUb0V4cGFuZC5mb3JFYWNoKChuKSA9PiAobi5leHBhbmRlZCA9IHRydWUpKTtcbiAgICB9XG4gICAgdGhpcy5ub2Rlc1RvRXhwYW5kLnB1c2gocm91dGUpO1xuICAgIHJvdXRlLml0ZW1zPy5mb3JFYWNoKChjaDogTWVudUl0ZW0pID0+IHRoaXMuc2V0Q3VycmVudFJvdXRlQWN0aXZlKGNoLCB1cmwpKTtcbiAgICB0aGlzLm5vZGVzVG9FeHBhbmQucG9wKCk7XG4gIH1cblxuICAvLyB0aGVtaW5nXG4gIHNldFRoZW1lKHRoZW1lPzogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMubWVudUNvbmZpZy5kZW55Q2hhbmdlVGhlbWUgfHwgdGhpcy50aGVtZXMuaW5kZXhPZih0aGVtZSkgPCAwKSB7XG4gICAgICB0aGVtZSA9IHRoaXMudGhlbWVzWzBdO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRUaGVtZS5uZXh0KHRoZW1lKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCB0aGVtZSk7XG4gICAgdGhpcy50aGVtZXMuZm9yRWFjaCgodCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmNsYXNzTGlzdC50b2dnbGUodCwgdCA9PT0gdGhlbWUpKTtcbiAgfVxuXG4gIHByaXZhdGUgY29sbGFwc2VBbGxJdGVtcyhyb3V0ZXM6IE1lbnVJdGVtW10pIHtcbiAgICBpZiAocm91dGVzKSB7XG4gICAgICByb3V0ZXMuZm9yRWFjaCgocm91dGUpID0+IHtcbiAgICAgICAgcm91dGUuZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHJvdXRlLml0ZW1zKSB7XG4gICAgICAgICAgdGhpcy5jb2xsYXBzZUFsbEl0ZW1zKHJvdXRlLml0ZW1zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=