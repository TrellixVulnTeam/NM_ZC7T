import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { SfMenuService } from '@safe-fleet/sf-menu';
import { EventTypeEnum } from '../../interfaces/IMenuConfig';
import { SecurityService } from '../security/security.service';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@safe-fleet/sf-menu";
import * as i2 from "../security/security.service";
export class SfSecurityMenuService {
    constructor(sfMenuService, securityService) {
        this.sfMenuService = sfMenuService;
        this.securityService = securityService;
        this.infoMessageVisibilityChange = new BehaviorSubject(false);
        this.events$ = this.sfMenuService.events$;
    }
    configureMenu(config, securityInfo) {
        this.securityService.setSecurityInformation(securityInfo.securityEndpoint, securityInfo.settingsEndpoint, securityInfo.headers);
        this.refreshMenu(config);
        this.onMenuChanges();
        this.infoMessageVisibilityChange.next(false);
        this.unauthorizedPopup = this.getUnauthorizedPopup(config.unauthorizedPopup);
        const permissionsObservable = this.securityService.getSecurityPermissions(config.currentProduct.id).pipe(catchError((error) => {
            if (error.status === 403 && config.multipleTenants && config.unauthorizedPopup) {
                this.infoMessageVisibilityChange.next(true);
            }
            throw error;
        }));
        const applicationsObservable = this.securityService.getApplications().pipe(map((applications) => this.mapConfiguration(config, applications, securityInfo)), catchError((error) => {
            this.refreshMenu(config);
            throw error;
        }));
        const applicationInfoObservable = this.securityService.getApplicationInfo();
        return applicationsObservable.pipe(mergeMap(() => permissionsObservable), mergeMap(() => applicationInfoObservable), catchError(() => of('')));
    }
    refreshMenu(config) {
        this.sfMenuService.setMenuConfig(config);
    }
    getPermissions() {
        return this.securityService.getPermissions();
    }
    getSettingsInfo() {
        return this.securityService.getInfo();
    }
    mapConfiguration(config, applications, securityInfo) {
        config.products = [];
        const menuItems = [];
        applications.forEach((app) => {
            menuItems.push(this.mapMenuApplication(app));
        });
        const selectedProduct = menuItems.find((app) => app.text === securityInfo.selectedApplication);
        if (!selectedProduct || selectedProduct === null) {
            config.products = menuItems;
            this.refreshMenu(config);
            return;
        }
        config.currentProduct = selectedProduct;
        config.products = menuItems.filter((item) => item.id !== config.currentProduct.id);
        this.refreshMenu(config);
    }
    mapMenuApplication(app) {
        return {
            text: app.applicationName,
            routeHref: app.applicationUrl,
            iconPath: app.applicationIconUrl,
            id: app.applicationName,
            newWindow: false,
            active: false,
            expanded: false,
            newTab: false,
        };
    }
    getUnauthorizedPopup(popupConfig) {
        return {
            popupButtonText: popupConfig ? popupConfig.popupButtonText : '',
            popupMessageActionText: popupConfig ? popupConfig.popupMessageActionText : '',
            popupMessageText: popupConfig ? popupConfig.popupMessageText : '',
        };
    }
    reloadPermissions(applicationName) {
        return this.securityService.getSecurityPermissions(applicationName);
    }
    onMenuChanges() {
        return this.sfMenuService.events$.subscribe((menuEvent) => {
            if (menuEvent.type === EventTypeEnum.OpenTenantListClick) {
                this.infoMessageVisibilityChange.next(false);
            }
        });
    }
}
SfSecurityMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SfSecurityMenuService_Factory() { return new SfSecurityMenuService(i0.ɵɵinject(i1.SfMenuService), i0.ɵɵinject(i2.SecurityService)); }, token: SfSecurityMenuService, providedIn: "root" });
SfSecurityMenuService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SfSecurityMenuService.ctorParameters = () => [
    { type: SfMenuService },
    { type: SecurityService }
];
//# sourceMappingURL=data:application/json;base64,