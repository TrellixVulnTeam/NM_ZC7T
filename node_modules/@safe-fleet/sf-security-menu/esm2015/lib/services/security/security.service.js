import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SecurityService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    setSecurityInformation(securityEndpoint, settingsEndpoint, headers) {
        this.securityHeaders = headers;
        this.securityEndpoint = securityEndpoint;
        this.settingsEndpoint = settingsEndpoint;
    }
    getApplications() {
        const url = `${this.securityEndpoint}/applications`;
        return this.httpClient.get(url, {
            headers: this.securityHeaders,
        });
    }
    getPermissions() {
        return this.permissions;
    }
    getInfo() {
        return this.applicationInfo;
    }
    getSecurityPermissions(resourceName) {
        const url = `${this.securityEndpoint}/permissions?resourceName=${resourceName}`;
        return this.httpClient
            .get(url, {
            headers: this.securityHeaders,
        })
            .pipe(map((x) => (this.permissions = x)), catchError((error) => {
            throw error;
        }));
    }
    getApplicationInfo() {
        const url = `${this.settingsEndpoint}/info`;
        return this.httpClient
            .get(url, {
            headers: this.securityHeaders,
        })
            .pipe(map((x) => (this.applicationInfo = x)), catchError((error) => {
            throw error;
        }));
    }
}
SecurityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SecurityService_Factory() { return new SecurityService(i0.ɵɵinject(i1.HttpClient)); }, token: SecurityService, providedIn: "root" });
SecurityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SecurityService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NmLXNlY3VyaXR5LW1lbnUvc3JjL2xpYi9zZXJ2aWNlcy9zZWN1cml0eS9zZWN1cml0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQU1qRCxNQUFNLE9BQU8sZUFBZTtJQU0xQixZQUE2QixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUcsQ0FBQztJQUVoRCxzQkFBc0IsQ0FBQyxnQkFBd0IsRUFBRSxnQkFBd0IsRUFBRSxPQUFZO1FBQzVGLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQztJQUVNLGVBQWU7UUFDcEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLGVBQWUsQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFpQixHQUFHLEVBQUU7WUFDOUMsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRU0sc0JBQXNCLENBQUMsWUFBb0I7UUFDaEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLDZCQUE2QixZQUFZLEVBQUUsQ0FBQztRQUNoRixPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ25CLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWU7U0FDOUIsQ0FBQzthQUNELElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUNsQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRU0sa0JBQWtCO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixPQUFPLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlO1NBQzlCLENBQUM7YUFDRCxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDdEMsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDbkIsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQzs7OztZQTFERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVJRLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSUFwcGxpY2F0aW9uIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9JQXBwbGljYXRpb24nO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgU2VjdXJpdHlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzZWN1cml0eUVuZHBvaW50OiBzdHJpbmc7XG4gIHByaXZhdGUgc2V0dGluZ3NFbmRwb2ludDogc3RyaW5nO1xuICBwcml2YXRlIHNlY3VyaXR5SGVhZGVyczogYW55O1xuICBwcml2YXRlIHBlcm1pc3Npb25zOiBhbnk7XG4gIHByaXZhdGUgYXBwbGljYXRpb25JbmZvOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBwdWJsaWMgc2V0U2VjdXJpdHlJbmZvcm1hdGlvbihzZWN1cml0eUVuZHBvaW50OiBzdHJpbmcsIHNldHRpbmdzRW5kcG9pbnQ6IHN0cmluZywgaGVhZGVyczogYW55KSB7XG4gICAgdGhpcy5zZWN1cml0eUhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMuc2VjdXJpdHlFbmRwb2ludCA9IHNlY3VyaXR5RW5kcG9pbnQ7XG4gICAgdGhpcy5zZXR0aW5nc0VuZHBvaW50ID0gc2V0dGluZ3NFbmRwb2ludDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBcHBsaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxJQXBwbGljYXRpb25bXT4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuc2VjdXJpdHlFbmRwb2ludH0vYXBwbGljYXRpb25zYDtcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxJQXBwbGljYXRpb25bXT4odXJsLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLnNlY3VyaXR5SGVhZGVycyxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQZXJtaXNzaW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJtaXNzaW9ucztcbiAgfVxuXG4gIHB1YmxpYyBnZXRJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uSW5mbztcbiAgfVxuXG4gIHB1YmxpYyBnZXRTZWN1cml0eVBlcm1pc3Npb25zKHJlc291cmNlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnNlY3VyaXR5RW5kcG9pbnR9L3Blcm1pc3Npb25zP3Jlc291cmNlTmFtZT0ke3Jlc291cmNlTmFtZX1gO1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcbiAgICAgIC5nZXQodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuc2VjdXJpdHlIZWFkZXJzLFxuICAgICAgfSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKHgpID0+ICh0aGlzLnBlcm1pc3Npb25zID0geCkpLFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBcHBsaWNhdGlvbkluZm8oKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnNldHRpbmdzRW5kcG9pbnR9L2luZm9gO1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcbiAgICAgIC5nZXQodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuc2VjdXJpdHlIZWFkZXJzLFxuICAgICAgfSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKHgpID0+ICh0aGlzLmFwcGxpY2F0aW9uSW5mbyA9IHgpKSxcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==